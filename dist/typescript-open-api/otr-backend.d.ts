/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/notifications/action-required": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** notifyClientActionRequirement */
        post: operations["notifyClientActionRequirementUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/activity-feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listActivityFeed */
        get: operations["listActivityFeedUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/activity-feed/case-outcomes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listCaseOutcomes */
        get: operations["listCaseOutcomesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCountryList */
        get: operations["getCountryListUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/countries/{countryCode}/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCountryRegions */
        get: operations["getCountryRegionsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLocation */
        get: operations["getLocationUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/alerts/{alertId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** markAlertAsRead */
        delete: operations["markAlertAsReadUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/alerts/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getAlerts */
        get: operations["getAlertsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/app-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addAppEvent */
        post: operations["addAppEventUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/audit-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listLawfirmAuditEventsByCursor */
        get: operations["listLawfirmAuditEventsByCursorUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/audit-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getAuditLogs */
        get: operations["getAuditLogsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/authentication/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getUserInfo */
        get: operations["getUserInfoUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/credentials/aws": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getAwsCredentials */
        post: operations["getAwsCredentialsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/prismic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleEvent */
        post: operations["handleEventUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/branch/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** createBranchLink */
        post: operations["createBranchLinkUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/captcha/verify-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** verifyCaptchaToken */
        post: operations["verifyCaptchaTokenUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getAllActions */
        get: operations["getAllActionsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseActions */
        get: operations["getCaseActionsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/actions/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getActionTimeline */
        get: operations["getActionTimelineUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/actions/{caseActionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateCaseAction */
        put: operations["updateCaseActionUsingPUT"];
        post?: never;
        /** markActionAsDeleted */
        delete: operations["markActionAsDeletedUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cases/{caseId}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addActionToCaseV2 */
        post: operations["addActionToCaseV2UsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setArchiveOnCases */
        put: operations["setArchiveOnCasesUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCase */
        get: operations["getCaseUsingGET"];
        /** updateCase */
        put: operations["updateCaseUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/appearance-attorneys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getAppearanceAttorneysForCase */
        get: operations["getAppearanceAttorneysForCaseUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/citation/violations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addViolationsToCitation */
        post: operations["addViolationsToCitationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/citation/violations/{violationTypes}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** removeViolationsFromCitation */
        delete: operations["removeViolationsFromCitationUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/courtdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** setCourtDateForCase */
        post: operations["setCourtDateForCaseUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/decline-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateDeclineTickets */
        put: operations["updateDeclineTicketsUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** findChargeDisputesByCaseId */
        get: operations["findChargeDisputesByCaseIdUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/initiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** initiateCase */
        post: operations["initiateCaseUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/initiate-with-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** initiateCaseAndChargeCustomer */
        post: operations["initiateCaseAndChargeCustomerUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/owner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * assignOwner
         * @deprecated
         */
        post: operations["assignOwnerUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/owner/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** assignCaseToUser */
        post: operations["assignCaseToUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/price-match": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** submitRequestForPriceMatch */
        post: operations["submitRequestForPriceMatchUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/reopen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** reopenCase */
        put: operations["reopenCaseUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/resolution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** markCaseAsResolved */
        post: operations["markCaseAsResolvedUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/support-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getSupportTicketsForCase */
        get: operations["getSupportTicketsForCaseUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cases/{caseId}/counters/{counterId}/generate-payment-plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** generateCounterOfferCasePayments */
        post: operations["generateCounterOfferCasePaymentsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/counter-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseCounterOptions */
        get: operations["getCaseCounterOptionsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/counters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCounterOffer */
        get: operations["getCounterOfferUsingGET"];
        put?: never;
        /** initiateCaseCounter */
        post: operations["initiateCaseCounterUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/counters/{counterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCounterOfferByCounterId */
        get: operations["getCounterOfferByCounterIdUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/counters/{counterId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** acceptCaseCounter */
        put: operations["acceptCaseCounterUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/counters/{counterId}/decline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** declineCaseCounter */
        put: operations["declineCaseCounterUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/counters/{counterId}/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** withdrawCaseCounter */
        put: operations["withdrawCaseCounterUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationIdString}/case": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * matchCase
         * @deprecated
         */
        post: operations["matchCaseUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{lawfirmId}/sample": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** addSampleCase */
        put: operations["addSampleCaseUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/declines/reasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseDeclineReasonTypes */
        get: operations["getCaseDeclineReasonTypesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseNotes */
        get: operations["getCaseNotesUsingGET"];
        put?: never;
        /** saveCaseNotes */
        post: operations["saveCaseNotesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/charges/{stripeChargeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getStripeCharge */
        get: operations["getStripeChargeUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/customer/cost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listCostItemsForCustomer */
        get: operations["listCostItemsForCustomerUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/overdue-payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getOverdueCasePayments */
        get: operations["getOverdueCasePaymentsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payment-plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getPaymentPlanOptions */
        get: operations["getPaymentPlanOptionsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payment-plans/{paymentPlanTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * generateCasePaymentPlan
         * @deprecated
         */
        get: operations["generateCasePaymentPlanUsingGET"];
        put?: never;
        /** saveCasePaymentPlan */
        post: operations["saveCasePaymentPlanUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCasePayments */
        get: operations["getCasePaymentsUsingGET"];
        put?: never;
        /** scheduleNewPayment */
        post: operations["scheduleNewPaymentUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payments/{casePaymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteCasePayment */
        delete: operations["deleteCasePaymentUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payments/{casePaymentId}/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** authorizeChargeForCasePayment */
        post: operations["authorizeChargeForCasePaymentUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payments/{casePaymentId}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** captureChargeFromCasePayment */
        post: operations["captureChargeFromCasePaymentUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/stripe-charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getStripeCharges */
        get: operations["getStripeChargesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment-plans/{lawfirmId}/case-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * getAvailablePaymentPlans
         * @deprecated
         */
        post: operations["getAvailablePaymentPlansUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/{casePaymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateCasePayment */
        put: operations["updateCasePaymentUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/{casePaymentId}/due-date": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updatePaymentDueDate */
        put: operations["updatePaymentDueDateUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/{casePaymentId}/owner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updatePaymentRecipient */
        put: operations["updatePaymentRecipientUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/referralcode/{codeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * applyReferralCode
         * @description Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
         */
        post: operations["applyReferralCodeUsingPOST"];
        /** removeReferralCodeFromCase */
        delete: operations["removeReferralCodeFromCaseUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cases/{caseId}/referralcode/{codeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** removeReferralCodeFromCaseV2 */
        delete: operations["removeReferralCodeFromCaseV2UsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payments/{casePaymentId}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** refundCasePayment */
        post: operations["refundCasePaymentUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payments/{casePaymentId}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** releasePayment */
        post: operations["releasePaymentUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/refund-eligibility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateRefundEligibilityForCase */
        put: operations["updateRefundEligibilityForCaseUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** cancelCase */
        delete: operations["cancelCaseUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/send-social-media-ask": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addSocialMediaAction */
        post: operations["addSocialMediaActionUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/case-statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseStatuses */
        get: operations["getCaseStatusesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/case-statuses/resolution-statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseResolutionStatuses */
        get: operations["getCaseResolutionStatusesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getTransferHistory */
        get: operations["getTransferHistoryUsingGET"];
        /** transferCase */
        put: operations["transferCaseUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/transfer/{lawfirmId}/calculate-fee-difference": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** calculateTransferFeeDifference */
        post: operations["calculateTransferFeeDifferenceUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/case-users/{caseUsersId}/cases/{caseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteCaseUser */
        delete: operations["deleteCaseUserUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseUsersByCase */
        get: operations["getCaseUsersByCaseUsingGET"];
        put?: never;
        /** saveCaseUser */
        post: operations["saveCaseUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/case_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listDashboardCaseUsers */
        get: operations["listDashboardCaseUsersUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/certificates/ssl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getSSLPublicCertFile */
        get: operations["getSSLPublicCertFileUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/audit-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listCitationAuditEvents */
        get: operations["listCitationAuditEventsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** createNewCitation */
        post: operations["createNewCitationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/courts/missing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getListOfCitationsWithMissingCourt */
        get: operations["getListOfCitationsWithMissingCourtUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** dismissCitationsFromContactList */
        post: operations["dismissCitationsFromContactListUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/no-violation-uploads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getNoViolationCitations */
        get: operations["getNoViolationCitationsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/sign-image-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** signImageUrl */
        post: operations["signImageUrlUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationIdString}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCitation */
        get: operations["getCitationUsingGET"];
        /** updateCitation */
        put: operations["updateCitationUsingPUT"];
        post?: never;
        /** deleteCitation */
        delete: operations["deleteCitationUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationIdString}/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** setCitationContactListFlag */
        post: operations["setCitationContactListFlagUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** updateCitationAddress */
        post: operations["updateCitationAddressUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/court": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteCitationCourt */
        delete: operations["deleteCitationCourtUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/court/missing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** postMissingCourtForCitation */
        post: operations["postMissingCourtForCitationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/courts/missing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteMissingCourtRecord */
        delete: operations["deleteMissingCourtRecordUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/lock-citation/{isLocked}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setLockForCitation */
        put: operations["setLockForCitationUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/owner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** assignCitationOwner */
        post: operations["assignCitationOwnerUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/picture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateCitationPicture */
        put: operations["updateCitationPictureUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/referral-source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * createReferralSourceForCitation
         * @deprecated
         */
        post: operations["createReferralSourceForCitationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{emailAddress}/anonymous-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getAnonymousTicketUploads */
        get: operations["getAnonymousTicketUploadsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/citations/{citationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** toggleDeleteCitation */
        delete: operations["toggleDeleteCitationUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/api/v1/coaching-cards/acknowledge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** acknowledgeCoachingCard */
        put: operations["acknowledgeCoachingCardUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/api/v1/coaching-cards/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCoachingCardCategories */
        get: operations["getCoachingCardCategoriesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coaching-cards/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveCoachingCard */
        post: operations["saveCoachingCardUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coaching-cards/{userId}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listUserCoachingCards */
        get: operations["listUserCoachingCardsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/config/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getAppConfiguration */
        get: operations["getAppConfigurationUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/subscribers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listBillingSubscribers */
        get: operations["listBillingSubscribersUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/declined": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getDeclinedCases */
        post: operations["getDeclinedCasesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getPendingCases */
        get: operations["getPendingCasesUsingGET"];
        put?: never;
        /**
         * getPendingCases
         * @deprecated
         */
        post: operations["getPendingCasesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/cases-with-coverage-obtained": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getCasesWithCoverageObtained */
        post: operations["getCasesWithCoverageObtainedUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/cases/client-confirmed-unpaid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getClientConfirmedUnpaidCases */
        post: operations["getClientConfirmedUnpaidCasesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/cases/invalid-with-charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getInvalidCasesWithStripeCharge */
        post: operations["getInvalidCasesWithStripeChargeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/cases/lost/not-reversed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getLostCasesWithTransferNotReversed */
        post: operations["getLostCasesWithTransferNotReversedUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/cases/missing-lawfirm-payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getCasesWithMissingLawfirmPayouts */
        post: operations["getCasesWithMissingLawfirmPayoutsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/cases/unpaid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getCasesWithOverduePayments */
        post: operations["getCasesWithOverduePaymentsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/citation-phone-leads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getCitationPhoneLeads */
        post: operations["getCitationPhoneLeadsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/citations-with-missing-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * getCitationsWithMissingFields
         * @deprecated
         */
        post: operations["getCitationsWithMissingFieldsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** findDisputes */
        post: operations["findDisputesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/lawfirms/leads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listLawfirmLeads */
        post: operations["listLawfirmLeadsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/potential-customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listPotentialCustomers */
        post: operations["listPotentialCustomersUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/ticket-review-requests/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getPendingTicketReviews */
        post: operations["getPendingTicketReviewsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/console/citations-with-missing-fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getCitationsWithMissingFieldsV2 */
        post: operations["getCitationsWithMissingFieldsV2UsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contact-loop/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleContactLoopEvent */
        post: operations["handleContactLoopEventUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/contact-timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listContactTimeline */
        get: operations["listContactTimelineUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/conversation/flag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setFlagOnMessages */
        put: operations["setFlagOnMessagesUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/conversation/star": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setStarOnMessages */
        put: operations["setStarOnMessagesUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getConversation */
        get: operations["getConversationUsingGET"];
        put?: never;
        /** addMessageToConversation */
        post: operations["addMessageToConversationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/conversation/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getMessage */
        get: operations["getMessageUsingGET"];
        /** markMessageAsDeleted */
        put: operations["markMessageAsDeletedUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/conversation/{messageId}/edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** editMessage */
        put: operations["editMessageUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/counties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCounties */
        get: operations["getCountiesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addCourt */
        post: operations["addCourtUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courts/no-coverage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** findCourtsWithNoCoverage */
        get: operations["findCourtsWithNoCoverageUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courts/traffic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * searchCourts
         * @deprecated
         */
        get: operations["searchCourtsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courts/{courtId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCourt */
        get: operations["getCourtUsingGET"];
        /** updateCourt */
        put: operations["updateCourtUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courts/{courtId}/addresses/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateCourtAddress */
        put: operations["updateCourtAddressUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/courts/traffic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** findCourts */
        get: operations["findCourtsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/booking-receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendBookingReceipt */
        post: operations["sendBookingReceiptUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getOutgoingContacts */
        get: operations["getOutgoingContactsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/generate-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** generateTemplate */
        post: operations["generateTemplateUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getTemplates */
        get: operations["getTemplatesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/ticket/{ticketId}/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** replyToTicket */
        post: operations["replyToTicketUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/user/consolidate-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendConsolidatedEmailToUser */
        post: operations["sendConsolidatedEmailToUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/user/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendEmailToUser */
        post: operations["sendEmailToUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/crm/users/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendEmailToUsers */
        post: operations["sendEmailToUsersUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customer-leads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** postCustomerLead */
        post: operations["postCustomerLeadUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listCustomerReviews */
        get: operations["listCustomerReviewsUsingGET"];
        put?: never;
        /** addCustomerReview */
        post: operations["addCustomerReviewUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/api/v1/reviews/{reviewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** editCustomerReview */
        put: operations["editCustomerReviewUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/api/v1/reviews/{reviewId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setCustomerReviewStatus */
        put: operations["setCustomerReviewStatusUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/eligible-statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listEligibleStatusesForReview */
        get: operations["listEligibleStatusesForReviewUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{reviewId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** replyToCustomerReview */
        post: operations["replyToCustomerReviewUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{reviewId}/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** updateCommentForCustomerReview */
        post: operations["updateCommentForCustomerReviewUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{reviewId}/comments/{commentId}/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** markCommentWithVote */
        put: operations["markCommentWithVoteUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{reviewId}/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** markReviewWithVote */
        put: operations["markReviewWithVoteUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cs-agent-bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listAgentBookings */
        get: operations["listAgentBookingsUsingGET"];
        put?: never;
        /** saveAgentBooking */
        post: operations["saveAgentBookingUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cs-agent-bookings/{agentBookingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteAgentBooking */
        delete: operations["deleteAgentBookingUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cs-agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCustomerServiceAgents */
        get: operations["getCustomerServiceAgentsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getBookings */
        post: operations["getBookingsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/bookings2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listCaseBookings */
        post: operations["listCaseBookingsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/cancellations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listCaseCancellations */
        post: operations["listCaseCancellationsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/citations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listCitations */
        post: operations["listCitationsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listCustomers */
        post: operations["listCustomersUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/dropoff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listDropoffs */
        post: operations["listDropoffsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/expenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listExpenses */
        post: operations["listExpensesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/lawfirm-engagement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listLawfirmsEngaged */
        post: operations["listLawfirmsEngagedUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/lawyer-leads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** listLawyerLeads */
        post: operations["listLawyerLeadsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/phone-calls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listPhoneCalls */
        get: operations["listPhoneCallsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/console/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getUserRegistrations */
        post: operations["getUserRegistrationsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/direct-mail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendDirectMail */
        post: operations["sendDirectMailUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/direct-mail/fetch-sent-mail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getSentMail */
        post: operations["getSentMailUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/direct-mail/lob-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleLobEvent */
        post: operations["handleLobEventUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/direct-mail/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getDirectMailTemplates */
        get: operations["getDirectMailTemplatesUsingGET"];
        put?: never;
        /** addDirectMailTemplate */
        post: operations["addDirectMailTemplateUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/direct-mail/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** validateDirectMailRequestForSend */
        post: operations["validateDirectMailRequestForSendUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/direct-mail/verify-address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** verifyMailingAddress */
        post: operations["verifyMailingAddressUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/direct-mail/{userId}/send-referral-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendDirectReferralCheck */
        post: operations["sendDirectReferralCheckUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/drip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** removeFromDrip */
        delete: operations["removeFromDripUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/drip/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleDripWebhook */
        post: operations["handleDripWebhookUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/webhooks/drip/bounce-or-complaint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleBounceOrComplaintEvent */
        post: operations["handleBounceOrComplaintEventUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/driver-license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getDriverLicenses */
        get: operations["getDriverLicensesUsingGET"];
        put?: never;
        /** saveDriverLicense */
        post: operations["saveDriverLicenseUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/driver-license/picture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveDriverLicensePicture */
        post: operations["saveDriverLicensePictureUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** subscribe */
        post: operations["subscribeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listEmployees */
        get: operations["listEmployeesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/external-content-votes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveExternalContentVote */
        post: operations["saveExternalContentVoteUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/external-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getExternalTickets */
        get: operations["getExternalTicketsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/external-tickets/input-parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getInputParameters */
        get: operations["getInputParametersUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** postFeedback */
        post: operations["postFeedbackUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/phone-calls/sign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** signRecordingUrl */
        post: operations["signRecordingUrlUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freshdesk/ticket/{ticketId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateFreshdeskTicket */
        put: operations["updateFreshdeskTicketUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freshdesk/ticket/{ticketId}/webhook/status-change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** ticketStatusChangeHook */
        put: operations["ticketStatusChangeHookUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freshdesk/webhook/ticket/{ticketId}/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** mergeTicket */
        post: operations["mergeTicketUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseClient */
        get: operations["getCaseClientUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/case": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCaseFromCitation */
        get: operations["getCaseFromCitationUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/household-mates/accept-invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** acceptHouseholdInvite */
        put: operations["acceptHouseholdInviteUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/household-mates/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getHouseholdMates */
        get: operations["getHouseholdMatesUsingGET"];
        put?: never;
        post?: never;
        /** removeHouseholdMate */
        delete: operations["removeHouseholdMateUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/household-mates/{userId}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** inviteHouseholdMate */
        post: operations["inviteHouseholdMateUsingPOST"];
        /** cancelHouseholdMateInvite */
        delete: operations["cancelHouseholdMateInviteUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hubspot/webhook/email-delivered": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** onDeliveredEmailFromHubspot */
        post: operations["onDeliveredEmailFromHubspotUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/insurance/ticket/savings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** calculateTicketSavings */
        post: operations["calculateTicketSavingsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/intercom/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getConversations */
        get: operations["getConversationsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/intercom/tickets/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getTickets */
        get: operations["getTicketsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/intercom/webhook/conversation-notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** onConversationNotification */
        post: operations["onConversationNotificationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm/cases/{caseId}/decision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** setLawfirmCaseDecision */
        post: operations["setLawfirmCaseDecisionUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lawfirm/{lawfirmIdString}/cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getLawfirmCasesByPage */
        post: operations["getLawfirmCasesByPageUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirms */
        get: operations["getLawfirmsUsingGET"];
        put?: never;
        /** createLawfirm */
        post: operations["createLawfirmUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/bulk-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** uploadLawfirms */
        post: operations["uploadLawfirmsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/email/{primaryLawfirmEmail}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmByPrimaryEmail */
        get: operations["getLawfirmByPrimaryEmailUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/job-titles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmJobTitles */
        get: operations["getLawfirmJobTitlesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/lawfirms/{lawfirmId}/support-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmSupportTickets */
        get: operations["getLawfirmSupportTicketsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmStatuses */
        get: operations["getLawfirmStatusesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmByUrl */
        get: operations["getLawfirmByUrlUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmIdString}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirm */
        get: operations["getLawfirmUsingGET"];
        /** updateLawfirm */
        put: operations["updateLawfirmUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmAddresses */
        get: operations["getLawfirmAddressesUsingGET"];
        put?: never;
        /** addLawfirmAddress */
        post: operations["addLawfirmAddressUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/addresses/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateLawfirmAddress */
        put: operations["updateLawfirmAddressUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/cases/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmCaseStats */
        get: operations["getLawfirmCaseStatsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/cover-photo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteLawfirmCoverPhoto */
        delete: operations["deleteLawfirmCoverPhotoUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/inbox-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getInboxMessages */
        get: operations["getInboxMessagesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/lawyers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmLawyers */
        get: operations["getLawfirmLawyersUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/lawyers/{userId}/update-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateLawyerRole */
        put: operations["updateLawyerRoleUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/otr-notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getOtrLawfirmNotes */
        get: operations["getOtrLawfirmNotesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/payment-model": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updatePaymentModel */
        put: operations["updatePaymentModelUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/picture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateLawfirmWithPicture */
        put: operations["updateLawfirmWithPictureUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getStripeConnectedAccounts */
        get: operations["getStripeConnectedAccountsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/stripe/account/{stripeAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteLawfirmConnectedAccount */
        delete: operations["deleteLawfirmConnectedAccountUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/supported-states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getSupportedStatesForLawfirm */
        get: operations["getSupportedStatesForLawfirmUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/vacation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** setVacationMode */
        post: operations["setVacationModeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmCaseDocuments */
        get: operations["getLawfirmCaseDocumentsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{docId}/decision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** markDocumentWithDecision */
        post: operations["markDocumentWithDecisionUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getDocument */
        get: operations["getDocumentUsingGET"];
        /**
         * uploadCopy
         * @deprecated
         */
        put: operations["uploadCopyUsingPUT"];
        /** generateDoc */
        post: operations["generateDocUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/documents/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** previewDoc */
        post: operations["previewDocUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmIdString}/courts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addCourtToCoverage */
        post: operations["addCourtToCoverageUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmIdString}/coverage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getLawfirmCoverage
         * @deprecated
         */
        get: operations["getLawfirmCoverageUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/account-fees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getAccountFees */
        get: operations["getAccountFeesUsingGET"];
        put?: never;
        /** saveAccountFees */
        post: operations["saveAccountFeesUsingPOST"];
        /** removeAccountFees */
        delete: operations["removeAccountFeesUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/account-fees/enable-violations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** enableViolationsForLawfirm */
        post: operations["enableViolationsForLawfirmUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/account-fees/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** resetFeesForLawfirm */
        post: operations["resetFeesForLawfirmUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/courts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * removeCourts
         * @deprecated
         */
        delete: operations["removeCourtsUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lawfirms/{lawfirmId}/courts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** removeCoverage */
        delete: operations["removeCoverageUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lawfirms/{lawfirmId}/coverage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmFeeCoverage */
        get: operations["getLawfirmFeeCoverageUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment-models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getPaymentModelTypes */
        get: operations["getPaymentModelTypesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getActiveRatesByArea */
        post: operations["getActiveRatesByAreaUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-settings/{lawfirmId}/setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmSetting */
        get: operations["getLawfirmSettingUsingGET"];
        put?: never;
        /** updateLawfirmSetting */
        post: operations["updateLawfirmSettingUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmIdString}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** updateLawfirmSettings */
        post: operations["updateLawfirmSettingsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getLawfirmSettings
         * @deprecated
         */
        get: operations["getLawfirmSettingsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-storefronts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listLawfirmStorefronts */
        get: operations["listLawfirmStorefrontsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/surcharges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listLawfirmSurcharges */
        get: operations["listLawfirmSurchargesUsingGET"];
        put?: never;
        /** saveLawfirmSurcharges */
        post: operations["saveLawfirmSurchargesUsingPOST"];
        /** removeSurcharges */
        delete: operations["removeSurchargesUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/lawfirm-fees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmFees */
        get: operations["getLawfirmFeesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/lawfirm-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmTransactionsForCase */
        get: operations["getLawfirmTransactionsForCaseUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmPayouts */
        get: operations["getLawfirmPayoutsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/reversals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmPayoutReversals */
        get: operations["getLawfirmPayoutReversalsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-fee/{lawfirmFeeId}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** refundLawfirmFee */
        post: operations["refundLawfirmFeeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-fees/{lawfirmFeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateLawfirmFee */
        put: operations["updateLawfirmFeeUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-fees/{lawfirmFeeId}/debit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** debitLawfirmFee */
        post: operations["debitLawfirmFeeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-payouts/{lawfirmPayoutId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateLawfirmPayout */
        put: operations["updateLawfirmPayoutUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-payouts/{lawfirmPayoutId}/reverse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** reverseLawfirmPayout */
        post: operations["reverseLawfirmPayoutUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirm-payouts/{lawfirmPayoutId}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** executeLawfirmPayout */
        post: operations["executeLawfirmPayoutUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/fees/{lawfirmFeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteLawfirmFeeRecord */
        delete: operations["deleteLawfirmFeeRecordUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/payouts/{lawfirmPayoutId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteLawfirmPayoutRecord */
        delete: operations["deleteLawfirmPayoutRecordUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/bank-payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listLawfirmBankPayouts */
        get: operations["listLawfirmBankPayoutsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/debits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** chargeFeeToLawfirm */
        post: operations["chargeFeeToLawfirmUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendPayoutToLawfirm */
        post: operations["sendPayoutToLawfirmUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lawfirms/{lawfirmId}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmFinancialTransactions */
        get: operations["getLawfirmFinancialTransactionsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/lawyers/{userId}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** inviteLawyerToLawfirm */
        post: operations["inviteLawyerToLawfirmUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawyers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** upsertLawyer */
        post: operations["upsertLawyerUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawyers/lead": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveLawyerLead */
        post: operations["saveLawyerLeadUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawyers/{lawyerId}/email-guesses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawyerEmailGuesses */
        get: operations["getLawyerEmailGuessesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawyers/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawyer */
        get: operations["getLawyerUsingGET"];
        put?: never;
        post?: never;
        /** deleteLawyer */
        delete: operations["deleteLawyerUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawyers/{userId}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** cancelLawyerInvite */
        delete: operations["cancelLawyerInviteUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawyers/{userId}/licenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveLawyerLicenses */
        post: operations["saveLawyerLicensesUsingPOST"];
        /** deleteLawyerLicenses */
        delete: operations["deleteLawyerLicensesUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/legal-services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** createLegalServices */
        post: operations["createLegalServicesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/select-legal-service/{lawfirmCaseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** selectLegalService */
        put: operations["selectLegalServiceUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/line-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLineItems */
        get: operations["getLineItemsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/lineitems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** insertCaseLineItem */
        post: operations["insertCaseLineItemUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/lineitems/{lineItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateCaseLineItem */
        put: operations["updateCaseLineItemUsingPUT"];
        post?: never;
        /** deleteCaseLineItem */
        delete: operations["deleteCaseLineItemUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lineitems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLineItemTypes */
        get: operations["getLineItemTypesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getCasesForUser
         * @deprecated
         */
        get: operations["getCasesForUserUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/{userId}/cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getUserCases
         * @deprecated
         */
        get: operations["getUserCasesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/users/{userId}/cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * listDashboardCases
         * @deprecated
         */
        get: operations["listDashboardCasesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v4/users/{userId}/cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listDashbaordCasesByPage */
        get: operations["listDashbaordCasesByPageUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/media/convert-pdf-to-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** convertPdfToImage */
        post: operations["convertPdfToImageUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listMessagesByEntity */
        get: operations["listMessagesByEntityUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** createNote */
        post: operations["createNoteUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notes/{noteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateNote */
        put: operations["updateNoteUsingPUT"];
        post?: never;
        /** deleteNote */
        delete: operations["deleteNoteUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/notes/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** searchNotes */
        get: operations["searchNotesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/notes/{noteType}/{referenceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listNotes */
        get: operations["listNotesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/notes/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveNotes */
        post: operations["saveNotesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ocr_pipeline/predict_citation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** predictCitationFields */
        post: operations["predictCitationFieldsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ocr_pipeline/predict_rich_citation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** predictRichCitationFields */
        post: operations["predictRichCitationFieldsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/predictions/citations/{citationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCitationPrediction */
        get: operations["getCitationPredictionUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/predictions/classify-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** predictImageClassification */
        post: operations["predictImageClassificationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/predictions/predict-citation-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** predictCitationText */
        post: operations["predictCitationTextUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** requestLawyer */
        post: operations["requestLawyerUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/one_time_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendOneTimePassword */
        post: operations["sendOneTimePasswordUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/phone-leads/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** dismissPhoneLead */
        post: operations["dismissPhoneLeadUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/phone-leads/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addNoteToPhoneLead */
        post: operations["addNoteToPhoneLeadUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/cases/{caseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** pushCaseMessage */
        post: operations["pushCaseMessageUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** register */
        post: operations["registerUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/unread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getUnreadCounts */
        get: operations["getUnreadCountsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/unread/{caseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * markRead
         * @deprecated
         */
        delete: operations["markReadUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/unread/{userId}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** markAllReadForUser */
        delete: operations["markAllReadForUserUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** pushNotificationToUser */
        post: operations["pushNotificationToUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/{userId}/unread/{caseId}/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** markCaseNotificationsAsUnread */
        put: operations["markCaseNotificationsAsUnreadUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/notifications/unread/{caseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** markPageTypesAsRead */
        delete: operations["markPageTypesAsReadUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/cases/{caseId}/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** clearBillingProductOptions */
        delete: operations["clearBillingProductOptionsUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/cases/{caseId}/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveBillingProductOption */
        post: operations["saveBillingProductOptionUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listBillingProducts */
        get: operations["listBillingProductsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/{userId}/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listBillingSubscriptions */
        get: operations["listBillingSubscriptionsUsingGET"];
        put?: never;
        /** createBillingSubscription */
        post: operations["createBillingSubscriptionUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/{userId}/subscriptions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** cancelBillingSubscription */
        delete: operations["cancelBillingSubscriptionUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/{userId}/subscriptions/{id}/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listSubscriptionInvoices */
        get: operations["listSubscriptionInvoicesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reflinks/{userIdString}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getRefLinksForUser */
        get: operations["getRefLinksForUserUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/referrals/codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getReferralCodes */
        get: operations["getReferralCodesUsingGET"];
        put?: never;
        /** Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price. */
        post: operations["generateReferralCodeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/referrals/codes/{codeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getReferralCode */
        get: operations["getReferralCodeUsingGET"];
        put?: never;
        post?: never;
        /** markCodeAsInactive */
        delete: operations["markCodeAsInactiveUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/referrals/codes/{codeId}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Only for admins. This will approve and activate a given referral code */
        put: operations["approveReferralCodeUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/referrals/codes/{codeId}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it's max use count? */
        get: operations["validateReferralCodeUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getReferralHistory */
        get: operations["getReferralHistoryUsingGET"];
        put?: never;
        /** addReferral */
        post: operations["addReferralUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/referrals/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** publishReferralContacts */
        post: operations["publishReferralContactsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listReferrals */
        get: operations["listReferralsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/referrals/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getUserReferralSourceTypes */
        get: operations["getUserReferralSourceTypesUsingGET"];
        put?: never;
        /** setReferralSource */
        post: operations["setReferralSourceUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cases/{caseId}/refund/eligibility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** isRefundEligible */
        get: operations["isRefundEligibleUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/register-ghost": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** registerGhostUser */
        post: operations["registerGhostUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** registerNewUser */
        post: operations["registerNewUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/court-coverage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCourtCoverageReport */
        get: operations["getCourtCoverageReportUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/court-coverage/lawfirms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLawfirmCoverageReport */
        get: operations["getLawfirmCoverageReportUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/court-coverage/{regionCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCourtCoverageForStateReport */
        get: operations["getCourtCoverageForStateReportUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/court-coverage/{regionCode}/{countyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCourtCoverageForCountyReport */
        get: operations["getCourtCoverageForCountyReportUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scheduled-tasks/{caseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getScheduledTasks */
        get: operations["getScheduledTasksUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scheduled-tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteScheduledTask */
        delete: operations["deleteScheduledTaskUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scheduled-tasks/{taskId}/reschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** rescheduleTask */
        put: operations["rescheduleTaskUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/authentication/sso/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** loginWithSSO */
        post: operations["loginWithSSOUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blacklists/ses/emails/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleBounceComplaintEmails */
        post: operations["handleBounceComplaintEmailsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ses/inbound-emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleIncomingEmails */
        post: operations["handleIncomingEmailsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ses/inbound-hello-emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleIncomingHelloEmails */
        post: operations["handleIncomingHelloEmailsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/connect/Apple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** appleConnect */
        post: operations["appleConnectUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/connect/Facebook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** facebookConnect */
        post: operations["facebookConnectUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/connect/Google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** googleConnect */
        post: operations["googleConnectUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/connect/apple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** appleConnect */
        post: operations["appleConnectUsingPOST_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/connect/facebook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** facebookConnect */
        post: operations["facebookConnectUsingPOST_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/connect/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** googleConnect */
        post: operations["googleConnectUsingPOST_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/paymentmethods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all the payment methods available on the lawfirm's Stripe account. */
        get: operations["getLawfirmPaymentMethodsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/stripe/ach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addACHToLawfirmStripeAccount */
        post: operations["addACHToLawfirmStripeAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/stripe/bank-accounts/{bankAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteBankAccountFromLawfirmStripeAccount */
        delete: operations["deleteBankAccountFromLawfirmStripeAccountUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lawfirms/{lawfirmId}/stripe/payment-methods/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setDefaultPaymentMethodForLawfirm */
        put: operations["setDefaultPaymentMethodForLawfirmUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/stripe/account/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addCardToStripeAccount */
        post: operations["addCardToStripeAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/stripe/account/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCard */
        get: operations["getCardUsingGET"];
        put?: never;
        post?: never;
        /**
         * deleteCard
         * @deprecated
         */
        delete: operations["deleteCardUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userIdString}/paymentmethods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all the payment methods available on the user's Stripe account. */
        get: operations["getPaymentMethodsForUserUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/account/cards/{cardId}/primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setCardAsPrimary */
        put: operations["setCardAsPrimaryUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/stripe/account/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** deleteCardForUser */
        delete: operations["deleteCardForUserUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/stripe/ach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addACHToUserStripeAccount */
        post: operations["addACHToUserStripeAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** createStripeConnectAccount */
        post: operations["createStripeConnectAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/account/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** createConnectAccountLink */
        post: operations["createConnectAccountLinkUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** connectStripeAccount */
        post: operations["connectStripeAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/disputes/{disputeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateDispute */
        put: operations["updateDisputeUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/handle-orphaned-stripe-charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleOrphanedStripeCharges */
        post: operations["handleOrphanedStripeChargesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/disputes/sync-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** syncAllDisputes */
        post: operations["syncAllDisputesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/disputes/{disputeId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** syncDispute */
        post: operations["syncDisputeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/payments/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** syncStripePayments */
        post: operations["syncStripePaymentsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/sync-stripe-charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** syncStripeCharges */
        post: operations["syncStripeChargesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/sync-stripe-refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** syncStripeRefunds */
        post: operations["syncStripeRefundsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/transfers/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** syncStripeTransfers */
        post: operations["syncStripeTransfersUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/acct_15jGPnDVzhogLb0T/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleStripeWebhookFromLawfirmAccount */
        post: operations["handleStripeWebhookFromLawfirmAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/acct_15jGPnDVzhogLb0T/webhook/connected-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleStripeWebhookFromLawfirmConnectedAccounts */
        post: operations["handleStripeWebhookFromLawfirmConnectedAccountsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleStripeWebhookFromOTRAccount */
        post: operations["handleStripeWebhookFromOTRAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook/connected-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleStripeWebhookFromOTRConnectedAccounts */
        post: operations["handleStripeWebhookFromOTRConnectedAccountsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** handleStripeWebhookForSubscriptions */
        post: operations["handleStripeWebhookForSubscriptionsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/citations/{citationId}/ticket-review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getTicketReviewInfo */
        get: operations["getTicketReviewInfoUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ticket-evaluation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** persistTicketEvaluation */
        post: operations["persistTicketEvaluationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ticket-evaluation/{ticketEvaluationRequestId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateTicketEvaluationRequest */
        put: operations["updateTicketEvaluationRequestUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/redirects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getRedirectUrl */
        get: operations["getRedirectUrlUsingGET"];
        put?: never;
        /** addRedirectUrl */
        post: operations["addRedirectUrlUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/redirects/clear-cache": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** clearCache */
        post: operations["clearCacheUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addExtraAccount */
        post: operations["addExtraAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/accounts/associate-oauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** associateOAuthAccount */
        post: operations["associateOAuthAccountUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/accounts/{userHandle}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** removeAdditionalUserHandle */
        delete: operations["removeAdditionalUserHandleUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/accounts/{userHandle}/set-primary-user-handle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setPrimaryUserHandle */
        put: operations["setPrimaryUserHandleUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/api/v1/users/{userId}/last-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getLastLogin */
        get: operations["getLastLoginUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/audit-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listUserAuditEventsByCursor */
        get: operations["listUserAuditEventsByCursorUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getCurrentUserInfo */
        get: operations["getCurrentUserInfoUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/authentication/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** isUserLoggedIn */
        get: operations["isUserLoggedInUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** updateUserRoles */
        post: operations["updateUserRolesUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** validateUserByEmail */
        get: operations["validateUserByEmailUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{email}/support-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getSupportTicketsForUser */
        get: operations["getSupportTicketsForUserUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userIdString}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getUserDetails */
        get: operations["getUserDetailsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateUserProfile */
        put: operations["updateUserProfileUsingPUT"];
        post?: never;
        /** removeUser */
        delete: operations["removeUserUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** findChargeDisputesByUserId */
        get: operations["findChargeDisputesByUserIdUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** logoutUser */
        delete: operations["logoutUserUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/overdue-payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getOverduePayments */
        get: operations["getOverduePaymentsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/revive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** reviveUser */
        put: operations["reviveUserUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/stripe/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getUserStripeAccount */
        get: operations["getUserStripeAccountUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/text-alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendTextAlert */
        post: operations["sendTextAlertUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/p": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** changeUserPassword */
        put: operations["changeUserPasswordUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/p/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** resetUserPassword */
        post: operations["resetUserPasswordUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/password/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** verifyPwdResetToken */
        get: operations["verifyPwdResetTokenUsingGET"];
        put?: never;
        /** sendResetPasswordToken */
        post: operations["sendResetPasswordTokenUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/send-verification-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sendAccountVerificationCode */
        post: operations["sendAccountVerificationCodeUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/verify-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** verifyUserAccount */
        put: operations["verifyUserAccountUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** resetUserPasswordByAdmin */
        put: operations["resetUserPasswordByAdminUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/verify-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** verifyUserPassword */
        put: operations["verifyUserPasswordUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/validate-phone-number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** validatePhoneNumber */
        post: operations["validatePhoneNumberUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{primaryUserId}/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** mergeUser */
        post: operations["mergeUserUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getUserAddresses */
        get: operations["getUserAddressesUsingGET"];
        put?: never;
        /** addUserAddress */
        post: operations["addUserAddressUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/addresses/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateUserAddress */
        put: operations["updateUserAddressUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/phone-numbers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** addUserPhoneNumber */
        post: operations["addUserPhoneNumberUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/phone-numbers/{phoneNumberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateUserPhoneNumber */
        put: operations["updateUserPhoneNumberUsingPUT"];
        post?: never;
        /** deleteUserPhoneNumber */
        delete: operations["deleteUserPhoneNumberUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/profile-picture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateProfilePicture */
        put: operations["updateProfilePictureUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/set-marketing-email-opt-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** setMarketingEmailOptIn */
        put: operations["setMarketingEmailOptInUsingPUT"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/matches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getUserByEmail */
        post: operations["getUserByEmailUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** findMatchingUsers */
        post: operations["findMatchingUsersUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-settings/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getUserSetting */
        get: operations["getUserSettingUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-settings/{userId}/get-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** getUserSettings */
        post: operations["getUserSettingsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-settings/{userId}/setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** updateUserSetting */
        post: operations["updateUserSettingUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-settings/{userId}/update-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** updateUserSettings */
        post: operations["updateUserSettingsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/social-profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveUserSocialProfiles */
        post: operations["saveUserSocialProfilesUsingPOST"];
        /** removeUserSocialProfile */
        delete: operations["removeUserSocialProfileUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utility/backfill-lawfirm-transaction-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** backfillLawfirmTransactionRecords */
        post: operations["backfillLawfirmTransactionRecordsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utility/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getStatus */
        get: operations["getStatusUsingGET"];
        put?: never;
        /** setStatus */
        post: operations["setStatusUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/validate/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** validateEmailAddress */
        get: operations["validateEmailAddressUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/verification-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getInviteByToken */
        get: operations["getInviteByTokenUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/violations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getTrafficViolationTypes */
        get: operations["getTrafficViolationTypesUsingGET"];
        put?: never;
        /** addViolation */
        post: operations["addViolationUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/violations/classifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listViolationClassifications */
        get: operations["listViolationClassificationsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/violations/region-availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getRegionsWithViolations */
        get: operations["getRegionsWithViolationsUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/violations/{violationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** updateViolation */
        put: operations["updateViolationUsingPUT"];
        post?: never;
        /** deleteViolation */
        delete: operations["deleteViolationUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/violations/penalties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getPenaltyTypes */
        get: operations["getPenaltyTypesUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/violations/{violationId}/penalties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getPenaltiesByViolation */
        get: operations["getPenaltiesByViolationUsingGET"];
        put?: never;
        /** upsertPenalty */
        post: operations["upsertPenaltyUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/violations/{violationId}/penalties/{penaltyTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** removePenalty */
        delete: operations["removePenaltyUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/watchlists/{userId}/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** listUserWatchlists */
        get: operations["listUserWatchlistsUsingGET"];
        put?: never;
        /** saveUserWatchlists */
        post: operations["saveUserWatchlistsUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/watchlists/{watchlistId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** saveItemToWatchlist */
        post: operations["saveItemToWatchlistUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/watchlists/{watchlistId}/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** removeItemFromWatchlist */
        delete: operations["removeItemFromWatchlistUsingDELETE"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/forward-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** forwardMessage */
        post: operations["forwardMessageUsingPOST"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflow-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** getWorkflowState */
        get: operations["getWorkflowStateUsingGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AcceptCaseCounterRequest */
        AcceptCaseCounterRequest: {
            cardId: string;
            /** @enum {string} */
            paymentPlanType?: AcceptCaseCounterRequestPaymentPlanType;
        };
        /** AccountLevelFee */
        AccountLevelFee: {
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            /** Format: int32 */
            classificationId?: number;
            isDeprecated?: boolean;
            isEnabled?: boolean;
            isPermitted?: boolean;
            /** Format: int32 */
            lawfirmFee?: number;
            lawyerfriendlyClassName?: string;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            regionCode?: string;
            violationCodes?: string;
            /** Format: int64 */
            violationId?: number;
            violationName?: string;
        };
        /** AccountLevelFeeRequest */
        AccountLevelFeeRequest: {
            fees?: components["schemas"]["AccountLevelFeeToSave"][];
        };
        /** AccountLevelFeeResponse */
        AccountLevelFeeResponse: {
            defaultClassByRegions?: components["schemas"]["DefaultClassModel"][];
            fees?: components["schemas"]["AccountLevelFee"][];
        };
        /** AccountLevelFeeToSave */
        AccountLevelFeeToSave: {
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            isNewLegalFee?: boolean;
            isPermitted?: boolean;
            /** Format: int32 */
            lawfirmFee?: number;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            regionCode?: string;
            /** Format: int64 */
            violationId?: number;
        };
        /** Action */
        Action: {
            actionDate?: string;
            actionText?: string;
            disposition?: string;
            hearingType?: string;
        };
        /** ActionByEntityModel */
        ActionByEntityModel: {
            /** Format: date-time */
            actionDateUtc?: string;
            /** Format: int64 */
            actionId?: number;
            actionNote?: string;
            actionType?: components["schemas"]["CaseActionTypeModel"];
            authorFirstName?: string;
            authorLastName?: string;
            /** Format: int64 */
            authorUserId?: number;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            customerFirstName?: string;
            customerLastName?: string;
            isDeleted?: boolean;
            profilePictureUrl?: string;
        };
        /** ActivityFeedModel */
        ActivityFeedModel: {
            /** Format: date-time */
            activityDate?: string;
            activityDescription?: string;
            activityDescriptionInHtml?: string;
            /** @enum {string} */
            activityType?: PathsApiV1ActivityFeedGetParametersQueryActivityType;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            city?: string;
            hasStateViolationData?: boolean;
            ownerName?: string;
            /** @enum {string} */
            privacyMode?: ActivityFeedModelPrivacyMode;
            profilePicUrl?: string;
            regionCode?: string;
            /** Format: int32 */
            totalLegalFeeInCents?: number;
            violationDescription?: string;
        };
        /** AddACHToStripeAccountRequest */
        AddACHToStripeAccountRequest: {
            accountIdempotencyKey?: string;
            achIdempotencyKey?: string;
            makeDefault?: boolean;
            plaidBankAccountId?: string;
            plaidPublicToken?: string;
        };
        /** AddActionToCaseRequest */
        AddActionToCaseRequest: {
            caseAction?: components["schemas"]["CaseActionRequestModel"];
        };
        /** AddActionToCaseResponse */
        AddActionToCaseResponse: {
            theCase?: components["schemas"]["CaseModel"];
        };
        /** AddCardToStripeAccountRequest */
        AddCardToStripeAccountRequest: {
            accountIdempotencyKey?: string;
            cardIdempotencyKey?: string;
            caseId?: string;
            makeDefault?: boolean;
            sourceToken?: string;
            userId?: string;
        };
        /** AddCardToStripeAccountResponse */
        AddCardToStripeAccountResponse: {
            cardId?: string;
            default?: boolean;
            id?: string;
        };
        /** AddCaseMessageResponse */
        AddCaseMessageResponse: {
            messageAdded?: components["schemas"]["CaseMessageDomain"];
        };
        /** AddCourtCoverageRequest */
        AddCourtCoverageRequest: {
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            /** Format: int64 */
            courtId?: number;
            isNewCoverageFee?: boolean;
            /** Format: int32 */
            lawfirmFee?: number;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            /** Format: int64 */
            violationId?: number;
        };
        /** AddCourtRequest */
        AddCourtRequest: {
            address?: components["schemas"]["AddInnerCourtAddress"];
            court?: components["schemas"]["AddInnerCourt"];
            forceAdd?: boolean;
        };
        /** AddCustomerLeadRequest */
        AddCustomerLeadRequest: {
            lead?: components["schemas"]["CustomerLead"];
        };
        /** AddExtraAccountRequest */
        AddExtraAccountRequest: {
            isEmailConfirmed?: boolean;
            isPrimaryAccount?: boolean;
            newEmailAddress?: string;
            password?: string;
        };
        /** AddInnerCourt */
        AddInnerCourt: {
            countyObj?: components["schemas"]["CountyDomain"];
            courtCode?: string;
            courtName?: string;
            courtNameAdditional?: string;
            /** @enum {string} */
            courtType?: AddInnerCourtCourtType;
            /** Format: int32 */
            otrTargetFee?: number;
            /** Format: int32 */
            unserviceableRequests?: number;
            website?: string;
        };
        /** AddInnerCourtAddress */
        AddInnerCourtAddress: {
            addressLine1?: string;
            addressLine2?: string;
            city?: string;
            countryCode?: string;
            phoneNumber?: string;
            postalCode?: string;
            region?: components["schemas"]["CountryRegion"];
        };
        /** AddNewCaseMessageRequest */
        AddNewCaseMessageRequest: {
            messageDomain?: components["schemas"]["MessageInputModel"];
        };
        /** AddNoteToPhoneLeadRequest */
        AddNoteToPhoneLeadRequest: {
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            note?: string;
            referenceId?: string;
        };
        /** AddPenaltyRequest */
        AddPenaltyRequest: {
            penaltiesToAdd?: components["schemas"]["PenaltyRequest"][];
        };
        /** AddRedirectUrlRequest */
        AddRedirectUrlRequest: {
            landingPageUrl?: string;
            /** @enum {string} */
            pageType?: PathsApiV1RedirectsGetParametersQueryPageType;
            /** @enum {string} */
            redirectType?: AddRedirectUrlRequestRedirectType;
            redirectUrl?: string;
            /** Format: date-time */
            startDate?: string;
        };
        /** AddReferralRequest */
        AddReferralRequest: {
            caseId?: string;
            /** @enum {string} */
            referralEvent?: AddReferralRequestReferralEvent;
            /** Format: int64 */
            referrerUserId?: number;
        };
        /** AddReviewRequest */
        AddReviewRequest: {
            caseId?: string;
            copy?: string;
            isRecommended?: boolean;
            /** @enum {string} */
            privacyMode?: ActivityFeedModelPrivacyMode;
            ratingModel?: components["schemas"]["ReviewRatingModel"];
            /** @enum {string} */
            source?: AddReviewRequestSource;
            /** Format: int64 */
            userId?: number;
        };
        /** AddViolationRequest */
        AddViolationRequest: {
            stateAbbreviation?: string;
            userFriendlyName?: string;
            userFriendlyShortForm?: string;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationCode?: string;
            violationDescription?: string;
        };
        /** AddViolationResponse */
        AddViolationResponse: {
            /** Format: int64 */
            otrViolationId?: number;
            /** @enum {string} */
            refundEligibilityType?: AccountLevelFeeRefundEligibility;
            stateAbbreviation?: string;
            userFriendlyName?: string;
            userFriendlyShortForm?: string;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationCode?: string;
            violationDescription?: string;
        };
        /** AddViolationsToCitationRequest */
        AddViolationsToCitationRequest: {
            violationTypes?: number[];
        };
        /** AddressDomain */
        AddressDomain: {
            /** Format: int64 */
            addressId?: number;
            addressLine1?: string;
            addressLine2?: string;
            addressedTo?: string;
            city?: string;
            countryCode?: string;
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            fullAddress?: string;
            phoneNumber?: string;
            postalCode?: string;
            /** Format: int64 */
            referenceId?: number;
            region?: components["schemas"]["CountryRegion"];
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            timeZoneName?: string;
        };
        /** AddressDomainReq */
        AddressDomainReq: {
            /** Format: int64 */
            addressId?: number;
            addressLine1?: string;
            addressLine2?: string;
            addressedTo?: string;
            city?: string;
            countryCode?: string;
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            phoneNumber?: string;
            postalCode?: string;
            /** Format: int64 */
            referenceId?: number;
            region?: components["schemas"]["CountryRegion"];
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            timeZoneName?: string;
        };
        /** AddressDomainRes */
        AddressDomainRes: {
            /** Format: int64 */
            addressId?: number;
            addressLine1?: string;
            addressLine2?: string;
            addressedTo?: string;
            city?: string;
            countryCode?: string;
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            fullAddress?: string;
            phoneNumber?: string;
            postalCode?: string;
            /** Format: int64 */
            referenceId?: number;
            region?: components["schemas"]["CountryRegion"];
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            timeZoneName?: string;
        };
        /** AddressEntity */
        AddressEntity: {
            /** Format: int64 */
            addressId?: number;
            addressLine1?: string;
            addressLine2?: string;
            city?: string;
            cityRegion?: string;
            countryCode?: string;
            countryRegion?: components["schemas"]["CountryRegion"];
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            fullAddress?: string;
            phoneNumber?: string;
            postalCode?: string;
            /** Format: int64 */
            referenceId?: number;
            regionCode?: string;
            timeZoneName?: string;
        };
        /** Admin */
        Admin: {
            id?: string;
            name?: string;
            type?: string;
        };
        /** AgentBookingStats */
        AgentBookingStats: {
            /** Format: int32 */
            bookingsCount?: number;
            /** Format: int32 */
            cancelledBookingCount?: number;
            /** Format: int32 */
            cancelledBookingRevenueTotal?: number;
            /** Format: int32 */
            cancelledInboundCaseTotal?: number;
            /** Format: int32 */
            cancelledInboundRevenueTotal?: number;
            /** Format: int32 */
            cancelledOutboundCaseTotal?: number;
            /** Format: int32 */
            cancelledOutboundRevenueTotal?: number;
            /** Format: int32 */
            cancelledTransactionsTotal?: number;
            firstName?: string;
            /** Format: int32 */
            inboundCaseTotal?: number;
            /** Format: int32 */
            inboundRevenueTotal?: number;
            lastName?: string;
            /** Format: int32 */
            otrRevenueTotal?: number;
            /** Format: int32 */
            outboundCaseTotal?: number;
            /** Format: int32 */
            outboundRevenueTotal?: number;
            /** Format: int32 */
            transactionsTotal?: number;
            /** Format: int64 */
            userId?: number;
        };
        /** AgentBookingsSummary */
        AgentBookingsSummary: {
            /** Format: int32 */
            cancelledBookingsCount?: number;
            /** Format: int32 */
            cancelledBookingsRevenueTotal?: number;
            /** Format: int32 */
            cancelledInboundCaseTotal?: number;
            /** Format: int32 */
            cancelledInboundRevenueTotal?: number;
            /** Format: int32 */
            cancelledOutboundCaseTotal?: number;
            /** Format: int32 */
            cancelledOutboundRevenueTotal?: number;
            /** Format: int32 */
            cancelledTransactionsTotal?: number;
            /** Format: int32 */
            inboundCaseTotal?: number;
            /** Format: int32 */
            inboundRevenueTotal?: number;
            /** Format: int32 */
            otrRevenueTotal?: number;
            /** Format: int32 */
            outboundCaseTotal?: number;
            /** Format: int32 */
            outboundRevenueTotal?: number;
            /** Format: int32 */
            platformBookingsResultCount?: number;
            /** Format: int32 */
            resultCount?: number;
            /** Format: int32 */
            transactionsTotal?: number;
        };
        /** AggregateBySource */
        AggregateBySource: {
            /** Format: bigdecimal */
            overallRating?: number;
            /** @enum {string} */
            reviewSource?: AddReviewRequestSource;
            /** Format: int64 */
            totalRatingCount?: number;
            /** Format: int64 */
            totalReviewCount?: number;
        };
        /** AggregateQueryResults */
        AggregateQueryResults: {
            /** Format: int32 */
            records?: number;
            /** Format: int64 */
            revenue?: number;
            /** Format: int64 */
            transactionVolume?: number;
        };
        /** AggregateRatingMetrics */
        AggregateRatingMetrics: {
            aggregatesBySource?: components["schemas"]["AggregateBySource"][];
            /** Format: bigdecimal */
            overallRating?: number;
            /** Format: int64 */
            totalRatingCount?: number;
            /** Format: int64 */
            totalReviewCount?: number;
        };
        /** AggregateReferralCredit */
        AggregateReferralCredit: {
            /** Format: int32 */
            availableCreditValue?: number;
            /** Format: int32 */
            earnedCreditValue?: number;
            /** Format: int32 */
            redeemedCreditValue?: number;
        };
        /** Aggregates */
        Aggregates: {
            /** @example yyyy-MM-dd */
            endDate?: string;
            /** Format: int32 */
            matchingRecords?: number;
            /** Format: int64 */
            matchingRevenue?: number;
            /** Format: int64 */
            matchingTransactionVolume?: number;
            /** @example yyyy-MM-dd */
            startDate?: string;
            /** Format: int32 */
            totalRecords?: number;
            /** Format: int64 */
            totalRevenue?: number;
            /** Format: int64 */
            totalTransactionVolume?: number;
            zoneId?: components["schemas"]["ZoneId"];
        };
        /** Alert */
        Alert: {
            /** @enum {string} */
            actionType?: AlertActionType;
            alertId?: string;
            /** @enum {string} */
            alertType?: AlertAlertType;
            bannerMessage?: string;
            clickThruUrl?: string;
            /** Format: int32 */
            hexColor?: number;
        };
        /** AlertNotificationResponse */
        AlertNotificationResponse: {
            alerts?: components["schemas"]["Alert"][];
            caseAlerts?: components["schemas"]["CaseAlert"][];
        };
        /** AnonymousTicketUploadModel */
        AnonymousTicketUploadModel: {
            /** Format: int64 */
            citationId?: number;
            clientEmailAddress?: string;
            /** Format: date-time */
            creationDateUTC?: string;
            isDismissedFromContactList?: boolean;
            signedTicketImageUrl?: string;
            ticketImageUrl?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** AppEventCreateRequest */
        AppEventCreateRequest: {
            /** @enum {string} */
            appEventName?: AppEventCreateRequestAppEventName;
            fingerPrintId?: string;
            /** Format: date-time */
            overrideEventDate?: string;
        };
        /** AppearanceAttorneyDomain */
        AppearanceAttorneyDomain: {
            firstName?: string;
            lastName?: string;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int64 */
            userId?: number;
        };
        /** AppleLoginRequest */
        AppleLoginRequest: {
            authCode?: string;
            /** Format: int64 */
            citationId?: number;
            familyName?: string;
            fingerPrintId?: string;
            givenName?: string;
            identityToken?: string;
        };
        /** AssignCitationOwnerRequest */
        AssignCitationOwnerRequest: {
            /** Format: int64 */
            userId?: number;
        };
        /** AssociateOAuthAccountRequest */
        AssociateOAuthAccountRequest: {
            authCode?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            loginProvider: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            providerToken: string;
        };
        /** AssociateOAuthAccountResponse */
        AssociateOAuthAccountResponse: {
            emailAddress?: string;
            firstName?: string;
            lastName?: string;
            signedProfilePictureUrl?: string;
        };
        /** Attachment */
        Attachment: {
            type?: string;
            url?: string;
        };
        /** AuditLog */
        AuditLog: {
            /** Format: date-time */
            date?: string;
            key?: string;
            /** @enum {string} */
            level?: PathsApiV1CitationsCitationIdAuditLogsGetParametersQueryLogLevel;
            message?: string;
            source?: string;
        };
        /** Author */
        Author: {
            email?: string;
            id?: string;
            name?: string;
            type?: string;
        };
        /** AuthorModel */
        AuthorModel: {
            firstName?: string;
            lastName?: string;
            profilePicture?: string;
            /** Format: int64 */
            userId?: number;
            /** @enum {string} */
            userRole?: AuthorModelUserRole;
        };
        /** AuthorizeChargeForCasePaymentRequest */
        AuthorizeChargeForCasePaymentRequest: {
            ignoreCaseStatus?: boolean;
            paymentMethodId?: string;
        };
        /** AuthorizeChargeForCasePaymentResponse */
        AuthorizeChargeForCasePaymentResponse: {
            charges?: components["schemas"]["CaseChargeResponsePojo"][];
        };
        /** AvailablePaymentPlan */
        AvailablePaymentPlan: {
            paymentPlanDisplayName?: string;
            /** Format: int32 */
            paymentPlanId?: number;
            /** @enum {string} */
            paymentPlanType?: AcceptCaseCounterRequestPaymentPlanType;
        };
        /** AvailableRegion */
        AvailableRegion: {
            regionCode?: string;
            regionName?: string;
        };
        /** AwsCredentialsRequest */
        AwsCredentialsRequest: {
            /** @enum {string} */
            keyName?: AwsCredentialsRequestKeyName;
        };
        /** BackfillLawfirmTransactionRecordsRequest */
        BackfillLawfirmTransactionRecordsRequest: {
            caseId?: string;
            caseIds?: string[];
            deleteExistingRecords?: boolean;
            /** Format: int64 */
            lawfirmId?: number;
            /** Format: int32 */
            maxCases?: number;
        };
        /** BackfillLawfirmTransactionRecordsResponse */
        BackfillLawfirmTransactionRecordsResponse: {
            errors?: {
                [key: string]: string;
            };
        };
        /** BalanceTransactionModel */
        BalanceTransactionModel: {
            /** Format: int32 */
            amountInCents?: number;
            /** Format: date-time */
            availableAtDateUtc?: string;
            caseId?: string;
            /** Format: date-time */
            creationDateUtc?: string;
            id?: string;
            stripePayoutId?: string;
            transactionId?: string;
            type?: string;
        };
        /** BillingInvoiceModel */
        BillingInvoiceModel: {
            /** Format: int32 */
            amountDueInCents?: number;
            /** Format: int32 */
            amountPaidInCents?: number;
            invoicePdfUrl?: string;
            /** Format: date-time */
            periodEndDate?: string;
            /** Format: date-time */
            periodStartDate?: string;
            /** @enum {string} */
            status?: BillingInvoiceModelStatus;
        };
        /** BillingPriceModel */
        BillingPriceModel: {
            active?: boolean;
            /** @enum {string} */
            billingScheme?: BillingPriceModelBillingScheme;
            /** Format: date-time */
            createdAt?: string;
            id?: string;
            /** @enum {string} */
            interval?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
            /** Format: int64 */
            intervalCount?: number;
            /** Format: int64 */
            monthlyUnitAmountInCents?: number;
            priceDescription?: string;
            /** Format: date-time */
            sampleEndDateUtc?: string;
            /** Format: date-time */
            sampleStartDateUtc?: string;
            /** Format: int64 */
            unitAmountInCents?: number;
            /** Format: int64 */
            yearlyDiscountInCents?: number;
            /** Format: double */
            yearlyDiscountInPercentage?: number;
        };
        /** BillingProductModel */
        BillingProductModel: {
            active?: boolean;
            caption?: string;
            /** Format: date-time */
            createdAt?: string;
            description?: string;
            id?: string;
            name?: string;
            priceModels?: components["schemas"]["BillingPriceModel"][];
        };
        /** BillingSubscriberAggregateModel */
        BillingSubscriberAggregateModel: {
            /** Format: int32 */
            totalRecords?: number;
            /** Format: int64 */
            totalUniqueActiveSubscriptions?: number;
            /** Format: int64 */
            totalUniqueCancelledSubscriptions?: number;
        };
        /** BillingSubscriberModel */
        BillingSubscriberModel: {
            emailAddress?: string;
            firstName?: string;
            lastName?: string;
            subscriptions?: components["schemas"]["ListBillingSubscriptionModel"][];
            /** Format: int32 */
            totalUsage?: number;
            /** Format: int64 */
            userId?: number;
        };
        /** BillingSubscriptionItemModel */
        BillingSubscriptionItemModel: {
            /** Format: int64 */
            amount?: number;
            /** @enum {string} */
            billingScheme?: BillingPriceModelBillingScheme;
            id?: string;
            /** @enum {string} */
            interval?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
            /** Format: int64 */
            intervalCount?: number;
            priceDescription?: string;
            productId?: string;
            /** Format: int64 */
            quantity?: number;
            /** @enum {string} */
            tiersMode?: BillingSubscriptionItemModelTiersMode;
            /** @enum {string} */
            usageType?: BillingSubscriptionItemModelUsageType;
        };
        /** BillingSubscriptionModel */
        BillingSubscriptionModel: {
            /** Format: date-time */
            cancelAt?: string;
            /** Format: date-time */
            canceledAt?: string;
            id?: string;
            items?: components["schemas"]["BillingSubscriptionItemModel"][];
            productDescription?: string;
            productName?: string;
            /** Format: date-time */
            startAt?: string;
            /** @enum {string} */
            status?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
            /** Format: date-time */
            trialEndAt?: string;
            upcomingInvoicePreview?: components["schemas"]["BillingUpcomingInvoiceModel"];
        };
        /** BillingUpcomingInvoiceModel */
        BillingUpcomingInvoiceModel: {
            /** Format: date-time */
            nextPaymentAttemptDate?: string;
            /** Format: int64 */
            paymentAmountInCents?: number;
            /** Format: date-time */
            periodEndDate?: string;
            /** Format: date-time */
            periodStartDate?: string;
        };
        /** BlogDocument */
        BlogDocument: {
            addition?: components["schemas"]["BlogMetadata"][];
            deletion?: components["schemas"]["BlogMetadata"][];
            update?: components["schemas"]["BlogMetadata"][];
        };
        /** BlogEvent */
        BlogEvent: {
            apiUrl?: string;
            release?: components["schemas"]["BlogDocument"];
            secret?: string;
            type?: string;
        };
        /** BlogMetadata */
        BlogMetadata: {
            id?: string;
            label?: string;
            ref?: string;
        };
        /** Booking */
        Booking: {
            /** @example yyyy-MM-dd'T'HH:mm:ss.SSSZ */
            bookingDate?: string;
            bookingDateUtc?: components["schemas"]["Timestamp"];
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** Format: int32 */
            clientTotalCost?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            numPayments?: number;
            /** Format: double */
            otrPercent?: number;
            /** Format: int32 */
            otrRevenue?: number;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            userFirstName?: string;
            /** Format: int64 */
            userId?: number;
            userLastName?: string;
        };
        /** BookingCancelation */
        BookingCancelation: {
            /** @example yyyy-MM-dd'T'HH:mm:ss.SSSZ */
            bookingDate?: string;
            bookingDateUtc?: components["schemas"]["Timestamp"];
            /** @example yyyy-MM-dd'T'HH:mm:ss.SSSZ */
            cancelationDate?: string;
            cancelationDateUtc?: components["schemas"]["Timestamp"];
            cancelationReason?: string;
            canceledBy?: string;
            /** Format: int64 */
            canceledByUserId?: number;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            city?: string;
            /** Format: int32 */
            clientTotalCost?: number;
            declineReason?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            otrRevenue?: number;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
        };
        /** CalculateTransferFeeDifferenceResponse */
        CalculateTransferFeeDifferenceResponse: {
            /** Format: int32 */
            totalClientCostDifferenceInCents?: number;
        };
        /** CallContact */
        CallContact: {
            /** Format: int64 */
            agentId?: number;
            agentName?: string;
            /** @enum {string} */
            callDirection?: PathsApiV1ConsolePhoneCallsGetParametersQueryDirection;
            /** Format: int32 */
            callDurationInSeconds?: number;
            /** Format: int64 */
            callId?: number;
            /** Format: int64 */
            callQueueId?: number;
            callQueueName?: string;
            /** Format: date-time */
            callStartDateUtc?: string;
            /** @enum {string} */
            callStatus?: PathsApiV1ConsolePhoneCallsGetParametersQueryCallStatus;
            customerName?: string;
            customerNumber?: string;
            /** @enum {string} */
            integratedResourceType?: CallContactIntegratedResourceType;
            integratedResourceValue?: string;
            /** Format: int64 */
            ivrId?: number;
            ivrName?: string;
            notes?: string;
            /** Format: int64 */
            parentCallId?: number;
            recordingUrl?: string;
            /** Format: int64 */
            rootCallId?: number;
            tags?: string;
            /** Format: int64 */
            teamId?: number;
            teamName?: string;
            /** Format: int64 */
            thirdPartyCallId?: number;
            /** Format: int64 */
            userId?: number;
        };
        /** CancelBillingSubscriptionResponse */
        CancelBillingSubscriptionResponse: {
            cancelAtPeriodEnd?: boolean;
            /** Format: date-time */
            cancelledAt?: string;
            id?: string;
            /** @enum {string} */
            status?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
            stripeCustomerId?: string;
        };
        /** CancelCaseRequest */
        CancelCaseRequest: {
            cancelationReason?: string;
            /** @enum {string} */
            cancelationStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            caseId?: string;
            shouldIssueRefund?: boolean;
        };
        /** CancelationDetails */
        CancelationDetails: {
            cancelationDate?: components["schemas"]["Timestamp"];
            cancelationReason?: string;
            /** Format: int64 */
            canceledByUserId?: number;
            canceledByUserName?: string;
        };
        /** CancelationDetailsReq */
        CancelationDetailsReq: {
            cancelationDate?: components["schemas"]["TimestampReq"];
            cancelationReason?: string;
            /** Format: int64 */
            canceledByUserId?: number;
            canceledByUserName?: string;
        };
        /** CancelationDetailsRes */
        CancelationDetailsRes: {
            cancelationDate?: components["schemas"]["TimestampRes"];
            cancelationReason?: string;
            /** Format: int64 */
            canceledByUserId?: number;
            canceledByUserName?: string;
        };
        /** CancellationAggregates */
        CancellationAggregates: {
            /** Format: int32 */
            caseCancellationCount?: number;
            /** @example yyyy-MM-dd */
            endDate?: string;
            /** Format: int64 */
            revenue?: number;
            /** @example yyyy-MM-dd */
            startDate?: string;
            /** Format: int64 */
            transactionVolume?: number;
            zoneId?: components["schemas"]["ZoneId"];
        };
        /** CaptureChargeFromCasePaymentRequest */
        CaptureChargeFromCasePaymentRequest: {
            ignoreCaseStatus?: boolean;
            paymentMethodId?: string;
        };
        /** Case */
        Case: {
            /** @example yyyy-MM-dd'T'HH:mm:ss.SSSZ */
            bookingDate?: string;
            bookingDateUtc?: components["schemas"]["Timestamp"];
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** Format: int32 */
            clientTotalCost?: number;
            /** Format: date-time */
            dob?: string;
            /** @enum {string} */
            gender?: CaseGender;
            hasSubscriptionPlan?: boolean;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            numPayments?: number;
            /** Format: double */
            otrPercent?: number;
            /** Format: int32 */
            otrRevenue?: number;
            /** @enum {string} */
            race?: CaseRace;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            /** @enum {string} */
            statusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            userFirstName?: string;
            /** Format: int64 */
            userId?: number;
            userLastName?: string;
        };
        /** CaseActionDomain */
        CaseActionDomain: {
            /** Format: date-time */
            actionDate?: string;
            actionNote?: string;
            /** Format: int64 */
            actionReferenceId?: number;
            actionType?: components["schemas"]["CaseActionTypeModel"];
            author?: components["schemas"]["AuthorModel"];
            /** Format: int64 */
            authorId?: number;
            authorName?: string;
            /** Format: int64 */
            caseActionId?: number;
            courtDateActionNote?: string;
            courtDateActionTitle?: string;
            isDeleted?: boolean;
            label1?: string;
            label2?: string;
        };
        /** CaseActionRequestModel */
        CaseActionRequestModel: {
            /** Format: date-time */
            actionDate?: string;
            actionNote?: string;
            /** @enum {string} */
            actionType?: CaseActionRequestModelActionType;
        };
        /** CaseActionTypeModel */
        CaseActionTypeModel: {
            /** Format: int32 */
            id?: number;
            /** @enum {string} */
            name?: CaseActionRequestModelActionType;
            /** Format: int32 */
            rank?: number;
            uiString?: string;
        };
        /** CaseAlert */
        CaseAlert: {
            /** @enum {string} */
            actionType?: AlertActionType;
            /** @enum {string} */
            alertType?: AlertAlertType;
            bannerMessage?: string;
            caseId?: string;
            clickThruUrl?: string;
            /** Format: int32 */
            hexColor?: number;
            lawfirmId?: string;
        };
        /** CaseBookingsStats */
        CaseBookingsStats: {
            /** @example yyyy-MM-dd */
            endDate?: string;
            /** Format: int32 */
            numBookings?: number;
            /** Format: int32 */
            numCancelations?: number;
            /** Format: int32 */
            numLawfirmsEngaged?: number;
            /** Format: int64 */
            onTrackTransactions?: number;
            /** Format: int64 */
            otrRevenue?: number;
            /** @example yyyy-MM-dd */
            startDate?: string;
            zoneId?: components["schemas"]["ZoneId"];
        };
        /** CaseChargeResponsePojo */
        CaseChargeResponsePojo: {
            casePaymentId?: string;
            stripeChargeId?: string;
        };
        /** CaseCounterOfferModel */
        CaseCounterOfferModel: {
            /** Format: int32 */
            counterOfferAmountInCents?: number;
            counterOfferDateUtc?: components["schemas"]["Timestamp"];
            /** Format: int64 */
            counterOfferId?: number;
            counterOfferStatus?: string;
            /** Format: int64 */
            createdByUserId?: number;
            /** Format: int64 */
            createdByUserRoleId?: number;
            /** Format: int32 */
            initialLegalFeeInCents?: number;
            /** Format: double */
            initialRefundPercentage?: number;
            /** Format: int64 */
            lawfirmCaseId?: number;
            noteToClient?: string;
            noteToOtr?: string;
            /** Format: double */
            refundPercentage?: number;
        };
        /** CaseCounterOption */
        CaseCounterOption: {
            description?: string;
            name?: string;
        };
        /** CaseCounterOptionModel */
        CaseCounterOptionModel: {
            /** @enum {string} */
            type?: CaseCounterOptionModelType;
            value?: string;
        };
        /** CaseCreationRequest */
        CaseCreationRequest: {
            /** Format: date-time */
            courtDate?: string;
            forcePredeterminedLawfirmId?: boolean;
            /** Format: int64 */
            legalServiceId?: number;
            matchInternal?: boolean;
            /** Format: int64 */
            predeterminedLawfirmId?: number;
            setQuoteExpirationOn?: boolean;
        };
        /** CaseDeclineCategory */
        CaseDeclineCategory: {
            /** Format: int64 */
            caseDeclineCategoryId?: number;
            caseDeclineCategoryName?: string;
            reasons?: components["schemas"]["CaseDeclineReason"][];
            uiFriendlyName?: string;
        };
        /** CaseDeclineCategoryReasonsModel */
        CaseDeclineCategoryReasonsModel: {
            caseDeclineCategoryReasons?: {
                [key: string]: components["schemas"]["CaseDeclineCategory"];
            };
        };
        /** CaseDeclineReason */
        CaseDeclineReason: {
            /** Format: int64 */
            caseDeclineReasonId?: number;
            caseDeclineReasonName?: string;
            uiFriendlyDescription?: string;
        };
        /** CaseItem */
        CaseItem: {
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            citationState?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            clientFirstName?: string;
            clientLastName?: string;
            court?: components["schemas"]["CourtEntity"];
            lawfirmName?: string;
            profilePictureUrl?: string;
        };
        /** CaseLineItemDomainReq */
        CaseLineItemDomainReq: {
            additionalDescription?: string;
            chargeDescription?: string;
            /** Format: int32 */
            clientTotalCost?: number;
            creationDate?: components["schemas"]["TimestampReq"];
            /** Format: int32 */
            feeInCents?: number;
            /** Format: int32 */
            lawfirmAssumedCost?: number;
            /** Format: int32 */
            lawfirmCaseFees?: number;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int32 */
            lawfirmEarningsForCase?: number;
            /** Format: int32 */
            lawfirmReferralCodeAdjustmentInCents?: number;
            lineItemId?: string;
            /** @enum {string} */
            lineItemOwner?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            /** @enum {string} */
            lineItemType?: CaseLineItemDomainReqLineItemType;
            /** Format: int32 */
            otrEarnings?: number;
            /** Format: int32 */
            otrMarketingFeeActual?: number;
            /** Format: int32 */
            otrMarketingFeeChargedToLawfirm?: number;
            /** Format: int32 */
            otrReferralCodeAdjustmentInCents?: number;
            /** Format: int32 */
            paymentProcessingFeeActual?: number;
            /** Format: int32 */
            paymentProcessingFeeChargedToLawfirm?: number;
            /** Format: int64 */
            platformFee?: number;
        };
        /** CaseLineItemDomainRes */
        CaseLineItemDomainRes: {
            additionalDescription?: string;
            chargeDescription?: string;
            /** Format: int32 */
            clientTotalCost?: number;
            creationDate?: components["schemas"]["TimestampRes"];
            /** Format: int32 */
            feeInCents?: number;
            /** Format: int32 */
            lawfirmAssumedCost?: number;
            /** Format: int32 */
            lawfirmCaseFees?: number;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int32 */
            lawfirmEarningsForCase?: number;
            /** Format: int32 */
            lawfirmReferralCodeAdjustmentInCents?: number;
            lineItemId?: string;
            /** @enum {string} */
            lineItemOwner?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            /** @enum {string} */
            lineItemType?: CaseLineItemDomainReqLineItemType;
            /** Format: int32 */
            otrEarnings?: number;
            /** Format: int32 */
            otrMarketingFeeActual?: number;
            /** Format: int32 */
            otrMarketingFeeChargedToLawfirm?: number;
            /** Format: int32 */
            otrReferralCodeAdjustmentInCents?: number;
            /** Format: int32 */
            paymentProcessingFeeActual?: number;
            /** Format: int32 */
            paymentProcessingFeeChargedToLawfirm?: number;
            /** Format: int64 */
            platformFee?: number;
        };
        /** CaseLineItemsSummary */
        CaseLineItemsSummary: {
            /** Format: int32 */
            caseBaseCostInCents?: number;
            /** Format: int32 */
            clientTotalCostInCents?: number;
            hasPredictedOrAdjustedFee?: boolean;
            /** Format: int32 */
            lawfirmAssumedCostInCents?: number;
            /** Format: int32 */
            lawfirmCaseFees?: number;
            /** Format: int32 */
            lawfirmEarningsForCase?: number;
            /** Format: int32 */
            lawfirmRefcodeAdjustmentInCents?: number;
            /** Format: int32 */
            lawfirmServiceChargeInCents?: number;
            /** Format: int32 */
            otrEarnings?: number;
            /** Format: int32 */
            otrMarketingFeeChargedToLawfirm?: number;
            /** Format: int32 */
            otrRefcodeAdjustmentInCents?: number;
            /** Format: int32 */
            paymentProcessingFeeActual?: number;
            /** Format: int32 */
            paymentProcessingFeeChargedToLawfirm?: number;
            /** Format: int32 */
            platformFee?: number;
        };
        /** CaseMessageDomain */
        CaseMessageDomain: {
            authorFirstname?: string;
            authorLastname?: string;
            authorProfilePicUrl?: string;
            /** @enum {string} */
            authorRoleType?: AuthorModelUserRole;
            /** Format: int64 */
            authorUserId?: number;
            isDeleted?: boolean;
            /** @enum {string} */
            mediaType?: CaseMessageDomainMediaType;
            mediaUrl?: string;
            messageBody?: string;
            /** Format: int64 */
            messageId?: number;
            /** Format: date-time */
            messageSentDateUtc?: string;
        };
        /** CaseModel */
        CaseModel: {
            actions?: components["schemas"]["CaseActionDomain"][];
            /** Format: int32 */
            adjustedFineAmount?: number;
            /** Format: int32 */
            adjustedPointCount?: number;
            bookingConfirmedDate?: components["schemas"]["Timestamp"];
            cancelationDetails?: components["schemas"]["CancelationDetails"];
            cancelationReason?: string;
            cancellationExpiryDate?: components["schemas"]["Timestamp"];
            cardInput?: components["schemas"]["PaymentCardInput"];
            caseCancellationDate?: components["schemas"]["Timestamp"];
            caseCreationDate?: components["schemas"]["Timestamp"];
            caseId?: string;
            caseResolutionDate?: components["schemas"]["Timestamp"];
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            caseStatusDomain?: components["schemas"]["CaseStatusDomain"];
            citation?: components["schemas"]["CitationModel"];
            courtAppointmentDate?: components["schemas"]["Timestamp"];
            hasLeftLawyerReview?: boolean;
            isPointSystemState?: boolean;
            lawfirmCaseDecision?: components["schemas"]["LawfirmCaseModel"];
            lawfirmCodeApplied?: boolean;
            letterOfEngagement?: components["schemas"]["LetterOfEngagement"];
            maxPenalties?: components["schemas"]["CaseViolationPenalty"][];
            paymentPlanTypeModel?: components["schemas"]["PaymentPlanTypeModel"];
            referralCode?: string;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            resolutionSummary?: string;
            subscriptionDiscountEligibility?: components["schemas"]["SubscriptionDiscountEligibility"];
            uiRefundMsg?: string;
            user?: components["schemas"]["UserDomain"];
            /** Format: int64 */
            userId?: number;
        };
        /** CaseModelReq */
        CaseModelReq: {
            actions?: components["schemas"]["CaseActionDomain"][];
            /** Format: int32 */
            adjustedFineAmount?: number;
            /** Format: int32 */
            adjustedPointCount?: number;
            bookingConfirmedDate?: components["schemas"]["TimestampReq"];
            cancelationDetails?: components["schemas"]["CancelationDetailsReq"];
            cancelationReason?: string;
            cancellationExpiryDate?: components["schemas"]["TimestampReq"];
            cardInput?: components["schemas"]["PaymentCardInput"];
            caseCancellationDate?: components["schemas"]["TimestampReq"];
            caseCreationDate?: components["schemas"]["TimestampReq"];
            caseId?: string;
            caseResolutionDate?: components["schemas"]["TimestampReq"];
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            caseStatusDomain?: components["schemas"]["CaseStatusDomain"];
            citation?: components["schemas"]["CitationModelReq"];
            courtAppointmentDate?: components["schemas"]["TimestampReq"];
            hasLeftLawyerReview?: boolean;
            isPointSystemState?: boolean;
            lawfirmCaseDecision?: components["schemas"]["LawfirmCaseModelReq"];
            lawfirmCodeApplied?: boolean;
            letterOfEngagement?: components["schemas"]["LetterOfEngagement"];
            maxPenalties?: components["schemas"]["CaseViolationPenalty"][];
            paymentPlanTypeModel?: components["schemas"]["PaymentPlanTypeModelReq"];
            referralCode?: string;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            resolutionSummary?: string;
            subscriptionDiscountEligibility?: components["schemas"]["SubscriptionDiscountEligibilityReq"];
            uiRefundMsg?: string;
            user?: components["schemas"]["UserDomainReq"];
            /** Format: int64 */
            userId?: number;
        };
        /** CaseModelRes */
        CaseModelRes: {
            actions?: components["schemas"]["CaseActionDomain"][];
            /** Format: int32 */
            adjustedFineAmount?: number;
            /** Format: int32 */
            adjustedPointCount?: number;
            bookingConfirmedDate?: components["schemas"]["TimestampRes"];
            cancelationDetails?: components["schemas"]["CancelationDetailsRes"];
            cancelationReason?: string;
            cancellationExpiryDate?: components["schemas"]["TimestampRes"];
            cardInput?: components["schemas"]["PaymentCardInput"];
            caseCancellationDate?: components["schemas"]["TimestampRes"];
            caseCreationDate?: components["schemas"]["TimestampRes"];
            caseId?: string;
            caseResolutionDate?: components["schemas"]["TimestampRes"];
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            caseStatusDomain?: components["schemas"]["CaseStatusDomain"];
            citation?: components["schemas"]["CitationModelRes"];
            courtAppointmentDate?: components["schemas"]["TimestampRes"];
            hasLeftLawyerReview?: boolean;
            isPointSystemState?: boolean;
            lawfirmCaseDecision?: components["schemas"]["LawfirmCaseModelRes"];
            lawfirmCodeApplied?: boolean;
            letterOfEngagement?: components["schemas"]["LetterOfEngagement"];
            maxPenalties?: components["schemas"]["CaseViolationPenalty"][];
            paymentPlanTypeModel?: components["schemas"]["PaymentPlanTypeModelRes"];
            referralCode?: string;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            resolutionSummary?: string;
            subscriptionDiscountEligibility?: components["schemas"]["SubscriptionDiscountEligibilityRes"];
            uiRefundMsg?: string;
            user?: components["schemas"]["UserDomainRes"];
            /** Format: int64 */
            userId?: number;
        };
        /** CaseNotesDomain */
        CaseNotesDomain: {
            lawfirmCaseNotes?: string;
            otrCaseNotes?: string;
        };
        /** CaseOutcomeModel */
        CaseOutcomeModel: {
            /** Format: int32 */
            averageSavingsInCents?: number;
            city?: string;
            clientName?: string;
            courtName?: string;
            criminal?: boolean;
            profilePictureUrl?: string;
            regionCode?: string;
            /** Format: date-time */
            resolutionDateUtc?: string;
            /** @enum {string} */
            resolutionStatus?: PathsApiV1ActivityFeedCaseOutcomesGetParametersQueryResolutionStatuses;
            shortViolationName?: string;
        };
        /** CasePaymentBreakdownItemModel */
        CasePaymentBreakdownItemModel: {
            /** Format: int32 */
            amount?: number;
            friendlyTitle?: string;
            type?: components["schemas"]["InvoiceLineItemModel"];
        };
        /** CasePaymentDomain */
        CasePaymentDomain: {
            /** Format: int32 */
            baseFeeInCents?: number;
            casePaymentId?: string;
            /** Format: int32 */
            chargeAttempts?: number;
            /** Format: int32 */
            clientTotalCost?: number;
            creationDateUTC?: components["schemas"]["Timestamp"];
            /** Format: date-time */
            dueDate?: string;
            hasPredictedOrAdjustedFee?: boolean;
            isLocked?: boolean;
            isPaymentActive?: boolean;
            /** Format: date-time */
            lastAttemptDate?: string;
            lastUpdatedDateUTC?: components["schemas"]["Timestamp"];
            /** Format: int32 */
            lawfirmAssumedCost?: number;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int32 */
            lawfirmEarnings?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            lawfirmReferralCodeAdjustmentInCents?: number;
            mostRecentChargeError?: string;
            /** Format: int32 */
            otrCustomerCharges?: number;
            /** Format: int32 */
            otrEarnings?: number;
            /** Format: int32 */
            otrMarketingFeeInCents?: number;
            /** Format: int32 */
            otrReferralCodeAdjustmentInCents?: number;
            /** Format: int32 */
            paymentProcessingFeeActual?: number;
            /** Format: int32 */
            paymentProcessingFeeChargedToLawfirm?: number;
            /** @enum {string} */
            recipient?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            stripeCharge?: components["schemas"]["StripeChargeDomain"];
            supportTickets?: components["schemas"]["FreshdeskTicketReferenceDomain"][];
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            /** Format: date-time */
            updatedDueDate?: string;
        };
        /** CasePaymentModel */
        CasePaymentModel: {
            /** Format: date-time */
            authorizationDateUtc?: string;
            /** Format: date-time */
            captureDateUtc?: string;
            /** Format: date-time */
            dueDate?: string;
            dueNow?: boolean;
            /** Format: date-time */
            expiryDateUtc?: string;
            /** Format: int32 */
            feeAmount?: number;
            items?: components["schemas"]["CasePaymentBreakdownItemModel"][];
        };
        /** CaseStatusDetailsResponse */
        CaseStatusDetailsResponse: {
            /** @enum {string} */
            category?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            /** Format: int32 */
            id?: number;
            /** @enum {string} */
            status?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
        };
        /** CaseStatusDomain */
        CaseStatusDomain: {
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            clientFriendlyDescription?: string;
            clientFriendlyName?: string;
            isDeprecated?: boolean;
            lawfirmFriendlyDescription?: string;
            lawfirmFriendlyName?: string;
            stateCode?: string;
            /** @enum {string} */
            statusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            /** Format: int32 */
            statusId?: number;
        };
        /** CaseSummaryDomain */
        CaseSummaryDomain: {
            /** Format: date-time */
            bookingConfirmedDate?: string;
            /** @enum {string} */
            caseDecisionStatus?: CaseSummaryDomainCaseDecisionStatus;
            caseId?: string;
            caseStatusDomain?: components["schemas"]["CaseStatusDomain"];
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            /** Format: date-time */
            citationIssueDateUTC?: string;
            countyName?: string;
            /** Format: date-time */
            courtDate?: string;
            courtName?: string;
            firstName?: string;
            involvesAccident?: boolean;
            lastName?: string;
            /** Format: int32 */
            legalFeeInCents?: number;
            /** Format: date-time */
            resolutionDateUtc?: string;
            ticketImageUrl?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: int32 */
            violationCount?: number;
        };
        /** CaseTransferHistory */
        CaseTransferHistory: {
            /** Format: date-time */
            decisionDate?: string;
            /** @enum {string} */
            decisionStatus?: CaseSummaryDomainCaseDecisionStatus;
            declineCategory?: string;
            declineNote?: string;
            declineReasonType?: string;
            /** Format: int32 */
            discountInCents?: number;
            /** Format: date-time */
            lawfirmCaseCreationDate?: string;
            lawfirmCaseId?: string;
            lawfirmId?: string;
            lawfirmName?: string;
            /** @enum {string} */
            refundOwner?: CaseTransferHistoryRefundOwner;
            /** Format: int32 */
            totalClientCostInCents?: number;
        };
        /** CaseTransferResponse */
        CaseTransferResponse: {
            transfers?: components["schemas"]["CaseTransferHistory"][];
        };
        /** CaseUserDefendantAttributes */
        CaseUserDefendantAttributes: {
            /** Format: date-time */
            dateOfBirth?: string;
            firstName?: string;
            lastName?: string;
            licenseNumber?: string;
            licenseState?: string;
        };
        /** CaseUserDefendantAttributesRequest */
        CaseUserDefendantAttributesRequest: {
            /** Format: date */
            dateOfBirth?: string;
            firstName?: string;
            lastName?: string;
            licenseNumber?: string;
            licenseState?: string;
        };
        /** CaseUserDetailsModel */
        CaseUserDetailsModel: {
            additionalNote?: string;
            defendantAttributes?: components["schemas"]["CaseUserDefendantAttributes"];
            defendantProfilePictureUrl?: string;
            isBookingAgent?: boolean;
            isDefendant?: boolean;
            isOwner?: boolean;
            /** Format: int64 */
            ownerUserId?: number;
            permissionAttributes?: components["schemas"]["CaseUserPermissionAttributes"];
            /** @enum {string} */
            relationshipToClientType?: CaseUserDetailsModelRelationshipToClientType;
        };
        /** CaseUserPermissionAttributes */
        CaseUserPermissionAttributes: {
            hasFinancialAccess?: boolean;
        };
        /** CaseViolationPenalty */
        CaseViolationPenalty: {
            penaltyFriendlyDescription?: string;
            /** @enum {string} */
            penaltyType?: CaseViolationPenaltyPenaltyType;
            penaltyValue?: string;
        };
        /** CaseWithCoverageObtained */
        CaseWithCoverageObtained: {
            /** @enum {string} */
            caseClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            caseCreationDateUtc?: components["schemas"]["TimestampRes"];
            caseId?: string;
            /** Format: int64 */
            citationId?: number;
            county?: string;
            courtName?: string;
            /** Format: int32 */
            fee?: number;
            involvesAccident?: boolean;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            region?: components["schemas"]["CountryRegion"];
        };
        /** ChangeUserPasswordRequest */
        ChangeUserPasswordRequest: {
            plainTextPasswordNew?: string;
            plainTextPasswordOld?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** ChargeFeeToLawfirmRequest */
        ChargeFeeToLawfirmRequest: {
            caseId?: string;
            /** Format: date-time */
            dueDateUtc?: string;
            /** Format: int64 */
            feeAmountInCents?: number;
            /** Format: int64 */
            lawfirmCaseId?: number;
            note?: string;
            /** Format: int64 */
            otrFeeInCents?: number;
            /** Format: int64 */
            processingFeeInCents?: number;
            sourceCasePaymentId?: string;
            /** Format: date-time */
            transactionDateUtc?: string;
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReference?: string;
        };
        /** ChargeFeeToLawfirmResponse */
        ChargeFeeToLawfirmResponse: {
            isSuccess?: boolean;
        };
        /** CitationAuditEventModel */
        CitationAuditEventModel: {
            authorName?: string;
            /** Format: int64 */
            citationEventId?: number;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** @enum {string} */
            event?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
            /** Format: date-time */
            eventDate?: string;
            /** Format: int64 */
            eventId?: number;
            newValue?: string;
            oldValue?: string;
            subject?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** CitationAuditLog */
        CitationAuditLog: {
            /** @enum {string} */
            auditLogType?: PathsApiV1CitationsCitationIdAuditLogsGetParametersQueryLogType;
            /** Format: int64 */
            citationId?: number;
            /** Format: date-time */
            eventDateUtc?: string;
            isActive?: boolean;
            logTrails?: components["schemas"]["AuditLog"][];
        };
        /** CitationInputRequest */
        CitationInputRequest: {
            address?: components["schemas"]["AddressDomainReq"];
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: date-time */
            citationIssueDate?: string;
            citationIssueDateUTC?: components["schemas"]["TimestampReq"];
            clientEmailAddress?: string;
            clientFirstName?: string;
            court?: components["schemas"]["CourtInputRequest"];
            documentUrlToConvert?: string;
            /** Format: bigdecimal */
            fineAmount?: number;
            involvesAccident?: boolean;
            isDismissedFromContactList?: boolean;
            isPastDue?: boolean;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            ticketNumber?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: int32 */
            violationCount?: number;
            violations?: components["schemas"]["TrafficViolationInputRequest"][];
        };
        /** CitationIssueDate */
        CitationIssueDate: {
            llm_prediction?: string;
        };
        /** CitationModel */
        CitationModel: {
            address?: components["schemas"]["AddressDomain"];
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            citationIssueDateUTC?: components["schemas"]["Timestamp"];
            citationLockedForClient?: boolean;
            clientEmailAddress?: string;
            clientFirstName?: string;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            court?: components["schemas"]["CourtDomain"];
            creationDateUTC?: components["schemas"]["Timestamp"];
            documentUrlToConvert?: string;
            /** Format: bigdecimal */
            fineAmount?: number;
            hasCase?: boolean;
            hasCitationImage?: boolean;
            hubspotContactId?: string;
            involvesAccident?: boolean;
            isDeleted?: boolean;
            isDismissedFromContactList?: boolean;
            isPastDue?: boolean;
            /** Format: int32 */
            originalPointCount?: number;
            signedTicketImageUrl?: string;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            ticketImageUrl?: string;
            ticketLocationTags?: string;
            ticketNumber?: string;
            /** Format: int64 */
            userId?: number;
            violationCategoryName?: string;
            /** Format: int32 */
            violationCount?: number;
            violations?: components["schemas"]["ViolationModel"][];
        };
        /** CitationModelReq */
        CitationModelReq: {
            address?: components["schemas"]["AddressDomainReq"];
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            citationIssueDateUTC?: components["schemas"]["TimestampReq"];
            citationLockedForClient?: boolean;
            clientEmailAddress?: string;
            clientFirstName?: string;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            court?: components["schemas"]["CourtDomainReq"];
            creationDateUTC?: components["schemas"]["TimestampReq"];
            documentUrlToConvert?: string;
            /** Format: bigdecimal */
            fineAmount?: number;
            hasCase?: boolean;
            hubspotContactId?: string;
            involvesAccident?: boolean;
            isDeleted?: boolean;
            isDismissedFromContactList?: boolean;
            isPastDue?: boolean;
            /** Format: int32 */
            originalPointCount?: number;
            signedTicketImageUrl?: string;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            ticketImageUrl?: string;
            ticketLocationTags?: string;
            ticketNumber?: string;
            /** Format: int64 */
            userId?: number;
            violationCategoryName?: string;
            /** Format: int32 */
            violationCount?: number;
            violations?: components["schemas"]["ViolationModel"][];
        };
        /** CitationModelRes */
        CitationModelRes: {
            address?: components["schemas"]["AddressDomainRes"];
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            citationIssueDateUTC?: components["schemas"]["TimestampRes"];
            citationLockedForClient?: boolean;
            clientEmailAddress?: string;
            clientFirstName?: string;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            court?: components["schemas"]["CourtDomainRes"];
            creationDateUTC?: components["schemas"]["TimestampRes"];
            documentUrlToConvert?: string;
            /** Format: bigdecimal */
            fineAmount?: number;
            hasCase?: boolean;
            hasCitationImage?: boolean;
            hubspotContactId?: string;
            involvesAccident?: boolean;
            isDeleted?: boolean;
            isDismissedFromContactList?: boolean;
            isPastDue?: boolean;
            /** Format: int32 */
            originalPointCount?: number;
            signedTicketImageUrl?: string;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            ticketImageUrl?: string;
            ticketLocationTags?: string;
            ticketNumber?: string;
            /** Format: int64 */
            userId?: number;
            violationCategoryName?: string;
            /** Format: int32 */
            violationCount?: number;
            violations?: components["schemas"]["ViolationModel"][];
        };
        /** CitationViolationModel */
        CitationViolationModel: {
            classDescription?: string;
            criminal?: boolean;
            trafficViolationDesc?: string;
            /** Format: int64 */
            trafficViolationTypeId?: number;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationCode?: string;
        };
        /** CitationWithMissingCourt */
        CitationWithMissingCourt: {
            /** Format: int64 */
            citationId?: number;
            deleted?: boolean;
            region?: components["schemas"]["CountryRegion"];
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
        };
        /** CitationWithMissingFields */
        CitationWithMissingFields: {
            birthDate?: string;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            citationCreationDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            clientEmailAddress?: string;
            clientFirstName?: string;
            /** Format: int64 */
            courtId?: number;
            dismissedFromContactList?: boolean;
            firstName?: string;
            /** @enum {string} */
            gender?: CaseGender;
            lastName?: string;
            licenseNumber?: string;
            /** @enum {string} */
            race?: CaseRace;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            ticketImageUrl?: string;
            /** Format: int64 */
            userId?: number;
            violations?: components["schemas"]["CitationViolationModel"][];
        };
        /** CitationsResponseModel */
        CitationsResponseModel: {
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: int32 */
            citationId?: number;
            /** Format: date-time */
            citationIssueDate?: string;
            countyName?: string;
            courtName?: string;
            creationDateUtc?: components["schemas"]["Timestamp"];
            /** @enum {string} */
            experimentName?: CitationsResponseModelExperimentName;
            groupName?: string;
            hasPhoto?: boolean;
            involvesAccident?: boolean;
            isMatchInternal?: boolean;
            /** Format: date-time */
            lastBookingDateUtc?: string;
            lawfirmId?: string;
            lawfirmName?: string;
            /** @enum {string} */
            maxViolationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            /** Format: int32 */
            numViolations?: number;
            ticketImageUrl?: string;
            /** @enum {string} */
            ticketLocationState?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            /** Format: int32 */
            totalClientCostInCents?: number;
            /** Format: int32 */
            totalLawfirmDiscountInCents?: number;
            /** Format: int32 */
            totalOtrDiscountInCents?: number;
            userFirstName?: string;
            userId?: string;
            userLastName?: string;
        };
        /** ClientActionRequiredRequest */
        ClientActionRequiredRequest: {
            /** @enum {string} */
            caseActionItem?: ClientActionRequiredRequestCaseActionItem;
            caseId?: string;
            includeDeclineReason?: boolean;
        };
        /** ClientConfirmedUnpaidCase */
        ClientConfirmedUnpaidCase: {
            /** Format: int32 */
            amountDisputed?: number;
            /** Format: int32 */
            amountDueLater?: number;
            /** Format: int32 */
            amountOverdue?: number;
            /** Format: int32 */
            amountPaid?: number;
            /** Format: date-time */
            bookingConfirmedDateUtc?: string;
            caseId?: string;
            /** Format: int32 */
            caseSubtotal?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int64 */
            userId?: number;
            userName?: string;
        };
        /** ClientLeadDomain */
        ClientLeadDomain: {
            email?: string;
            firstName?: string;
            lastBookingDateUtc?: components["schemas"]["TimestampRes"];
            lastName?: string;
            phoneNumbers?: components["schemas"]["PhoneNumberDomain"][];
            tickets?: components["schemas"]["TicketLeadDomain"][];
            /** Format: int64 */
            userId?: number;
        };
        /** CoachingCardCategoriesModel */
        CoachingCardCategoriesModel: {
            coachingCardCategory?: string;
            /** Format: int64 */
            coachingCardCategoryId?: number;
            description?: string;
            subcategories?: components["schemas"]["CoachingCardSubcategoriesModel"][];
        };
        /** CoachingCardSubcategoriesModel */
        CoachingCardSubcategoriesModel: {
            coachingCardSubcategory?: string;
            /** Format: int64 */
            coachingCardSubcategoryId?: number;
            description?: string;
        };
        /** CoachingCardUsersModel */
        CoachingCardUsersModel: {
            /** Format: date-time */
            acknowledgementDateUtc?: string;
            /** Format: date-time */
            assignmentDateUtc?: string;
            /** Format: date-time */
            coachingDateUtc?: string;
            coachingMethod?: string;
            hasBeenCoached?: boolean;
            isActionRequired?: boolean;
            isRepeatOffense?: boolean;
            /** @enum {string} */
            permissionType?: CoachingCardUsersModelPermissionType;
            recipientNote?: string;
            /** Format: date-time */
            resolutionDateUtc?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** CoachingCardsModel */
        CoachingCardsModel: {
            /** Format: date-time */
            cardCreatedDate?: string;
            /** Format: date-time */
            cardLastUpdatedDate?: string;
            /** Format: int64 */
            coachingCardCategoryId?: number;
            /** Format: int64 */
            coachingCardId?: number;
            /** Format: int64 */
            coachingCardSubcategoryId?: number;
            /** @enum {string} */
            coachingCardType?: PathsApiV1CoachingCardsUserIdCardsGetParametersQueryCoachingCardType;
            coachingCardUsers?: components["schemas"]["CoachingCardUsersModel"][];
            coachingLinks?: components["schemas"]["CoachingLinks"];
            coachingText?: string;
        };
        /** CoachingLinks */
        CoachingLinks: {
            links?: string[];
        };
        /** CommonHeader */
        CommonHeader: {
            from?: string[];
            messageId?: string;
            returnPath?: string;
            subject?: string;
            to?: string[];
        };
        /** ConfidenceField */
        ConfidenceField: {
            /** Format: int32 */
            confidence?: number;
            value?: string;
        };
        /** Contact */
        Contact: {
            external_id?: string;
            id?: string;
            type?: string;
        };
        /** ContactList */
        ContactList: {
            contacts?: components["schemas"]["Contact"][];
            type?: string;
        };
        /** ContactTimelineResponse */
        ContactTimelineResponse: {
            call?: components["schemas"]["CallContact"];
            /** Format: date-time */
            creationDate?: string;
            ticket?: components["schemas"]["FreshDeskTicket"];
        };
        /** ConvertPdfToImageModel */
        ConvertPdfToImageModel: {
            content?: string;
            fileName?: string;
            /** @enum {string} */
            type?: CaseMessageDomainMediaType;
        };
        /** ConvertPdfToImageRequest */
        ConvertPdfToImageRequest: {
            firstPageOnly?: boolean;
            itemsToConvert?: components["schemas"]["ConvertPdfToImageModel"][];
            /** Format: int32 */
            outputDpi?: number;
        };
        /** ConvertPdfToImageResponse */
        ConvertPdfToImageResponse: {
            /** Format: int32 */
            errorCode?: number;
            errorMessage?: string;
            isSuccess?: boolean;
            mediaItems?: components["schemas"]["MediaItemModel"][];
        };
        /** CounterOption */
        CounterOption: {
            /** @enum {string} */
            counterOptionType?: CaseCounterOptionModelType;
            value?: string;
        };
        /** CountryDomain */
        CountryDomain: {
            countryCode?: string;
            countryName?: string;
        };
        /** CountryRegion */
        CountryRegion: {
            countryCode?: string;
            regionCode?: string;
            regionName?: string;
            regionType?: string;
            timezone?: string;
        };
        /** CountyDomain */
        CountyDomain: {
            /** Format: int64 */
            countyId?: number;
            countyName?: string;
            /** @enum {string} */
            stateCode?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
        };
        /** CountyEntity */
        CountyEntity: {
            /** Format: int64 */
            countyId?: number;
            countyName?: string;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
        };
        /** CourtCoverageCountyRecord */
        CourtCoverageCountyRecord: {
            /** Format: int64 */
            countyId?: number;
            countyName?: string;
            /** Format: int32 */
            numActiveLawfirms?: number;
            /** Format: int32 */
            numCourts?: number;
            /** Format: int32 */
            numCourtsWithCoverage?: number;
            /** Format: int32 */
            numCourtsWithoutCoverage?: number;
            /** Format: int32 */
            numUnserviceableRequests?: number;
            /** Format: double */
            percentCourtCoverage?: number;
            regionCode?: string;
        };
        /** CourtCoverageRecord */
        CourtCoverageRecord: {
            /** Format: int64 */
            countyId?: number;
            countyName?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            isVacationMode?: boolean;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            lawfirmPriority?: number;
            /** Format: int32 */
            lawyerFee?: number;
            /** Format: int32 */
            otrTargetFee?: number;
            regionCode?: string;
            /** Format: int32 */
            unserviceableRequests?: number;
        };
        /** CourtCoverageStateRecord */
        CourtCoverageStateRecord: {
            /** Format: int32 */
            numActiveLawfirms?: number;
            /** Format: int32 */
            numCounties?: number;
            /** Format: int32 */
            numCourts?: number;
            /** Format: int32 */
            numCourtsWithCoverage?: number;
            /** Format: int32 */
            numCourtsWithoutCoverage?: number;
            /** Format: int32 */
            numUnserviceableRequests?: number;
            /** Format: double */
            percentCourtCoverage?: number;
            regionCode?: string;
        };
        /** CourtDomain */
        CourtDomain: {
            address?: components["schemas"]["AddressDomain"];
            county?: string;
            /** Format: int64 */
            countyId?: number;
            countyObj?: components["schemas"]["CountyDomain"];
            courtCode?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            courtNameAdditional?: string;
            /** @enum {string} */
            courtType?: AddInnerCourtCourtType;
            lookupCaseInfoLink?: string;
            /** Format: int32 */
            otrTargetFee?: number;
            timeZone?: components["schemas"]["TimeZone"];
            /** Format: int32 */
            unserviceableRequests?: number;
            website?: string;
        };
        /** CourtDomainReq */
        CourtDomainReq: {
            address?: components["schemas"]["AddressDomainReq"];
            county?: string;
            /** Format: int64 */
            countyId?: number;
            countyObj?: components["schemas"]["CountyDomain"];
            courtCode?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            courtNameAdditional?: string;
            /** @enum {string} */
            courtType?: AddInnerCourtCourtType;
            lookupCaseInfoLink?: string;
            /** Format: int32 */
            otrTargetFee?: number;
            timeZone?: components["schemas"]["TimeZoneReq"];
            /** Format: int32 */
            unserviceableRequests?: number;
            website?: string;
        };
        /** CourtDomainRes */
        CourtDomainRes: {
            address?: components["schemas"]["AddressDomainRes"];
            county?: string;
            /** Format: int64 */
            countyId?: number;
            countyObj?: components["schemas"]["CountyDomain"];
            courtCode?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            courtNameAdditional?: string;
            /** @enum {string} */
            courtType?: AddInnerCourtCourtType;
            lookupCaseInfoLink?: string;
            /** Format: int32 */
            otrTargetFee?: number;
            timeZone?: components["schemas"]["TimeZoneRes"];
            /** Format: int32 */
            unserviceableRequests?: number;
            website?: string;
        };
        /** CourtEntity */
        CourtEntity: {
            address?: components["schemas"]["AddressEntity"];
            county?: components["schemas"]["CountyEntity"];
            courtCode?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            courtNameAdditional?: string;
            /** @enum {string} */
            courtType?: AddInnerCourtCourtType;
            lookupCaseInfoLink?: string;
            /** Format: int32 */
            otrTargetFee?: number;
            /** Format: double */
            similarityScore?: number;
            website?: string;
        };
        /** CourtInputRequest */
        CourtInputRequest: {
            /** Format: int64 */
            courtId?: number;
        };
        /** CourtName */
        CourtName: {
            llm_prediction?: string;
            pinecone_ids?: number[];
            pinecone_match?: string[];
            pinecone_matches?: string[];
            pinecone_scores?: number[];
        };
        /** CourtResponseModel */
        CourtResponseModel: {
            address?: components["schemas"]["AddressDomainRes"];
            countyObj?: components["schemas"]["CountyDomain"];
            courtCode?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            courtNameAdditional?: string;
            /** @enum {string} */
            courtType?: AddInnerCourtCourtType;
            lookupCaseInfoLink?: string;
            /** Format: int32 */
            otrTargetFee?: number;
            website?: string;
        };
        /** CoverageToRemove */
        CoverageToRemove: {
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            /** Format: int64 */
            courtId?: number;
            regionCode?: string;
            /** Format: int64 */
            violationId?: number;
        };
        /** CreateBillingSubscriptionItemModel */
        CreateBillingSubscriptionItemModel: {
            /** Format: int64 */
            amount?: number;
            /** @enum {string} */
            billingScheme?: BillingPriceModelBillingScheme;
            id?: string;
            /** @enum {string} */
            interval?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
            /** Format: int64 */
            intervalCount?: number;
            priceDescription?: string;
            productId?: string;
            /** Format: int64 */
            quantity?: number;
            /** @enum {string} */
            tiersMode?: BillingSubscriptionItemModelTiersMode;
            /** @enum {string} */
            usageType?: BillingSubscriptionItemModelUsageType;
        };
        /** CreateBillingSubscriptionRequest */
        CreateBillingSubscriptionRequest: {
            accountIdempotencyKey?: string;
            cardId?: string;
            guardian?: components["schemas"]["SubscriptionGuardianModel"];
            priceIds?: string[];
            productId?: string;
            /** Format: date */
            trialEndDate?: string;
        };
        /** CreateBillingSubscriptionResponse */
        CreateBillingSubscriptionResponse: {
            items?: components["schemas"]["CreateBillingSubscriptionItemModel"][];
            /** Format: date-time */
            startAt?: string;
            /** @enum {string} */
            status?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
            subscriptionId?: string;
        };
        /** CreateBranchLinkRequest */
        CreateBranchLinkRequest: {
            afterClickUrl?: string;
            campaign?: string;
            channel?: string;
            data?: {
                [key: string]: string;
            };
            feature?: string;
            linkAlias?: string;
            stage?: string;
            tags?: string[];
            /** Format: int32 */
            type?: number;
        };
        /** CreateCitationRequest */
        CreateCitationRequest: {
            /** @enum {string} */
            citationState?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            emailAddress?: string;
            firstName?: string;
            imageContentType?: string;
            rawImageData?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** CreateCitationResponse */
        CreateCitationResponse: {
            citation?: components["schemas"]["CitationModel"];
        };
        /** CreateConnectAccountLinkRequest */
        CreateConnectAccountLinkRequest: {
            /** Format: int64 */
            lawfirmId?: number;
            linkType?: string;
            stripeAccountId?: string;
        };
        /** CreateConnectAccountLinkResponse */
        CreateConnectAccountLinkResponse: {
            accountLink?: components["schemas"]["StripeAccountLinkDomain"];
        };
        /** CreateLawfirmModel */
        CreateLawfirmModel: {
            aboutUsBlurb?: string;
            /** Format: int32 */
            caseAssignmentPriority?: number;
            coverPhotoUrl?: string;
            /** Format: int64 */
            createdBy?: number;
            /** Format: date-time */
            establishedDateUtc?: string;
            /** Format: int32 */
            establishedYear?: number;
            isTestLawfirm?: boolean;
            lawfirmName?: string;
            /** @enum {string} */
            lawfirmPaymentModel?: CreateLawfirmModelLawfirmPaymentModel;
            /** @enum {string} */
            lawfirmState?: PathsApiV1LawfirmsGetParametersQueryStatuses;
            /** Format: date-time */
            membershipStartDateUtc?: string;
            otrNotes?: string;
            primaryEmailAddress?: string;
            primaryPhoneNumber?: string;
            profilePictureUrl?: string;
            tagLine?: string;
            website?: string;
        };
        /** CreateNewLawfirmRequest */
        CreateNewLawfirmRequest: {
            /** Format: int32 */
            defaultTrafficFeeInCents?: number;
            lawfirm?: components["schemas"]["CreateLawfirmModel"];
            /** Format: int32 */
            priority?: number;
            /** Format: int32 */
            referralRate?: number;
            supportedRegions?: components["schemas"]["CountryRegion"][];
        };
        /** CreateNoteInput */
        CreateNoteInput: {
            note?: string;
            /** @enum {string} */
            noteType: PathsApiV2NotesSearchGetParametersQueryNoteType;
            referenceId?: string;
        };
        /** CreateNoteRequest */
        CreateNoteRequest: {
            note: components["schemas"]["CreateNoteInput"];
        };
        /** CreateNoteResponse */
        CreateNoteResponse: {
            note?: components["schemas"]["NoteModel"];
        };
        /** CreateReferralCodeRequest */
        CreateReferralCodeRequest: {
            discountOwnerOTR?: boolean;
            /** Format: date-time */
            endDate?: string;
            /** @enum {string} */
            refereeCreditType?: CreateReferralCodeRequestRefereeCreditType;
            /** Format: bigdecimal */
            refereeCreditValue?: number;
            referralCodeOverride?: string;
            /** Format: int32 */
            referralCountLimit?: number;
            /** @enum {string} */
            referrerCreditType?: CreateReferralCodeRequestRefereeCreditType;
            /** Format: bigdecimal */
            referrerCreditValue?: number;
            /** Format: int64 */
            referrerUserId?: number;
            /** Format: date-time */
            startDate?: string;
        };
        /** CreateReferralCodeResponse */
        CreateReferralCodeResponse: {
            referralCode?: string;
        };
        /** CreateReferralSourceForCitation */
        CreateReferralSourceForCitation: {
            referralSourceData?: Record<string, never>;
        };
        /** CreateStripeConnectAccountRequest */
        CreateStripeConnectAccountRequest: {
            /** @enum {string} */
            accountType?: CreateStripeConnectAccountRequestAccountType;
            /** Format: int64 */
            lawfirmId?: number;
        };
        /** CreateStripeConnectAccountResponse */
        CreateStripeConnectAccountResponse: {
            account?: components["schemas"]["StripeConnectedAccountDomain"];
            accountLink?: components["schemas"]["StripeAccountLinkDomain"];
        };
        /** Cursor */
        Cursor: {
            nextPageToken?: string;
            previousPageToken?: string;
        };
        /** CursorModel */
        CursorModel: {
            nextPageToken?: string;
            previousPageToken?: string;
        };
        /** CustomerLead */
        CustomerLead: {
            caseDescription?: string;
            /** @enum {string} */
            channel?: CustomerLeadChannel;
            emailAddress: string;
            /** Format: int32 */
            fineInCents?: number;
            firstName: string;
            hasCourtDate?: boolean;
            lastName: string;
            licenseType?: string;
            phoneNumber?: string;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            violation?: string;
            zipCode?: string;
        };
        /** CustomerOverduePayment */
        CustomerOverduePayment: {
            /** Format: date-time */
            bookingConfirmedDate?: string;
            caseId?: string;
            casePaymentId?: string;
            city?: string;
            /** Format: date-time */
            dueDate?: string;
            hasFinancialAccess?: boolean;
            /** Format: int64 */
            overdueAmount?: number;
            regionCode?: string;
        };
        /** CustomerPaymentDto */
        CustomerPaymentDto: {
            /** Format: int32 */
            amountDueInCents?: number;
            casePaymentId?: string;
            /** Format: date-time */
            dueDateUtc?: string;
            hasFinancialAccess?: boolean;
            overdue?: boolean;
        };
        /** CustomerReview */
        CustomerReview: {
            comments?: components["schemas"]["ReviewCommentModel"][];
            copy?: string;
            courtName?: string;
            displayName?: string;
            featured?: boolean;
            /** Format: int64 */
            id?: number;
            live?: boolean;
            /** @enum {string} */
            loggedInUserVote?: CustomerReviewLoggedInUserVote;
            /** @enum {string} */
            nameSetting?: CustomerReviewNameSetting;
            profilePictureSignedUrl?: string;
            profilePictureUrl?: string;
            ratingModel?: components["schemas"]["ReviewRatingModel"];
            recommendationType?: string;
            resolutionName?: string;
            reviewDateUtc?: components["schemas"]["Timestamp"];
            /** @enum {string} */
            source?: AddReviewRequestSource;
            starRating?: string;
            stateAbbreviation?: string;
            tagLine?: string;
            ticketLocation?: string;
            voteModel?: components["schemas"]["ReviewVoteAggregateModel"];
        };
        /** CustomerServiceAgentBookingDomain */
        CustomerServiceAgentBookingDomain: {
            /** Format: int64 */
            agentBookingId?: number;
            bookingReference?: string;
            channel?: string;
            direction?: string;
            /** Format: int64 */
            requesterId?: number;
            theCase?: components["schemas"]["Case"];
            user?: components["schemas"]["User"];
        };
        /** CustomerServiceAgentDomain */
        CustomerServiceAgentDomain: {
            firstName?: string;
            /** Format: int64 */
            freshcallerAgentId?: number;
            /** Format: int64 */
            freshdeskAgentId?: number;
            freshdeskApiToken?: string;
            isActive?: boolean;
            lastName?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** DashboardAddressModel */
        DashboardAddressModel: {
            addressLine1?: string;
            addressLine2?: string;
            city?: string;
            postalCode?: string;
            regionCode?: string;
        };
        /** DashboardAuthorModel */
        DashboardAuthorModel: {
            authorFirstName?: string;
            authorLastName?: string;
            profilePictureUrl?: string;
        };
        /** DashboardCaseCounterOfferModel */
        DashboardCaseCounterOfferModel: {
            /** Format: int32 */
            counterOfferAmountInCents?: number;
            /** @enum {string} */
            counterOfferStatus?: DashboardCaseCounterOfferModelCounterOfferStatus;
        };
        /** DashboardCaseCountsDto */
        DashboardCaseCountsDto: {
            /** Format: int32 */
            active?: number;
            /** Format: int32 */
            canceled?: number;
            /** Format: int32 */
            resolved?: number;
            /** Format: int32 */
            unconfirmed?: number;
        };
        /** DashboardCaseModel */
        DashboardCaseModel: {
            authorModel?: components["schemas"]["DashboardAuthorModel"];
            /** Format: date-time */
            bookingConfirmedDate?: string;
            caseCounterOffer?: components["schemas"]["DashboardCaseCounterOfferModel"];
            caseId?: string;
            caseUserDetails?: components["schemas"]["CaseUserDetailsModel"];
            citation?: components["schemas"]["DashboardCitationModel"];
            court?: components["schemas"]["DashboardCourtModel"];
            /** Format: date-time */
            courtDate?: string;
            disputeModel?: components["schemas"]["DashboardDisputeModel"];
            engagementLetter?: components["schemas"]["EngagementLetterModel"];
            hasLeftLawyerReview?: boolean;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmProfilePictureUrl?: string;
            /** Format: float */
            lawfirmRating?: number;
            /** Format: double */
            lawyerRating?: number;
            /** Format: int32 */
            legalFeeInCents?: number;
            /** Format: date-time */
            matchExpirationDateUtc?: string;
            messageBody?: string;
            overduePayment?: components["schemas"]["OverduePaymentModel"];
            status?: components["schemas"]["DashboardStatusModel"];
            /** Format: int64 */
            userId?: number;
            violations?: components["schemas"]["ViolationModel0"][];
        };
        /** DashboardCaseUserModel */
        DashboardCaseUserModel: {
            emailAddress?: string;
            firstName?: string;
            fullName?: string;
            lastName?: string;
            profileImageUrl?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** DashboardCitationModel */
        DashboardCitationModel: {
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            /** Format: date-time */
            creationDateUtc?: string;
            dismissedFromContactList?: boolean;
            isDeleted?: boolean;
            /** Format: date-time */
            lastUpdatedDateUtc?: string;
            regionCode?: string;
            signedTicketImageUrl?: string;
            ticketImageUrl?: string;
            /** Format: int64 */
            violationCount?: number;
        };
        /** DashboardCourtModel */
        DashboardCourtModel: {
            address?: components["schemas"]["DashboardAddressModel"];
            courtName?: string;
        };
        /** DashboardDisputeModel */
        DashboardDisputeModel: {
            /** Format: int64 */
            amountDisputedInCents?: number;
            disputeReason?: string;
            hasDispute?: boolean;
        };
        /** DashboardStatusModel */
        DashboardStatusModel: {
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            clientFriendlyDescription?: string;
            clientFriendlyName?: string;
            /** @enum {string} */
            statusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
        };
        /** DeclineCaseCounterRequest */
        DeclineCaseCounterRequest: {
            noteToClient?: string;
            noteToOtr?: string;
        };
        /** DeclineCategory */
        DeclineCategory: {
            /** Format: int64 */
            declineCategoryId?: number;
            declineCategoryName?: string;
            uiFriendlyName?: string;
        };
        /** DeclineReason */
        DeclineReason: {
            /** Format: int64 */
            declineReasonId?: number;
            declineReasonName?: string;
            uiFriendlyDescription?: string;
        };
        /** DefaultClassModel */
        DefaultClassModel: {
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            regionCode?: string;
        };
        /** DefendantDetailsModel */
        DefendantDetailsModel: {
            additionalNote?: string;
            /** Format: int32 */
            caseUsersId?: number;
            emailAddress?: string;
            firstName?: string;
            hasFinancialAccess?: boolean;
            lastName?: string;
            ownerRelationshipToClientNote?: string;
            /** @enum {string} */
            ownerRelationshipToClientType?: CaseUserDetailsModelRelationshipToClientType;
            /** Format: int64 */
            userId?: number;
        };
        /** DeleteCitationResponse */
        DeleteCitationResponse: {
            citation?: components["schemas"]["CitationModel"];
        };
        /** DeleteLawyerLicenseRequest */
        DeleteLawyerLicenseRequest: {
            licenseIds?: number[];
        };
        /** DeleteNotificationByPagesRequest */
        DeleteNotificationByPagesRequest: {
            pageTypes?: DeleteNotificationByPagesRequestPageTypes[];
        };
        /** DeleteNotificationEventRequest */
        DeleteNotificationEventRequest: {
            /** Format: int32 */
            notificationId?: number;
            /** @enum {string} */
            pageType?: DeleteNotificationByPagesRequestPageTypes;
        };
        /** DirectMailContact */
        DirectMailContact: {
            backTemplateUrlSent?: string;
            /** Format: int32 */
            costInCents?: number;
            /** Format: date-time */
            estimatedDeliveryDate?: string;
            frontTemplateUrlSent?: string;
            lobReferenceId?: string;
            mailDimensions?: string;
            mailTemplateName?: string;
            /** @enum {string} */
            mailType?: DirectMailContactMailType;
            /** Format: date-time */
            processedForDeliveryDate?: string;
            /** @enum {string} */
            trackingStatus?: DirectMailContactTrackingStatus;
        };
        /** DirectMailContactResponse */
        DirectMailContactResponse: {
            sentMail?: components["schemas"]["DirectMailContact"][];
        };
        /** DirectMailGetRequest */
        DirectMailGetRequest: {
            toAddress?: components["schemas"]["AddressDomain"];
            userId?: string;
        };
        /** DirectMailSendRequest */
        DirectMailSendRequest: {
            mailTemplateType?: string;
            reconcileId?: string;
            /** @enum {string} */
            reconcileType?: DirectMailSendRequestReconcileType;
            toAddress?: components["schemas"]["AddressDomain"];
        };
        /** DirectMailTemplate */
        DirectMailTemplate: {
            mailDimensions?: string;
            mailTemplateBackUrl?: string;
            mailTemplateFrontUrl?: string;
            /** Format: int64 */
            mailTemplateId?: number;
            mailTemplateName?: string;
            /** @enum {string} */
            mailType?: DirectMailContactMailType;
        };
        /** DirectMailTemplateResponse */
        DirectMailTemplateResponse: {
            templates?: components["schemas"]["DirectMailTemplate"][];
        };
        /** DirectMailTemplateToAdd */
        DirectMailTemplateToAdd: {
            fileNamePrefix?: string;
            mailDimensions?: string;
            /** @enum {string} */
            mailType?: DirectMailContactMailType;
            templateBackHtml?: string;
            templateFrontHtml?: string;
            templateName?: string;
        };
        /** DismissCitationsFromContactListRequest */
        DismissCitationsFromContactListRequest: {
            citationIdList?: number[];
        };
        /** DismissPhoneLeadRequest */
        DismissPhoneLeadRequest: {
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            referenceIdList?: string[];
        };
        /** DocumentDecisionRequest */
        DocumentDecisionRequest: {
            acknowledged?: boolean;
            caseId?: string;
        };
        /** DripRemoveRequest */
        DripRemoveRequest: {
            dripAccountId?: string;
            /** @enum {string} */
            dripAction?: DripRemoveRequestDripAction;
            emailAddress?: string;
            ticketIssueId?: string;
        };
        /** DripWebhookData */
        DripWebhookData: {
            account_id?: string;
            properties?: {
                [key: string]: string;
            };
            subscriber?: components["schemas"]["Subscriber"];
        };
        /** DripWebhookEvent */
        DripWebhookEvent: {
            data?: components["schemas"]["DripWebhookData"];
            event?: string;
            /** Format: date-time */
            occurred_at?: string;
        };
        /** DriverLicenseModel */
        DriverLicenseModel: {
            address?: components["schemas"]["AddressDomain"];
            deleted?: boolean;
            /** Format: date-time */
            dob?: string;
            documentDiscriminatorId?: string;
            driverLicenseBackAsset?: components["schemas"]["UserAssetModel"];
            driverLicenseFrontAsset?: components["schemas"]["UserAssetModel"];
            /** Format: int64 */
            driverLicenseId?: number;
            driverLicenseNumber?: string;
            /** Format: date-time */
            expirationDate?: string;
            eyeColor?: string;
            firstName?: string;
            height?: string;
            isOrganDonor?: boolean;
            /** Format: date-time */
            issueDate?: string;
            lastName?: string;
            licenseClass?: string;
            licenseClassEndorsements?: string;
            licenseRestrictions?: string;
            sex?: string;
            stateName?: string;
            /** Format: int64 */
            userId?: number;
            weight?: string;
        };
        /** Duration */
        Duration: {
            /** Format: int32 */
            nano?: number;
            negative?: boolean;
            /** Format: int64 */
            seconds?: number;
            units?: components["schemas"]["TemporalUnit"][];
            zero?: boolean;
        };
        /** EditConversationMessageRequest */
        EditConversationMessageRequest: {
            messageBody?: string;
        };
        /** EditCustomerReviewRequest */
        EditCustomerReviewRequest: {
            copy?: string;
            isRecommended?: boolean;
            /** @enum {string} */
            privacyMode?: ActivityFeedModelPrivacyMode;
            ratingModel?: components["schemas"]["ReviewRatingModel"];
        };
        /** EnableViolationModel */
        EnableViolationModel: {
            regionCode?: string;
            /** @enum {string} */
            violationClass?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            /** Format: int64 */
            violationId?: number;
        };
        /** EnableViolationResponseModel */
        EnableViolationResponseModel: {
            /** Format: int64 */
            courtId?: number;
        };
        /** EnableViolationsForLawfirmRequest */
        EnableViolationsForLawfirmRequest: {
            models?: components["schemas"]["EnableViolationModel"][];
        };
        /** EnableViolationsForLawfirmResponse */
        EnableViolationsForLawfirmResponse: {
            models?: components["schemas"]["EnableViolationResponseModel"][];
        };
        /** EngagementLetterModel */
        EngagementLetterModel: {
            acknowledged?: boolean;
            /** Format: int64 */
            docId?: number;
            engagementLetterUrl?: string;
        };
        /** EstimateInsuranceSavingsRequest */
        EstimateInsuranceSavingsRequest: {
            /** Format: int32 */
            monthlyInsurancePremiumInCents?: number;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            /** Format: int32 */
            ticketFineInCents?: number;
            /** Format: int64 */
            trafficViolationTypeId?: number;
        };
        /** EstimateInsuranceSavingsResponse */
        EstimateInsuranceSavingsResponse: {
            /** Format: int32 */
            monthlyExtraInsuranceCostInCents?: number;
            /** Format: int32 */
            totalCostOfTicketInCents?: number;
            /** Format: int32 */
            totalExtraInsuranceCostInCents?: number;
        };
        /** ExistingAccountDetails */
        ExistingAccountDetails: {
            firstName?: string;
            ghostAccount?: boolean;
            hasActiveCase?: boolean;
            isPhoneVerified?: boolean;
            lastName?: string;
            merged?: boolean;
            obfuscatedEmailAddress?: string;
            phoneNumber?: string;
            profilePictureUrl?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** ExternalContentVote */
        ExternalContentVote: {
            /** @enum {string} */
            voteType?: ExternalContentVoteVoteType;
        };
        /** ExternalTicketCourt */
        ExternalTicketCourt: {
            address?: string;
            formattedPhoneNumber?: string;
            name?: string;
            unformattedPhoneNumber?: string;
        };
        /** FeedbackAttachmentModel */
        FeedbackAttachmentModel: {
            base64data?: string;
            contentType?: string;
        };
        /** FeedbackDomain */
        FeedbackDomain: {
            appVersion?: string;
            attachments?: components["schemas"]["FeedbackAttachmentModel"][];
            body?: string;
            /** Format: int64 */
            citationId?: number;
            device?: string;
            /** @enum {string} */
            feedbackType?: FeedbackDomainFeedbackType;
            phoneNumber?: string;
            subject?: string;
        };
        /** FinancialTransaction */
        FinancialTransaction: {
            /** Format: int32 */
            amount?: number;
            caseId?: string;
            isOverdue?: boolean;
            lawfirmReferenceId?: string;
            /** Format: int32 */
            otrAmount?: number;
            runAtDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int32 */
            stripeAmount?: number;
            /** @enum {string} */
            taskStatus?: FinancialTransactionTaskStatus;
            transactionDateUtc?: components["schemas"]["TimestampRes"];
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReferenceId?: string;
            /** @enum {string} */
            transactionType?: FinancialTransactionTransactionType;
            userFirstName?: string;
            userLastName?: string;
        };
        /** FindChargeDisputesResponse */
        FindChargeDisputesResponse: {
            disputes?: components["schemas"]["StripeDisputeDomain"][];
        };
        /** FindCourtsWithNoCoverageResponse */
        FindCourtsWithNoCoverageResponse: {
            courtsWithNoCoverage?: components["schemas"]["CourtDomainRes"][];
            /** Format: int32 */
            numRecords?: number;
        };
        /** FindDisputesRequest */
        FindDisputesRequest: {
            disputeStatus?: string;
            /** Format: int32 */
            maxResults?: number;
        };
        /** FindMatchingUser */
        FindMatchingUser: {
            bookings?: components["schemas"]["UserBookingsDomain"];
            creationDateUtc?: components["schemas"]["Timestamp"];
            emailAddress?: string;
            firstname?: string;
            /** Format: date-time */
            ghostAccountCreationDateUtc?: string;
            isEmailConfirmed?: boolean;
            isEnabled?: boolean;
            isTestUser?: boolean;
            lastname?: string;
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            profilePictureUrl?: string;
            roles?: components["schemas"]["UserRoleDomain"][];
            unsubscribed?: boolean;
            /** Format: int64 */
            userId?: number;
            /** Format: date-time */
            userRegistrationDateUtc?: string;
        };
        /** FindMatchingUsersRequest */
        FindMatchingUsersRequest: {
            emailAddress?: string;
            firstName?: string;
            isTestUser?: boolean;
            lastName?: string;
            phoneNumber?: string;
        };
        /** FindMatchingUsersResponse */
        FindMatchingUsersResponse: {
            users?: components["schemas"]["FindMatchingUser"][];
        };
        /** FindsCourtsResponse */
        FindsCourtsResponse: {
            courts?: components["schemas"]["GetCourtsInnerResponse"][];
            /** Format: int32 */
            numRecords?: number;
        };
        /** FineInformation */
        FineInformation: {
            currentDueTotal?: string;
            dateToPay?: string;
            fineDescription?: string;
            fineNumber?: string;
            fineType?: string;
            firstPayment?: string;
            lastPayment?: string;
            originalAmount?: string;
            paidToDate?: string;
            paymentAmount?: string;
            priorNSF?: string;
        };
        /** FirstContactReply */
        FirstContactReply: {
            /** Format: int32 */
            createdAt?: number;
            type?: string;
            url?: string;
        };
        /** ForwardMessageRequest */
        ForwardMessageRequest: {
            countyName?: string;
            structuredText?: components["schemas"]["GptFunctionModel"][];
        };
        /** FreshDeskConversation */
        FreshDeskConversation: {
            /** Format: date-time */
            created_at?: string;
            from_email?: string;
            incoming?: boolean;
            private?: boolean;
            /** Format: int64 */
            ticket_id?: number;
            /** Format: int64 */
            user_id?: number;
        };
        /** FreshDeskRequester */
        FreshDeskRequester: {
            email?: string;
            name?: string;
        };
        /** FreshDeskTicket */
        FreshDeskTicket: {
            attachments?: components["schemas"]["FreshdeskAttachment"][];
            cc_emails?: string[];
            conversation?: components["schemas"]["FreshDeskConversation"][];
            /** Format: date-time */
            created_at?: string;
            custom_fields?: {
                [key: string]: string;
            };
            deleted?: boolean;
            description?: string;
            description_text?: string;
            /** Format: date-time */
            due_by?: string;
            email?: string;
            /** Format: date-time */
            fr_due_by?: string;
            fr_escalated?: boolean;
            fwd_emails?: string[];
            /** Format: int64 */
            group_id?: number;
            /** Format: int64 */
            id?: number;
            is_escalated?: boolean;
            name?: string;
            phone?: string;
            /** Format: int32 */
            priority?: number;
            /** @enum {string} */
            priorityType?: FreshDeskTicketPriorityType;
            /** Format: int64 */
            product_id?: number;
            reply_cc_emails?: string[];
            requester?: components["schemas"]["FreshDeskRequester"];
            requesterAgentName?: string;
            /** Format: int64 */
            requester_id?: number;
            responderAgentName?: string;
            /** Format: int64 */
            responder_id?: number;
            /** Format: int32 */
            source?: number;
            spam?: boolean;
            /** Format: int32 */
            status?: number;
            /** @enum {string} */
            statusType?: FreshDeskTicketStatusType;
            subject?: string;
            tags?: string[];
            to_emails?: string[];
            type?: string;
            unique_external_id?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** FreshDeskTicketReq */
        FreshDeskTicketReq: {
            attachments?: components["schemas"]["FreshdeskAttachmentReq"][];
            cc_emails?: string[];
            conversation?: components["schemas"]["FreshDeskConversation"][];
            /** Format: date-time */
            created_at?: string;
            custom_fields?: {
                [key: string]: string;
            };
            deleted?: boolean;
            description?: string;
            description_text?: string;
            /** Format: date-time */
            due_by?: string;
            email?: string;
            /** Format: date-time */
            fr_due_by?: string;
            fr_escalated?: boolean;
            fwd_emails?: string[];
            /** Format: int64 */
            group_id?: number;
            /** Format: int64 */
            id?: number;
            incoming?: boolean;
            is_escalated?: boolean;
            name?: string;
            phone?: string;
            /** Format: int32 */
            priority?: number;
            /** @enum {string} */
            priorityType?: FreshDeskTicketPriorityType;
            /** Format: int64 */
            product_id?: number;
            reply_cc_emails?: string[];
            requester?: components["schemas"]["FreshDeskRequester"];
            requesterAgentName?: string;
            /** Format: int64 */
            requester_id?: number;
            responderAgentName?: string;
            /** Format: int64 */
            responder_id?: number;
            /** Format: int32 */
            source?: number;
            spam?: boolean;
            /** Format: int32 */
            status?: number;
            /** @enum {string} */
            statusType?: FreshDeskTicketStatusType;
            subject?: string;
            tags?: string[];
            to_emails?: string[];
            type?: string;
            unique_external_id?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** FreshDeskTicketRes */
        FreshDeskTicketRes: {
            attachments?: components["schemas"]["FreshdeskAttachmentRes"][];
            cc_emails?: string[];
            conversation?: components["schemas"]["FreshDeskConversation"][];
            /** Format: date-time */
            created_at?: string;
            custom_fields?: {
                [key: string]: string;
            };
            deleted?: boolean;
            description?: string;
            description_text?: string;
            /** Format: date-time */
            due_by?: string;
            email?: string;
            /** Format: date-time */
            fr_due_by?: string;
            fr_escalated?: boolean;
            fwd_emails?: string[];
            /** Format: int64 */
            group_id?: number;
            /** Format: int64 */
            id?: number;
            is_escalated?: boolean;
            name?: string;
            phone?: string;
            /** Format: int32 */
            priority?: number;
            /** @enum {string} */
            priorityType?: FreshDeskTicketPriorityType;
            /** Format: int64 */
            product_id?: number;
            reply_cc_emails?: string[];
            requester?: components["schemas"]["FreshDeskRequester"];
            requesterAgentName?: string;
            /** Format: int64 */
            requester_id?: number;
            responderAgentName?: string;
            /** Format: int64 */
            responder_id?: number;
            /** Format: int32 */
            source?: number;
            spam?: boolean;
            /** Format: int32 */
            status?: number;
            /** @enum {string} */
            statusType?: FreshDeskTicketStatusType;
            subject?: string;
            tags?: string[];
            to_emails?: string[];
            type?: string;
            unique_external_id?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** FreshdeskAttachment */
        FreshdeskAttachment: {
            attachment_url?: string;
            content_type?: string;
            created_at?: components["schemas"]["Timestamp"];
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int64 */
            size?: number;
            updated_at?: components["schemas"]["Timestamp"];
        };
        /** FreshdeskAttachmentReq */
        FreshdeskAttachmentReq: {
            attachment_url?: string;
            content_type?: string;
            created_at?: components["schemas"]["TimestampReq"];
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int64 */
            size?: number;
            updated_at?: components["schemas"]["TimestampReq"];
        };
        /** FreshdeskAttachmentRes */
        FreshdeskAttachmentRes: {
            attachment_url?: string;
            content_type?: string;
            created_at?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int64 */
            size?: number;
            updated_at?: components["schemas"]["TimestampRes"];
        };
        /** FreshdeskTicketReferenceDomain */
        FreshdeskTicketReferenceDomain: {
            /** Format: int64 */
            freshdeskTicketId?: number;
            referenceEntityId?: string;
            /** @enum {string} */
            referenceEntityType?: AddNoteToPhoneLeadRequestEntityType;
            /** @enum {string} */
            ticketType?: FreshdeskTicketReferenceDomainTicketType;
        };
        /** FreshdeskWebhookRequest */
        FreshdeskWebhookRequest: {
            agentEmail?: string;
            mobile?: string;
            phone?: string;
            requesterEmail?: string;
            requesterFirstName?: string;
            status?: string;
            subject?: string;
            /** Format: int64 */
            ticketId?: number;
            ticketType?: string;
        };
        /** GenerateCounterOfferCasePaymentsRequest */
        GenerateCounterOfferCasePaymentsRequest: {
            /** @enum {string} */
            paymentPlanType: AcceptCaseCounterRequestPaymentPlanType;
        };
        /** GenerateCounterOfferCasePaymentsResponse */
        GenerateCounterOfferCasePaymentsResponse: {
            authorizedPayments?: components["schemas"]["CasePaymentModel"][];
            /** Format: int32 */
            clientBaseCostInCents?: number;
            /** Format: int32 */
            clientTotalCostInCents?: number;
            /** Format: int32 */
            counterOfferRefundInCents?: number;
            expiredPayments?: components["schemas"]["CasePaymentModel"][];
            futurePayments?: components["schemas"]["CasePaymentModel"][];
            lineItems?: components["schemas"]["LineItemModel"][];
            /** Format: int32 */
            paymentPlanFeeReallocated?: number;
            /** Format: int32 */
            totalRefCodeAdjustmentInCents?: number;
        };
        /** GenerateTemplateRequest */
        GenerateTemplateRequest: {
            caseId?: string;
            /** Format: int64 */
            citationId?: number;
            citationViolation?: string;
            /** @enum {string} */
            emailTemplateId?: GenerateTemplateRequestEmailTemplateId;
            /** Format: int64 */
            recipientUserId?: number;
        };
        /** GenericAdminListRequest */
        GenericAdminListRequest: {
            /** Format: int32 */
            trailingDays?: number;
        };
        /** GeoRatesRequest */
        GeoRatesRequest: {
            /** Format: date-time */
            courtDate?: string;
            courtId?: string;
            isAccidentCitation?: boolean;
            isCDL?: boolean;
            isFTA?: boolean;
            isPaymentPlan?: boolean;
            /** Format: int64 */
            legalServiceId?: number;
            /** Format: int32 */
            violationCount?: number;
            violations?: components["schemas"]["ViolationInputRequest"][];
        };
        /** GetActivityFeedResponse */
        GetActivityFeedResponse: {
            activity?: components["schemas"]["ActivityFeedModel"][];
            cursor?: components["schemas"]["CursorModel"];
        };
        /** GetAddressInnerResponse */
        GetAddressInnerResponse: {
            addressLine1?: string;
            addressLine2?: string;
            city?: string;
            countyName?: string;
            postalCode?: string;
            regionCode?: string;
            timeZoneName?: string;
        };
        /** GetAnonymousTicketUploads */
        GetAnonymousTicketUploads: {
            citations?: components["schemas"]["AnonymousTicketUploadModel"][];
        };
        /** GetAppConfigResponse */
        GetAppConfigResponse: {
            androidAppVersion?: string;
            fieldToBeRemoved?: string;
            iosAppVersion?: string;
        };
        /** GetAppearanceAttorneysResponse */
        GetAppearanceAttorneysResponse: {
            attorneys?: components["schemas"]["AppearanceAttorneyDomain"][];
        };
        /** GetAvailablePaymentPlansResponse */
        GetAvailablePaymentPlansResponse: {
            plans?: components["schemas"]["AvailablePaymentPlan"][];
        };
        /** GetBookingsRequest */
        GetBookingsRequest: {
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            startDate?: string;
            timeZoneId?: string;
        };
        /** GetBookingsResponse */
        GetBookingsResponse: {
            bookings?: components["schemas"]["Booking"][];
            bookingsByLawfirm?: components["schemas"]["LawfirmBookingSummary"][];
            bookingsByStatus?: {
                [key: string]: number;
            };
            cancelations?: components["schemas"]["BookingCancelation"][];
            stats?: components["schemas"]["CaseBookingsStats"];
        };
        /** GetCaseActionResponse */
        GetCaseActionResponse: {
            actions?: components["schemas"]["CaseActionDomain"][];
        };
        /** GetCaseActionTimelineResponse */
        GetCaseActionTimelineResponse: {
            actionsNotTaken?: components["schemas"]["CaseActionDomain"][];
            actionsTaken?: components["schemas"]["CaseActionDomain"][];
        };
        /** GetCaseActionTypesResponse */
        GetCaseActionTypesResponse: {
            caseActionTypes?: components["schemas"]["CaseActionTypeModel"][];
        };
        /** GetCaseCounterOptionsResponse */
        GetCaseCounterOptionsResponse: {
            counterOptions?: components["schemas"]["CaseCounterOption"][];
        };
        /** GetCaseDeclineReasonTypesResponse */
        GetCaseDeclineReasonTypesResponse: {
            caseDeclineReasonTypes?: components["schemas"]["CaseDeclineCategoryReasonsModel"];
        };
        /** GetCaseDocumentResponse */
        GetCaseDocumentResponse: {
            documents?: components["schemas"]["LawfirmCaseDocument"][];
        };
        /** GetCaseFromCitationResponse */
        GetCaseFromCitationResponse: {
            /** Format: int32 */
            chanceOfSuccess?: number;
            /** Format: int32 */
            projectedInsuranceCostInCents?: number;
            theCase?: components["schemas"]["CaseModel"];
        };
        /** GetCaseMessagesResponse */
        GetCaseMessagesResponse: {
            messages?: components["schemas"]["CaseMessageDomain"][];
            /** Format: int32 */
            totalRecords?: number;
        };
        /** GetCaseNotesResponse */
        GetCaseNotesResponse: {
            caseNotes?: components["schemas"]["CaseNotesDomain"];
        };
        /** GetCasePaymentsResponse */
        GetCasePaymentsResponse: {
            payments?: components["schemas"]["CasePaymentDomain"][];
        };
        /** GetCaseResolutionStatusesResponse */
        GetCaseResolutionStatusesResponse: {
            statuses?: components["schemas"]["CaseStatusDomain"][];
        };
        /** GetCaseResponse */
        GetCaseResponse: {
            caseCounter?: components["schemas"]["CaseCounterOfferModel"];
            /** Format: int32 */
            chanceOfSuccess?: number;
            /** Format: int32 */
            projectedInsuranceCostInCents?: number;
            theCase?: components["schemas"]["CaseModel"];
        };
        /** GetCaseUserModel */
        GetCaseUserModel: {
            additionalNote?: string;
            caseId?: string;
            /** Format: date-time */
            creationDateUtc?: string;
            /** Format: date-time */
            dateOfBirth?: string;
            emailAddress?: string;
            firstName?: string;
            isBookingAgent?: boolean;
            isDefendant?: boolean;
            isGhostUser?: boolean;
            isOwner?: boolean;
            isRemoved?: boolean;
            lastName?: string;
            /** Format: date-time */
            lastUpdatedDateUtc?: string;
            licenseNumber?: string;
            licenseState?: string;
            permissionAttributes?: components["schemas"]["CaseUserPermissionAttributes"];
            /** @enum {string} */
            relationshipToClient?: CaseUserDetailsModelRelationshipToClientType;
            signedProfilePictureUrl?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** GetCaseUsersResponse */
        GetCaseUsersResponse: {
            users?: components["schemas"]["GetCaseUserModel"][];
        };
        /** GetCasesWithCoverageObtainedResponse */
        GetCasesWithCoverageObtainedResponse: {
            cases?: components["schemas"]["CaseWithCoverageObtained"][];
        };
        /** GetCasesWithMissingLawfirmPayoutsRequest */
        GetCasesWithMissingLawfirmPayoutsRequest: {
            /** Format: int32 */
            trailingMonths?: number;
        };
        /** GetCasesWithMissingLawfirmPayoutsResponse */
        GetCasesWithMissingLawfirmPayoutsResponse: {
            /** Format: int32 */
            resultCount?: number;
            results?: components["schemas"]["MissingLawfirmPayoutResult"][];
        };
        /** GetCasesWithOverduePaymentsResponse */
        GetCasesWithOverduePaymentsResponse: {
            missingPayments?: components["schemas"]["MissingPaymentDomain"][];
            /** Format: int32 */
            resultCount?: number;
        };
        /** GetCasesWithUncapturedChargesRequest */
        GetCasesWithUncapturedChargesRequest: {
            showNegativeBalances?: boolean;
            showPositiveBalances?: boolean;
            /** Format: int32 */
            trailingMonths?: number;
        };
        /** GetCitationAuditLogsResponse */
        GetCitationAuditLogsResponse: {
            auditLogs?: components["schemas"]["CitationAuditLog"][];
            /** Format: int64 */
            citationId?: number;
        };
        /** GetCitationPhoneLeadsRequest */
        GetCitationPhoneLeadsRequest: {
            /** Format: int32 */
            trailingDays?: number;
        };
        /** GetCitationPhoneLeadsResponse */
        GetCitationPhoneLeadsResponse: {
            callList?: components["schemas"]["ClientLeadDomain"][];
        };
        /** GetCitationResponse */
        GetCitationResponse: {
            citation?: components["schemas"]["CitationModel"];
        };
        /** GetCitationsWithMissingFieldsRequest */
        GetCitationsWithMissingFieldsRequest: {
            caseStatuses?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses[];
            /** Format: date-time */
            endDate?: string;
            ignoreDataBackfill?: boolean;
            includeCitationsWithoutImage?: boolean;
            includeDismissedCitations?: boolean;
            /** Format: int32 */
            maxRecords?: number;
            onlyCitationsWithoutImage?: boolean;
            selectedStates?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState[];
            showMissingCourtRecords?: boolean;
            showMissingDOBRecords?: boolean;
            showMissingGenderRecords?: boolean;
            showMissingNameRecords?: boolean;
            /** Format: date-time */
            startDate?: string;
            statusCategories?: PathsApiV1CaseStatusesGetParametersQueryCategories[];
            /** Format: int32 */
            trailingDays?: number;
        };
        /** GetCitationsWithMissingFieldsResponse */
        GetCitationsWithMissingFieldsResponse: {
            citations?: components["schemas"]["CitationWithMissingFields"][];
            /** Format: int64 */
            missingClientNameCount?: number;
            /** Format: int64 */
            missingCourtCount?: number;
            /** Format: int64 */
            missingFieldsCount?: number;
        };
        /** GetClientCasesResponse */
        GetClientCasesResponse: {
            cases?: components["schemas"]["CaseModel"][];
            citations?: components["schemas"]["CitationModel"][];
            /** Format: int64 */
            numBookings?: number;
            /** Format: int32 */
            numCases?: number;
            /** Format: int64 */
            numCitationUploads?: number;
        };
        /** GetClientConfirmedUnpaidCasesRequest */
        GetClientConfirmedUnpaidCasesRequest: Record<string, never>;
        /** GetClientConfirmedUnpaidCasesResponse */
        GetClientConfirmedUnpaidCasesResponse: {
            cases?: components["schemas"]["ClientConfirmedUnpaidCase"][];
            /** Format: int32 */
            resultCount?: number;
        };
        /** GetCoachingCardCategoriesResponse */
        GetCoachingCardCategoriesResponse: {
            coachingCardCategoriesModel?: components["schemas"]["CoachingCardCategoriesModel"][];
        };
        /** GetCompetitionResponseModel */
        GetCompetitionResponseModel: {
            /** Format: int32 */
            competitiveFeeMax?: number;
            /** Format: int32 */
            competitiveFeeMin?: number;
            isCompetitive?: boolean;
            /** Format: int32 */
            lowestFee?: number;
        };
        /** GetCounterOfferResponse */
        GetCounterOfferResponse: {
            author?: components["schemas"]["AuthorModel"];
            /** Format: int32 */
            counterOfferAmountInCents?: number;
            /** Format: date-time */
            counterOfferDateUtc?: string;
            /** Format: int64 */
            counterOfferId?: number;
            counterOfferStatus?: string;
            counterOptions?: components["schemas"]["CaseCounterOptionModel"][];
            /** Format: int64 */
            createdByUserId?: number;
            /** Format: int64 */
            createdByUserRoleId?: number;
            /** Format: int32 */
            initialLegalFeeInCents?: number;
            /** Format: double */
            initialRefundPercentage?: number;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int32 */
            legalFeeDifferenceInCents?: number;
            noteToClient?: string;
            noteToOtr?: string;
            /** Format: double */
            refundPercentage?: number;
            /** Format: int32 */
            totalLegalFeeInCents?: number;
        };
        /** GetCountiesResponse */
        GetCountiesResponse: {
            counties?: components["schemas"]["CountyDomain"][];
        };
        /** GetCountryListResponse */
        GetCountryListResponse: {
            countryList?: components["schemas"]["CountryDomain"][];
        };
        /** GetCountryRegionsResponse */
        GetCountryRegionsResponse: {
            regions?: components["schemas"]["CountryRegion"][];
        };
        /** GetCourtCoverageForCountyReportResponse */
        GetCourtCoverageForCountyReportResponse: {
            records?: components["schemas"]["CourtCoverageRecord"][];
        };
        /** GetCourtCoverageForStateReportResponse */
        GetCourtCoverageForStateReportResponse: {
            /** Format: int32 */
            numCounties?: number;
            records?: components["schemas"]["CourtCoverageCountyRecord"][];
        };
        /** GetCourtCoverageReportResponse */
        GetCourtCoverageReportResponse: {
            stateRecords?: components["schemas"]["CourtCoverageStateRecord"][];
        };
        /** GetCourtResponse */
        GetCourtResponse: {
            court?: components["schemas"]["CourtResponseModel"];
        };
        /** GetCourtsByQueryResponse */
        GetCourtsByQueryResponse: {
            courts?: components["schemas"]["CourtDomainRes"][];
            /** Format: int32 */
            numRecords?: number;
        };
        /** GetCourtsInnerResponse */
        GetCourtsInnerResponse: {
            address?: components["schemas"]["GetAddressInnerResponse"];
            courtCode?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            courtNameAdditional?: string;
        };
        /** GetCurrentUserResponse */
        GetCurrentUserResponse: {
            isUserAuthenticated?: boolean;
            isUserLoggedIn?: boolean;
            isUserRememberMeAuthenticated?: boolean;
            jwt?: string;
            redirectUrl?: string;
            user?: components["schemas"]["UserDomain"];
        };
        /** GetCustomerServiceAgentsResponse */
        GetCustomerServiceAgentsResponse: {
            agents?: components["schemas"]["CustomerServiceAgentDomain"][];
            /** Format: int32 */
            count?: number;
        };
        /** GetDeclinedCasesRequest */
        GetDeclinedCasesRequest: {
            loadFreshdeskTicketDetails?: boolean;
        };
        /** GetDeclinedCasesResponse */
        GetDeclinedCasesResponse: {
            declinedCases?: components["schemas"]["CaseModel"][];
        };
        /** GetDocumentsRequest */
        GetDocumentsRequest: {
            caseId?: string;
        };
        /** GetDriverLicensesResponse */
        GetDriverLicensesResponse: {
            driverLicenses?: components["schemas"]["DriverLicenseModel"][];
        };
        /** GetEmailTemplateResponse */
        GetEmailTemplateResponse: {
            templateName?: string;
            templateText?: string;
        };
        /** GetEmployeeModel */
        GetEmployeeModel: {
            firstName?: string;
            isActive?: boolean;
            lastName?: string;
            startDate?: components["schemas"]["Timestamp"];
            team?: string;
            terminationDate?: components["schemas"]["Timestamp"];
            title?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** GetExternalTicketInputParamsResponse */
        GetExternalTicketInputParamsResponse: {
            items?: {
                [key: string]: components["schemas"]["LookupParamValue"][][];
            };
        };
        /** GetHouseHoldMateModel */
        GetHouseHoldMateModel: {
            deleted?: boolean;
            email?: string;
            /** Format: date-time */
            expiryDateUtc?: string;
            fullName?: string;
            /** @enum {string} */
            inviteStatus?: GetHouseHoldMateModelInviteStatus;
            profilePictureUrl?: string;
            /** @enum {string} */
            relationshipType?: GetHouseHoldMateModelRelationshipType;
            /** Format: int64 */
            userId?: number;
        };
        /** GetHouseholdMatesResponse */
        GetHouseholdMatesResponse: {
            mates?: components["schemas"]["GetHouseHoldMateModel"][];
        };
        /** GetInvalidCasesWithStripeChargeRequest */
        GetInvalidCasesWithStripeChargeRequest: Record<string, never>;
        /** GetInvalidCasesWithStripeChargeResponse */
        GetInvalidCasesWithStripeChargeResponse: {
            cases?: components["schemas"]["CaseModel"][];
        };
        /** GetInviteByTokenResponse */
        GetInviteByTokenResponse: {
            emailAddress?: string;
            fullName?: string;
            hasAccount?: boolean;
            inviteeFirstName?: string;
            inviteeLastName?: string;
            /** @enum {string} */
            inviteeRoleType?: AuthorModelUserRole;
            /** Format: int64 */
            inviteeUserId?: number;
            lawyerInvite?: components["schemas"]["LawyerInviteByTokenModel"];
            profilePictureUrl?: string;
            /** Format: int64 */
            userId?: number;
            /** @enum {string} */
            verificationStatus?: GetHouseHoldMateModelInviteStatus;
        };
        /** GetLastLoginResponse */
        GetLastLoginResponse: {
            lastLoginDateByUserAccount?: components["schemas"]["LastLoginDateByUserAccount"][];
            lastLoginDateModels?: components["schemas"]["LastLoginDateModel"][];
            /** Format: date-time */
            lastLoginDateUtc?: string;
        };
        /** GetLawfirmAddressesResponse */
        GetLawfirmAddressesResponse: {
            addresses?: components["schemas"]["AddressDomain"][];
        };
        /** GetLawfirmCaseStatsResponse */
        GetLawfirmCaseStatsResponse: {
            caseCountByStatusMap?: {
                [key: string]: number;
            };
            /** Format: int32 */
            numBookedCases?: number;
            /** Format: int32 */
            numResolvedCases?: number;
            /** Format: int32 */
            successRate?: number;
        };
        /** GetLawfirmCoverageReportResponse */
        GetLawfirmCoverageReportResponse: {
            /** Format: int32 */
            numRecords?: number;
            records?: components["schemas"]["LawfirmCoverageRecord"][];
        };
        /** GetLawfirmCoverageResponse */
        GetLawfirmCoverageResponse: {
            coverageList?: components["schemas"]["LawfirmCourtCoverageDomain"][];
        };
        /** GetLawfirmFeeCoverageModel */
        GetLawfirmFeeCoverageModel: {
            city?: string;
            county?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            fees?: components["schemas"]["GetLawfirmFeeModel"][];
            isDeleted?: boolean;
            /** Format: int64 */
            legalServiceId?: number;
            /** @enum {string} */
            legalServiceType?: PathsApiV2LawfirmsLawfirmIdCoverageGetParametersQueryLegalServiceType;
            regionCode?: string;
        };
        /** GetLawfirmFeeCoverageResponse */
        GetLawfirmFeeCoverageResponse: {
            coverage?: components["schemas"]["GetLawfirmFeeCoverageModel"][];
        };
        /** GetLawfirmFeeModel */
        GetLawfirmFeeModel: {
            /** Format: int32 */
            accountFee?: number;
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            competition?: components["schemas"]["GetCompetitionResponseModel"];
            /** Format: int32 */
            courtFee?: number;
            /** Format: int64 */
            courtId?: number;
            isDeleted?: boolean;
            /** Format: int32 */
            lawfirmFee?: number;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            /** Format: int64 */
            violationId?: number;
            violationName?: string;
        };
        /** GetLawfirmFeesResponse */
        GetLawfirmFeesResponse: {
            fees?: components["schemas"]["LawfirmFeeDomain"][];
        };
        /** GetLawfirmFinancialTransactionsResponse */
        GetLawfirmFinancialTransactionsResponse: {
            futureTransactions?: components["schemas"]["FinancialTransaction"][];
            /** Format: int64 */
            numFeeRefunds?: number;
            /** Format: int64 */
            numFees?: number;
            /** Format: int64 */
            numFutureFees?: number;
            /** Format: int64 */
            numFuturePayouts?: number;
            /** Format: int64 */
            numFutureTransactions?: number;
            /** Format: int64 */
            numPayouts?: number;
            /** Format: int64 */
            numReversals?: number;
            /** Format: int64 */
            numTransactions?: number;
            transactions?: components["schemas"]["FinancialTransaction"][];
        };
        /** GetLawfirmInboxMessagesResponse */
        GetLawfirmInboxMessagesResponse: {
            messages?: components["schemas"]["LawfirmInboxMessageDomain"][];
        };
        /** GetLawfirmJobTitleResponse */
        GetLawfirmJobTitleResponse: {
            jobTitles?: components["schemas"]["LawfirmJobTitleModel"][];
        };
        /** GetLawfirmLawyersResponse */
        GetLawfirmLawyersResponse: {
            invites?: components["schemas"]["LawyerInviteModel"][];
            lawyers?: components["schemas"]["LawyerModel"][];
        };
        /** GetLawfirmLeadsRequest */
        GetLawfirmLeadsRequest: {
            orderBy?: string;
        };
        /** GetLawfirmLeadsResponse */
        GetLawfirmLeadsResponse: {
            lawfirmLeads?: components["schemas"]["LawfirmLeadDomain"][];
            /** Format: int32 */
            numRecords?: number;
        };
        /** GetLawfirmModel */
        GetLawfirmModel: {
            aboutUsBlurb?: string;
            address?: components["schemas"]["AddressDomain"];
            /** Format: int32 */
            caseAssignmentPriority?: number;
            coverPhotoUrl?: string;
            /** Format: int64 */
            createdBy?: number;
            /** Format: int32 */
            customerServiceScore?: number;
            /** Format: date-time */
            establishedDateUtc?: string;
            /** Format: int32 */
            establishedYear?: number;
            isLawfirmDisabled?: boolean;
            isLawfirmNotWithCompany?: boolean;
            isTestLawfirm?: boolean;
            languagesServed?: string[];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** @enum {string} */
            lawfirmPaymentModel?: CreateLawfirmModelLawfirmPaymentModel;
            lawfirmState?: components["schemas"]["LawfirmStatusModel"];
            /** Format: date-time */
            membershipStartDateUtc?: string;
            otrNotes?: string;
            primaryEmailAddress?: string;
            primaryPhoneNumber?: string;
            profilePictureUrl?: string;
            redirects?: components["schemas"]["LawfirmRedirectModel"][];
            seoUrl?: string;
            settings?: components["schemas"]["LawfirmSettingsDomainRes"];
            supportedStateModels?: components["schemas"]["SupportedStateModel"][];
            supportedStates?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState[];
            tagLine?: string;
            website?: string;
        };
        /** GetLawfirmPaymentMethodsResponse */
        GetLawfirmPaymentMethodsResponse: {
            paymentMethods?: components["schemas"]["StripePaymentSourceDomain"][];
            /** Format: int32 */
            totalRecords?: number;
        };
        /** GetLawfirmPayoutReversalsResponse */
        GetLawfirmPayoutReversalsResponse: {
            reversals?: components["schemas"]["LawfirmPayoutDomain"][];
        };
        /** GetLawfirmPayoutsResponse */
        GetLawfirmPayoutsResponse: {
            payouts?: components["schemas"]["LawfirmPayoutDomain"][];
        };
        /** GetLawfirmResponse */
        GetLawfirmResponse: {
            lawfirm?: components["schemas"]["GetLawfirmModel"];
        };
        /** GetLawfirmSettingsResponse */
        GetLawfirmSettingsResponse: {
            settings?: components["schemas"]["LawfirmSettingsDomainRes"];
        };
        /** GetLawfirmSummaryCaseRequest */
        GetLawfirmSummaryCaseRequest: {
            caseStatusCategories?: PathsApiV1CaseStatusesGetParametersQueryCategories[];
            caseStatuses?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses[];
            countyFilter?: string;
            courtFilter?: string;
            excludedCaseStatuses?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses[];
            order?: {
                [key: string]: string;
            };
            searchValue?: string;
        };
        /** GetLawfirmSummaryCasesResponse */
        GetLawfirmSummaryCasesResponse: {
            /** Format: int32 */
            activeCasesCount?: number;
            /** Format: int32 */
            bookedCasesCount?: number;
            cases?: components["schemas"]["CaseSummaryDomain"][];
            /** Format: int32 */
            numMatchingCases?: number;
            /** Format: int32 */
            pastDueCasesCount?: number;
            /** Format: int32 */
            paymentPlanCasesCount?: number;
            /** Format: int32 */
            pendingCasesCount?: number;
            /** Format: double */
            percentCasesWithPaymentPlan?: number;
        };
        /** GetLawfirmSupportedStatesResponse */
        GetLawfirmSupportedStatesResponse: {
            states?: components["schemas"]["USStateDomain"][];
        };
        /** GetLawfirmTransactionsForCaseResponse */
        GetLawfirmTransactionsForCaseResponse: {
            futureTransactions?: components["schemas"]["FinancialTransaction"][];
            /** Format: int32 */
            lawfirmAssumedCost?: number;
            /** Format: int32 */
            lawfirmEarningsForCase?: number;
            lineItems?: components["schemas"]["LineItem"][];
            /** Format: int32 */
            otrMarketingFeeChargedToLawfirm?: number;
            /** Format: int32 */
            paymentProcessingFeeChargedToLawfirm?: number;
            transactions?: components["schemas"]["FinancialTransaction"][];
        };
        /** GetLawfirmsResponse */
        GetLawfirmsResponse: {
            lawfirms?: components["schemas"]["GetLawfirmModel"][];
            /** Format: int32 */
            numRecords?: number;
        };
        /** GetLawyerResponse */
        GetLawyerResponse: {
            lawyer?: components["schemas"]["LawyerModel"];
        };
        /** GetLineItemTypesResponse */
        GetLineItemTypesResponse: {
            lineItemTypes?: CaseLineItemDomainReqLineItemType[];
        };
        /** GetLineItemsResponse */
        GetLineItemsResponse: {
            lineItems?: components["schemas"]["CaseLineItemDomainRes"][];
            lineItemsSummary?: components["schemas"]["CaseLineItemsSummary"];
        };
        /** GetListOfCitationsWithMissingCourtResponse */
        GetListOfCitationsWithMissingCourtResponse: {
            citations?: components["schemas"]["CitationWithMissingCourt"][];
        };
        /** GetLocationResponse */
        GetLocationResponse: {
            city?: string;
            countryCode?: string;
            regionCode?: string;
            subRegion?: string;
            subscriptionBillingEnabled?: boolean;
        };
        /** GetLostCasesWithTransferNotReversedRequest */
        GetLostCasesWithTransferNotReversedRequest: {
            fromDate?: components["schemas"]["TimestampReq"];
            /** Format: int32 */
            maxRecords?: number;
            toDate?: components["schemas"]["TimestampReq"];
        };
        /** GetLostCasesWithTransferNotReversedResponse */
        GetLostCasesWithTransferNotReversedResponse: {
            cases?: components["schemas"]["LostCaseWithTransferNotReversed"][];
        };
        /** GetMessagesByEntityResponse */
        GetMessagesByEntityResponse: {
            actions?: components["schemas"]["ActionByEntityModel"][];
            messages?: components["schemas"]["MessageByEntityModel"][];
            /** Format: int64 */
            numActions?: number;
            /** Format: int64 */
            numMessages?: number;
        };
        /** GetNoViolationCitationsResponse */
        GetNoViolationCitationsResponse: {
            citations?: components["schemas"]["NoViolationCitation"][];
        };
        /** GetOutgoingContactsResponse */
        GetOutgoingContactsResponse: {
            contacts?: components["schemas"]["OutgoingContactDomain"][];
        };
        /** GetOverdueCasePaymentsResponse */
        GetOverdueCasePaymentsResponse: {
            /** Format: int64 */
            overdueBalanceInCents?: number;
            payments?: components["schemas"]["CustomerPaymentDto"][];
            /** Format: int64 */
            upcomingBalanceInCents?: number;
        };
        /** GetOverduePaymentsResponse */
        GetOverduePaymentsResponse: {
            /** Format: int64 */
            overdueBalanceInCents?: number;
            overduePayments?: components["schemas"]["CustomerOverduePayment"][];
        };
        /** GetPaymentMethodsForUserResponse */
        GetPaymentMethodsForUserResponse: {
            bankAccounts?: components["schemas"]["StripeBankAccountDomain"][];
            cards?: components["schemas"]["StripeCardDomain"][];
            hasOutstandingPayments?: boolean;
            paymentMethods?: components["schemas"]["StripePaymentSourceDomain"][];
            /** Format: int32 */
            totalRecords?: number;
        };
        /** GetPaymentModelTypesResponse */
        GetPaymentModelTypesResponse: {
            models?: CreateLawfirmModelLawfirmPaymentModel[];
        };
        /** GetPenaltyType */
        GetPenaltyType: {
            /** @enum {string} */
            type?: CaseViolationPenaltyPenaltyType;
            /** Format: int32 */
            typeId?: number;
        };
        /** GetPenaltyTypesResponse */
        GetPenaltyTypesResponse: {
            penaltyTypes?: components["schemas"]["GetPenaltyType"][];
        };
        /** GetPendingCasesRequest */
        GetPendingCasesRequest: Record<string, never>;
        /** GetPendingCasesResponse */
        GetPendingCasesResponse: {
            pendingCases?: components["schemas"]["CaseModel"][];
            /** Format: int32 */
            totalPendingCases?: number;
        };
        /** GetPendingTicketReviewsRequest */
        GetPendingTicketReviewsRequest: {
            fromDate?: components["schemas"]["TimestampReq"];
            /** Format: int32 */
            maxRecords?: number;
            toDate?: components["schemas"]["TimestampReq"];
        };
        /** GetPendingTicketReviewsResponse */
        GetPendingTicketReviewsResponse: {
            requests?: components["schemas"]["TicketReviewRequest"][];
        };
        /** GetPotentialCustomersRequest */
        GetPotentialCustomersRequest: {
            /** Format: date-time */
            endDate?: string;
            includeDismissedCitations?: boolean;
            orderBy?: string;
            /** Format: date-time */
            startDate?: string;
        };
        /** GetPotentialCustomersResponse */
        GetPotentialCustomersResponse: {
            /** Format: int32 */
            numRecords?: number;
            potentialCustomers?: components["schemas"]["PotentialCustomerDomain"][];
        };
        /** GetRedirectUrlResponse */
        GetRedirectUrlResponse: {
            /** Format: int32 */
            httpCode?: number;
            landingPageUrl?: string;
            redirectUrl?: string;
            /** Format: date-time */
            startDateUtc?: string;
        };
        /** GetReferralCodeResponse */
        GetReferralCodeResponse: {
            /** Format: date-time */
            endDate?: string;
            isCodeActive?: boolean;
            isCodeApproved?: boolean;
            /** Format: int32 */
            numberOfReferrals?: number;
            ownerEmailAddress?: string;
            /** @enum {string} */
            ownerType?: GetReferralCodeResponseOwnerType;
            /** @enum {string} */
            refereeCreditType?: CreateReferralCodeRequestRefereeCreditType;
            /** Format: bigdecimal */
            refereeCreditValue?: number;
            referralCode?: string;
            /** Format: int32 */
            referralCountLimit?: number;
            /** Format: date-time */
            startDate?: string;
        };
        /** GetReferralCodesResponse */
        GetReferralCodesResponse: {
            referralCodes?: components["schemas"]["GetReferralCodeResponse"][];
        };
        /** GetReferralsHistoryResponse */
        GetReferralsHistoryResponse: {
            referrals?: components["schemas"]["ReferralResponse"][];
        };
        /** GetRegionsWithViolationsResponse */
        GetRegionsWithViolationsResponse: {
            regions?: components["schemas"]["AvailableRegion"][];
        };
        /** GetStripeChargeResponse */
        GetStripeChargeResponse: {
            stripeCharge?: components["schemas"]["StripeChargeDomain"];
        };
        /** GetStripeChargesResponse */
        GetStripeChargesResponse: {
            stripeCharges?: components["schemas"]["StripeChargeDomain"][];
        };
        /** GetStripeConnectedAccountsResponse */
        GetStripeConnectedAccountsResponse: {
            stripeConnectedAccounts?: components["schemas"]["StripeConnectedAccountDomain"][];
        };
        /** GetSupportTicketsResponse */
        GetSupportTicketsResponse: {
            intercomTickets?: components["schemas"]["IntercomSearchTicketsResponse"];
            supportTickets?: components["schemas"]["FreshDeskTicket"][];
        };
        /** GetTicketReviewResponse */
        GetTicketReviewResponse: {
            ticketReview?: components["schemas"]["TicketReviewRequestRes"];
        };
        /** GetTrafficViolationModel */
        GetTrafficViolationModel: {
            classDescription?: string;
            criminal?: boolean;
            enabledForCustomers?: boolean;
            enabledForLawfirms?: boolean;
            penalties?: components["schemas"]["PenaltyModel"][];
            /** @enum {string} */
            refundEligibilityType?: AccountLevelFeeRefundEligibility;
            trafficViolationDesc?: string;
            /** Format: int64 */
            trafficViolationTypeId?: number;
            userFriendlyName?: string;
            userFriendlyShortForm?: string;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationCode?: string;
            wobblerToCriminal?: boolean;
        };
        /** GetTrafficViolationTypesResponse */
        GetTrafficViolationTypesResponse: {
            exclusionPatterns?: string[];
            violationTypes?: components["schemas"]["GetTrafficViolationModel"][];
        };
        /** GetUserAddressesResponse */
        GetUserAddressesResponse: {
            addresses?: components["schemas"]["AddressDomain"][];
        };
        /** GetUserByEmailRequest */
        GetUserByEmailRequest: {
            emailAddress?: string;
        };
        /** GetUserByEmailResponse */
        GetUserByEmailResponse: {
            firstName?: string;
            /** Format: int32 */
            numMatchingUsers?: number;
        };
        /** GetUserCasesResponse */
        GetUserCasesResponse: {
            cases?: components["schemas"]["CaseModel"][];
            citations?: components["schemas"]["CitationModel"][];
            /** Format: int64 */
            numBookings?: number;
            /** Format: int64 */
            numCitationUploads?: number;
        };
        /** GetUserDetailsResponse */
        GetUserDetailsResponse: {
            mergeReportJson?: string;
            user?: components["schemas"]["UserDomain"];
        };
        /** GetUserRefLinksResponse */
        GetUserRefLinksResponse: {
            refLinks?: components["schemas"]["UserRefLinkDomain"][];
        };
        /** GetUserReferralSourceTypesResponse */
        GetUserReferralSourceTypesResponse: {
            sources?: components["schemas"]["UserReferralSourceTypeModel"][];
        };
        /** GetUserRegistrationsRequest */
        GetUserRegistrationsRequest: {
            /** Format: date-time */
            endDate?: string;
            includeDataRecords?: boolean;
            /** Format: int32 */
            length?: number;
            /** Format: int32 */
            page?: number;
            sortMap?: {
                [key: string]: string;
            };
            /** Format: date-time */
            startDate?: string;
            timeZoneId?: string;
        };
        /** GetUserRegistrationsResponse */
        GetUserRegistrationsResponse: {
            stats?: components["schemas"]["UserRegistrationStats"];
            userRegistrations?: components["schemas"]["RegisteredUserDomain"][];
        };
        /** GetUserResponse */
        GetUserResponse: {
            user?: components["schemas"]["UserDomain"];
        };
        /** GetUserSettingsRequest */
        GetUserSettingsRequest: {
            settingsList: string[];
        };
        /** GetUserSettingsResponse */
        GetUserSettingsResponse: {
            /** Format: int64 */
            userId?: number;
            userSettings?: components["schemas"]["SettingResponse"][];
        };
        /** GetUserStripeAccountResponse */
        GetUserStripeAccountResponse: {
            stripeAccount?: components["schemas"]["StripeCustomerAccountDomain"];
        };
        /** GetWorkflowStateResponse */
        GetWorkflowStateResponse: {
            /** Format: int32 */
            projectedInsuranceCostInCents?: number;
            theCase?: components["schemas"]["WorkflowCaseModel"];
        };
        /** GhostUser */
        GhostUser: {
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** Format: date-time */
            dob?: string;
            driverLicenseNumber?: string;
            emailAddress?: string;
            firstname?: string;
            /** @enum {string} */
            gender?: CaseGender;
            lastname?: string;
            password?: string;
            phoneNumbers?: components["schemas"]["PhoneNumberDomain"][];
            /** @enum {string} */
            race?: CaseRace;
        };
        /** GhostUserResponse */
        GhostUserResponse: {
            /** Format: date-time */
            dob?: string;
            driverLicenseNumber?: string;
            emailAddress?: string;
            firstname?: string;
            /** @enum {string} */
            gender?: CaseGender;
            lastname?: string;
            /** @enum {string} */
            race?: CaseRace;
            /** Format: int64 */
            userId?: number;
        };
        /** GoogleLoginRequest */
        GoogleLoginRequest: {
            /** Format: int64 */
            citationId?: number;
            firstName?: string;
            identityToken?: string;
            lastName?: string;
        };
        /** GptFunctionModel */
        GptFunctionModel: {
            actions?: components["schemas"]["Action"][];
            agency?: string;
            arrestDate?: string;
            bail?: string;
            bonds?: string;
            caseNumber?: string;
            caseReport?: string;
            charge?: string;
            chargeDescription?: string;
            chargeSeverity?: string;
            citationFilingDate?: string;
            citationFilingType?: string;
            court?: components["schemas"]["ExternalTicketCourt"];
            custodyStatus?: string;
            disposition?: string[];
            docketNumber?: string;
            drNumber?: string;
            dueDate?: string;
            fineAndPenalty?: string;
            fineInformation?: components["schemas"]["FineInformation"][];
            lawEnforcementAgency?: string;
            lawEnforcementOfficer?: string;
            nextAction?: string;
            nextCourtDate?: string;
            ocPayNumber?: string;
            offenderName?: string;
            orderedBail?: string;
            otherCases?: components["schemas"]["OtherCase"][];
            pleaDate?: string;
            postedBail?: string;
            primaryViolationDescription?: string;
            probationStatus?: string;
            probationType?: string;
            relatedCases?: string;
            restitutionFine?: string;
            retainedAttorney?: string;
            sentenceConvictedDate?: string;
            sentenceDate?: string;
            status?: string;
            ticketId?: string;
            totalFineAmount?: string;
            violationDate?: string;
            violationIds?: string[];
            warrantType?: string;
        };
        /** GraphRequest */
        GraphRequest: {
            caseStatues?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses[];
            /** Format: date-time */
            endDate?: string;
            includeDismissedContacts?: boolean;
            includeOutgoingContacts?: boolean;
            /** Format: date-time */
            startDate?: string;
        };
        /** HandleOrphanedStripeChargeRequest */
        HandleOrphanedStripeChargeRequest: {
            stripeChargeIds?: string[];
            throwExceptionOnFailure?: boolean;
        };
        /** HandleOrphanedStripeChargeResponse */
        HandleOrphanedStripeChargeResponse: {
            /** Format: int32 */
            numFailures?: number;
            /** Format: int32 */
            numSuccesses?: number;
            results?: {
                [key: string]: string;
            };
        };
        /** IncomingEmail */
        IncomingEmail: {
            commonHeaders?: components["schemas"]["CommonHeader"];
            destination?: string[];
            headers?: components["schemas"]["IncomingHeader"][];
            headersTruncated?: string;
            messageId?: string;
            source?: string;
            timestamp?: string;
        };
        /** IncomingEmailModels */
        IncomingEmailModels: {
            content?: string;
            mail?: components["schemas"]["IncomingEmail"];
            notificationType?: string;
        };
        /** IncomingEmailRequest */
        IncomingEmailRequest: {
            Message?: string;
            SubscribeURL?: string;
            Type?: string;
            UnsubscribeURL?: string;
            models?: components["schemas"]["IncomingEmailModels"];
        };
        /** IncomingHeader */
        IncomingHeader: {
            name?: string;
            value?: string;
        };
        /** InitiateCaseAndChargeCustomerRequest */
        InitiateCaseAndChargeCustomerRequest: {
            cardId?: string;
            /** @enum {string} */
            paymentPlanType?: AcceptCaseCounterRequestPaymentPlanType;
            priceIds?: string[];
            productId?: string;
        };
        /** InitiateCaseAndChargeCustomerResponse */
        InitiateCaseAndChargeCustomerResponse: {
            /** Format: int32 */
            otre?: number;
            /** Format: int32 */
            rs?: number;
        };
        /** InitiateCaseCounterRequest */
        InitiateCaseCounterRequest: {
            counterOptions?: components["schemas"]["CounterOption"][];
            noteToClient?: string;
            noteToOtr?: string;
        };
        /** InitiateCaseCounterResponse */
        InitiateCaseCounterResponse: {
            /** Format: int32 */
            counterOfferAmountInCents?: number;
            /** Format: date-time */
            counterOfferDateUtc?: string;
            /** Format: int64 */
            counterOfferId?: number;
            counterOfferStatus?: string;
            counterOptions?: components["schemas"]["CaseCounterOptionModel"][];
            /** Format: int64 */
            createdByUserId?: number;
            /** Format: int64 */
            createdByUserRoleId?: number;
            /** Format: int32 */
            initialLegalFeeInCents?: number;
            /** Format: double */
            initialRefundPercentage?: number;
            /** Format: int64 */
            lawfirmCaseId?: number;
            noteToClient?: string;
            noteToOtr?: string;
            /** Format: double */
            refundPercentage?: number;
        };
        /** InitiateCaseRequest */
        InitiateCaseRequest: Record<string, never>;
        /** InsertCaseLineItemResponse */
        InsertCaseLineItemResponse: {
            lineItemId?: string;
        };
        /** InsertInvoiceLineItemRequest */
        InsertInvoiceLineItemRequest: {
            lineItem?: components["schemas"]["LineItemRequest"];
        };
        /** IntercomConversationResponse */
        IntercomConversationResponse: {
            admin_assignee_id?: string;
            ai_agent?: string;
            ai_agent_participated?: boolean;
            contacts?: components["schemas"]["ContactList"];
            conversation_rating?: Record<string, never>;
            /** Format: int32 */
            created_at?: number;
            custom_attributes?: Record<string, never>;
            first_contact_reply?: components["schemas"]["FirstContactReply"];
            id?: string;
            linked_objects?: components["schemas"]["LinkedObjects"];
            open?: boolean;
            priority?: string;
            read?: boolean;
            sla_applied?: components["schemas"]["ServiceLevelAgreement"];
            /** Format: int32 */
            snoozed_until?: number;
            source?: components["schemas"]["Source"];
            state?: string;
            statistics?: components["schemas"]["Statistics"];
            tags?: components["schemas"]["Tags"];
            team_assignee_id?: string;
            teammates?: components["schemas"]["Teammates"];
            title?: string;
            topics?: components["schemas"]["Topics"];
            type?: string;
            /** Format: int32 */
            updated_at?: number;
            /** Format: int32 */
            waiting_since?: number;
        };
        /** IntercomCreateTicketResponse */
        IntercomCreateTicketResponse: {
            admin_assignee_id?: string;
            category?: string;
            contacts?: components["schemas"]["ContactList"];
            /** Format: int64 */
            created_at?: number;
            id?: string;
            is_shared?: boolean;
            linked_objects?: components["schemas"]["LinkedObjects"];
            open?: boolean;
            /** Format: int64 */
            snoozed_until?: number;
            team_assignee_id?: string;
            ticket_attributes?: components["schemas"]["IntercomTicketAttributes"];
            ticket_id?: string;
            ticket_parts?: components["schemas"]["TicketPartsWrapper"];
            ticket_state?: string;
            ticket_state_external_label?: string;
            ticket_state_internal_label?: string;
            ticket_type?: components["schemas"]["TicketType"];
            type?: string;
            /** Format: int64 */
            updated_at?: number;
        };
        /** IntercomNext */
        IntercomNext: {
            /** Format: int32 */
            page?: number;
            starting_after?: string;
        };
        /** IntercomPages */
        IntercomPages: {
            next?: components["schemas"]["IntercomNext"];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            per_page?: number;
            /** Format: int32 */
            total_pages?: number;
            type?: string;
        };
        /** IntercomSearchConversationsResponse */
        IntercomSearchConversationsResponse: {
            conversations?: components["schemas"]["IntercomConversationResponse"][];
            pages?: components["schemas"]["IntercomPages"];
            /** Format: int32 */
            total_count?: number;
        };
        /** IntercomSearchTicketsResponse */
        IntercomSearchTicketsResponse: {
            tickets?: components["schemas"]["IntercomCreateTicketResponse"][];
            /** Format: int32 */
            total_count?: number;
        };
        /** IntercomTicketAttributes */
        IntercomTicketAttributes: {
            _default_description_?: string;
            _default_title_?: string;
        };
        /** InviteHouseholdMateRequest */
        InviteHouseholdMateRequest: {
            emailAddress?: string;
            fullName?: string;
            /** @enum {string} */
            relationshipType?: GetHouseHoldMateModelRelationshipType;
        };
        /** InviteLawyerToLawfirmRequest */
        InviteLawyerToLawfirmRequest: {
            emailAddress: string;
            firstName: string;
            lastName: string;
            /** @enum {string} */
            role?: InviteLawyerToLawfirmRequestRole;
        };
        /** InvoiceLineItemModel */
        InvoiceLineItemModel: {
            description?: string;
            displayString?: string;
            /** @enum {string} */
            invoiceType?: CaseLineItemDomainReqLineItemType;
            name?: string;
        };
        /** IsRefundEligibleResponse */
        IsRefundEligibleResponse: {
            /** @enum {string} */
            refundEligibilityType?: AccountLevelFeeRefundEligibility;
            uiReasonMsg?: string;
        };
        /** IsUserLoggedInResponse */
        IsUserLoggedInResponse: {
            isUserLoggedIn?: boolean;
            /** Format: int64 */
            userId?: number;
        };
        /** LastLoginAttributes */
        LastLoginAttributes: {
            lastLoginItems?: components["schemas"]["LastLoginItem"][];
        };
        /** LastLoginDateByUserAccount */
        LastLoginDateByUserAccount: {
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** Format: date-time */
            loginDateUtc?: string;
            /** @enum {string} */
            socialLoginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            userHandle?: string;
        };
        /** LastLoginDateModel */
        LastLoginDateModel: {
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** Format: date-time */
            loginDateUtc?: string;
        };
        /** LastLoginItem */
        LastLoginItem: {
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** Format: date-time */
            lastLoginDateUtc?: string;
        };
        /** Lawfirm */
        Lawfirm: {
            /** Format: int32 */
            caseCount?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: double */
            otrPercent?: number;
            /** Format: int32 */
            otrRevenue?: number;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            /** Format: int32 */
            transactionVolume?: number;
        };
        /** LawfirmAuditEventModel */
        LawfirmAuditEventModel: {
            authorName?: string;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** @enum {string} */
            event?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
            /** Format: date-time */
            eventDate?: string;
            /** Format: int64 */
            eventId?: number;
            /** Format: int64 */
            lawfirmEventId?: number;
            newValue?: string;
            oldValue?: string;
            subject?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** LawfirmBankPayoutModel */
        LawfirmBankPayoutModel: {
            /** Format: int32 */
            amountInCents?: number;
            /** Format: date-time */
            arrivalDateUtc?: string;
            automatic?: boolean;
            balanceTransactionId?: string;
            balanceTransactions?: components["schemas"]["BalanceTransactionModel"][];
            currency?: string;
            destinationId?: string;
            failureAttributes?: string;
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            lawfirmId?: number;
            /** @enum {string} */
            method?: LawfirmBankPayoutModelMethod;
            /** Format: date-time */
            payoutCreationDateUtc?: string;
            /** @enum {string} */
            reconciliationStatus?: LawfirmBankPayoutModelReconciliationStatus;
            sourceAccountId?: string;
            statementDescriptor?: string;
            /** @enum {string} */
            status?: LawfirmBankPayoutModelStatus;
            stripePayoutId?: string;
            stripePlatformAccountId?: string;
            /** @enum {string} */
            type?: LawfirmBankPayoutModelType;
            withdrawal?: boolean;
        };
        /** LawfirmBookingSummary */
        LawfirmBookingSummary: {
            /** Format: int32 */
            bookingsCount?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            lawfirmTransactions?: number;
            /** Format: double */
            otrPercent?: number;
            /** Format: int32 */
            otrRevenue?: number;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
        };
        /** LawfirmCaseDocument */
        LawfirmCaseDocument: {
            caseDocId?: string;
            /** @enum {string} */
            clientDocRequirement?: LawfirmCaseDocumentClientDocRequirement;
            /** Format: date-time */
            docDate?: string;
            /** @enum {string} */
            docType?: PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type;
            docUrl?: string;
            hasClientAgreed?: boolean;
        };
        /** LawfirmCaseModel */
        LawfirmCaseModel: {
            caseArchivedByLawfirm?: boolean;
            /** @enum {string} */
            caseDecisionStatus?: CaseSummaryDomainCaseDecisionStatus;
            clientDeclineTicket?: components["schemas"]["FreshDeskTicket"];
            declineReason?: string;
            isMatchInternal?: boolean;
            isSelected?: boolean;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: date-time */
            lawfirmDecisionDateUtc?: string;
            lawfirmDeclineTicket?: components["schemas"]["FreshDeskTicket"];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmPrimaryEmail?: string;
            lawfirmReceiptDateUtc?: components["schemas"]["Timestamp"];
            /** Format: int64 */
            lawyerCounterOfferTicketId?: number;
            /** Format: date-time */
            matchExpirationDateUtc?: string;
            obfuscatedPictureUrl?: string;
            profilePictureUrl?: string;
            /** @enum {string} */
            refundOwner?: CaseTransferHistoryRefundOwner;
        };
        /** LawfirmCaseModelReq */
        LawfirmCaseModelReq: {
            caseArchivedByLawfirm?: boolean;
            /** @enum {string} */
            caseDecisionStatus?: CaseSummaryDomainCaseDecisionStatus;
            clientDeclineTicket?: components["schemas"]["FreshDeskTicketReq"];
            declineReason?: string;
            isMatchInternal?: boolean;
            isSelected?: boolean;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: date-time */
            lawfirmDecisionDateUtc?: string;
            lawfirmDeclineTicket?: components["schemas"]["FreshDeskTicketReq"];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmPrimaryEmail?: string;
            lawfirmReceiptDateUtc?: components["schemas"]["TimestampReq"];
            /** Format: int64 */
            lawyerCounterOfferTicketId?: number;
            /** Format: date-time */
            matchExpirationDateUtc?: string;
            obfuscatedPictureUrl?: string;
            profilePictureUrl?: string;
            /** @enum {string} */
            refundOwner?: CaseTransferHistoryRefundOwner;
        };
        /** LawfirmCaseModelRes */
        LawfirmCaseModelRes: {
            caseArchivedByLawfirm?: boolean;
            /** @enum {string} */
            caseDecisionStatus?: CaseSummaryDomainCaseDecisionStatus;
            clientDeclineTicket?: components["schemas"]["FreshDeskTicketRes"];
            declineReason?: string;
            isMatchInternal?: boolean;
            isSelected?: boolean;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: date-time */
            lawfirmDecisionDateUtc?: string;
            lawfirmDeclineTicket?: components["schemas"]["FreshDeskTicketRes"];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmPrimaryEmail?: string;
            lawfirmReceiptDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            lawyerCounterOfferTicketId?: number;
            /** Format: date-time */
            matchExpirationDateUtc?: string;
            obfuscatedPictureUrl?: string;
            profilePictureUrl?: string;
            /** @enum {string} */
            refundOwner?: CaseTransferHistoryRefundOwner;
        };
        /** LawfirmCourtCoverageDomain */
        LawfirmCourtCoverageDomain: {
            city?: string;
            /** Format: int32 */
            competitiveFeeMax?: number;
            /** Format: int32 */
            competitiveFeeMin?: number;
            county?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            isCompetitive?: boolean;
            isDeleted?: boolean;
            isRefundOffered?: boolean;
            /** Format: int32 */
            lawfirmFee?: number;
            /** Format: int32 */
            lowestFee?: number;
            region?: components["schemas"]["CountryRegion"];
            state?: string;
            /** Format: int32 */
            xtCompetitiveFee?: number;
            /** Format: int32 */
            xtCompetitiveFeeMax?: number;
            /** Format: int32 */
            xtCompetitiveFeeMin?: number;
        };
        /** LawfirmCoverageRecord */
        LawfirmCoverageRecord: {
            /** Format: int32 */
            caseAssignmentPriority?: number;
            /** Format: int64 */
            countyId?: number;
            countyName?: string;
            isVacationMode?: boolean;
            latestCaseAssignmentDateUtc?: components["schemas"]["Timestamp"];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            maxCaseCapacity?: number;
            /** Format: int32 */
            numActiveCases?: number;
            /** Format: int32 */
            numCourtsCovered?: number;
            regionCode?: string;
        };
        /** LawfirmDocument */
        LawfirmDocument: {
            /** @enum {string} */
            clientDocRequirement?: LawfirmCaseDocumentClientDocRequirement;
            /** Format: date-time */
            docDate?: string;
            docExt?: string;
            docId?: string;
            /** @enum {string} */
            docType?: PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type;
            docUrl?: string;
        };
        /** LawfirmDocumentResponse */
        LawfirmDocumentResponse: {
            documents?: components["schemas"]["LawfirmDocument"][];
        };
        /** LawfirmDocumentTemplate */
        LawfirmDocumentTemplate: {
            /** @enum {string} */
            clientDocRequirement?: LawfirmCaseDocumentClientDocRequirement;
            /** Format: date-time */
            docDate?: string;
            docExt?: string;
            /** @enum {string} */
            docType?: PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type;
            textProvidedByLawfirm?: string;
        };
        /** LawfirmDocumentTemplateResponse */
        LawfirmDocumentTemplateResponse: {
            documents?: components["schemas"]["LawfirmDocumentTemplate"][];
        };
        /** LawfirmFeeDomain */
        LawfirmFeeDomain: {
            /** Format: int64 */
            amount?: number;
            caseId?: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: int64 */
            lawfirmCaseId?: number;
            lawfirmFeeId?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            note?: string;
            /** Format: int64 */
            otrAmount?: number;
            /** Format: int64 */
            processingFeeActual?: number;
            /** Format: int64 */
            processingFeeCharged?: number;
            sourceCasePaymentId?: string;
            /** Format: int64 */
            stripeAmount?: number;
            stripeApplicationFee?: components["schemas"]["StripeApplicationFeeDomain"];
            stripePayment?: components["schemas"]["StripePaymentDomain"];
            /** Format: date-time */
            transactionDateUtc?: string;
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReferenceId?: string;
            /** Format: date-time */
            updatedDueDate?: string;
        };
        /** LawfirmInboxMessageDomain */
        LawfirmInboxMessageDomain: {
            attachment?: boolean;
            authorFirstName?: string;
            authorLastName?: string;
            /** @enum {string} */
            authorRoleType?: AuthorModelUserRole;
            /** Format: int64 */
            authorUserId?: number;
            caseActionNote?: string;
            caseArchived?: boolean;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            citationIssueDate?: components["schemas"]["PureDate"];
            /** Format: date-time */
            citationIssueDateUtc?: string;
            /** Format: date-time */
            courtDateUtc?: string;
            courtName?: string;
            customerFirstName?: string;
            customerLastName?: string;
            hasFlagMessage?: boolean;
            hasStarMessage?: boolean;
            /** @enum {string} */
            lawfirmCaseDecisionStatus?: CaseSummaryDomainCaseDecisionStatus;
            /** Format: date-time */
            lawfirmReceiptDateUtc?: string;
            messageBody?: string;
            /** Format: int64 */
            messageId?: number;
            /** Format: date-time */
            messageSentDateUtc?: string;
            profilePictureUrl?: string;
        };
        /** LawfirmItem */
        LawfirmItem: {
            lawfirmName?: string;
            lawfirmStatus?: string;
            profilePictureUrl?: string;
            statesServed?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState[];
            vacationMode?: boolean;
        };
        /** LawfirmJobTitleModel */
        LawfirmJobTitleModel: {
            jobTitle?: string;
            /** @enum {string} */
            name?: LawfirmJobTitleModelName;
        };
        /** LawfirmJobTitleModelReq */
        LawfirmJobTitleModelReq: {
            jobTitle?: string;
            /** @enum {string} */
            name?: LawfirmJobTitleModelName;
        };
        /** LawfirmJobTitleModelRes */
        LawfirmJobTitleModelRes: {
            jobTitle?: string;
            /** @enum {string} */
            name?: LawfirmJobTitleModelName;
        };
        /** LawfirmLeadDomain */
        LawfirmLeadDomain: {
            isLawyerEmailConfirmed?: boolean;
            isLawyerEnabled?: boolean;
            isTestLawfirm?: boolean;
            isTestLawyer?: boolean;
            isVacationMode?: boolean;
            /** @enum {string} */
            lawfirmAddressState?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            lawfirmCity?: string;
            /** Format: int64 */
            lawfirmCreatedByUserId?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmPostalCode?: string;
            /** @enum {string} */
            lawfirmState?: PathsApiV1LawfirmsGetParametersQueryStatuses;
            /** @enum {string} */
            lawfirmStatusCategory?: PathsApiV1LawfirmsGetParametersQueryStatusCategories;
            lawyerEmailAddress?: string;
            lawyerFirstName?: string;
            lawyerLastName?: string;
            /** Format: int64 */
            lawyerUserId?: number;
            leadOwnerFirstName?: string;
            leadOwnerLastName?: string;
            outgoingContacts?: components["schemas"]["OutgoingContactDomain"][];
        };
        /** LawfirmPayoutDomain */
        LawfirmPayoutDomain: {
            /** Format: int64 */
            amount?: number;
            caseId?: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmPayoutId?: string;
            /** Format: int64 */
            processingFeeActual?: number;
            /** Format: int64 */
            processingFeeCharged?: number;
            sourceCasePaymentId?: string;
            stripeTransfer?: components["schemas"]["StripeTransferDomain"];
            /** Format: date-time */
            transactionDateUtc?: string;
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReferenceId?: string;
            /** Format: date-time */
            updatedDueDate?: string;
        };
        /** LawfirmPictureRequest */
        LawfirmPictureRequest: {
            contentType?: string;
            coverPhotoBase64ImageData?: string;
            profileBase64ImageData?: string;
        };
        /** LawfirmRatesResponse */
        LawfirmRatesResponse: {
            acceptsPaymentPlans?: boolean;
            /** Format: int32 */
            capacityLeft?: number;
            chosenLawfirm?: boolean;
            /** @enum {string} */
            feeLevel?: LawfirmRatesResponseFeeLevel;
            handlesAccidents?: boolean;
            handlesPastDue?: boolean;
            ineligibleMatchReasons?: LawfirmRatesResponseIneligibleMatchReasons[];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lineItems?: components["schemas"]["LineItem"][];
            phoneNumber?: string;
            primaryEmailAddress?: string;
            profilePictureUrl?: string;
            /** Format: int32 */
            rank?: number;
            refundEligible?: boolean;
            /** Format: int32 */
            successRate?: number;
            /** Format: int32 */
            totalLegalFee?: number;
            vacationModeOn?: boolean;
        };
        /** LawfirmRedirectModel */
        LawfirmRedirectModel: {
            /** @enum {string} */
            landingPageType?: PathsApiV1RedirectsGetParametersQueryPageType;
            landingPageUrl?: string;
            redirectUrl?: string;
        };
        /** LawfirmSettingsDomain */
        LawfirmSettingsDomain: {
            acceptsAccidents?: boolean;
            acceptsPastDue?: boolean;
            acceptsPaymentPlans?: boolean;
            allowReviewReplies?: boolean;
            /** Format: int32 */
            defaultTrafficTicketFee?: number;
            isDirectoryOn?: boolean;
            isStoreFrontOn?: boolean;
            isStorefrontWidgetOn?: boolean;
            isVacationMode?: boolean;
            latestCaseAssignmentDateUtc?: components["schemas"]["Timestamp"];
            /** Format: int32 */
            maxCaseCapacity?: number;
            /** Format: int32 */
            maxCaseCapacityPerDay?: number;
            mvsRecipient?: string;
            /** Format: double */
            referralFee?: number;
            /** @enum {string} */
            referralFeeType?: LawfirmSettingsDomainReferralFeeType;
            /** Format: date-time */
            vacationModeEndDateUtc?: string;
            vacationModeReason?: string;
        };
        /** LawfirmSettingsDomainReq */
        LawfirmSettingsDomainReq: {
            acceptsAccidents?: boolean;
            acceptsPastDue?: boolean;
            acceptsPaymentPlans?: boolean;
            allowReviewReplies?: boolean;
            /** Format: int32 */
            defaultTrafficTicketFee?: number;
            isDirectoryOn?: boolean;
            isStoreFrontOn?: boolean;
            isStorefrontWidgetOn?: boolean;
            isVacationMode?: boolean;
            latestCaseAssignmentDateUtc?: components["schemas"]["TimestampReq"];
            /** Format: int32 */
            maxCaseCapacity?: number;
            /** Format: int32 */
            maxCaseCapacityPerDay?: number;
            mvsRecipient?: string;
            /** Format: double */
            referralFee?: number;
            /** @enum {string} */
            referralFeeType?: LawfirmSettingsDomainReferralFeeType;
            /** Format: date-time */
            vacationModeEndDateUtc?: string;
            vacationModeReason?: string;
        };
        /** LawfirmSettingsDomainRes */
        LawfirmSettingsDomainRes: {
            acceptsAccidents?: boolean;
            acceptsPastDue?: boolean;
            acceptsPaymentPlans?: boolean;
            allowReviewReplies?: boolean;
            /** Format: int32 */
            defaultTrafficTicketFee?: number;
            isDirectoryOn?: boolean;
            isStoreFrontOn?: boolean;
            isStorefrontWidgetOn?: boolean;
            isVacationMode?: boolean;
            latestCaseAssignmentDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int32 */
            maxCaseCapacity?: number;
            /** Format: int32 */
            maxCaseCapacityPerDay?: number;
            mvsRecipient?: string;
            /** Format: double */
            referralFee?: number;
            /** @enum {string} */
            referralFeeType?: LawfirmSettingsDomainReferralFeeType;
            /** Format: date-time */
            vacationModeEndDateUtc?: string;
            vacationModeReason?: string;
        };
        /** LawfirmStatusModel */
        LawfirmStatusModel: {
            /** Format: int32 */
            id?: number;
            /** @enum {string} */
            name?: PathsApiV1LawfirmsGetParametersQueryStatuses;
        };
        /** LawfirmStorefrontModel */
        LawfirmStorefrontModel: {
            aboutUsBlurb?: string;
            /** Format: int32 */
            activeCaseCount?: number;
            /** Format: double */
            averageRating?: number;
            coverPhotoUrl?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** @enum {string} */
            lawfirmState?: PathsApiV1LawfirmsGetParametersQueryStatuses;
            profilePictureUrl?: string;
            /** Format: int32 */
            resolvedCaseCount?: number;
            /** Format: int32 */
            reviewCount?: number;
            reviewToDisplay?: string;
            reviewerName?: string;
            seoUrl?: string;
            tagLine?: string;
            vacationModeOn?: boolean;
            website?: string;
        };
        /** LawfirmVacationRequest */
        LawfirmVacationRequest: {
            isVacationModeEnabled?: boolean;
            /** Format: int32 */
            localTimezoneOffsetInHours?: number;
            /** Format: date-time */
            vacationEndDateUtc?: string;
            vacationReason?: string;
        };
        /** LawfirmsRatesResponse */
        LawfirmsRatesResponse: {
            rates?: components["schemas"]["LawfirmRatesResponse"][];
        };
        /** LawyerInviteByTokenModel */
        LawyerInviteByTokenModel: {
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmPictureUrl?: string;
        };
        /** LawyerInviteModel */
        LawyerInviteModel: {
            emailAddress?: string;
            /** Format: date-time */
            expiryDateUtc?: string;
            firstname?: string;
            lastname?: string;
            roleTypes?: AuthorModelUserRole[];
            /** @enum {string} */
            verificationStatus?: GetHouseHoldMateModelInviteStatus;
        };
        /** LawyerLicenseModel */
        LawyerLicenseModel: {
            /** Format: date-time */
            barLicenseIssueDate?: string;
            /** Format: int64 */
            id?: number;
            /** @enum {string} */
            licenseType?: LawyerLicenseModelLicenseType;
            /** @enum {string} */
            regionCode?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
        };
        /** LawyerModel */
        LawyerModel: {
            creationDateUtc?: components["schemas"]["Timestamp"];
            emailAddress?: string;
            firstname?: string;
            isEmailConfirmed?: boolean;
            isLawfirmAccessGranted?: boolean;
            isUserAccountEnabled?: boolean;
            jobTitle?: components["schemas"]["LawfirmJobTitleModel"];
            lastname?: string;
            lawSchool?: string;
            /** Format: int64 */
            lawfirmId?: number;
            /** Format: date-time */
            licensedDateUtc?: string;
            licenses?: components["schemas"]["LawyerLicenseModel"][];
            otherJobTitle?: string;
            phoneNumbers?: components["schemas"]["PhoneNumberDomain"][];
            profilePicture?: string;
            roleTypes?: AuthorModelUserRole[];
            /** Format: int64 */
            userId?: number;
            visibleOnStorefront?: boolean;
        };
        /** LegalServiceModel */
        LegalServiceModel: {
            algoName?: string;
            /** Format: int32 */
            chanceOfSuccess?: number;
            financials?: components["schemas"]["WorkflowFinancials"];
            isSelected?: boolean;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int64 */
            legalServiceId?: number;
            legalServiceName?: string;
            /** @enum {string} */
            legalServiceType?: PathsApiV2LawfirmsLawfirmIdCoverageGetParametersQueryLegalServiceType;
            /** @enum {string} */
            legalVertical?: LegalServiceModelLegalVertical;
            lineItems?: components["schemas"]["WorkflowLineItemModel"][];
            /** Format: date-time */
            matchExpirationDateUtc?: string;
            obfuscatedPictureUrl?: string;
            predeterminedLawfirmName?: string;
            profilePictureUrl?: string;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            refundMessage?: string;
            /** Format: int32 */
            refundPercentage?: number;
            /** Format: int32 */
            totalClientCostInCents?: number;
        };
        /** LetterOfEngagement */
        LetterOfEngagement: {
            docId?: string;
            docUrl?: string;
            /** Format: date-time */
            signedDateUtc?: string;
        };
        /** LineItem */
        LineItem: {
            additionalDescription?: string;
            /** Format: int32 */
            feeAmount?: number;
            /** @enum {string} */
            lineItem?: CaseLineItemDomainReqLineItemType;
        };
        /** LineItemModel */
        LineItemModel: {
            additionalDescription?: string;
            /** Format: int32 */
            feeAmount?: number;
            feeDescription?: string;
            /** @enum {string} */
            lineItemOwner?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            lineItemType?: components["schemas"]["InvoiceLineItemModel"];
        };
        /** LineItemRequest */
        LineItemRequest: {
            additionalDescription?: string;
            chargeDescription?: string;
            /** Format: int32 */
            feeInCents?: number;
            /** Format: int32 */
            lawfirmReferralCodeAdjustmentInCents?: number;
            /** @enum {string} */
            lineItemOwner?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            /** @enum {string} */
            lineItemType?: CaseLineItemDomainReqLineItemType;
            /** Format: int32 */
            otrMarketingFeeChargedToLawfirm?: number;
            /** Format: int32 */
            otrReferralCodeAdjustmentInCents?: number;
        };
        /** LinkedObjects */
        LinkedObjects: {
            linked_conversations?: string[];
            linked_tickets?: string[];
        };
        /** ListAgentBookingsResponse */
        ListAgentBookingsResponse: {
            agentBookings?: components["schemas"]["CustomerServiceAgentBookingDomain"][];
            agentStats?: components["schemas"]["AgentBookingStats"][];
            bookingsSummary?: components["schemas"]["AgentBookingsSummary"];
        };
        /** ListBillingProductsResponse */
        ListBillingProductsResponse: {
            products?: components["schemas"]["BillingProductModel"][];
        };
        /** ListBillingSubscribersResponse */
        ListBillingSubscribersResponse: {
            matchingAggregates?: components["schemas"]["BillingSubscriberAggregateModel"];
            subscribers?: components["schemas"]["BillingSubscriberModel"][];
            totalAggregates?: components["schemas"]["BillingSubscriberAggregateModel"];
        };
        /** ListBillingSubscriptionModel */
        ListBillingSubscriptionModel: {
            /** @enum {string} */
            billingInterval?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
            /** Format: date-time */
            currentPeriodEndDate?: string;
            /** Format: date-time */
            lastPastDueDateUtc?: string;
            productName?: string;
            /** Format: date-time */
            startDateUtc?: string;
            subscriptionId?: string;
            /** @enum {string} */
            subscriptionStatus?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
        };
        /** ListBillingSubscriptionsResponse */
        ListBillingSubscriptionsResponse: {
            subscriptions?: components["schemas"]["BillingSubscriptionModel"][];
            subscriptionsAsBeneficiary?: components["schemas"]["BillingSubscriptionModel"][];
        };
        /** ListCaseBookingsRequest */
        ListCaseBookingsRequest: {
            caseStatusFilter?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses[];
            /** Format: date-time */
            endDate?: string;
            genderFilterList?: CaseGender[];
            hasSubscriptionPlanFilter?: boolean;
            includeDataRecords?: boolean;
            lawfirmStringFilter?: string;
            /** Format: int32 */
            length?: number;
            /** Format: int32 */
            page?: number;
            raceFilterList?: CaseRace[];
            sortMap?: {
                [key: string]: string;
            };
            /** Format: date-time */
            startDate?: string;
            stateFilterList?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState[];
            statusCategoryFilter?: PathsApiV1CaseStatusesGetParametersQueryCategories[];
            timeZoneId?: string;
        };
        /** ListCaseBookingsResponse */
        ListCaseBookingsResponse: {
            aggregates?: components["schemas"]["Aggregates"];
            aggregatesByGender?: {
                [key: string]: components["schemas"]["AggregateQueryResults"];
            };
            aggregatesByRace?: {
                [key: string]: components["schemas"]["AggregateQueryResults"];
            };
            aggregatesByState?: {
                [key: string]: components["schemas"]["AggregateQueryResults"];
            };
            cases?: components["schemas"]["Case"][];
        };
        /** ListCaseCancellationsRequest */
        ListCaseCancellationsRequest: {
            /** Format: date-time */
            endDate?: string;
            includeDataRecords?: boolean;
            /** Format: date-time */
            startDate?: string;
            timeZoneId?: string;
        };
        /** ListCaseCancellationsResponse */
        ListCaseCancellationsResponse: {
            cancellationAggregates?: components["schemas"]["CancellationAggregates"];
            cancellations?: components["schemas"]["Case"][];
        };
        /** ListCaseOutcomesResponse */
        ListCaseOutcomesResponse: {
            outcomes?: components["schemas"]["CaseOutcomeModel"][];
        };
        /** ListCitationAuditEventsResponse */
        ListCitationAuditEventsResponse: {
            cursorModel?: components["schemas"]["CursorModel"];
            models?: components["schemas"]["CitationAuditEventModel"][];
            /** Format: int32 */
            totalRecords?: number;
        };
        /** ListCitationsRequest */
        ListCitationsRequest: {
            /** @enum {string} */
            caseStatusCategoryFilter?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            caseStatusFilterList?: string[];
            cdlStatus?: CitationInputRequestCdlStatus[];
            countyFilter?: string;
            /** Format: date-time */
            endDate?: string;
            /** @enum {string} */
            experimentGroup?: ListCitationsRequestExperimentGroup;
            experimentName?: string;
            hasAccident?: boolean;
            hasCase?: boolean;
            hasLastBookingDate?: boolean;
            hasPhoto?: boolean;
            includeDataRecords?: boolean;
            /** Format: int32 */
            length?: number;
            /** Format: int32 */
            page?: number;
            sortMap?: {
                [key: string]: string;
            };
            /** Format: date-time */
            startDate?: string;
            stateFilterList?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState[];
            timeZoneId?: string;
        };
        /** ListCitationsResponse */
        ListCitationsResponse: {
            citations?: components["schemas"]["CitationsResponseModel"][];
            /** Format: int32 */
            matchingRecords?: number;
            /** Format: int32 */
            totalRecords?: number;
        };
        /** ListContactTimelineResponse */
        ListContactTimelineResponse: {
            contacts?: components["schemas"]["ContactTimelineResponse"][];
        };
        /** ListCostItemsForCustomerResponse */
        ListCostItemsForCustomerResponse: {
            /** Format: int32 */
            clientBaseCostInCents?: number;
            /** Format: int32 */
            clientTotalCostInCents?: number;
            futurePayments?: components["schemas"]["CasePaymentModel"][];
            lineItems?: components["schemas"]["LineItemModel"][];
            /** Format: int32 */
            totalRefCodeAdjustmentInCents?: number;
        };
        /** ListDashboardCaseUsersResponse */
        ListDashboardCaseUsersResponse: {
            users?: components["schemas"]["DashboardCaseUserModel"][];
        };
        /** ListDashboardCasesResponse */
        ListDashboardCasesResponse: {
            cases?: components["schemas"]["DashboardCaseModel"][];
            counts?: components["schemas"]["DashboardCaseCountsDto"];
            /** Format: int32 */
            filteredCaseCount?: number;
            previousPageToken?: string;
            /** Format: int32 */
            totalCaseCount?: number;
        };
        /** ListEligibleStatusResponse */
        ListEligibleStatusResponse: {
            statuses?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses[];
        };
        /** ListEmployeesResponse */
        ListEmployeesResponse: {
            employees?: components["schemas"]["GetEmployeeModel"][];
        };
        /** ListLawfirmAuditEventsByCursorResponse */
        ListLawfirmAuditEventsByCursorResponse: {
            cursorModel?: components["schemas"]["CursorModel"];
            models?: components["schemas"]["LawfirmAuditEventModel"][];
            /** Format: int32 */
            totalRecords?: number;
        };
        /** ListLawfirmBankPayoutsResponse */
        ListLawfirmBankPayoutsResponse: {
            bankPayouts?: components["schemas"]["LawfirmBankPayoutModel"][];
            /** Format: int64 */
            totalCount?: number;
            /** Format: int32 */
            totalPages?: number;
        };
        /** ListLawfirmStorefrontsResponse */
        ListLawfirmStorefrontsResponse: {
            storefronts?: components["schemas"]["LawfirmStorefrontModel"][];
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            totalRecords?: number;
        };
        /** ListLawfirmSurchargeModel */
        ListLawfirmSurchargeModel: {
            /** @enum {string} */
            feature?: PathsApiV1LawfirmsLawfirmIdSurchargesGetParametersQueryFeatureType;
            /** @enum {string} */
            feeType?: ListLawfirmSurchargeModelFeeType;
            feeValue?: string;
            /** Format: int64 */
            id?: number;
            isEnabled?: boolean;
            /** @enum {string} */
            refundEligibility?: ListLawfirmSurchargeModelRefundEligibility;
        };
        /** ListLawfirmSurchargeTypeModel */
        ListLawfirmSurchargeTypeModel: {
            fees?: components["schemas"]["ListLawfirmSurchargeModel"][];
            /** @enum {string} */
            type?: ListLawfirmSurchargeTypeModelType;
        };
        /** ListLawfirmSurchargesResponse */
        ListLawfirmSurchargesResponse: {
            surcharges?: components["schemas"]["ListLawfirmSurchargeTypeModel"][];
        };
        /** ListLawfirmsEngagedRequest */
        ListLawfirmsEngagedRequest: {
            /** Format: date-time */
            endDate?: string;
            includeDataRecords?: boolean;
            /** Format: date-time */
            startDate?: string;
            timeZoneId?: string;
        };
        /** ListLawfirmsEngagedResponse */
        ListLawfirmsEngagedResponse: {
            aggregates?: components["schemas"]["Aggregates"];
            lawfirms?: components["schemas"]["Lawfirm"][];
        };
        /** ListNotesResponse */
        ListNotesResponse: {
            authors?: components["schemas"]["NoteAuthor"][];
            cursorModel?: components["schemas"]["Cursor"];
            notes?: components["schemas"]["NoteModel"][];
            /** Format: int64 */
            totalRecords?: number;
        };
        /** ListPhoneCallsCountModel */
        ListPhoneCallsCountModel: {
            /** Format: int32 */
            matchingRecords?: number;
            /** Format: int32 */
            totalRecords?: number;
        };
        /** ListPhoneCallsModel */
        ListPhoneCallsModel: {
            /** Format: int64 */
            agentId?: number;
            agentName?: string;
            /** @enum {string} */
            callDirection?: PathsApiV1ConsolePhoneCallsGetParametersQueryDirection;
            /** Format: int32 */
            callDurationInSeconds?: number;
            callQueueName?: string;
            /** Format: date-time */
            callStartDateUtc?: string;
            /** @enum {string} */
            callStatus?: PathsApiV1ConsolePhoneCallsGetParametersQueryCallStatus;
            callStatusName?: string;
            customerName?: string;
            /** Format: int32 */
            holdDurationInSeconds?: number;
            /** Format: int32 */
            ivrDurationInSeconds?: number;
            ivrName?: string;
            phoneNumber?: string;
            recordingUrl?: string;
            /** Format: int32 */
            talkDurationInSeconds?: number;
            teamName?: string;
            /** Format: int32 */
            totalCalls?: number;
            /** Format: int32 */
            totalOtrAccounts?: number;
            /** Format: int64 */
            userId?: number;
        };
        /** ListPhoneCallsResponse */
        ListPhoneCallsResponse: {
            phoneCalls?: components["schemas"]["ListPhoneCallsModel"][];
            phoneCallsCount?: components["schemas"]["ListPhoneCallsCountModel"];
        };
        /** ListReferralsResponse */
        ListReferralsResponse: {
            aggregates?: components["schemas"]["AggregateReferralCredit"];
            referralsPerUser?: components["schemas"]["ReferralResponseByUser"][];
        };
        /** ListReviewsResponse */
        ListReviewsResponse: {
            aggregates?: components["schemas"]["AggregateRatingMetrics"];
            cursorModel?: components["schemas"]["CursorModel"];
            reviews?: components["schemas"]["CustomerReview"][];
        };
        /** ListSubscriptionInvoicesResponse */
        ListSubscriptionInvoicesResponse: {
            invoices?: components["schemas"]["BillingInvoiceModel"][];
        };
        /** ListUserAuditEventsByCursorResponse */
        ListUserAuditEventsByCursorResponse: {
            cursorModel?: components["schemas"]["ListUserAuditEventsCursorModel"];
            events?: components["schemas"]["UserAuditEventModel"][];
            /** Format: int32 */
            totalRecords?: number;
        };
        /** ListUserAuditEventsCursorModel */
        ListUserAuditEventsCursorModel: {
            nextPageToken?: string;
        };
        /** ListUserCoachingCardsResponse */
        ListUserCoachingCardsResponse: {
            userCoachingCards?: components["schemas"]["CoachingCardsModel"][];
            /** Format: int64 */
            userId?: number;
        };
        /** ListUserWatchlistsResponse */
        ListUserWatchlistsResponse: {
            /** Format: int64 */
            userId?: number;
            userWatchlists?: components["schemas"]["UserWatchlistsModel"][];
        };
        /** ListViolationClassificationResponse */
        ListViolationClassificationResponse: {
            models?: components["schemas"]["ViolationClassificationModel"][];
        };
        /** LobEvent */
        LobEvent: {
            enabled_for_test?: boolean;
            id?: string;
            resource?: string;
        };
        /** LobEventRequest */
        LobEventRequest: {
            /** Format: date-time */
            date_created?: string;
            event_type?: components["schemas"]["LobEvent"];
            id?: string;
            reference_id?: string;
        };
        /** LobMailingAddress */
        LobMailingAddress: {
            city?: string;
            countryCode?: string;
            line1?: string;
            line2?: string;
            postalCode?: string;
            regionCode?: string;
        };
        /** LocalTime */
        LocalTime: {
            /** Format: int32 */
            hour?: number;
            /** Format: int32 */
            minute?: number;
            /** Format: int32 */
            nano?: number;
            /** Format: int32 */
            second?: number;
        };
        /** LookupParamValue */
        LookupParamValue: {
            dropdown?: boolean;
            dropdownValues?: string[];
            placeholder?: string;
            required?: boolean;
            /** @enum {string} */
            value?: LookupParamValueValue;
        };
        /** LostCaseWithTransferNotReversed */
        LostCaseWithTransferNotReversed: {
            /** Format: int32 */
            actualCustomerCost?: number;
            /** Format: int32 */
            amountRefunded?: number;
            /** Format: int32 */
            applicationFeeRefundAmount?: number;
            caseId?: string;
            caseResolutionDateUtc?: components["schemas"]["TimestampRes"];
            firstName?: string;
            lastName?: string;
            /** Format: int32 */
            lawfirmGrossRevenue?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int32 */
            originalApplicationFee?: number;
            /** Format: int32 */
            originalCustomerCost?: number;
            /** Format: int32 */
            originalTransferAmount?: number;
            /** Format: int32 */
            otrIncome?: number;
            /** Format: int32 */
            platformFee?: number;
            /** @enum {string} */
            refundOwner?: CaseTransferHistoryRefundOwner;
            /** Format: int32 */
            stripeFee?: number;
            /** Format: int32 */
            transferAmountRefunded?: number;
            /** Format: int64 */
            userId?: number;
        };
        /** MarkActionAsDeletedResponse */
        MarkActionAsDeletedResponse: {
            caseAction?: components["schemas"]["CaseActionDomain"];
        };
        /** MarkCaseAsResolvedRequest */
        MarkCaseAsResolvedRequest: {
            /** Format: int32 */
            adjustedFineAmount?: number;
            /** Format: int32 */
            adjustedPointCount?: number;
            isSilentResolution?: boolean;
            /** Format: int32 */
            originalPointCount?: number;
            /** @enum {string} */
            resolutionStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            resolutionSummary?: string;
        };
        /** MarkCaseAsResolvedResponse */
        MarkCaseAsResolvedResponse: {
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            isDeprecated?: boolean;
            lawfirmFriendlyDescription?: string;
            lawfirmFriendlyName?: string;
            /** @enum {string} */
            statusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            /** Format: int32 */
            statusId?: number;
        };
        /** MatchCaseLineItemModel */
        MatchCaseLineItemModel: {
            additionalDescription?: string;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int32 */
            lineItemFeeInCents?: number;
            lineItemType?: components["schemas"]["InvoiceLineItemModel"];
            /** @enum {string} */
            recipient?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
        };
        /** MatchCaseResponse */
        MatchCaseResponse: {
            /** Format: int32 */
            chanceOfSuccess?: number;
            /** Format: int32 */
            projectedInsuranceCostInCents?: number;
            theCase?: components["schemas"]["MatchInnerCaseResponse"];
        };
        /** MatchCaseViolationPenaltyModel */
        MatchCaseViolationPenaltyModel: {
            penaltyFriendlyDescription?: string;
            /** @enum {string} */
            penaltyType?: CaseViolationPenaltyPenaltyType;
            penaltyValue?: string;
        };
        /** MatchCitationModel */
        MatchCitationModel: {
            address?: components["schemas"]["AddressDomain"];
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            citationIssueDateUtc?: components["schemas"]["Timestamp"];
            citationLockedForClient?: boolean;
            clientEmailAddress?: string;
            clientFirstName?: string;
            court?: components["schemas"]["CourtDomain"];
            documentUrlToConvert?: string;
            /** Format: bigdecimal */
            fineAmount?: number;
            hasCitationImage?: boolean;
            involvesAccident?: boolean;
            isDeleted?: boolean;
            regionCode?: string;
            signedTicketImageUrl?: string;
            ticketImageUrl?: string;
            ticketNumber?: string;
            /** Format: int32 */
            violationCount?: number;
            violations?: components["schemas"]["ViolationModel"][];
        };
        /** MatchCitationResponse */
        MatchCitationResponse: {
            address?: components["schemas"]["AddressDomain"];
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            citationIssueDateUTC?: components["schemas"]["Timestamp"];
            court?: components["schemas"]["CourtDomain"];
            /** Format: bigdecimal */
            fineAmount?: number;
            involvesAccident?: boolean;
            isDeleted?: boolean;
            ticketImageUrl?: string;
            ticketNumber?: string;
            violations?: components["schemas"]["ViolationResponse"][];
        };
        /** MatchInnerCaseModel */
        MatchInnerCaseModel: {
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            citation?: components["schemas"]["MatchCitationModel"];
            courtAppointmentDate?: components["schemas"]["Timestamp"];
            isLawfirmCodeApplied?: boolean;
            legalServices?: components["schemas"]["MatchLegalServiceModel"][];
            maxPenalties?: components["schemas"]["MatchCaseViolationPenaltyModel"][];
            paymentPlanTypeModel?: components["schemas"]["PaymentPlanTypeModel"];
            referralCode?: string;
            /** @enum {string} */
            referralCodeOwner?: GetReferralCodeResponseOwnerType;
            subscriptionDiscountEligibility?: components["schemas"]["SubscriptionDiscountEligibility"];
            /** Format: int64 */
            userId?: number;
        };
        /** MatchInnerCaseResponse */
        MatchInnerCaseResponse: {
            caseId?: string;
            citation?: components["schemas"]["MatchCitationResponse"];
            lawfirmCaseDecision?: components["schemas"]["MatchLawfirmCaseResponse"];
            lawfirmCodeApplied?: boolean;
            maxPenalties?: components["schemas"]["CaseViolationPenalty"][];
            /** @enum {string} */
            referralCodeOwner?: GetReferralCodeResponseOwnerType;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            subscriptionDiscountEligibility?: components["schemas"]["SubscriptionDiscountEligibility"];
            uiReasonMsg?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** MatchLawfirmCaseResponse */
        MatchLawfirmCaseResponse: {
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: date-time */
            matchExpirationDateUtc?: string;
            obfuscatedPictureUrl?: string;
            profilePictureUrl?: string;
        };
        /** MatchLegalServiceModel */
        MatchLegalServiceModel: {
            /** Format: int32 */
            chanceOfSuccess?: number;
            isSelected?: boolean;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int64 */
            legalServiceId?: number;
            legalServiceName?: string;
            /** @enum {string} */
            legalServiceType?: PathsApiV2LawfirmsLawfirmIdCoverageGetParametersQueryLegalServiceType;
            /** @enum {string} */
            legalVertical?: LegalServiceModelLegalVertical;
            lineItems?: components["schemas"]["MatchCaseLineItemModel"][];
            /** Format: date-time */
            matchExpirationDateUtc?: string;
            obfuscatedPictureUrl?: string;
            profilePictureUrl?: string;
            /** @enum {string} */
            refundEligibility?: AccountLevelFeeRefundEligibility;
            refundMessage?: string;
            /** Format: int32 */
            refundPercentage?: number;
            /** Format: int32 */
            totalClientCostInCents?: number;
        };
        /** MatchLegalServicesRequest */
        MatchLegalServicesRequest: {
            /** Format: date-time */
            courtDate?: string;
            forcePredeterminedLawfirmId?: boolean;
            isMatchInternal?: boolean;
            /** @enum {string} */
            legalServiceType?: PathsApiV2LawfirmsLawfirmIdCoverageGetParametersQueryLegalServiceType;
            legalServicesMatchingRules?: components["schemas"]["MatchingFieldValue"][];
            /** Format: int32 */
            legalServicesResultLimit: number;
            /** @enum {string} */
            legalVertical: LegalServiceModelLegalVertical;
            /** Format: int64 */
            predeterminedLawfirmId?: number;
            setQuoteExpirationOn?: boolean;
        };
        /** MatchLegalServicesResponse */
        MatchLegalServicesResponse: {
            /** Format: int32 */
            projectedInsuranceCostInCents?: number;
            theCase?: components["schemas"]["MatchInnerCaseModel"];
        };
        /** MatchingFieldValue */
        MatchingFieldValue: {
            /** @enum {string} */
            matchingField?: MatchingFieldValueMatchingField;
            value?: string;
        };
        /** MediaItemModel */
        MediaItemModel: {
            content?: string;
            fileExtension?: string;
            fileName?: string;
            /** Format: int64 */
            fileSize?: number;
            /** Format: int32 */
            pageNumber?: number;
            /** @enum {string} */
            type?: CaseMessageDomainMediaType;
        };
        /** MergeStatusReport */
        MergeStatusReport: {
            otherChanges?: components["schemas"]["MergeTableChange"][];
            tableMerges?: components["schemas"]["MergeTableRecord"][];
        };
        /** MergeTableChange */
        MergeTableChange: {
            message?: string;
        };
        /** MergeTableRecord */
        MergeTableRecord: {
            tableName?: string;
            /** Format: int32 */
            updateRowCount?: number;
        };
        /** MergeTicketResponse */
        MergeTicketResponse: {
            isSuccess?: boolean;
            log?: string;
            reason?: string;
        };
        /** MergeUserRequest */
        MergeUserRequest: {
            /** Format: int32 */
            authCode?: number;
            formerUserId?: string;
            rollback?: boolean;
        };
        /** MergeUserResponse */
        MergeUserResponse: {
            report?: components["schemas"]["MergeStatusReport"];
        };
        /** MessageByEntityModel */
        MessageByEntityModel: {
            authorFirstName?: string;
            authorLastName?: string;
            /** Format: int64 */
            authorUserId?: number;
            caseDocId?: string;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            customerFirstName?: string;
            customerLastName?: string;
            docType?: string;
            docUrl?: string;
            isDeleted?: boolean;
            messageBody?: string;
            /** Format: int64 */
            messageId?: number;
            /** Format: date-time */
            messageSentDateUtc?: string;
            profilePictureUrl?: string;
        };
        /** MessageInputModel */
        MessageInputModel: {
            /** @enum {string} */
            author?: AuthorModelUserRole;
            encodedMediaData?: string;
            /** @enum {string} */
            mediaType?: CaseMessageDomainMediaType;
            messageBody?: string;
        };
        /** MissingLawfirmPayoutResult */
        MissingLawfirmPayoutResult: {
            /** Format: date-time */
            bookingConfirmedDateUtc?: string;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** Format: date-time */
            lawfirmDecisionDateUtc?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** Format: int64 */
            numTransfers?: number;
            /** Format: int64 */
            outstandingTransferAmount?: number;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            /** Format: int64 */
            transferredAmount?: number;
            /** Format: int64 */
            userId?: number;
            userName?: string;
        };
        /** MissingPaymentDomain */
        MissingPaymentDomain: {
            /** Format: date-time */
            bookingConfirmedDateUtc?: string;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** Format: int32 */
            caseSubtotal?: number;
            /** Format: int32 */
            chargeAttempts?: number;
            /** Format: int32 */
            disputedAmount?: number;
            /** Format: int32 */
            dueLater?: number;
            /** Format: date-time */
            lastAttemptDateUtc?: string;
            /** Format: date-time */
            lawfirmDecisionDateUtc?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            mostRecentChargeError?: string;
            /** Format: date-time */
            mostRecentDueDateUtc?: string;
            /** Format: int32 */
            overdue?: number;
            /** @enum {string} */
            statusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            /** Format: int32 */
            totalPaid?: number;
            /** Format: int64 */
            userId?: number;
            userName?: string;
        };
        /** NewUser */
        NewUser: {
            emailAddress?: string;
            firstname?: string;
            isEmailConfirmed?: boolean;
            lastname?: string;
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            password?: string;
            phoneNumbers?: components["schemas"]["PhoneNumberDomain"][];
            shouldOptInForMarketingNotifications?: boolean;
            shouldOptInForSmsNotifications?: boolean;
        };
        /** NewUserResponse */
        NewUserResponse: {
            emailAddress?: string;
            firstname?: string;
            intercomUserHash?: string;
            isTestUser?: boolean;
            lastname?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** NoLawyerAvailableRequest */
        NoLawyerAvailableRequest: {
            offerPrice?: string;
            phoneNumber?: string;
        };
        /** NoViolationCitation */
        NoViolationCitation: {
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** Format: int64 */
            citationId?: number;
            regionCode?: string;
            unsignedImageUrl?: string;
            /** Format: date-time */
            uploadDateUtc?: string;
            /** Format: int64 */
            userId?: number;
            violations?: components["schemas"]["ViolationInput"][];
        };
        /** NoteAuthor */
        NoteAuthor: {
            firstName?: string;
            lastName?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** NoteEntity */
        NoteEntity: {
            author?: components["schemas"]["NoteAuthor"];
            deletedDateUtc?: components["schemas"]["TimestampRes"];
            isDeleted?: boolean;
            note?: string;
            /** Format: int64 */
            noteId?: number;
            /** @enum {string} */
            noteType?: PathsApiV2NotesSearchGetParametersQueryNoteType;
            postedDateUtc?: components["schemas"]["TimestampRes"];
            referenceId?: string;
        };
        /** NoteModel */
        NoteModel: {
            author?: components["schemas"]["NoteAuthor"];
            deletedDateUtc?: components["schemas"]["Timestamp"];
            isDeleted?: boolean;
            note?: string;
            /** Format: int64 */
            noteId?: number;
            /** @enum {string} */
            noteType?: PathsApiV2NotesSearchGetParametersQueryNoteType;
            postedDateUtc?: components["schemas"]["Timestamp"];
            referenceId?: string;
        };
        /** NotificationEvent */
        NotificationEvent: {
            /** Format: date-time */
            eventDate?: string;
            fullName?: string;
            message?: string;
            /** Format: int64 */
            notificationId?: number;
            referenceId?: string;
            /** Format: int64 */
            unreadCount?: number;
        };
        /** NotificationEvents */
        NotificationEvents: {
            events?: {
                [key: string]: components["schemas"]["NotificationEvent"][];
            };
            /** Format: int64 */
            totalUnreadCount?: number;
        };
        /** OCRCitationPredictionResponse */
        OCRCitationPredictionResponse: {
            /** @example yyyy-MM-dd */
            citationIssueDate?: string;
            courtName?: string;
            /** @example yyyy-MM-dd */
            dateOfBirth?: string;
            firstName?: string;
            lastName?: string;
            licenseNumber?: string;
            /** @enum {string} */
            race?: OCRCitationPredictionResponseRace;
            /** @enum {string} */
            sex?: OCRCitationPredictionResponseSex;
        };
        /** OCRCourtModel */
        OCRCourtModel: {
            city?: string;
            countyName?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            courtNameAdditional?: string;
            regionCode?: string;
            /** Format: int32 */
            similarityScore?: number;
            timeZoneName?: string;
        };
        /** OCRPredictionCaseResponse */
        OCRPredictionCaseResponse: {
            accident?: components["schemas"]["ConfidenceField"];
            cdlClp?: components["schemas"]["ConfidenceField"];
            classification?: components["schemas"]["ConfidenceField"];
            court?: components["schemas"]["ConfidenceField"];
            courtOri?: components["schemas"]["ConfidenceField"];
            driversCity?: components["schemas"]["ConfidenceField"];
            driversDOB?: components["schemas"]["ConfidenceField"];
            driversFirstName?: components["schemas"]["ConfidenceField"];
            driversLastName?: components["schemas"]["ConfidenceField"];
            driversLicenseExpDate?: components["schemas"]["ConfidenceField"];
            driversLicenseNumber?: components["schemas"]["ConfidenceField"];
            driversLicenseState?: components["schemas"]["ConfidenceField"];
            driversMiddleName?: components["schemas"]["ConfidenceField"];
            driversRace?: components["schemas"]["ConfidenceField"];
            driversSex?: components["schemas"]["ConfidenceField"];
            driversState?: components["schemas"]["ConfidenceField"];
            driversStreetAddress?: components["schemas"]["ConfidenceField"];
            driversZip?: components["schemas"]["ConfidenceField"];
            eligibleCourtModels?: components["schemas"]["OCRCourtModel"][];
            eligibleViolationModels?: components["schemas"]["OCRViolationModel"][];
            infractionNumber?: components["schemas"]["ConfidenceField"];
            infractionType?: components["schemas"]["ConfidenceField"];
            leaOri?: components["schemas"]["ConfidenceField"];
            officerBadgeNumber?: components["schemas"]["ConfidenceField"];
            officerName?: components["schemas"]["ConfidenceField"];
            ownerCity?: components["schemas"]["ConfidenceField"];
            ownerFirstName?: components["schemas"]["ConfidenceField"];
            ownerLastName?: components["schemas"]["ConfidenceField"];
            ownerState?: components["schemas"]["ConfidenceField"];
            ownerStreetAddress?: components["schemas"]["ConfidenceField"];
            ownerZip?: components["schemas"]["ConfidenceField"];
            smd?: components["schemas"]["ConfidenceField"];
            totalPenalty?: components["schemas"]["ConfidenceField"];
            vehicleActualSpeed?: components["schemas"]["ConfidenceField"];
            vehicleColor?: components["schemas"]["ConfidenceField"];
            vehicleMake?: components["schemas"]["ConfidenceField"];
            vehicleModel?: components["schemas"]["ConfidenceField"];
            vehiclePlateExp?: components["schemas"]["ConfidenceField"];
            vehiclePlateNumber?: components["schemas"]["ConfidenceField"];
            vehiclePlateState?: components["schemas"]["ConfidenceField"];
            vehicleStyle?: components["schemas"]["ConfidenceField"];
            vehicleYear?: components["schemas"]["ConfidenceField"];
            violationCity?: components["schemas"]["ConfidenceField"];
            violationDate?: components["schemas"]["ConfidenceField"];
            violationLocation?: components["schemas"]["ConfidenceField"];
            violationTime?: components["schemas"]["ConfidenceField"];
            violations?: components["schemas"]["Violation"][];
            zoneSpeedLimit?: components["schemas"]["ConfidenceField"];
        };
        /** OCRViolationModel */
        OCRViolationModel: {
            classDescription?: string;
            criminal?: boolean;
            /** Format: int32 */
            similarityScore?: number;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationDescription?: string;
            /** Format: int64 */
            violationId?: number;
            wobblerToCriminal?: boolean;
        };
        /** OtherCase */
        OtherCase: {
            caseNumber?: string;
            charges?: string;
            filedDate?: string;
            jurisdiction?: string;
            nextHearing?: string;
            status?: string;
        };
        /** OutgoingContactDomain */
        OutgoingContactDomain: {
            actionType?: string;
            caseId?: string;
            /** Format: int64 */
            citationId?: number;
            /** Format: date-time */
            contactSentDateUtc?: string;
            emailSubject?: string;
            /** Format: int64 */
            emailTemplateId?: number;
            emailTemplateName?: string;
            /** Format: int64 */
            outgoingContactId?: number;
            recipientEmailAddress?: string;
            /** Format: int64 */
            recipientUserId?: number;
            senderFirstName?: string;
            senderLastName?: string;
            /** Format: int64 */
            senderUserId?: number;
        };
        /** OverduePaymentModel */
        OverduePaymentModel: {
            /** Format: int32 */
            overduePaymentAmountInCents?: number;
        };
        /** PaymentCardInput */
        PaymentCardInput: {
            last4?: string;
        };
        /** PaymentPlanTypeModel */
        PaymentPlanTypeModel: {
            /** Format: int32 */
            paymentPlanId?: number;
            /** @enum {string} */
            paymentPlanType?: AcceptCaseCounterRequestPaymentPlanType;
        };
        /** PaymentPlanTypeModelReq */
        PaymentPlanTypeModelReq: {
            /** Format: int32 */
            paymentPlanId?: number;
            /** @enum {string} */
            paymentPlanType?: AcceptCaseCounterRequestPaymentPlanType;
        };
        /** PaymentPlanTypeModelRes */
        PaymentPlanTypeModelRes: {
            /** Format: int32 */
            paymentPlanId?: number;
            /** @enum {string} */
            paymentPlanType?: AcceptCaseCounterRequestPaymentPlanType;
        };
        /** Penalty */
        Penalty: {
            additionalTip?: string;
            penaltyFriendlyDescription?: string;
            penaltyMerged?: boolean;
            /** @enum {string} */
            penaltyType?: CaseViolationPenaltyPenaltyType;
            /** Format: int32 */
            penaltyTypeId?: number;
            penaltyValue?: string;
            vectorImageUrl?: string;
        };
        /** PenaltyModel */
        PenaltyModel: {
            additionalTip?: string;
            penaltyDataType?: string;
            penaltyFriendlyDescription?: string;
            /** @enum {string} */
            penaltyType?: CaseViolationPenaltyPenaltyType;
            /** Format: int32 */
            penaltyTypeId?: number;
            penaltyValue?: string;
        };
        /** PenaltyRequest */
        PenaltyRequest: {
            /** Format: int32 */
            penaltyTypeId?: number;
            penaltyValue?: string;
        };
        /** PersistTicketEvaluationRequest */
        PersistTicketEvaluationRequest: {
            /** Format: int64 */
            citationId?: number;
            citationState?: string;
            emailAddress?: string;
            isOptIntoAutomatedNotifications?: boolean;
            phoneNumber?: string;
            /** @enum {string} */
            source?: PersistTicketEvaluationRequestSource;
            submissionDateUtc?: components["schemas"]["TimestampReq"];
            visitorName?: string;
        };
        /** PhoneNumberDomain */
        PhoneNumberDomain: {
            countryCode?: string;
            creationDateUtc?: components["schemas"]["Timestamp"];
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            extension?: string;
            lastUpdatedDateUtc?: components["schemas"]["Timestamp"];
            phoneNumber?: string;
            /** Format: int64 */
            phoneNumberId?: number;
            /** Format: int64 */
            referenceId?: number;
            /** @enum {string} */
            type?: PhoneNumberDomainType;
            /** Format: date-time */
            verificationDateUtc?: string;
        };
        /** PhoneNumberDomainReq */
        PhoneNumberDomainReq: {
            countryCode?: string;
            creationDateUtc?: components["schemas"]["TimestampReq"];
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            extension?: string;
            lastUpdatedDateUtc?: components["schemas"]["TimestampReq"];
            phoneNumber?: string;
            /** Format: int64 */
            phoneNumberId?: number;
            /** Format: int64 */
            referenceId?: number;
            /** @enum {string} */
            type?: PhoneNumberDomainType;
            /** Format: date-time */
            verificationDateUtc?: string;
        };
        /** PhoneNumberDomainRes */
        PhoneNumberDomainRes: {
            countryCode?: string;
            creationDateUtc?: components["schemas"]["TimestampRes"];
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            extension?: string;
            lastUpdatedDateUtc?: components["schemas"]["TimestampRes"];
            phoneNumber?: string;
            /** Format: int64 */
            phoneNumberId?: number;
            /** Format: int64 */
            referenceId?: number;
            /** @enum {string} */
            type?: PhoneNumberDomainType;
            /** Format: date-time */
            verificationDateUtc?: string;
        };
        /** PostCourtCoverageRequest */
        PostCourtCoverageRequest: {
            courts?: components["schemas"]["AddCourtCoverageRequest"][];
        };
        /** PostFeedbackRequest */
        PostFeedbackRequest: {
            feedback?: components["schemas"]["FeedbackDomain"];
        };
        /** PotentialCustomerDomain */
        PotentialCustomerDomain: {
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** Format: int64 */
            caseStatusId?: number;
            caseStatusName?: string;
            /** Format: int64 */
            citationId?: number;
            citationIssueDateUtc?: components["schemas"]["TimestampRes"];
            /** @enum {string} */
            citationState?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            citationSubmitDateUtc?: components["schemas"]["TimestampRes"];
            clientEmailAddress?: string;
            clientFirstName?: string;
            clientLastName?: string;
            courtCity?: string;
            courtCounty?: string;
            /** Format: int64 */
            courtId?: number;
            courtName?: string;
            hasDuplicateSubmission?: boolean;
            isCitationDismissedFromContactList?: boolean;
            isUnwantedDuplicate?: boolean;
            lastBookingDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            outgoingContacts?: components["schemas"]["OutgoingContactDomain"][];
            /** Format: int64 */
            ticketsFought?: number;
            userCreationDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            userId?: number;
        };
        /** PredictCitationRequest */
        PredictCitationRequest: {
            citationId?: string;
            imageInBase64?: string;
            regionCode?: string;
        };
        /** PredictCitationResponse */
        PredictCitationResponse: {
            ocrResult?: components["schemas"]["SlimCitationInferenceResponse"];
        };
        /** PredictCitationTextRequest */
        PredictCitationTextRequest: {
            /** Format: int64 */
            citationId?: number;
            imageInBase64?: string;
            regionCode?: string;
        };
        /** PredictImageClassificationRequest */
        PredictImageClassificationRequest: {
            /** Format: int64 */
            citationId?: number;
            imageInBase64?: string;
        };
        /** PredictImageClassificationResponse */
        PredictImageClassificationResponse: {
            document?: boolean;
            /** @enum {string} */
            documentType?: PredictImageClassificationResponseDocumentType;
            regionCode?: string;
        };
        /** PredictRichCitationResponse */
        PredictRichCitationResponse: {
            ocrResult?: components["schemas"]["RichCitationInferenceResponse"];
        };
        /** PreviewDocumentRequest */
        PreviewDocumentRequest: {
            clientName?: string;
            legalFee?: string;
            textProvidedByLawfirm?: string;
        };
        /** PriceMatchRequest */
        PriceMatchRequest: {
            attorneyContactInfo?: string;
            attorneyName?: string;
            clientEmailAddress?: string;
            clientName?: string;
            details?: string;
            priceToMatch?: string;
            website?: string;
        };
        /** PriceMatchResponse */
        PriceMatchResponse: {
            matchedLawfirm?: string;
            /** Format: int64 */
            matchedPrice?: number;
            /** @enum {string} */
            priceMatchStatus?: PriceMatchResponsePriceMatchStatus;
            referralCode?: string;
        };
        /** PublishReferralContactsResponse */
        PublishReferralContactsResponse: {
            contacts?: components["schemas"]["ReferralContactStatus"][];
        };
        /** PublishReferralRequest */
        PublishReferralRequest: {
            contacts?: components["schemas"]["ReferralContact"][];
            dryRun?: boolean;
        };
        /** PureDate */
        PureDate: {
            /** Format: date-time */
            date?: string;
        };
        /** PushNotificationRegistrationRequest */
        PushNotificationRegistrationRequest: {
            deviceToken?: string;
            /** @enum {string} */
            platformType?: PushNotificationRegistrationRequestPlatformType;
        };
        /** PushNotificationRequest */
        PushNotificationRequest: {
            messageBody?: string;
            /** @enum {string} */
            pageType?: DeleteNotificationByPagesRequestPageTypes;
            /** @enum {string} */
            platformType?: PushNotificationRegistrationRequestPlatformType;
            recipientId?: string;
        };
        /** PutDocumentRequest */
        PutDocumentRequest: {
            /** @enum {string} */
            clientDocReq?: LawfirmCaseDocumentClientDocRequirement;
            /** @enum {string} */
            docType?: PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type;
            textProvidedByLawfirm?: string;
        };
        /** ReferralContact */
        ReferralContact: {
            emailAddress?: string;
            firstName?: string;
            lastName?: string;
        };
        /** ReferralContactStatus */
        ReferralContactStatus: {
            emailAddress?: string;
            /** @enum {string} */
            errorType?: ReferralContactStatusErrorType;
            successful?: boolean;
        };
        /** ReferralResponse */
        ReferralResponse: {
            caseId?: string;
            caseResolved?: boolean;
            referralCode?: string;
            /** @enum {string} */
            referralCreditStatus?: ReferralResponseReferralCreditStatus;
            /** @enum {string} */
            referralCreditType?: CreateReferralCodeRequestRefereeCreditType;
            /** Format: bigdecimal */
            referralCreditValue?: number;
            /** Format: date-time */
            referralDate?: string;
            /** @enum {string} */
            referralEvent?: AddReferralRequestReferralEvent;
            /** Format: date-time */
            referralExpirationDate?: string;
            /** Format: int64 */
            referralId?: number;
            /** @enum {string} */
            referralPaymentStatus?: ReferralResponseReferralPaymentStatus;
            /** @enum {string} */
            referralSourceType?: ReferralResponseReferralSourceType;
            referredUser?: components["schemas"]["UserDetails"];
        };
        /** ReferralResponseByUser */
        ReferralResponseByUser: {
            /** @enum {string} */
            latestCreditStatus?: ReferralResponseReferralCreditStatus;
            /** Format: int64 */
            refereeUserId?: number;
            referrals?: components["schemas"]["ReferralResponse"][];
        };
        /** RefundCasePaymentRequest */
        RefundCasePaymentRequest: {
            /** Format: int64 */
            refundAmount?: number;
            refundNote?: string;
            refundOTRFees?: boolean;
            /** @enum {string} */
            refundReasonType?: RefundCasePaymentRequestRefundReasonType;
            reverseLawfirmPayout?: boolean;
        };
        /** RefundLawfirmFeeRequest */
        RefundLawfirmFeeRequest: {
            /** Format: int64 */
            otrRefundAmount?: number;
            overrideRefundOwner?: boolean;
            /** Format: int64 */
            refundAmount?: number;
            refundNote?: string;
            /** @enum {string} */
            refundReason?: RefundCasePaymentRequestRefundReasonType;
            /** Format: int64 */
            stripeRefundAmount?: number;
        };
        /** RegisterGhostUserRequest */
        RegisterGhostUserRequest: {
            allowIntercomUserCreation?: boolean;
            ghostUser?: components["schemas"]["GhostUser"];
            /** @enum {string} */
            roleType?: AuthorModelUserRole;
        };
        /** RegisterGhostUserResponse */
        RegisterGhostUserResponse: {
            ghostUser?: components["schemas"]["GhostUserResponse"];
        };
        /** RegisterNewUserRequest */
        RegisterNewUserRequest: {
            authCode?: string;
            /** Format: int64 */
            citationId?: number;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            fingerPrintId?: string;
            httpReferrer?: string;
            isAutoLogin?: boolean;
            otherNote?: string;
            referralCode?: string;
            referralSourceData?: {
                [key: string]: Record<string, never>;
            };
            /** @enum {string} */
            roleType?: AuthorModelUserRole;
            shouldVerifyPhoneNumber?: boolean;
            user?: components["schemas"]["NewUser"];
            /** Format: int32 */
            userReferralSourceTypeId?: number;
        };
        /** RegisterNewUserResponse */
        RegisterNewUserResponse: {
            newAccount?: boolean;
            user?: components["schemas"]["NewUserResponse"];
            userLoggedIn?: boolean;
            userRememberMeAuthenticated?: boolean;
        };
        /** RegisteredUserDomain */
        RegisteredUserDomain: {
            campaign?: string;
            channel?: string;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** Format: date-time */
            dob?: string;
            firstname?: string;
            fullName?: string;
            /** @enum {string} */
            genderType?: CaseGender;
            lastname?: string;
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            /** Format: int32 */
            numBookingCancelations?: number;
            /** Format: int32 */
            paidCaseCount?: number;
            profilePicture?: string;
            /** @enum {string} */
            race?: CaseRace;
            signUpCode?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: date-time */
            userRegistrationDateUtc?: string;
        };
        /** RemoveAdditionalUserHandleRequest */
        RemoveAdditionalUserHandleRequest: {
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
        };
        /** RemoveCoverageRequest */
        RemoveCoverageRequest: {
            coverage?: components["schemas"]["CoverageToRemove"][];
        };
        /** RemoveLawfirmSurchargeRequest */
        RemoveLawfirmSurchargeRequest: {
            surchargeIds?: number[];
        };
        /** ReplyToReviewRequest */
        ReplyToReviewRequest: {
            copy?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** ReplyToTicketRequest */
        ReplyToTicketRequest: {
            htmlReply?: string;
            /** @enum {string} */
            newTicketStatus?: FreshDeskTicketStatusType;
        };
        /** RescheduleTaskRequest */
        RescheduleTaskRequest: {
            /** Format: date-time */
            runAtDateUtc?: string;
        };
        /** ResetFeeForLawfirmModel */
        ResetFeeForLawfirmModel: {
            /** Format: int64 */
            courtId?: number;
        };
        /** ResetFeesForLawfirmRequest */
        ResetFeesForLawfirmRequest: {
            models?: components["schemas"]["ResetViolationModel"][];
        };
        /** ResetFeesForLawfirmResponse */
        ResetFeesForLawfirmResponse: {
            models?: components["schemas"]["ResetFeeForLawfirmModel"][];
        };
        /** ResetUserPasswordRequest */
        ResetUserPasswordRequest: {
            newPasswordPlainText?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** ResetViolationModel */
        ResetViolationModel: {
            regionCode?: string;
            /** @enum {string} */
            violationClass?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            /** Format: int64 */
            violationId?: number;
        };
        /** Results */
        Results: {
            resultSet?: {
                [key: string]: Record<string, never>;
            }[];
        };
        /** ReverseLawfirmPayoutRequest */
        ReverseLawfirmPayoutRequest: {
            overrideRefundOwner?: boolean;
            /** Format: int64 */
            reversalAmount?: number;
            reversalNote?: string;
            /** @enum {string} */
            reversalReason?: RefundCasePaymentRequestRefundReasonType;
        };
        /** ReviewCommentModel */
        ReviewCommentModel: {
            authorName?: string;
            /** Format: date-time */
            commentDateUtc?: string;
            copy?: string;
            /** Format: int64 */
            id?: number;
            profilePictureSignedUrl?: string;
            profilePictureUrl?: string;
        };
        /** ReviewRatingModel */
        ReviewRatingModel: {
            /** Format: int32 */
            communicationRating?: number;
            /** Format: int32 */
            outcomeRating?: number;
            /** Format: int32 */
            overallRating?: number;
        };
        /** ReviewVoteAggregateModel */
        ReviewVoteAggregateModel: {
            /** Format: int32 */
            helpfulCount?: number;
            /** Format: int32 */
            notHelpfulCount?: number;
        };
        /** RichCitationInferenceResponse */
        RichCitationInferenceResponse: {
            case_number?: string;
            citation_city?: string;
            citation_county?: string;
            citation_id?: string;
            citation_issue_date?: string;
            citation_state?: string;
            court_name?: string;
            has_accident?: boolean;
            is_cdl?: boolean;
            offender_city?: string;
            offender_county?: string;
            offender_date_of_birth?: string;
            offender_driver_license_number?: string;
            offender_first_name?: string;
            offender_last_name?: string;
            offender_middle_name?: string;
            offender_state?: string;
            race?: string;
            sex?: string;
            total_penalty_amount?: string;
            vehicle_color?: string;
            vehicle_license_plate_number?: string;
            vehicle_make?: string;
            vehicle_model?: string;
            vehicle_year?: string;
            violation_names?: string[];
        };
        /** SNSNotificationRequest */
        SNSNotificationRequest: {
            Message?: string;
            SubscribeURL?: string;
            Type?: string;
            UnsubscribeURL?: string;
        };
        /** SSLCertificateResponse */
        SSLCertificateResponse: {
            /** Format: byte */
            rawPublicCert?: string;
        };
        /** SaveAgentBookingRequest */
        SaveAgentBookingRequest: {
            /** Format: int64 */
            agentBookingId?: number;
            bookingReference?: string;
            caseId?: string;
            channel?: string;
            direction?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** SaveAgentBookingResponse */
        SaveAgentBookingResponse: {
            booking?: components["schemas"]["CustomerServiceAgentBookingDomain"];
        };
        /** SaveBillingProductOptionRequest */
        SaveBillingProductOptionRequest: {
            /** @enum {string} */
            interval?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
        };
        /** SaveCaseNotesRequest */
        SaveCaseNotesRequest: {
            caseNotes?: components["schemas"]["CaseNotesDomain"];
        };
        /** SaveCasePaymentPlan */
        SaveCasePaymentPlan: Record<string, never>;
        /** SaveCaseUserRequest */
        SaveCaseUserRequest: {
            additionalNote?: string;
            defendantAttributes?: components["schemas"]["CaseUserDefendantAttributesRequest"];
            emailAddress?: string;
            isBookingAgent?: boolean;
            isDefendant?: boolean;
            isOwner?: boolean;
            isRemoved?: boolean;
            permissionAttributes?: components["schemas"]["CaseUserPermissionAttributes"];
            /** @enum {string} */
            relationshipToClient?: CaseUserDetailsModelRelationshipToClientType;
            /** Format: int64 */
            userId?: number;
        };
        /** SaveCoachingCardRequest */
        SaveCoachingCardRequest: {
            /** Format: int64 */
            coachingCardCategoryId?: number;
            /** Format: int64 */
            coachingCardSubcategoryId?: number;
            /** @enum {string} */
            coachingCardType?: PathsApiV1CoachingCardsUserIdCardsGetParametersQueryCoachingCardType;
            coachingCardUserRequest?: components["schemas"]["SaveCoachingCardUserRequest"][];
            coachingLinks?: components["schemas"]["CoachingLinks"];
            coachingText?: string;
        };
        /** SaveCoachingCardUserRequest */
        SaveCoachingCardUserRequest: {
            /** Format: date-time */
            acknowledgementDateUtc?: string;
            /** Format: date-time */
            assignmentDateUtc?: string;
            /** Format: int64 */
            coachingCardId?: number;
            /** Format: date-time */
            coachingDateUtc?: string;
            coachingMethod?: string;
            hasBeenCoached?: boolean;
            isActionRequired?: boolean;
            isRepeatOffense?: boolean;
            /** @enum {string} */
            permissionType?: CoachingCardUsersModelPermissionType;
            recipientNote?: string;
            /** Format: date-time */
            resolutionDateUtc?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** SaveDriverLicensePictureRequest */
        SaveDriverLicensePictureRequest: {
            base64ImageData?: string;
            driverLicenseId?: string;
            imageContentType?: string;
            isBackOfLicense?: boolean;
        };
        /** SaveDriverLicensePictureResponse */
        SaveDriverLicensePictureResponse: {
            driverLicenseModel?: components["schemas"]["DriverLicenseModel"];
        };
        /** SaveDriverLicenseRequest */
        SaveDriverLicenseRequest: {
            addressLine1?: string;
            addressLine2?: string;
            city?: string;
            /** Format: date-time */
            dob?: string;
            /** Format: int64 */
            driverLicenseBackUserAssetId?: number;
            /** Format: int64 */
            driverLicenseFrontUserAssetId?: number;
            /** Format: int32 */
            driverLicenseId?: number;
            driverLicenseNumber?: string;
            /** Format: date-time */
            expirationDate?: string;
            firstName?: string;
            isBackOfLicense?: boolean;
            isDeleted?: boolean;
            /** Format: date-time */
            issueDate?: string;
            lastName?: string;
            licenseClass?: string;
            licenseClassEndorsements?: string;
            licenseRestrictions?: string;
            postalCode?: string;
            regionCode?: string;
            sex?: string;
        };
        /** SaveExternalContentVoteRequest */
        SaveExternalContentVoteRequest: {
            externalDocumentId?: string;
            externalDocumentType?: string;
            newVote?: components["schemas"]["ExternalContentVote"];
            oldVote?: components["schemas"]["ExternalContentVote"];
            /** Format: int64 */
            userId?: number;
            userMessage?: string;
        };
        /** SaveItemToWatchlistRequest */
        SaveItemToWatchlistRequest: {
            entityId?: string;
            /** @enum {string} */
            entityType?: SaveItemToWatchlistRequestEntityType;
            note?: string;
            /** @enum {string} */
            priority?: SaveItemToWatchlistRequestPriority;
        };
        /** SaveLawfirmSurchargeModel */
        SaveLawfirmSurchargeModel: {
            /** @enum {string} */
            featureType?: PathsApiV1LawfirmsLawfirmIdSurchargesGetParametersQueryFeatureType;
            /** @enum {string} */
            feeType?: ListLawfirmSurchargeModelFeeType;
            feeValue?: string;
            isEnabled?: boolean;
            /** @enum {string} */
            refundEligibility?: ListLawfirmSurchargeModelRefundEligibility;
            /** Format: int64 */
            surchargeId?: number;
            /** @enum {string} */
            surchargeType?: ListLawfirmSurchargeTypeModelType;
        };
        /** SaveLawfirmSurchargesRequest */
        SaveLawfirmSurchargesRequest: {
            surcharges?: components["schemas"]["SaveLawfirmSurchargeModel"][];
        };
        /** SaveLawyerLeadRequest */
        SaveLawyerLeadRequest: {
            city?: string;
            email?: string;
            firstname?: string;
            isSelfProclaimedLawyer?: boolean;
            lastname?: string;
            /** @enum {string} */
            leadProvidedSource?: SaveLawyerLeadRequestLeadProvidedSource;
            phoneNumber?: string;
            state?: string;
            website?: string;
        };
        /** SaveLawyerLicenseModel */
        SaveLawyerLicenseModel: {
            /** Format: date-time */
            barLicenseIssueDate?: string;
            /** Format: int64 */
            lawyerLicenseId?: number;
            /** @enum {string} */
            regionCode?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            /** @enum {string} */
            type?: LawyerLicenseModelLicenseType;
        };
        /** SaveLawyerLicensesRequest */
        SaveLawyerLicensesRequest: {
            licenses?: components["schemas"]["SaveLawyerLicenseModel"][];
        };
        /** SaveLawyerRequest */
        SaveLawyerRequest: {
            /** @enum {string} */
            jobTitle?: LawfirmJobTitleModelName;
            lawSchool?: string;
            /** Format: int64 */
            lawfirmId?: number;
            /** Format: date-time */
            licensedDate?: string;
            otherJobTitle?: string;
            /** Format: int64 */
            userId?: number;
            verificationToken?: string;
        };
        /** SaveNotesRequest */
        SaveNotesRequest: {
            note: string;
            /** Format: int64 */
            noteId?: number;
            /** @enum {string} */
            noteType: PathsApiV2NotesSearchGetParametersQueryNoteType;
            referenceId: string;
        };
        /** SaveUserSocialProfileModel */
        SaveUserSocialProfileModel: {
            /** @enum {string} */
            platform: PathsApiV1UsersUserIdSocialProfilesDeleteParametersQueryPlatform;
            userHandle: string;
        };
        /** SaveUserSocialProfileRequest */
        SaveUserSocialProfileRequest: {
            profiles?: components["schemas"]["SaveUserSocialProfileModel"][];
        };
        /** SaveUserWatchlistsRequest */
        SaveUserWatchlistsRequest: {
            isArchived?: boolean;
            /** Format: int64 */
            watchlistId?: number;
            watchlistItems?: components["schemas"]["SaveItemToWatchlistRequest"];
            watchlistName?: string;
        };
        /** ScheduleNewPaymentRequest */
        ScheduleNewPaymentRequest: {
            /** Format: int32 */
            baseFeeInCents?: number;
            /** Format: date-time */
            chargeRunAtDate?: string;
            description?: string;
            /** Format: int32 */
            lawfirmReferralCodeAdjustment?: number;
            /** Format: int32 */
            otrCustomerChargeInCents?: number;
            /** Format: int32 */
            otrMarketingFee?: number;
            /** Format: int32 */
            otrReferralCodeAdjustment?: number;
            /** @enum {string} */
            recipient?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReference?: string;
        };
        /** ScheduledTaskGetResponse */
        ScheduledTaskGetResponse: {
            tasks?: components["schemas"]["ScheduledTaskResponse"][];
        };
        /** ScheduledTaskResponse */
        ScheduledTaskResponse: {
            /** Format: date-time */
            completionDate?: string;
            errorMessage?: string;
            /** Format: date-time */
            runAtDateUtc?: string;
            taskId?: string;
            taskReferenceId?: string;
            /** @enum {string} */
            taskStatus?: FinancialTransactionTaskStatus;
            /** @enum {string} */
            taskType?: ScheduledTaskResponseTaskType;
        };
        /** SearchNotesResponse */
        SearchNotesResponse: {
            notes?: components["schemas"]["NoteModel"][];
        };
        /** SendBookingReceiptRequest */
        SendBookingReceiptRequest: {
            caseId: string;
            emails?: string[];
        };
        /** SendConsolidatedEmailToUser */
        SendConsolidatedEmailToUser: {
            bypassDedupe?: boolean;
            citationIds?: number[];
            /** @enum {string} */
            emailTemplateId?: GenerateTemplateRequestEmailTemplateId;
            fromEmailAddress?: string;
            /** Format: int64 */
            userIdToContact?: number;
        };
        /** SendDirectCheckResponse */
        SendDirectCheckResponse: {
            carrier?: string;
            /** Format: bigdecimal */
            checkAmount?: number;
            /** Format: date-time */
            estimatedDeliveryDate?: string;
            externalCheckId?: string;
            sendDate?: string;
            trackingNumber?: string;
        };
        /** SendDirectMailResponse */
        SendDirectMailResponse: {
            sentMail?: components["schemas"]["DirectMailContact"];
        };
        /** SendDirectReferralCheckRequest */
        SendDirectReferralCheckRequest: {
            address?: components["schemas"]["LobMailingAddress"];
            fullNameOverride?: string;
        };
        /** SendEmailToUserRequest */
        SendEmailToUserRequest: {
            actionType?: string;
            /** Format: int64 */
            agentId?: number;
            /** Format: int64 */
            citationId?: number;
            /** @enum {string} */
            emailTemplateId?: GenerateTemplateRequestEmailTemplateId;
            fromEmailAddress?: string;
            /** @enum {string} */
            reviewPlatform?: SendEmailToUserRequestReviewPlatform;
            /** Format: int64 */
            userIdToContact?: number;
        };
        /** SendEmailToUsersRequest */
        SendEmailToUsersRequest: {
            actionType?: string;
            /** @enum {string} */
            emailTemplateId?: GenerateTemplateRequestEmailTemplateId;
            fromEmailAddress?: string;
            usersToContact?: components["schemas"]["UserToContact"][];
        };
        /** SendOneTimePasswordRequest */
        SendOneTimePasswordRequest: {
            /** Format: int32 */
            countryCode?: number;
            phoneNumberOverride?: string;
        };
        /** SendPayoutToLawfirmRequest */
        SendPayoutToLawfirmRequest: {
            caseId?: string;
            description?: string;
            /** Format: date-time */
            dueDateUtc?: string;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int64 */
            payoutAmountInCents?: number;
            sourceCasePaymentId?: string;
            sourceStripeChargeId?: string;
            /** Format: date-time */
            transactionDateUtc?: string;
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReference?: string;
            transferGroup?: string;
        };
        /** SendPayoutToLawfirmResponse */
        SendPayoutToLawfirmResponse: {
            isSuccess?: boolean;
        };
        /** SendTextAlertToUserRequest */
        SendTextAlertToUserRequest: {
            rawPhoneNumber?: string;
            /** @enum {string} */
            textAlertType?: SendTextAlertToUserRequestTextAlertType;
        };
        /** ServiceLevelAgreement */
        ServiceLevelAgreement: {
            sla_name?: string;
            sla_status?: string;
            type?: string;
        };
        /** SetArchiveCaseModel */
        SetArchiveCaseModel: {
            caseId?: string;
        };
        /** SetArchiveOnCasesRequest */
        SetArchiveOnCasesRequest: {
            archived?: boolean;
            cases?: components["schemas"]["SetArchiveCaseModel"][];
            /** Format: int64 */
            userId?: number;
        };
        /** SetCourtDateForCaseRequest */
        SetCourtDateForCaseRequest: {
            /** Format: date-time */
            courtDate?: string;
            sendNotificationEmailToClient?: boolean;
        };
        /** SetCustomerReviewStatusRequest */
        SetCustomerReviewStatusRequest: {
            isHardDeleted?: boolean;
            /** @enum {string} */
            status?: SetCustomerReviewStatusRequestStatus;
        };
        /** SetFlagOnMessageModel */
        SetFlagOnMessageModel: {
            /** Format: int64 */
            messageId?: number;
        };
        /** SetFlagOnMessagesRequest */
        SetFlagOnMessagesRequest: {
            flagged?: boolean;
            messages?: components["schemas"]["SetFlagOnMessageModel"][];
            /** Format: int64 */
            userId?: number;
        };
        /** SetLawfirmCaseDecisionRequest */
        SetLawfirmCaseDecisionRequest: {
            /** @enum {string} */
            caseDecisionStatus?: CaseSummaryDomainCaseDecisionStatus;
            declineCategoryType?: components["schemas"]["DeclineCategory"];
            declineReasonType?: components["schemas"]["DeclineReason"];
            reason?: string;
        };
        /** SetMarketingEmailOptInRequest */
        SetMarketingEmailOptInRequest: {
            optInForMarketingEmails?: boolean;
        };
        /** SetPrimaryUserHandleRequest */
        SetPrimaryUserHandleRequest: {
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
        };
        /** SetReferralSourceRequest */
        SetReferralSourceRequest: {
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            isFromAdvertisement?: boolean;
            otherNote?: string;
            referralCode?: string;
            referralSourceData?: {
                [key: string]: Record<string, never>;
            };
            referrerEmail?: string;
            referrerName?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: int32 */
            userReferralSourceTypeId?: number;
        };
        /** SetStarOnMessageModel */
        SetStarOnMessageModel: {
            caseId?: string;
            /** Format: int64 */
            messageId?: number;
        };
        /** SetStarOnMessagesRequest */
        SetStarOnMessagesRequest: {
            messages?: components["schemas"]["SetStarOnMessageModel"][];
            starred?: boolean;
            /** Format: int64 */
            userId?: number;
        };
        /** SettingRequest */
        SettingRequest: {
            name?: string;
            value?: string;
        };
        /** SettingResponse */
        SettingResponse: {
            /** Format: int64 */
            settingId?: number;
            settingName?: string;
            /** @enum {string} */
            type?: SettingResponseType;
            value?: string;
        };
        /** SignImageUrlRequest */
        SignImageUrlRequest: {
            /** Format: int32 */
            minutes?: number;
            unsignedImageUrl?: string;
        };
        /** SignImageUrlResponse */
        SignImageUrlResponse: {
            signedImageUrl?: string;
        };
        /** SignRecordingUrlRequest */
        SignRecordingUrlRequest: {
            unsignedRecordingUrl?: string;
        };
        /** SignRecordingUrlResponse */
        SignRecordingUrlResponse: {
            presignedUrl?: string;
        };
        /** SimpleCredentialsResponse */
        SimpleCredentialsResponse: {
            accessKeyId?: string;
            secretKey?: string;
        };
        /** SingleSignOnResponse */
        SingleSignOnResponse: {
            emailAddress?: string;
            jwt?: string;
            redirectUrl?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** SkipMap */
        SkipMap: {
            handwritten?: boolean;
            template?: string;
        };
        /** SlimCitationInferenceResponse */
        SlimCitationInferenceResponse: {
            citation_issue_date?: components["schemas"]["CitationIssueDate"];
            court_name?: components["schemas"]["CourtName"];
            handwritten?: boolean;
            ocr_output?: string;
            skip_map?: components["schemas"]["SkipMap"];
            template?: string;
            violation_names?: components["schemas"]["ViolationNames"];
        };
        /** SocialLoginRequest */
        SocialLoginRequest: {
            /** Format: int64 */
            citationId?: number;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            fingerPrintId?: string;
            firstName?: string;
            httpReferrer?: string;
            lastName?: string;
            otherNote?: string;
            referralCode?: string;
            referralSourceData?: {
                [key: string]: Record<string, never>;
            };
            userAccessToken?: string;
            /** Format: int32 */
            userReferralSourceTypeId?: number;
        };
        /** SocialLoginResponse */
        SocialLoginResponse: {
            newAccount?: boolean;
            user?: components["schemas"]["SocialLoginUser"];
            userLoggedIn?: boolean;
            userRememberMeAuthenticated?: boolean;
        };
        /** SocialLoginUser */
        SocialLoginUser: {
            emailAddress?: string;
            firstname?: string;
            intercomUserHash?: string;
            isEmailPrivate?: boolean;
            isTestUser?: boolean;
            lastname?: string;
            /** Format: int32 */
            paidCaseCount?: number;
            phoneNumbers?: components["schemas"]["SocialPhoneNumber"][];
            profilePictureUrl?: string;
            roles?: components["schemas"]["UserRoleDomain"][];
            userAlias?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** SocialPhoneNumber */
        SocialPhoneNumber: {
            creationDateUtc?: components["schemas"]["Timestamp"];
            lastUpdatedDateUtc?: components["schemas"]["Timestamp"];
            phoneNumber?: string;
            /** @enum {string} */
            type?: PhoneNumberDomainType;
        };
        /** Source */
        Source: {
            attachments?: components["schemas"]["Attachment"][];
            author?: components["schemas"]["Author"];
            body?: string;
            /** @enum {string} */
            delivered_as?: SourceDelivered_as;
            id?: string;
            redacted?: boolean;
            subject?: string;
            type?: string;
            url?: string;
        };
        /** SqlResponse */
        SqlResponse: {
            results?: components["schemas"]["Results"];
        };
        /** Statistics */
        Statistics: {
            /** Format: int32 */
            count_assignments?: number;
            /** Format: int32 */
            count_conversation_parts?: number;
            /** Format: int32 */
            count_reopens?: number;
            /** Format: int32 */
            first_admin_reply_at?: number;
            /** Format: int32 */
            first_assignment_at?: number;
            /** Format: int32 */
            first_close_at?: number;
            /** Format: int32 */
            first_contact_reply_at?: number;
            /** Format: int32 */
            last_admin_reply_at?: number;
            /** Format: int32 */
            last_assignment_admin_reply_at?: number;
            /** Format: int32 */
            last_assignment_at?: number;
            /** Format: int32 */
            last_close_at?: number;
            last_closed_by_id?: string;
            /** Format: int32 */
            last_contact_reply_at?: number;
            /** Format: int32 */
            median_time_to_reply?: number;
            /** Format: int32 */
            time_to_admin_reply?: number;
            /** Format: int32 */
            time_to_assignment?: number;
            /** Format: int32 */
            time_to_first_close?: number;
            /** Format: int32 */
            time_to_last_close?: number;
            type?: string;
        };
        /** StripeAccountLinkDomain */
        StripeAccountLinkDomain: {
            created?: components["schemas"]["TimestampRes"];
            expiresAt?: components["schemas"]["TimestampRes"];
            url?: string;
        };
        /** StripeApplicationFeeDomain */
        StripeApplicationFeeDomain: {
            /** Format: int64 */
            amountRefunded?: number;
            applicationFeeDateUtc?: components["schemas"]["TimestampRes"];
            applicationFeeRefunds?: components["schemas"]["StripeApplicationFeeRefundDomain"][];
            currencyCode?: string;
            /** Format: int64 */
            feeAmount?: number;
            isFullyRefunded?: boolean;
            lastVerifiedDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int32 */
            refundCount?: number;
            stripeApplicationFeeId?: string;
            stripeChargeId?: string;
            stripeDestinationAccountId?: string;
            stripePaymentId?: string;
            stripePlatformAccountId?: string;
        };
        /** StripeApplicationFeeRefundDomain */
        StripeApplicationFeeRefundDomain: {
            currencyCode?: string;
            dateUtc?: components["schemas"]["TimestampRes"];
            lastVerifiedDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            refundAmount?: number;
            stripeApplicationFeeId?: string;
            stripeApplicationFeeRefundId?: string;
        };
        /** StripeApplicationFeeRefundSyncResults */
        StripeApplicationFeeRefundSyncResults: {
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            verificationMessage?: string;
        };
        /** StripeApplicationFeeSyncResults */
        StripeApplicationFeeSyncResults: {
            feeRefunds?: components["schemas"]["StripeApplicationFeeRefundSyncResults"][];
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            verificationMessage?: string;
        };
        /** StripeBankAccountDomain */
        StripeBankAccountDomain: {
            bankName?: string;
            country?: string;
            creationDateUtc?: components["schemas"]["Timestamp"];
            id?: string;
            isDefault?: boolean;
            last4?: string;
            object?: string;
            status?: string;
        };
        /** StripeCardDomain */
        StripeCardDomain: {
            addressLine1?: string;
            addressLine1Check?: string;
            addressZip?: string;
            addressZipCheck?: string;
            brand?: string;
            cardId?: string;
            country?: string;
            creationDateUtc?: components["schemas"]["Timestamp"];
            cvcCheck?: string;
            /** Format: int64 */
            expMonth?: number;
            /** Format: int64 */
            expYear?: number;
            /** @enum {string} */
            funding?: StripeCardDomainFunding;
            id?: string;
            isDefault?: boolean;
            isExpired?: boolean;
            last4?: string;
            object?: string;
            ownerFullName?: string;
        };
        /** StripeChargeDomain */
        StripeChargeDomain: {
            /** Format: int64 */
            amount?: number;
            /** Format: int64 */
            amountRefunded?: number;
            applicationFee?: components["schemas"]["StripeApplicationFeeDomain"];
            /** Format: int64 */
            applicationFeeAmount?: number;
            captureDateUtc?: components["schemas"]["Timestamp"];
            currencyCode?: string;
            destinationAccountId?: string;
            /** Format: int64 */
            destinationLawfirmId?: number;
            destinationLawfirmName?: string;
            disputeId?: string;
            disputes?: components["schemas"]["StripeDisputeDomain"][];
            isExpired?: boolean;
            isFullyRefunded?: boolean;
            lastVerifiedDateUtc?: components["schemas"]["Timestamp"];
            paymentSourceId?: string;
            /** Format: int64 */
            processingFee?: number;
            /** Format: int32 */
            refundCount?: number;
            /** Format: int64 */
            refundedProcessingFee?: number;
            refunds?: components["schemas"]["StripeRefundDomain"][];
            stripeChargeId?: string;
            stripeCustomerId?: string;
            stripePlatformAccountId?: string;
            transactionDateUtc?: components["schemas"]["Timestamp"];
            transfers?: components["schemas"]["StripeTransferDomain"][];
        };
        /** StripeChargeSyncResults */
        StripeChargeSyncResults: {
            applicationFees?: components["schemas"]["StripeApplicationFeeSyncResults"][];
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            refunds?: components["schemas"]["StripeRefundSyncResults"][];
            transfers?: components["schemas"]["StripeTransferSyncResults"][];
            verificationMessage?: string;
        };
        /** StripeConnectedAccountDomain */
        StripeConnectedAccountDomain: {
            accountId?: string;
            /** @enum {string} */
            accountType?: CreateStripeConnectAccountRequestAccountType;
            businessName?: string;
            chargesEnabled?: boolean;
            connectedDateUtc?: components["schemas"]["TimestampRes"];
            creationDateUtc?: components["schemas"]["TimestampRes"];
            detailsSubmitted?: boolean;
            email?: string;
            /** Format: int64 */
            id?: number;
            isDeprecated?: boolean;
            payoutsEnabled?: boolean;
            stripePlatformAccountId?: string;
            stripePlatformName?: string;
        };
        /** StripeCustomerAccountDomain */
        StripeCustomerAccountDomain: {
            /** Format: int64 */
            entityId?: number;
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            stripeCustomerAccountId?: string;
            stripePlatformAccountId?: string;
        };
        /** StripeDisputeDomain */
        StripeDisputeDomain: {
            /** Format: int64 */
            amountDisputed?: number;
            cardBrand?: string;
            cardFunding?: string;
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            clientTicket?: components["schemas"]["FreshDeskTicket"];
            /** Format: int64 */
            clientTicketId?: number;
            currencyCode?: string;
            disputeDateUtc?: components["schemas"]["Timestamp"];
            /** Format: int64 */
            disputeFee?: number;
            evidenceSubmittedDateUtc?: components["schemas"]["Timestamp"];
            isAccountEnabled?: boolean;
            isTransferReversed?: boolean;
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            lawfirmTicket?: components["schemas"]["FreshDeskTicket"];
            /** Format: int64 */
            lawfirmTicketId?: number;
            /** @enum {string} */
            paymentRecipient?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            reason?: string;
            responseDueByDateUtc?: components["schemas"]["Timestamp"];
            status?: string;
            stripeChargeId?: string;
            stripeCustomerId?: string;
            stripeDisputeId?: string;
            userFullName?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** StripeFieldVerification */
        StripeFieldVerification: {
            dbValue?: string;
            fieldName?: string;
            stripeValue?: string;
        };
        /** StripePaymentDomain */
        StripePaymentDomain: {
            /** Format: int64 */
            amountRefunded?: number;
            /** Format: int64 */
            createdByUserId?: number;
            currencyCode?: string;
            isFullyRefunded?: boolean;
            /** Format: int64 */
            paymentAmount?: number;
            paymentDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            processingFee?: number;
            /** Format: int32 */
            refundCount?: number;
            refunds?: components["schemas"]["StripePaymentRefundDomain"][];
            sourceAccountId?: string;
            sourceTransfer?: string;
            stripeApplicationId?: string;
            stripePaymentId?: string;
            stripePlatformAccountId?: string;
        };
        /** StripePaymentRefundDomain */
        StripePaymentRefundDomain: {
            /** Format: int64 */
            amount?: number;
            currencyCode?: string;
            reason?: string;
            stripePaymentId?: string;
            stripePaymentRefundId?: string;
            stripePlatformAccountId?: string;
            stripeSourceTransferReversalId?: string;
            stripeTransferReversalId?: string;
            transactionDateUtc?: components["schemas"]["TimestampRes"];
        };
        /** StripePaymentRefundSyncResults */
        StripePaymentRefundSyncResults: {
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            verificationMessage?: string;
        };
        /** StripePaymentSourceDomain */
        StripePaymentSourceDomain: {
            country?: string;
            creationDateUtc?: components["schemas"]["Timestamp"];
            id?: string;
            isDefault?: boolean;
            last4?: string;
            object?: string;
        };
        /** StripePaymentSyncResults */
        StripePaymentSyncResults: {
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            paymentRefunds?: components["schemas"]["StripePaymentRefundSyncResults"][];
            verificationMessage?: string;
        };
        /** StripeRefundDomain */
        StripeRefundDomain: {
            /** Format: int64 */
            amount?: number;
            currencyCode?: string;
            lastVerifiedDateUtc?: components["schemas"]["Timestamp"];
            /** Format: int64 */
            processingFee?: number;
            reason?: string;
            refundStatus?: string;
            stripeChargeId?: string;
            stripePlatformAccountId?: string;
            stripeRefundId?: string;
            transactionDateUtc?: components["schemas"]["Timestamp"];
        };
        /** StripeRefundSyncResults */
        StripeRefundSyncResults: {
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            verificationMessage?: string;
        };
        /** StripeReversalSyncResults */
        StripeReversalSyncResults: {
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            verificationMessage?: string;
        };
        /** StripeTransferDomain */
        StripeTransferDomain: {
            /** Format: int64 */
            amountReversed?: number;
            currencyCode?: string;
            isFullyReversed?: boolean;
            lastVerifiedDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int32 */
            reversalCount?: number;
            stripeChargeId?: string;
            stripeDestinationAccountId?: string;
            stripePaymentId?: string;
            stripePlatformAccountId?: string;
            stripeTransferGroupId?: string;
            stripeTransferId?: string;
            /** Format: int64 */
            transferAmount?: number;
            transferDateUtc?: components["schemas"]["TimestampRes"];
            transferReversals?: components["schemas"]["StripeTransferReversalDomain"][];
        };
        /** StripeTransferReversalDomain */
        StripeTransferReversalDomain: {
            /** Format: int64 */
            amount?: number;
            currencyCode?: string;
            destinationPaymentRefund?: string;
            lastVerifiedDateUtc?: components["schemas"]["TimestampRes"];
            reversalDateUtc?: components["schemas"]["TimestampRes"];
            stripePlatformAccountId?: string;
            stripeRefundId?: string;
            stripeTransferId?: string;
            stripeTransferReversalId?: string;
        };
        /** StripeTransferSyncResults */
        StripeTransferSyncResults: {
            fields?: components["schemas"]["StripeFieldVerification"][];
            id?: string;
            reversals?: components["schemas"]["StripeReversalSyncResults"][];
            verificationMessage?: string;
        };
        /** SubscribeRequest */
        SubscribeRequest: {
            subscriber?: components["schemas"]["SubscriberDomain"];
        };
        /** Subscriber */
        Subscriber: {
            created_at?: string;
            custom_fields?: {
                [key: string]: string;
            };
            email?: string;
            id?: string;
            prospect?: boolean;
            status?: string;
            tags?: string[];
            time_zone?: string;
            user_id?: string;
            /** Format: int32 */
            utc_offset?: number;
        };
        /** SubscriberDomain */
        SubscriberDomain: {
            email?: string;
            fullName?: string;
            postalCode?: string;
            roleType?: string;
            /** @enum {string} */
            subscriptionType?: SubscriberDomainSubscriptionType;
        };
        /** SubscriptionDiscountEligibility */
        SubscriptionDiscountEligibility: {
            productName?: string;
            /** @enum {string} */
            subscriptionDiscountEligibilityType?: SubscriptionDiscountEligibilitySubscriptionDiscountEligibilityType;
            uiSubscriptionEligibilityMsg?: string;
        };
        /** SubscriptionDiscountEligibilityReq */
        SubscriptionDiscountEligibilityReq: {
            productName?: string;
            /** @enum {string} */
            subscriptionDiscountEligibilityType?: SubscriptionDiscountEligibilitySubscriptionDiscountEligibilityType;
            uiSubscriptionEligibilityMsg?: string;
        };
        /** SubscriptionDiscountEligibilityRes */
        SubscriptionDiscountEligibilityRes: {
            productName?: string;
            /** @enum {string} */
            subscriptionDiscountEligibilityType?: SubscriptionDiscountEligibilitySubscriptionDiscountEligibilityType;
            uiSubscriptionEligibilityMsg?: string;
        };
        /** SubscriptionGuardianModel */
        SubscriptionGuardianModel: {
            emailAddress: string;
            firstName: string;
            lastName: string;
        };
        /** SupportedStateModel */
        SupportedStateModel: {
            newAlgoEnabled?: boolean;
            /** @enum {string} */
            state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
        };
        /** SyncStripeChargesRequest */
        SyncStripeChargesRequest: {
            isDryRun?: boolean;
            /** Format: int32 */
            numChargesToVerify?: number;
            stripeChargeIds?: string[];
        };
        /** SyncStripeChargesResponse */
        SyncStripeChargesResponse: {
            output?: {
                [key: string]: components["schemas"]["StripeChargeSyncResults"];
            };
        };
        /** SyncStripeDisputeResponse */
        SyncStripeDisputeResponse: {
            dispute?: components["schemas"]["StripeDisputeDomain"];
        };
        /** SyncStripePaymentsRequest */
        SyncStripePaymentsRequest: {
            isDryRun?: boolean;
            /** Format: int32 */
            numPaymentsToVerify?: number;
            stripePaymentIds?: string[];
        };
        /** SyncStripePaymentsResponse */
        SyncStripePaymentsResponse: {
            output?: {
                [key: string]: components["schemas"]["StripePaymentSyncResults"];
            };
        };
        /** SyncStripeRefundsRequest */
        SyncStripeRefundsRequest: {
            isDryRun?: boolean;
            stripeRefundIds?: string[];
        };
        /** SyncStripeTransfersRequest */
        SyncStripeTransfersRequest: {
            isDryRun?: boolean;
            /** Format: int32 */
            numTransfersToVerify?: number;
            stripeTransferIds?: string[];
        };
        /** SyncStripeTransfersResponse */
        SyncStripeTransfersResponse: {
            output?: {
                [key: string]: components["schemas"]["StripeTransferSyncResults"];
            };
        };
        /** Tag */
        Tag: {
            id?: string;
            name?: string;
            type?: string;
        };
        /** Tags */
        Tags: {
            tags?: components["schemas"]["Tag"][];
            type?: string;
        };
        /** Teammates */
        Teammates: {
            admins?: components["schemas"]["Admin"][];
            type?: string;
        };
        /** TemporalUnit */
        TemporalUnit: {
            dateBased?: boolean;
            duration?: components["schemas"]["Duration"];
            durationEstimated?: boolean;
            timeBased?: boolean;
        };
        /** TicketLeadDomain */
        TicketLeadDomain: {
            caseId?: string;
            citationCreationDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            citationId?: number;
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            courtName?: string;
            notes?: components["schemas"]["NoteEntity"][];
            region?: components["schemas"]["CountryRegion"];
            ticketImageUrl?: string;
        };
        /** TicketPart */
        TicketPart: {
            content?: string;
            /** Format: int64 */
            created_at?: number;
            id?: string;
            type?: string;
            /** Format: int64 */
            updated_at?: number;
        };
        /** TicketPartsWrapper */
        TicketPartsWrapper: {
            ticket_parts?: components["schemas"]["TicketPart"][];
            type?: string;
        };
        /** TicketReviewRequest */
        TicketReviewRequest: {
            /** Format: int64 */
            citationId?: number;
            citationState?: string;
            emailAddress?: string;
            freshDeskTicket?: components["schemas"]["FreshDeskTicket"];
            /** Format: int64 */
            freshdeskTicketId?: number;
            lastBookingDateUtc?: components["schemas"]["TimestampRes"];
            phoneNumber?: string;
            /** @enum {string} */
            source?: PersistTicketEvaluationRequestSource;
            status?: string;
            submissionDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            ticketEvaluationRequestId?: number;
            /** Format: int64 */
            userId?: number;
            violation?: string;
            visitorName?: string;
        };
        /** TicketReviewRequestReq */
        TicketReviewRequestReq: {
            /** Format: int64 */
            citationId?: number;
            citationState?: string;
            emailAddress?: string;
            freshDeskTicket?: components["schemas"]["FreshDeskTicketReq"];
            /** Format: int64 */
            freshdeskTicketId?: number;
            lastBookingDateUtc?: components["schemas"]["TimestampReq"];
            phoneNumber?: string;
            /** @enum {string} */
            source?: PersistTicketEvaluationRequestSource;
            status?: string;
            submissionDateUtc?: components["schemas"]["TimestampReq"];
            /** Format: int64 */
            ticketEvaluationRequestId?: number;
            /** Format: int64 */
            userId?: number;
            violation?: string;
            visitorName?: string;
        };
        /** TicketReviewRequestRes */
        TicketReviewRequestRes: {
            /** Format: int64 */
            citationId?: number;
            citationState?: string;
            emailAddress?: string;
            freshDeskTicket?: components["schemas"]["FreshDeskTicketRes"];
            /** Format: int64 */
            freshdeskTicketId?: number;
            lastBookingDateUtc?: components["schemas"]["TimestampRes"];
            phoneNumber?: string;
            /** @enum {string} */
            source?: PersistTicketEvaluationRequestSource;
            status?: string;
            submissionDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: int64 */
            ticketEvaluationRequestId?: number;
            /** Format: int64 */
            userId?: number;
            violation?: string;
            visitorName?: string;
        };
        /** TicketType */
        TicketType: {
            archived?: boolean;
            /** Format: int64 */
            created_at?: number;
            description?: string;
            id?: string;
            is_internal?: boolean;
            name?: string;
            ticket_type_attributes?: components["schemas"]["TicketTypeAttributesWrapper"];
            type?: string;
            /** Format: int64 */
            updated_at?: number;
        };
        /** TicketTypeAttribute */
        TicketTypeAttribute: {
            data_type?: string;
            description?: string;
            id?: string;
            name?: string;
            required_to_create?: boolean;
            type?: string;
            visible_on_create?: boolean;
        };
        /** TicketTypeAttributesWrapper */
        TicketTypeAttributesWrapper: {
            data?: components["schemas"]["TicketTypeAttribute"][];
            type?: string;
        };
        /** TimeZone */
        TimeZone: {
            displayName?: string;
            /** Format: int32 */
            dstsavings?: number;
            id?: string;
            /** Format: int32 */
            rawOffset?: number;
        };
        /** TimeZoneReq */
        TimeZoneReq: {
            id?: string;
            /** Format: int32 */
            rawOffset?: number;
        };
        /** TimeZoneRes */
        TimeZoneRes: {
            displayName?: string;
            /** Format: int32 */
            dstsavings?: number;
            id?: string;
            /** Format: int32 */
            rawOffset?: number;
        };
        /** Timestamp */
        Timestamp: {
            /** Format: int32 */
            date?: number;
            /** Format: int32 */
            day?: number;
            /** Format: int32 */
            hours?: number;
            /** Format: int32 */
            minutes?: number;
            /** Format: int32 */
            month?: number;
            /** Format: int32 */
            nanos?: number;
            /** Format: int32 */
            seconds?: number;
            /** Format: int64 */
            time?: number;
            /** Format: int32 */
            timezoneOffset?: number;
            /** Format: int32 */
            year?: number;
        };
        /** TimestampReq */
        TimestampReq: {
            /** Format: int32 */
            date?: number;
            /** Format: int32 */
            hours?: number;
            /** Format: int32 */
            minutes?: number;
            /** Format: int32 */
            month?: number;
            /** Format: int32 */
            nanos?: number;
            /** Format: int32 */
            seconds?: number;
            /** Format: int64 */
            time?: number;
            /** Format: int32 */
            year?: number;
        };
        /** TimestampRes */
        TimestampRes: {
            /** Format: int32 */
            date?: number;
            /** Format: int32 */
            day?: number;
            /** Format: int32 */
            hours?: number;
            /** Format: int32 */
            minutes?: number;
            /** Format: int32 */
            month?: number;
            /** Format: int32 */
            nanos?: number;
            /** Format: int32 */
            seconds?: number;
            /** Format: int64 */
            time?: number;
            /** Format: int32 */
            timezoneOffset?: number;
            /** Format: int32 */
            year?: number;
        };
        /** Topic */
        Topic: {
            id?: string;
            name?: string;
            type?: string;
        };
        /** Topics */
        Topics: {
            topics?: components["schemas"]["Topic"][];
            /** Format: int32 */
            total_count?: number;
            type?: string;
        };
        /** TrafficViolationInputRequest */
        TrafficViolationInputRequest: {
            /** Format: int64 */
            violationId?: number;
        };
        /** TransferCaseRequest */
        TransferCaseRequest: {
            forceTransfer?: boolean;
            ignoreCapturedCharges?: boolean;
            /** Format: int32 */
            maxOtrCreditInCents?: number;
            /** Format: int64 */
            receivingLawfirmId?: number;
        };
        /** USStateDomain */
        USStateDomain: {
            stateCode?: string;
            stateName?: string;
        };
        /** UnavailableMatchAttributesModel */
        UnavailableMatchAttributesModel: {
            algorithmName?: string;
            lawfirmId?: string;
            reasonNotAvailable?: string;
        };
        /** UpdateAddress */
        UpdateAddress: {
            addressLine1?: string;
            addressLine2?: string;
            city?: string;
            countryCode?: string;
            phoneNumber?: string;
            postalCode?: string;
            regionCode?: string;
        };
        /** UpdateCaseActionRequest */
        UpdateCaseActionRequest: {
            note?: string;
        };
        /** UpdateCaseActionResponse */
        UpdateCaseActionResponse: {
            caseAction?: components["schemas"]["CaseActionDomain"];
        };
        /** UpdateCaseDeclineTicketsRequest */
        UpdateCaseDeclineTicketsRequest: {
            /** Format: int64 */
            clientDeclineTicketId?: number;
            /** Format: int64 */
            lawfirmDeclineTicketId?: number;
            /** Format: int64 */
            lawfirmId?: number;
        };
        /** UpdateCasePaymentRequest */
        UpdateCasePaymentRequest: {
            /** Format: int32 */
            baseFeeInCents?: number;
            /** Format: int32 */
            lawfirmReferralCodeAdjustmentInCents?: number;
            /** Format: int32 */
            otrMarketingFeeInCents?: number;
            /** Format: int32 */
            otrReferralCodeAdjustmentInCents?: number;
            /** Format: int32 */
            paymentProcessingFeeChargedToLawfirm?: number;
            /** @enum {string} */
            recipient?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
        };
        /** UpdateCitationAddressRequest */
        UpdateCitationAddressRequest: {
            address?: components["schemas"]["AddressDomainReq"];
        };
        /** UpdateCitationPictureRequest */
        UpdateCitationPictureRequest: {
            base64ImageData?: string;
            clientEmailAddress?: string;
            imageContentType?: string;
        };
        /** UpdateCitationRequest */
        UpdateCitationRequest: {
            citation?: components["schemas"]["CitationInputRequest"];
        };
        /** UpdateCoachingCardRequest */
        UpdateCoachingCardRequest: {
            /** Format: date-time */
            acknowledgementDateUtc?: string;
            /** Format: int64 */
            coachingCardId?: number;
            /** @enum {string} */
            permissionType?: CoachingCardUsersModelPermissionType;
            recipientNote?: string;
            /** Format: date-time */
            resolutionDateUtc?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** UpdateCourtRequest */
        UpdateCourtRequest: {
            court?: components["schemas"]["CourtDomainReq"];
        };
        /** UpdateDisputeRequest */
        UpdateDisputeRequest: {
            dispute?: components["schemas"]["StripeDisputeDomain"];
        };
        /** UpdateInvoiceLineItemRequest */
        UpdateInvoiceLineItemRequest: {
            lineItem?: components["schemas"]["CaseLineItemDomainReq"];
        };
        /** UpdateLawfirmFeeRequest */
        UpdateLawfirmFeeRequest: {
            note?: string;
            /** Format: int64 */
            otrFeeAmount?: number;
            /** Format: int64 */
            processingFeeAmount?: number;
            sourceCasePaymentId?: string;
            /** Format: int64 */
            totalFeeAmount?: number;
            transactionDateUtc?: components["schemas"]["TimestampReq"];
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReferenceId?: string;
            updatedDueDateUtc?: components["schemas"]["TimestampReq"];
        };
        /** UpdateLawfirmFeeResponse */
        UpdateLawfirmFeeResponse: {
            lawfirmFee?: components["schemas"]["LawfirmFeeDomain"];
        };
        /** UpdateLawfirmModel */
        UpdateLawfirmModel: {
            aboutUsBlurb?: string;
            /** Format: int32 */
            caseAssignmentPriority?: number;
            coverPhotoUrl?: string;
            /** Format: int64 */
            createdBy?: number;
            /** Format: date-time */
            establishedDateUtc?: string;
            /** Format: int32 */
            establishedYear?: number;
            isTestLawfirm?: boolean;
            languagesServed?: string[];
            /** Format: int64 */
            lawfirmId?: number;
            lawfirmName?: string;
            /** @enum {string} */
            lawfirmPaymentModel?: CreateLawfirmModelLawfirmPaymentModel;
            /** @enum {string} */
            lawfirmState?: PathsApiV1LawfirmsGetParametersQueryStatuses;
            /** Format: date-time */
            membershipStartDateUtc?: string;
            otrNotes?: string;
            primaryEmailAddress?: string;
            primaryPhoneNumber?: string;
            profilePictureUrl?: string;
            tagLine?: string;
            website?: string;
        };
        /** UpdateLawfirmPaymentModelRequest */
        UpdateLawfirmPaymentModelRequest: {
            /** @enum {string} */
            paymentModel?: CreateLawfirmModelLawfirmPaymentModel;
        };
        /** UpdateLawfirmPayoutRequest */
        UpdateLawfirmPayoutRequest: {
            /** Format: int64 */
            payoutAmount?: number;
            sourceCasePaymentId?: string;
            transactionDateUtc?: components["schemas"]["TimestampReq"];
            /** @enum {string} */
            transactionMethod?: CasePaymentDomainTransactionMethod;
            transactionReferenceId?: string;
            updatedDueDateUtc?: components["schemas"]["TimestampReq"];
        };
        /** UpdateLawfirmPayoutResponse */
        UpdateLawfirmPayoutResponse: {
            lawfirmPayout?: components["schemas"]["LawfirmPayoutDomain"];
        };
        /** UpdateLawfirmRequest */
        UpdateLawfirmRequest: {
            lawfirm?: components["schemas"]["UpdateLawfirmModel"];
        };
        /** UpdateLawfirmSettingsRequest */
        UpdateLawfirmSettingsRequest: {
            settings?: components["schemas"]["LawfirmSettingsDomainReq"];
        };
        /** UpdateLawyerRoleRequest */
        UpdateLawyerRoleRequest: {
            /** @enum {string} */
            newRole?: AuthorModelUserRole;
        };
        /** UpdateNoteInput */
        UpdateNoteInput: {
            note: string;
        };
        /** UpdateNoteRequest */
        UpdateNoteRequest: {
            note: components["schemas"]["UpdateNoteInput"];
        };
        /** UpdateNoteResponse */
        UpdateNoteResponse: {
            note?: components["schemas"]["NoteModel"];
        };
        /** UpdatePaymentDueDateRequest */
        UpdatePaymentDueDateRequest: {
            /** Format: date-time */
            paymentDueDate?: string;
            timeZoneId?: string;
        };
        /** UpdatePhoneNumber */
        UpdatePhoneNumber: {
            /** @enum {string} */
            entityType?: AddNoteToPhoneLeadRequestEntityType;
            extension?: string;
            phoneNumber?: string;
            /** @enum {string} */
            type?: PhoneNumberDomainType;
        };
        /** UpdateProfilePictureRequest */
        UpdateProfilePictureRequest: {
            base64ImageData?: string;
            contentType?: string;
        };
        /** UpdateProfilePictureResponse */
        UpdateProfilePictureResponse: {
            signedPictureUrl?: string;
        };
        /** UpdateRefundEligibilityForCaseRequest */
        UpdateRefundEligibilityForCaseRequest: {
            /** @enum {string} */
            refundOwner?: CaseTransferHistoryRefundOwner;
        };
        /** UpdateReplyForCustomerReview */
        UpdateReplyForCustomerReview: {
            copy?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** UpdateUserDetailsResponse */
        UpdateUserDetailsResponse: {
            user?: components["schemas"]["UserDomain"];
        };
        /** UpdateUserModel */
        UpdateUserModel: {
            /** Format: date-time */
            dob?: string;
            driverLicenseNumber?: string;
            emailAddress?: string;
            firstname?: string;
            gender?: string;
            hasLeftReview?: boolean;
            isEmailConfirmed?: boolean;
            isLawfirmAccessGranted?: boolean;
            isPaymentPlansAllowed?: boolean;
            isTestUser?: boolean;
            isUnsubscribed?: boolean;
            isUserAccountEnabled?: boolean;
            lastname?: string;
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            /** @enum {string} */
            privacyMode?: ActivityFeedModelPrivacyMode;
            profilePicture?: string;
            /** @enum {string} */
            race?: CaseRace;
            signUpCode?: string;
            /** Format: int32 */
            signUpCodeUseCount?: number;
            userAlias?: string;
        };
        /** UpdateUserPhoneNumberRequest */
        UpdateUserPhoneNumberRequest: {
            phoneNumber?: components["schemas"]["UpdatePhoneNumber"];
            shouldVerifyPhoneNumber?: boolean;
        };
        /** UpdateUserProfileRequest */
        UpdateUserProfileRequest: {
            user?: components["schemas"]["UpdateUserModel"];
        };
        /** UpdateUserRolesRequest */
        UpdateUserRolesRequest: {
            roles?: AuthorModelUserRole[];
            /** Format: int64 */
            userId?: number;
        };
        /** UpdateUserSettingsRequest */
        UpdateUserSettingsRequest: {
            settings: components["schemas"]["SettingRequest"][];
        };
        /** UpdateUserSettingsResponse */
        UpdateUserSettingsResponse: {
            settings?: components["schemas"]["SettingResponse"][];
        };
        /** UpdateViolationRequest */
        UpdateViolationRequest: {
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            isEnabledForCustomers?: boolean;
            isEnabledForLawfirms?: boolean;
            /** @enum {string} */
            refundEligibilityType?: AccountLevelFeeRefundEligibility;
            userFriendlyName?: string;
            userFriendlyShortForm?: string;
            violationCode?: string;
            violationDescription?: string;
        };
        /** UploadLawfirmsRequest */
        UploadLawfirmsRequest: {
            /** Format: int64 */
            createdByUserId: number;
            csvContentInBase64?: string;
        };
        /** UploadLawfirmsResponse */
        UploadLawfirmsResponse: {
            errorMessages?: string[];
            /** Format: int32 */
            totalFailedRecords?: number;
            /** Format: int32 */
            totalRecords?: number;
            /** Format: int32 */
            totalSuccessfulRecords?: number;
        };
        /** UpsertAddressRequest */
        UpsertAddressRequest: {
            address?: components["schemas"]["UpdateAddress"];
        };
        /** User */
        User: {
            agentTeam?: string;
            firstName?: string;
            lastName?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** UserAccountModel */
        UserAccountModel: {
            /** Format: date-time */
            accountCreationDateUtc?: string;
            /** Format: int64 */
            formerUserId?: number;
            lastLoginAttributes?: components["schemas"]["LastLoginAttributes"];
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            merged?: boolean;
            primary?: boolean;
            profilePictureUrl?: string;
            signedProfilePictureUrl?: string;
            userHandle?: string;
            /** Format: date-time */
            verificationDateUtc?: string;
        };
        /** UserAssetModel */
        UserAssetModel: {
            /** Format: int32 */
            assetSizeInBytes?: number;
            assetType?: string;
            assetUrl?: string;
            signedAssetUrl?: string;
            /** Format: int64 */
            userAssetId?: number;
        };
        /** UserAuditEventModel */
        UserAuditEventModel: {
            authorName?: string;
            /** @enum {string} */
            clientType?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            /** @enum {string} */
            event?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
            /** Format: date-time */
            eventDate?: string;
            /** Format: int64 */
            eventId?: number;
            /** @enum {string} */
            eventType?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
            newValue?: string;
            oldValue?: string;
            requesterName?: string;
            /** Format: int64 */
            requesterUserId?: number;
            subject?: string;
            /** Format: int64 */
            userEventId?: number;
            /** Format: int64 */
            userId?: number;
        };
        /** UserBookingsDomain */
        UserBookingsDomain: {
            /** Format: int32 */
            numBookings?: number;
            /** Format: int32 */
            numCancellations?: number;
        };
        /** UserDetails */
        UserDetails: {
            emailAddress?: string;
            firstName?: string;
            lastName?: string;
            /** Format: int64 */
            userId?: number;
        };
        /** UserDomain */
        UserDomain: {
            accounts?: components["schemas"]["UserAccountModel"][];
            address?: components["schemas"]["AddressDomain"];
            creationDateUtc?: components["schemas"]["Timestamp"];
            /** Format: date-time */
            dob?: string;
            driverLicenseNumber?: string;
            eligibleForAppReview?: boolean;
            emailAddress?: string;
            firstname?: string;
            fullName?: string;
            gender?: string;
            /** @enum {string} */
            genderType?: CaseGender;
            /** Format: date-time */
            ghostAccountCreationDateUtc?: string;
            hasLeftReview?: boolean;
            hubspotContactId?: string;
            intercomUserHash?: string;
            isEmailConfirmed?: boolean;
            isEnabled?: boolean;
            isLawfirmAccessGranted?: boolean;
            isPaymentPlansAllowed?: boolean;
            isTestUser?: boolean;
            isUnsubscribed?: boolean;
            /** Format: date-time */
            lastLoginDateUtc?: string;
            lastname?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawyerJobTitle?: components["schemas"]["LawfirmJobTitleModel"];
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            /** Format: int32 */
            numBookingCancelations?: number;
            /** Format: int32 */
            paidCaseCount?: number;
            password?: string;
            passwordEncrypted?: string;
            phoneNumbers?: components["schemas"]["PhoneNumberDomain"][];
            /** @enum {string} */
            privacyMode?: ActivityFeedModelPrivacyMode;
            profilePicture?: string;
            /** @enum {string} */
            race?: CaseRace;
            referralCode?: string;
            /** Format: int64 */
            referralCount?: number;
            referralLink?: string;
            referralLinks?: components["schemas"]["UserReferralLinkModel"][];
            roles?: components["schemas"]["UserRoleDomain"][];
            signUpCode?: string;
            /** Format: int32 */
            signUpCodeUseCount?: number;
            signedProfilePictureUrl?: string;
            socialProfiles?: components["schemas"]["UserSocialProfileModel"][];
            /** Format: int64 */
            spooferUserId?: number;
            subscriptionPlans?: components["schemas"]["UserSubscriptionPlanModel"][];
            userAlias?: string;
            /** Format: date-time */
            userDeletedDateUtc?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: date-time */
            userRegistrationDateUtc?: string;
        };
        /** UserDomainReq */
        UserDomainReq: {
            accounts?: components["schemas"]["UserAccountModel"][];
            address?: components["schemas"]["AddressDomainReq"];
            creationDateUtc?: components["schemas"]["TimestampReq"];
            /** Format: date-time */
            dob?: string;
            driverLicenseNumber?: string;
            eligibleForAppReview?: boolean;
            emailAddress?: string;
            firstname?: string;
            gender?: string;
            /** @enum {string} */
            genderType?: CaseGender;
            /** Format: date-time */
            ghostAccountCreationDateUtc?: string;
            hasLeftReview?: boolean;
            hubspotContactId?: string;
            intercomUserHash?: string;
            isEmailConfirmed?: boolean;
            isEnabled?: boolean;
            isLawfirmAccessGranted?: boolean;
            isPaymentPlansAllowed?: boolean;
            isTestUser?: boolean;
            isUnsubscribed?: boolean;
            /** Format: date-time */
            lastLoginDateUtc?: string;
            lastname?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawyerJobTitle?: components["schemas"]["LawfirmJobTitleModelReq"];
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            /** Format: int32 */
            numBookingCancelations?: number;
            /** Format: int32 */
            paidCaseCount?: number;
            password?: string;
            passwordEncrypted?: string;
            phoneNumbers?: components["schemas"]["PhoneNumberDomainReq"][];
            /** @enum {string} */
            privacyMode?: ActivityFeedModelPrivacyMode;
            profilePicture?: string;
            /** @enum {string} */
            race?: CaseRace;
            referralCode?: string;
            /** Format: int64 */
            referralCount?: number;
            referralLink?: string;
            referralLinks?: components["schemas"]["UserReferralLinkModelReq"][];
            roles?: components["schemas"]["UserRoleDomain"][];
            signUpCode?: string;
            /** Format: int32 */
            signUpCodeUseCount?: number;
            signedProfilePictureUrl?: string;
            socialProfiles?: components["schemas"]["UserSocialProfileModelReq"][];
            /** Format: int64 */
            spooferUserId?: number;
            subscriptionPlans?: components["schemas"]["UserSubscriptionPlanModelReq"][];
            userAlias?: string;
            /** Format: date-time */
            userDeletedDateUtc?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: date-time */
            userRegistrationDateUtc?: string;
        };
        /** UserDomainRes */
        UserDomainRes: {
            accounts?: components["schemas"]["UserAccountModel"][];
            address?: components["schemas"]["AddressDomainRes"];
            creationDateUtc?: components["schemas"]["TimestampRes"];
            /** Format: date-time */
            dob?: string;
            driverLicenseNumber?: string;
            eligibleForAppReview?: boolean;
            emailAddress?: string;
            firstname?: string;
            fullName?: string;
            gender?: string;
            /** @enum {string} */
            genderType?: CaseGender;
            /** Format: date-time */
            ghostAccountCreationDateUtc?: string;
            hasLeftReview?: boolean;
            hubspotContactId?: string;
            intercomUserHash?: string;
            isEmailConfirmed?: boolean;
            isEnabled?: boolean;
            isLawfirmAccessGranted?: boolean;
            isPaymentPlansAllowed?: boolean;
            isTestUser?: boolean;
            isUnsubscribed?: boolean;
            /** Format: date-time */
            lastLoginDateUtc?: string;
            lastname?: string;
            /** Format: int64 */
            lawfirmId?: number;
            lawyerJobTitle?: components["schemas"]["LawfirmJobTitleModelRes"];
            /** @enum {string} */
            loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            /** Format: int32 */
            numBookingCancelations?: number;
            /** Format: int32 */
            paidCaseCount?: number;
            password?: string;
            passwordEncrypted?: string;
            phoneNumbers?: components["schemas"]["PhoneNumberDomainRes"][];
            /** @enum {string} */
            privacyMode?: ActivityFeedModelPrivacyMode;
            profilePicture?: string;
            /** @enum {string} */
            race?: CaseRace;
            referralCode?: string;
            /** Format: int64 */
            referralCount?: number;
            referralLink?: string;
            referralLinks?: components["schemas"]["UserReferralLinkModelRes"][];
            roles?: components["schemas"]["UserRoleDomain"][];
            signUpCode?: string;
            /** Format: int32 */
            signUpCodeUseCount?: number;
            signedProfilePictureUrl?: string;
            socialProfiles?: components["schemas"]["UserSocialProfileModelRes"][];
            /** Format: int64 */
            spooferUserId?: number;
            subscriptionPlans?: components["schemas"]["UserSubscriptionPlanModelRes"][];
            userAlias?: string;
            /** Format: date-time */
            userDeletedDateUtc?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: date-time */
            userRegistrationDateUtc?: string;
        };
        /** UserItem */
        UserItem: {
            firstName?: string;
            isGhost?: boolean;
            lastName?: string;
            profilePictureUrl?: string;
        };
        /** UserRefLinkDomain */
        UserRefLinkDomain: {
            refLink?: string;
            /** Format: int64 */
            userId?: number;
            /** Format: int64 */
            userRefLinkId?: number;
        };
        /** UserReferralLinkModel */
        UserReferralLinkModel: {
            referralLink?: string;
            /** @enum {string} */
            referralLinkType?: UserReferralLinkModelReferralLinkType;
        };
        /** UserReferralLinkModelReq */
        UserReferralLinkModelReq: {
            referralLink?: string;
            /** @enum {string} */
            referralLinkType?: UserReferralLinkModelReferralLinkType;
        };
        /** UserReferralLinkModelRes */
        UserReferralLinkModelRes: {
            referralLink?: string;
            /** @enum {string} */
            referralLinkType?: UserReferralLinkModelReferralLinkType;
        };
        /** UserReferralSourceTypeModel */
        UserReferralSourceTypeModel: {
            children?: components["schemas"]["UserReferralSourceTypeModel"][];
            imageUrl?: string;
            isDisplayed?: boolean;
            sourceDesc?: string;
            sourceName?: string;
            /** Format: int64 */
            sourceTypeId?: number;
            uiDisplayText?: string;
        };
        /** UserRegistrationStats */
        UserRegistrationStats: {
            clientTypes?: {
                [key: string]: number;
            };
            /** Format: bigdecimal */
            conversionRate?: number;
            /** Format: date-time */
            endDate?: string;
            loginProviders?: {
                [key: string]: number;
            };
            /** Format: int64 */
            newCustomerCount?: number;
            /** Format: int64 */
            numRegistrations?: number;
            /** Format: date-time */
            startDate?: string;
            zoneId?: components["schemas"]["ZoneId"];
        };
        /** UserRoleDomain */
        UserRoleDomain: {
            /** @enum {string} */
            roleType?: AuthorModelUserRole;
        };
        /** UserSocialProfileModel */
        UserSocialProfileModel: {
            /** @enum {string} */
            platform?: PathsApiV1UsersUserIdSocialProfilesDeleteParametersQueryPlatform;
            userHandle?: string;
        };
        /** UserSocialProfileModelReq */
        UserSocialProfileModelReq: {
            /** @enum {string} */
            platform?: PathsApiV1UsersUserIdSocialProfilesDeleteParametersQueryPlatform;
            userHandle?: string;
        };
        /** UserSocialProfileModelRes */
        UserSocialProfileModelRes: {
            /** @enum {string} */
            platform?: PathsApiV1UsersUserIdSocialProfilesDeleteParametersQueryPlatform;
            userHandle?: string;
        };
        /** UserSubscriptionPlanModel */
        UserSubscriptionPlanModel: {
            /** Format: date-time */
            expirationDateUtc?: string;
            id?: string;
            /** @enum {string} */
            productName?: UserSubscriptionPlanModelProductName;
            /** Format: date-time */
            startDateUtc?: string;
            subscriptionCovered?: boolean;
            /** @enum {string} */
            subscriptionStatus?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
        };
        /** UserSubscriptionPlanModelReq */
        UserSubscriptionPlanModelReq: {
            /** Format: date-time */
            expirationDateUtc?: string;
            id?: string;
            /** @enum {string} */
            productName?: UserSubscriptionPlanModelProductName;
            /** Format: date-time */
            startDateUtc?: string;
            /** @enum {string} */
            subscriptionStatus?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
        };
        /** UserSubscriptionPlanModelRes */
        UserSubscriptionPlanModelRes: {
            /** Format: date-time */
            expirationDateUtc?: string;
            id?: string;
            /** @enum {string} */
            productName?: UserSubscriptionPlanModelProductName;
            /** Format: date-time */
            startDateUtc?: string;
            subscriptionCovered?: boolean;
            /** @enum {string} */
            subscriptionStatus?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
        };
        /** UserToContact */
        UserToContact: {
            /** Format: int64 */
            citationId?: number;
            /** Format: int64 */
            userIdToContact?: number;
        };
        /** UserWatchlistsModel */
        UserWatchlistsModel: {
            isArchived?: boolean;
            /** Format: int64 */
            watchlistId?: number;
            watchlistItems?: components["schemas"]["WatchlistItemsModel"][];
            watchlistName?: string;
        };
        /** ValidateDirectMailRequest */
        ValidateDirectMailRequest: {
            mailTemplateType?: string;
            toAddress?: components["schemas"]["AddressDomain"];
        };
        /** ValidateDirectMailResponse */
        ValidateDirectMailResponse: {
            /** @enum {string} */
            otrError?: ValidateDirectMailResponseOtrError;
        };
        /** ValidatePhoneNumberRequest */
        ValidatePhoneNumberRequest: {
            phoneNumber?: string;
        };
        /** ValidatePhoneNumberResponse */
        ValidatePhoneNumberResponse: {
            carrier?: string;
            city?: string;
            country?: string;
            /** @enum {string} */
            phoneType?: ValidatePhoneNumberResponsePhoneType;
            valid?: boolean;
            zipCode?: string;
        };
        /** ValidateUserEmailResponse */
        ValidateUserEmailResponse: {
            invalidEmailReason?: string;
            isEmailAvailable?: boolean;
            isEmailValid?: boolean;
        };
        /** VerifyCaptchaTokenRequest */
        VerifyCaptchaTokenRequest: {
            ipAddress?: string;
            token: string;
            /** @enum {string} */
            version?: VerifyCaptchaTokenRequestVersion;
        };
        /** VerifyCaptchaTokenResponse */
        VerifyCaptchaTokenResponse: {
            action?: string;
            /** Format: date-time */
            challengedAt?: string;
            errorCodes?: string[];
            hostname?: string;
            /** Format: double */
            score?: number;
            successful?: boolean;
        };
        /** VerifyMailingAddressRequest */
        VerifyMailingAddressRequest: {
            address?: components["schemas"]["LobMailingAddress"];
        };
        /** VerifyMailingAddressResponse */
        VerifyMailingAddressResponse: {
            addressToUse?: components["schemas"]["LobMailingAddress"];
            deliverable?: boolean;
            deliverableMessage?: string;
        };
        /** VerifyPasswordResetTokenResponse */
        VerifyPasswordResetTokenResponse: {
            isTokenValid?: boolean;
            /** Format: int64 */
            userId?: number;
        };
        /** VerifyUserAccountResponse */
        VerifyUserAccountResponse: {
            emailAlreadyConfirmed?: boolean;
            emailConfirmed?: boolean;
            existingAccounts?: components["schemas"]["ExistingAccountDetails"][];
            mobilePhoneConfirmed?: boolean;
        };
        /** VerifyUserPasswordRequest */
        VerifyUserPasswordRequest: {
            plainTextPassword?: string;
        };
        /** Violation */
        Violation: {
            code?: string;
            /** Format: int32 */
            codeConfidence?: number;
            description?: string;
            /** Format: int32 */
            descriptionConfidence?: number;
            penalty?: string;
            /** Format: int32 */
            penaltyConfidence?: number;
        };
        /** ViolationClassificationModel */
        ViolationClassificationModel: {
            /** @enum {string} */
            classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            criminal?: boolean;
            pureCriminal?: boolean;
            regionCode?: string;
        };
        /** ViolationInput */
        ViolationInput: {
            violationDescription?: string;
        };
        /** ViolationInputRequest */
        ViolationInputRequest: {
            /** Format: int64 */
            violationId?: number;
        };
        /** ViolationModel */
        ViolationModel: {
            classDescription?: string;
            /** Format: double */
            insuranceIncreasePercent?: number;
            isCriminal?: boolean;
            isMovingViolation?: boolean;
            isWobblerToCriminal?: boolean;
            penalties?: components["schemas"]["ViolationPenaltyModel"][];
            trafficViolationDesc?: string;
            /** Format: int64 */
            trafficViolationTypeId?: number;
            userFriendlyName?: string;
            userFriendlyShortForm?: string;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationCode?: string;
        };
        /** ViolationModel0 */
        ViolationModel0: {
            isCriminal?: boolean;
            isMoving?: boolean;
            userFriendlyName?: string;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationClassificationDescription?: string;
            violationClassificationFriendlyName?: string;
        };
        /** ViolationNames */
        ViolationNames: {
            llm_prediction?: string[];
            pinecone_ids?: number[];
            pinecone_matches?: string[];
            pinecone_scores?: number[];
        };
        /** ViolationPenaltyModel */
        ViolationPenaltyModel: {
            additionalTip?: string;
            penaltyFriendlyDescription?: string;
            penaltyMerged?: boolean;
            /** @enum {string} */
            penaltyType?: CaseViolationPenaltyPenaltyType;
            /** Format: int64 */
            penaltyTypeId?: number;
            penaltyValue?: string;
            vectorImageUrl?: string;
        };
        /** ViolationPenaltyResponse */
        ViolationPenaltyResponse: {
            penalties?: components["schemas"]["Penalty"][];
            violationId?: string;
        };
        /** ViolationResponse */
        ViolationResponse: {
            criminal?: boolean;
            penalties?: components["schemas"]["CaseViolationPenalty"][];
            trafficViolationDesc?: string;
            /** Format: int64 */
            trafficViolationTypeId?: number;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationCode?: string;
            wobblerToCriminal?: boolean;
        };
        /** WatchlistItemsModel */
        WatchlistItemsModel: {
            caseItem?: components["schemas"]["CaseItem"];
            entityId?: string;
            /** @enum {string} */
            entityType?: SaveItemToWatchlistRequestEntityType;
            isDeleted?: boolean;
            itemCreatedDate?: components["schemas"]["Timestamp"];
            itemLastUpdatedDate?: components["schemas"]["Timestamp"];
            lawfirmItem?: components["schemas"]["LawfirmItem"];
            note?: string;
            /** @enum {string} */
            priority?: SaveItemToWatchlistRequestPriority;
            userItem?: components["schemas"]["UserItem"];
            /** Format: int64 */
            watchlistId?: number;
            /** Format: int64 */
            watchlistItemId?: number;
        };
        /** WorkflowCaseModel */
        WorkflowCaseModel: {
            caseId?: string;
            /** @enum {string} */
            caseStatus?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            /** @enum {string} */
            caseStatusCategory?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            citation?: components["schemas"]["WorkflowCitationModel"];
            courtAppointmentDate?: components["schemas"]["Timestamp"];
            defendantDetails?: components["schemas"]["DefendantDetailsModel"];
            isLawfirmCodeApplied?: boolean;
            latestUnavailableMatchAttributes?: components["schemas"]["UnavailableMatchAttributesModel"];
            legalServices?: components["schemas"]["LegalServiceModel"][];
            letterOfEngagement?: components["schemas"]["LetterOfEngagement"];
            maxPenalties?: components["schemas"]["WorkflowViolationPenaltyModel"][];
            paymentPlanTypeModel?: components["schemas"]["PaymentPlanTypeModel"];
            referralCode?: string;
            /** @enum {string} */
            referralCodeOwner?: GetReferralCodeResponseOwnerType;
            subscriptionDiscountEligibility?: components["schemas"]["SubscriptionDiscountEligibility"];
            /** Format: int64 */
            userId?: number;
        };
        /** WorkflowCasePaymentModel */
        WorkflowCasePaymentModel: {
            /** Format: date-time */
            dueDate?: string;
            dueNow?: boolean;
            /** Format: int32 */
            feeAmount?: number;
            items?: components["schemas"]["CasePaymentBreakdownItemModel"][];
        };
        /** WorkflowCitationModel */
        WorkflowCitationModel: {
            address?: components["schemas"]["AddressDomain"];
            /** @enum {string} */
            cdlStatus?: CitationInputRequestCdlStatus;
            /** Format: int64 */
            citationId?: number;
            citationIssueDate?: components["schemas"]["PureDate"];
            citationIssueDateUtc?: components["schemas"]["Timestamp"];
            citationLockedForClient?: boolean;
            clientEmailAddress?: string;
            clientFirstName?: string;
            court?: components["schemas"]["CourtDomain"];
            documentUrlToConvert?: string;
            /** Format: bigdecimal */
            fineAmount?: number;
            hasCitationImage?: boolean;
            involvesAccident?: boolean;
            isDeleted?: boolean;
            regionCode?: string;
            signedTicketImageUrl?: string;
            ticketImageUrl?: string;
            ticketNumber?: string;
            /** Format: int32 */
            violationCount?: number;
            violations?: components["schemas"]["WorkflowViolationModel"][];
        };
        /** WorkflowFinancials */
        WorkflowFinancials: {
            lineItems?: components["schemas"]["WorkflowLineItemModel"][];
            payments?: components["schemas"]["WorkflowCasePaymentModel"][];
            /** Format: int32 */
            totalClientBaseCostInCents?: number;
            /** Format: int32 */
            totalClientCostInCents?: number;
            /** Format: int32 */
            totalRefCodeAdjustmentInCents?: number;
        };
        /** WorkflowLineItemModel */
        WorkflowLineItemModel: {
            additionalDescription?: string;
            /** Format: int64 */
            lawfirmCaseId?: number;
            /** Format: int32 */
            lineItemFeeInCents?: number;
            lineItemType?: components["schemas"]["InvoiceLineItemModel"];
            /** @enum {string} */
            recipient?: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
        };
        /** WorkflowViolationModel */
        WorkflowViolationModel: {
            classDescription?: string;
            criminal?: boolean;
            penalties?: components["schemas"]["WorkflowViolationPenaltyModel"][];
            trafficViolationDesc?: string;
            /** Format: int64 */
            trafficViolationTypeId?: number;
            /** @enum {string} */
            violationClassification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
            violationCode?: string;
            wobblerToCriminal?: boolean;
        };
        /** WorkflowViolationPenaltyModel */
        WorkflowViolationPenaltyModel: {
            penaltyFriendlyDescription?: string;
            /** @enum {string} */
            penaltyType?: CaseViolationPenaltyPenaltyType;
            penaltyValue?: string;
        };
        /** ZoneId */
        ZoneId: {
            id?: string;
            rules?: components["schemas"]["ZoneRules"];
        };
        /** ZoneOffset */
        ZoneOffset: {
            id?: string;
            rules?: components["schemas"]["ZoneRules"];
            /** Format: int32 */
            totalSeconds?: number;
        };
        /** ZoneOffsetTransition */
        ZoneOffsetTransition: {
            /** Format: date-time */
            dateTimeAfter?: string;
            /** Format: date-time */
            dateTimeBefore?: string;
            duration?: components["schemas"]["Duration"];
            gap?: boolean;
            /** Format: date-time */
            instant?: string;
            offsetAfter?: components["schemas"]["ZoneOffset"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            overlap?: boolean;
        };
        /** ZoneOffsetTransitionRule */
        ZoneOffsetTransitionRule: {
            /** Format: int32 */
            dayOfMonthIndicator?: number;
            /** @enum {string} */
            dayOfWeek?: ZoneOffsetTransitionRuleDayOfWeek;
            localTime?: components["schemas"]["LocalTime"];
            midnightEndOfDay?: boolean;
            /** @enum {string} */
            month?: ZoneOffsetTransitionRuleMonth;
            offsetAfter?: components["schemas"]["ZoneOffset"];
            offsetBefore?: components["schemas"]["ZoneOffset"];
            standardOffset?: components["schemas"]["ZoneOffset"];
            /** @enum {string} */
            timeDefinition?: ZoneOffsetTransitionRuleTimeDefinition;
        };
        /** ZoneRules */
        ZoneRules: {
            fixedOffset?: boolean;
            transitionRules?: components["schemas"]["ZoneOffsetTransitionRule"][];
            transitions?: components["schemas"]["ZoneOffsetTransition"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    notifyClientActionRequirementUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ClientActionRequiredRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listActivityFeedUsingGET: {
        parameters: {
            query: {
                /** @description limit */
                limit: number;
                /** @description regionCode */
                regionCode?: string;
                /** @description preferredRegionCode */
                preferredRegionCode?: boolean;
                /** @description previousPageToken */
                previousPageToken?: string;
                /** @description nextPageToken */
                nextPageToken?: string;
                /** @description hasProfilePicture */
                hasProfilePicture?: boolean;
                /** @description activityType */
                activityType?: PathsApiV1ActivityFeedGetParametersQueryActivityType;
                /** @description courtId */
                courtId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetActivityFeedResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCaseOutcomesUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
                /** @description regionCode */
                regionCode?: string;
                /** @description startDate */
                startDate?: string;
                /** @description includeCriminal */
                includeCriminal?: boolean;
                /** @description resolutionStatuses */
                resolutionStatuses?: PathsApiV1ActivityFeedCaseOutcomesGetParametersQueryResolutionStatuses;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListCaseOutcomesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCountryListUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCountryListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCountryRegionsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description countryCode */
                countryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCountryRegionsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLocationUsingGET: {
        parameters: {
            query: {
                /** @description zipCode */
                zipCode: string;
                /** @description countryCode */
                countryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLocationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markAlertAsReadUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description alertId */
                alertId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AlertNotificationResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAlertsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AlertNotificationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addAppEventUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AppEventCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLawfirmAuditEventsByCursorUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
                /** @description includeTypes */
                includeTypes?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
                /** @description excludeTypes */
                excludeTypes?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
                /** @description nextPageToken */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListLawfirmAuditEventsByCursorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAuditLogsUsingGET: {
        parameters: {
            query?: {
                /** @description logType */
                logType?: PathsApiV1CitationsCitationIdAuditLogsGetParametersQueryLogType;
                /** @description logLevel */
                logLevel?: PathsApiV1CitationsCitationIdAuditLogsGetParametersQueryLogLevel;
                /** @description showActiveOnly */
                showActiveOnly?: boolean;
            };
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCitationAuditLogsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserInfoUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCurrentUserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAwsCredentialsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AwsCredentialsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SimpleCredentialsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleEventUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BlogEvent"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createBranchLinkUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateBranchLinkRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verifyCaptchaTokenUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["VerifyCaptchaTokenRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerifyCaptchaTokenResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllActionsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseActionTypesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseActionsUsingGET: {
        parameters: {
            query?: {
                /** @description showDeleted */
                showDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseActionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActionTimelineUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseActionTimelineResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCaseActionUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description caseActionId */
                caseActionId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCaseActionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateCaseActionResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markActionAsDeletedUsingDELETE: {
        parameters: {
            query: {
                /** @description isDeleted */
                isDeleted: boolean;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description caseActionId */
                caseActionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MarkActionAsDeletedResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addActionToCaseV2UsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddActionToCaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddActionToCaseResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setArchiveOnCasesUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetArchiveOnCasesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCaseUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CaseModelReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAppearanceAttorneysForCaseUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetAppearanceAttorneysResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addViolationsToCitationUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddViolationsToCitationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeViolationsFromCitationUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description violationTypes */
                violationTypes: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setCourtDateForCaseUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetCourtDateForCaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateDeclineTicketsUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCaseDeclineTicketsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findChargeDisputesByCaseIdUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FindChargeDisputesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    initiateCaseUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InitiateCaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    initiateCaseAndChargeCustomerUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InitiateCaseAndChargeCustomerRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InitiateCaseAndChargeCustomerResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assignOwnerUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assignCaseToUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    submitRequestForPriceMatchUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PriceMatchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PriceMatchResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reopenCaseUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markCaseAsResolvedUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MarkCaseAsResolvedRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MarkCaseAsResolvedResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSupportTicketsForCaseUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetSupportTicketsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateCounterOfferCasePaymentsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description counterId */
                counterId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenerateCounterOfferCasePaymentsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenerateCounterOfferCasePaymentsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseCounterOptionsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseCounterOptionsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCounterOfferUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCounterOfferResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    initiateCaseCounterUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InitiateCaseCounterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InitiateCaseCounterResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCounterOfferByCounterIdUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description counterId */
                counterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCounterOfferResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    acceptCaseCounterUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description counterId */
                counterId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AcceptCaseCounterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    declineCaseCounterUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description counterId */
                counterId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeclineCaseCounterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    withdrawCaseCounterUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description counterId */
                counterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    matchCaseUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationIdString */
                citationIdString: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CaseCreationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MatchCaseResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addSampleCaseUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseDeclineReasonTypesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseDeclineReasonTypesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseNotesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseNotesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveCaseNotesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveCaseNotesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStripeChargeUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description stripeChargeId */
                stripeChargeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetStripeChargeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCostItemsForCustomerUsingGET: {
        parameters: {
            query?: {
                /** @description productId */
                productId?: string;
                /** @description period */
                period?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListCostItemsForCustomerResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOverdueCasePaymentsUsingGET: {
        parameters: {
            query?: {
                /** @description includeUpcoming */
                includeUpcoming?: boolean;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetOverdueCasePaymentsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPaymentPlanOptionsUsingGET: {
        parameters: {
            query: {
                /** @description lawfirmId */
                lawfirmId: number;
                /** @description userId */
                userId?: number;
                /** @description feeInCents */
                feeInCents?: number;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetAvailablePaymentPlansResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateCasePaymentPlanUsingGET: {
        parameters: {
            query?: {
                /** @description productId */
                productId?: string;
                /** @description period */
                period?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description paymentPlanTypeId */
                paymentPlanTypeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListCostItemsForCustomerResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveCasePaymentPlanUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description paymentPlanTypeId */
                paymentPlanTypeId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveCasePaymentPlan"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCasePaymentsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCasePaymentsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    scheduleNewPaymentUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScheduleNewPaymentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCasePaymentUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    authorizeChargeForCasePaymentUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AuthorizeChargeForCasePaymentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthorizeChargeForCasePaymentResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    captureChargeFromCasePaymentUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CaptureChargeFromCasePaymentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStripeChargesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetStripeChargesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAvailablePaymentPlansUsingPOST: {
        parameters: {
            query: {
                /** @description legalFeeInCents */
                legalFeeInCents: string;
                /** @description state */
                state: string;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetAvailablePaymentPlansResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCasePaymentUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCasePaymentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePaymentDueDateUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdatePaymentDueDateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePaymentRecipientUsingPUT: {
        parameters: {
            query: {
                /** @description recipient */
                recipient: PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient;
            };
            header?: never;
            path: {
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    applyReferralCodeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description codeId */
                codeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MatchCaseResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeReferralCodeFromCaseUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description codeId */
                codeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeReferralCodeFromCaseV2UsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description codeId */
                codeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refundCasePaymentUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefundCasePaymentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    releasePaymentUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description casePaymentId */
                casePaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateRefundEligibilityForCaseUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateRefundEligibilityForCaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetSupportTicketsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelCaseUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CancelCaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addSocialMediaActionUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseStatusesUsingGET: {
        parameters: {
            query?: {
                /** @description categories */
                categories?: PathsApiV1CaseStatusesGetParametersQueryCategories;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CaseStatusDetailsResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseResolutionStatusesUsingGET: {
        parameters: {
            query?: {
                /** @description stateCode */
                stateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseResolutionStatusesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTransferHistoryUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CaseTransferResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferCaseUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferCaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    calculateTransferFeeDifferenceUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CalculateTransferFeeDifferenceResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCaseUserUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseUsersId */
                caseUsersId: number;
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseUsersByCaseUsingGET: {
        parameters: {
            query?: {
                /** @description getRemovedUsers */
                getRemovedUsers?: boolean;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseUsersResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveCaseUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveCaseUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listDashboardCaseUsersUsingGET: {
        parameters: {
            query?: {
                /** @description isDefendant */
                isDefendant?: boolean;
                /** @description limit */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListDashboardCaseUsersResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSSLPublicCertFileUsingGET: {
        parameters: {
            query: {
                /** @description encoding */
                encoding: PathsApiV1CertificatesSslGetParametersQueryEncoding;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SSLCertificateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCitationAuditEventsUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
                /** @description includeTypes */
                includeTypes?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
                /** @description excludeTypes */
                excludeTypes?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
                /** @description nextPageToken */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListCitationAuditEventsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createNewCitationUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CreateCitationResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getListOfCitationsWithMissingCourtUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetListOfCitationsWithMissingCourtResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dismissCitationsFromContactListUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DismissCitationsFromContactListRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNoViolationCitationsUsingGET: {
        parameters: {
            query?: {
                /** @description regionCodes */
                regionCodes?: string;
                /** @description trailingDays */
                trailingDays?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetNoViolationCitationsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    signImageUrlUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SignImageUrlRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SignImageUrlResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCitationUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationIdString */
                citationIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCitationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCitationUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationIdString */
                citationIdString: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCitationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCitationUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationIdString */
                citationIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DeleteCitationResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setCitationContactListFlagUsingPOST: {
        parameters: {
            query: {
                /** @description isDismissed */
                isDismissed: boolean;
            };
            header?: never;
            path: {
                /** @description citationIdString */
                citationIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCitationAddressUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCitationAddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCitationCourtUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postMissingCourtForCitationUsingPOST: {
        parameters: {
            query: {
                /** @description state */
                state: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            };
            header?: never;
            path: {
                /** @description citationId */
                citationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteMissingCourtRecordUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetListOfCitationsWithMissingCourtResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setLockForCitationUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
                /** @description isLocked */
                isLocked: boolean;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assignCitationOwnerUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AssignCitationOwnerRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCitationPictureUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCitationPictureRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createReferralSourceForCitationUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateReferralSourceForCitation"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAnonymousTicketUploadsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description emailAddress */
                emailAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetAnonymousTicketUploads"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    toggleDeleteCitationUsingDELETE: {
        parameters: {
            query: {
                /** @description isDeleteRequest */
                isDeleteRequest: boolean;
            };
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DeleteCitationResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    acknowledgeCoachingCardUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCoachingCardRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCoachingCardCategoriesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCoachingCardCategoriesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveCoachingCardUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveCoachingCardRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listUserCoachingCardsUsingGET: {
        parameters: {
            query?: {
                /** @description includeCreated */
                includeCreated?: boolean;
                /** @description includeReceived */
                includeReceived?: boolean;
                /** @description coachingCardType */
                coachingCardType?: PathsApiV1CoachingCardsUserIdCardsGetParametersQueryCoachingCardType;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListUserCoachingCardsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAppConfigurationUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetAppConfigResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listBillingSubscribersUsingGET: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
                /** @description shouldIncludeSubscribers */
                shouldIncludeSubscribers?: boolean;
                /** @description startDate */
                startDate?: string;
                /** @description endDate */
                endDate?: string;
                /** @description timeZoneId */
                timeZoneId?: string;
                /** @description subscriberName */
                subscriberName?: string;
                /** @description planName */
                planName?: string;
                /** @description billingInterval */
                billingInterval?: PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod;
                /** @description billingSubscriptionStatus */
                billingSubscriptionStatus?: PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus;
                /** @description coveredSubscriptionsOnly */
                coveredSubscriptionsOnly?: boolean;
                /** @description sortBy */
                sortBy?: string;
                /** @description sortOrder */
                sortOrder?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListBillingSubscribersResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDeclinedCasesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetDeclinedCasesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDeclinedCasesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPendingCasesUsingGET: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPendingCasesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPendingCasesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetPendingCasesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPendingCasesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCasesWithCoverageObtainedUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericAdminListRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCasesWithCoverageObtainedResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getClientConfirmedUnpaidCasesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetClientConfirmedUnpaidCasesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetClientConfirmedUnpaidCasesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInvalidCasesWithStripeChargeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetInvalidCasesWithStripeChargeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvalidCasesWithStripeChargeResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLostCasesWithTransferNotReversedUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetLostCasesWithTransferNotReversedRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLostCasesWithTransferNotReversedResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCasesWithMissingLawfirmPayoutsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetCasesWithMissingLawfirmPayoutsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCasesWithMissingLawfirmPayoutsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCasesWithOverduePaymentsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetCasesWithUncapturedChargesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCasesWithOverduePaymentsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCitationPhoneLeadsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetCitationPhoneLeadsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCitationPhoneLeadsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCitationsWithMissingFieldsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetCitationsWithMissingFieldsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCitationsWithMissingFieldsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findDisputesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FindDisputesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindChargeDisputesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLawfirmLeadsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetLawfirmLeadsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLawfirmLeadsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listPotentialCustomersUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetPotentialCustomersRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPotentialCustomersResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPendingTicketReviewsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetPendingTicketReviewsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPendingTicketReviewsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCitationsWithMissingFieldsV2UsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetCitationsWithMissingFieldsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCitationsWithMissingFieldsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleContactLoopEventUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listContactTimelineUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListContactTimelineResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setFlagOnMessagesUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetFlagOnMessagesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setStarOnMessagesUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetStarOnMessagesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getConversationUsingGET: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseMessagesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addMessageToConversationUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddNewCaseMessageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddCaseMessageResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMessageUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description messageId */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseMessagesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markMessageAsDeletedUsingPUT: {
        parameters: {
            query: {
                /** @description isDeleted */
                isDeleted: boolean;
            };
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description messageId */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    editMessageUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description messageId */
                messageId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EditConversationMessageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCountiesUsingGET: {
        parameters: {
            query: {
                /** @description state */
                state: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCountiesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCourtUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddCourtRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findCourtsWithNoCoverageUsingGET: {
        parameters: {
            query?: {
                /** @description countryCode */
                countryCode?: string;
                /** @description regionCode */
                regionCode?: string;
                /** @description countyId */
                countyId?: number;
                /** @description trailingDays */
                trailingDays?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FindCourtsWithNoCoverageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchCourtsUsingGET: {
        parameters: {
            query?: {
                /** @description q */
                q?: string;
                /** @description state */
                state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
                /** @description regionCode */
                regionCode?: string;
                /** @description countryCode */
                countryCode?: string;
                /** @description city */
                city?: string;
                /** @description county */
                county?: string;
                /** @description offset */
                offset?: number;
                /** @description length */
                length?: number;
                /** @description citationId */
                citationId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCourtsByQueryResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCourtUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description courtId */
                courtId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCourtResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCourtUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description courtId */
                courtId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCourtRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCourtAddressUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description courtId */
                courtId: number;
                /** @description addressId */
                addressId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpsertAddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findCourtsUsingGET: {
        parameters: {
            query?: {
                /** @description q */
                q?: string;
                /** @description state */
                state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
                /** @description regionCode */
                regionCode?: string;
                /** @description countryCode */
                countryCode?: string;
                /** @description city */
                city?: string;
                /** @description county */
                county?: string;
                /** @description offset */
                offset?: number;
                /** @description length */
                length?: number;
                /** @description citationId */
                citationId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FindsCourtsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendBookingReceiptUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendBookingReceiptRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOutgoingContactsUsingGET: {
        parameters: {
            query: {
                /** @description recipientEmailAddress */
                recipientEmailAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOutgoingContactsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateTemplateUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenerateTemplateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEmailTemplateResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTemplatesUsingGET: {
        parameters: {
            query?: {
                /** @description category */
                category?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replyToTicketUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ticketId */
                ticketId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReplyToTicketRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendConsolidatedEmailToUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendConsolidatedEmailToUser"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendEmailToUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendEmailToUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendEmailToUsersUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendEmailToUsersRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postCustomerLeadUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddCustomerLeadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCustomerReviewsUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
                /** @description includeAnonymous */
                includeAnonymous?: boolean;
                /** @description lawfirmId */
                lawfirmId?: number;
                /** @description previousPageToken */
                previousPageToken?: string;
                /** @description nextPageToken */
                nextPageToken?: string;
                /** @description isFeatured */
                isFeatured?: boolean;
                /** @description includeDeleted */
                includeDeleted?: boolean;
                /** @description includeRatings */
                includeRatings?: boolean;
                /** @description state */
                state?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
                /** @description tags */
                tags?: string;
                /** @description version */
                version?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListReviewsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCustomerReviewUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddReviewRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    editCustomerReviewUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description reviewId */
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EditCustomerReviewRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setCustomerReviewStatusUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description reviewId */
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetCustomerReviewStatusRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listEligibleStatusesForReviewUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListEligibleStatusResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replyToCustomerReviewUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description reviewId */
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReplyToReviewRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCommentForCustomerReviewUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description reviewId */
                reviewId: number;
                /** @description commentId */
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateReplyForCustomerReview"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markCommentWithVoteUsingPUT: {
        parameters: {
            query?: {
                /** @description like */
                like?: boolean;
            };
            header?: never;
            path: {
                /** @description reviewId */
                reviewId: number;
                /** @description commentId */
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markReviewWithVoteUsingPUT: {
        parameters: {
            query?: {
                /** @description helpful */
                helpful?: boolean;
            };
            header?: never;
            path: {
                /** @description reviewId */
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listAgentBookingsUsingGET: {
        parameters: {
            query?: {
                /** @description agentUserId */
                agentUserId?: number;
                /** @description agentTeam */
                agentTeam?: string;
                /** @description direction */
                direction?: string;
                /** @description channel */
                channel?: string;
                /** @description state */
                state?: string;
                /** @description caseStatus */
                caseStatus?: string;
                /** @description statusCategory */
                statusCategory?: string;
                /** @description startDate */
                startDate?: string;
                /** @description endDate */
                endDate?: string;
                /** @description timeZoneId */
                timeZoneId?: string;
                /** @description sortBy */
                sortBy?: string;
                /** @description sortOrder */
                sortOrder?: string;
                /** @description offset */
                offset?: number;
                /** @description length */
                length?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListAgentBookingsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveAgentBookingUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveAgentBookingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SaveAgentBookingResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAgentBookingUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description agentBookingId */
                agentBookingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCustomerServiceAgentsUsingGET: {
        parameters: {
            query?: {
                /** @description isActive */
                isActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCustomerServiceAgentsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBookingsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetBookingsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBookingsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCaseBookingsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ListCaseBookingsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCaseBookingsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCaseCancellationsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ListCaseCancellationsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCaseCancellationsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCitationsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ListCitationsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCitationsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCustomersUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GraphRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SqlResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listDropoffsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GraphRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SqlResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listExpensesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GraphRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SqlResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLawfirmsEngagedUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ListLawfirmsEngagedRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListLawfirmsEngagedResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLawyerLeadsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GraphRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SqlResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listPhoneCallsUsingGET: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
                /** @description shouldIncludePhoneCalls */
                shouldIncludePhoneCalls?: boolean;
                /** @description startDate */
                startDate?: string;
                /** @description endDate */
                endDate?: string;
                /** @description timeZoneId */
                timeZoneId?: string;
                /** @description callStatus */
                callStatus?: PathsApiV1ConsolePhoneCallsGetParametersQueryCallStatus;
                /** @description callStatusName */
                callStatusName?: string;
                /** @description agentName */
                agentName?: string;
                /** @description agentId */
                agentId?: number;
                /** @description teamName */
                teamName?: string;
                /** @description callQueueName */
                callQueueName?: string;
                /** @description ivrName */
                ivrName?: string;
                /** @description direction */
                direction?: PathsApiV1ConsolePhoneCallsGetParametersQueryDirection;
                /** @description customerName */
                customerName?: string;
                /** @description phoneNumber */
                phoneNumber?: string;
                /** @description totalOtrAccounts */
                totalOtrAccounts?: number;
                /** @description totalCalls */
                totalCalls?: number;
                /** @description sortBy */
                sortBy?: string;
                /** @description sortOrder */
                sortOrder?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListPhoneCallsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserRegistrationsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetUserRegistrationsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserRegistrationsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendDirectMailUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DirectMailSendRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SendDirectMailResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSentMailUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DirectMailGetRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DirectMailContactResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleLobEventUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LobEventRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDirectMailTemplatesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DirectMailTemplateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addDirectMailTemplateUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DirectMailTemplateToAdd"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validateDirectMailRequestForSendUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidateDirectMailRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ValidateDirectMailResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verifyMailingAddressUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["VerifyMailingAddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerifyMailingAddressResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendDirectReferralCheckUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendDirectReferralCheckRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SendDirectCheckResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeFromDripUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DripRemoveRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleDripWebhookUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DripWebhookEvent"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleBounceOrComplaintEventUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DripWebhookEvent"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDriverLicensesUsingGET: {
        parameters: {
            query?: {
                /** @description includeDeleted */
                includeDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetDriverLicensesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveDriverLicenseUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveDriverLicenseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DriverLicenseModel"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveDriverLicensePictureUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveDriverLicensePictureRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SaveDriverLicensePictureResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscribeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscribeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listEmployeesUsingGET: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
                /** @description team */
                team?: string;
                /** @description isActive */
                isActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListEmployeesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveExternalContentVoteUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveExternalContentVoteRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getExternalTicketsUsingGET: {
        parameters: {
            query: {
                /** @description countyId */
                countyId?: number;
                /** @description citationId */
                citationId?: string;
                /** @description driversLicenseId */
                driversLicenseId?: string;
                /** @description regionCode */
                regionCode: string;
                /** @description dateOfBirth */
                dateOfBirth?: string;
                /** @description lastName */
                lastName?: string;
                /** @description organizationName */
                organizationName?: string;
                /** @description searchType */
                searchType?: string;
                /** @description searchValue */
                searchValue?: string;
                /** @description userId */
                userId?: string;
                /** @description sessionId */
                sessionId?: string;
                /** @description attempts */
                attempts?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInputParametersUsingGET: {
        parameters: {
            query: {
                /** @description regionCode */
                regionCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetExternalTicketInputParamsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postFeedbackUsingPOST: {
        parameters: {
            query?: {
                /** @description isReview */
                isReview?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PostFeedbackRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    signRecordingUrlUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SignRecordingUrlRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SignRecordingUrlResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateFreshdeskTicketUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ticketId */
                ticketId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FreshDeskTicketReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FreshDeskTicketRes"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ticketStatusChangeHookUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ticketId */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FreshdeskWebhookRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mergeTicketUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ticketId */
                ticketId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FreshdeskWebhookRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MergeTicketResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseClientUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetUserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCaseFromCitationUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseFromCitationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    acceptHouseholdInviteUsingPUT: {
        parameters: {
            query: {
                /** @description email */
                email: string;
                /** @description token */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHouseholdMatesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetHouseholdMatesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeHouseholdMateUsingDELETE: {
        parameters: {
            query: {
                /** @description mateUserId */
                mateUserId: number;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inviteHouseholdMateUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InviteHouseholdMateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelHouseholdMateInviteUsingDELETE: {
        parameters: {
            query: {
                /** @description inviteeEmail */
                inviteeEmail: string;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    onDeliveredEmailFromHubspotUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    calculateTicketSavingsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EstimateInsuranceSavingsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EstimateInsuranceSavingsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getConversationsUsingGET: {
        parameters: {
            query: {
                /** @description email */
                email: string;
                /** @description length */
                length?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IntercomSearchConversationsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTicketsUsingGET: {
        parameters: {
            query: {
                /** @description userId */
                userId: number;
                /** @description length */
                length?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IntercomSearchTicketsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    onConversationNotificationUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setLawfirmCaseDecisionUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetLawfirmCaseDecisionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmCasesByPageUsingPOST: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
                /** @description hasPaymentPlan */
                hasPaymentPlan?: boolean;
                /** @description start */
                start?: string;
                /** @description end */
                end?: string;
                /** @description courtDateFilter */
                courtDateFilter?: PathsApiV2LawfirmLawfirmIdStringCasesPostParametersQueryCourtDateFilter;
            };
            header?: never;
            path: {
                /** @description lawfirmIdString */
                lawfirmIdString: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetLawfirmSummaryCaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmSummaryCasesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmsUsingGET: {
        parameters: {
            query?: {
                /** @description q */
                q?: string;
                /** @description states */
                states?: PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState;
                /** @description statuses */
                statuses?: PathsApiV1LawfirmsGetParametersQueryStatuses;
                /** @description statusCategories */
                statusCategories?: PathsApiV1LawfirmsGetParametersQueryStatusCategories;
                /** @description includeTestLawfirms */
                includeTestLawfirms?: boolean;
                /** @description includeVacationMode */
                includeVacationMode?: boolean;
                /** @description acceptsAccidentTickets */
                acceptsAccidentTickets?: boolean;
                /** @description acceptsPastDueTickets */
                acceptsPastDueTickets?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createLawfirmUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateNewLawfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    uploadLawfirmsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadLawfirmsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UploadLawfirmsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmByPrimaryEmailUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primaryLawfirmEmail */
                primaryLawfirmEmail: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmJobTitlesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmJobTitleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmSupportTicketsUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IntercomSearchTicketsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmStatusesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmByUrlUsingGET: {
        parameters: {
            query: {
                /** @description seoUrl */
                seoUrl: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmIdString */
                lawfirmIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawfirmUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmIdString */
                lawfirmIdString: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateLawfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmAddressesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmAddressesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addLawfirmAddressUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpsertAddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawfirmAddressUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
                /** @description addressId */
                addressId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpsertAddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmCaseStatsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmCaseStatsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLawfirmCoverPhotoUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInboxMessagesUsingGET: {
        parameters: {
            query?: {
                /** @description query */
                query?: string;
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
                /** @description filter */
                filter?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryFilter;
                /** @description statusCategories */
                statusCategories?: PathsApiV1CaseStatusesGetParametersQueryCategories;
                /** @description caseStatuses */
                caseStatuses?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
                /** @description courtDateFilter */
                courtDateFilter?: PathsApiV2LawfirmLawfirmIdStringCasesPostParametersQueryCourtDateFilter;
                /** @description latestMessageBy */
                latestMessageBy?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryLatestMessageBy;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmInboxMessagesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmLawyersUsingGET: {
        parameters: {
            query?: {
                /** @description settingName */
                settingName?: string;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmLawyersResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawyerRoleUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateLawyerRoleRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOtrLawfirmNotesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePaymentModelUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateLawfirmPaymentModelRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawfirmWithPictureUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LawfirmPictureRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStripeConnectedAccountsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetStripeConnectedAccountsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLawfirmConnectedAccountUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
                /** @description stripeAccountId */
                stripeAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSupportedStatesForLawfirmUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmSupportedStatesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setVacationModeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LawfirmVacationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmCaseDocumentsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCaseDocumentResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markDocumentWithDecisionUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description docId */
                docId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DocumentDecisionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDocumentUsingGET: {
        parameters: {
            query: {
                /** @description doc_type */
                doc_type: PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LawfirmDocumentTemplateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    uploadCopyUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PutDocumentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateDocUsingPOST: {
        parameters: {
            query: {
                /** @description doc_type */
                doc_type: PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetDocumentsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LawfirmDocumentResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    previewDocUsingPOST: {
        parameters: {
            query: {
                /** @description doc_type */
                doc_type: PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PreviewDocumentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LawfirmDocumentResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCourtToCoverageUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmIdString */
                lawfirmIdString: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PostCourtCoverageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmCoverageUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmIdString */
                lawfirmIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmCoverageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccountFeesUsingGET: {
        parameters: {
            query?: {
                /** @description enabledFeesOnly */
                enabledFeesOnly?: boolean;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AccountLevelFeeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveAccountFeesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountLevelFeeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeAccountFeesUsingDELETE: {
        parameters: {
            query?: {
                /** @description regionCode */
                regionCode?: string;
                /** @description classification */
                classification?: PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification;
                /** @description violationId */
                violationId?: number;
                /** @description isPermitted */
                isPermitted?: boolean;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    enableViolationsForLawfirmUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EnableViolationsForLawfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EnableViolationsForLawfirmResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resetFeesForLawfirmUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResetFeesForLawfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResetFeesForLawfirmResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeCourtsUsingDELETE: {
        parameters: {
            query: {
                /** @description courtsToRemove */
                courtsToRemove: number;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeCoverageUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RemoveCoverageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmFeeCoverageUsingGET: {
        parameters: {
            query?: {
                /** @description legalServiceType */
                legalServiceType?: PathsApiV2LawfirmsLawfirmIdCoverageGetParametersQueryLegalServiceType;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmFeeCoverageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPaymentModelTypesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetPaymentModelTypesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActiveRatesByAreaUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GeoRatesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LawfirmsRatesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmSettingUsingGET: {
        parameters: {
            query: {
                /** @description name */
                name: string;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawfirmSettingUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawfirmSettingsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmIdString */
                lawfirmIdString: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateLawfirmSettingsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmSettingsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmSettingsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLawfirmStorefrontsUsingGET: {
        parameters: {
            query?: {
                /** @description regionCode */
                regionCode?: string;
                /** @description page */
                page?: number;
                /** @description size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListLawfirmStorefrontsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLawfirmSurchargesUsingGET: {
        parameters: {
            query?: {
                /** @description featureType */
                featureType?: PathsApiV1LawfirmsLawfirmIdSurchargesGetParametersQueryFeatureType;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListLawfirmSurchargesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveLawfirmSurchargesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveLawfirmSurchargesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeSurchargesUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RemoveLawfirmSurchargeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmFeesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmFeesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmTransactionsForCaseUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmTransactionsForCaseResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmPayoutsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmPayoutsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmPayoutReversalsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmPayoutReversalsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refundLawfirmFeeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmFeeId */
                lawfirmFeeId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefundLawfirmFeeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawfirmFeeUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmFeeId */
                lawfirmFeeId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateLawfirmFeeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateLawfirmFeeResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    debitLawfirmFeeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmFeeId */
                lawfirmFeeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateLawfirmPayoutUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmPayoutId */
                lawfirmPayoutId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateLawfirmPayoutRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateLawfirmPayoutResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reverseLawfirmPayoutUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmPayoutId */
                lawfirmPayoutId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReverseLawfirmPayoutRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    executeLawfirmPayoutUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmPayoutId */
                lawfirmPayoutId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLawfirmFeeRecordUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmFeeId */
                lawfirmFeeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLawfirmPayoutRecordUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmPayoutId */
                lawfirmPayoutId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listLawfirmBankPayoutsUsingGET: {
        parameters: {
            query: {
                /** @description index */
                index: number;
                /** @description size */
                size?: number;
                /** @description includeTransactions  */
                "includeTransactions ": boolean;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListLawfirmBankPayoutsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    chargeFeeToLawfirmUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChargeFeeToLawfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ChargeFeeToLawfirmResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendPayoutToLawfirmUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendPayoutToLawfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SendPayoutToLawfirmResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmFinancialTransactionsUsingGET: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmFinancialTransactionsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inviteLawyerToLawfirmUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InviteLawyerToLawfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsertLawyerUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveLawyerRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveLawyerLeadUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveLawyerLeadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawyerEmailGuessesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawyerId */
                lawyerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawyerUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawyerResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLawyerUsingDELETE: {
        parameters: {
            query?: {
                /** @description removeAdminOnly */
                removeAdminOnly?: boolean;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelLawyerInviteUsingDELETE: {
        parameters: {
            query: {
                /** @description inviteeEmail */
                inviteeEmail: string;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveLawyerLicensesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveLawyerLicensesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteLawyerLicensesUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteLawyerLicenseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createLegalServicesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MatchLegalServicesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MatchLegalServicesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    selectLegalServiceUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
                /** @description lawfirmCaseId */
                lawfirmCaseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLineItemsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLineItemsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    insertCaseLineItemUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InsertInvoiceLineItemRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsertCaseLineItemResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCaseLineItemUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description lineItemId */
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateInvoiceLineItemRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCaseLineItemUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description lineItemId */
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLineItemTypesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLineItemTypesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCasesForUserUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetClientCasesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserCasesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetUserCasesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listDashboardCasesUsingGET: {
        parameters: {
            query?: {
                /** @description defendantId */
                defendantId?: number;
                /** @description limit */
                limit?: number;
                /** @description previousPageToken */
                previousPageToken?: string;
                /** @description query */
                query?: string;
                /** @description sortBy */
                sortBy?: PathsApiV3UsersUserIdCasesGetParametersQuerySortBy;
                /** @description includeDeleted */
                includeDeleted?: boolean;
                /** @description needsAttention */
                needsAttention?: boolean;
                /** @description unreadMessagesOnly */
                unreadMessagesOnly?: boolean;
                /** @description statusCategories */
                statusCategories?: PathsApiV1CaseStatusesGetParametersQueryCategories;
                /** @description caseStatuses */
                caseStatuses?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListDashboardCasesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listDashbaordCasesByPageUsingGET: {
        parameters: {
            query?: {
                /** @description defendantId */
                defendantId?: number;
                /** @description limit */
                limit?: number;
                /** @description page */
                page?: number;
                /** @description query */
                query?: string;
                /** @description sortBy */
                sortBy?: PathsApiV3UsersUserIdCasesGetParametersQuerySortBy;
                /** @description includeDeleted */
                includeDeleted?: boolean;
                /** @description needsAttention */
                needsAttention?: boolean;
                /** @description unreadMessagesOnly */
                unreadMessagesOnly?: boolean;
                /** @description statusCategories */
                statusCategories?: PathsApiV1CaseStatusesGetParametersQueryCategories;
                /** @description caseStatuses */
                caseStatuses?: PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListDashboardCasesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    convertPdfToImageUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConvertPdfToImageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ConvertPdfToImageResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listMessagesByEntityUsingGET: {
        parameters: {
            query?: {
                /** @description page */
                page?: number;
                /** @description length */
                length?: number;
                /** @description userIds */
                userIds?: number;
                /** @description lawfirmId */
                lawfirmId?: number;
                /** @description includeAdminActions  */
                "includeAdminActions "?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetMessagesByEntityResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createNoteUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateNoteRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateNoteResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateNoteUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description noteId */
                noteId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateNoteRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateNoteResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteNoteUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description noteId */
                noteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchNotesUsingGET: {
        parameters: {
            query: {
                /** @description noteType */
                noteType: PathsApiV2NotesSearchGetParametersQueryNoteType;
                /** @description referenceId */
                referenceId: string;
                /** @description query */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchNotesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listNotesUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
                /** @description authorUserId */
                authorUserId?: number;
                /** @description includeDeleted */
                includeDeleted?: boolean;
                /** @description initialNoteId */
                initialNoteId?: number;
                /** @description previousPageToken */
                previousPageToken?: string;
                /** @description nextPageToken */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description noteType */
                noteType: PathsApiV2NotesSearchGetParametersQueryNoteType;
                /** @description referenceId */
                referenceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListNotesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveNotesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveNotesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    predictCitationFieldsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PredictCitationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PredictCitationResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    predictRichCitationFieldsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PredictCitationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PredictRichCitationResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCitationPredictionUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OCRCitationPredictionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    predictImageClassificationUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PredictImageClassificationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PredictImageClassificationResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    predictCitationTextUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PredictCitationTextRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OCRPredictionCaseResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    requestLawyerUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NoLawyerAvailableRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendOneTimePasswordUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendOneTimePasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dismissPhoneLeadUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DismissPhoneLeadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addNoteToPhoneLeadUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddNoteToPhoneLeadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateNoteResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    pushCaseMessageUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PushNotificationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    registerUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PushNotificationRegistrationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUnreadCountsUsingGET: {
        parameters: {
            query?: {
                /** @description includeMessage */
                includeMessage?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NotificationEvents"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markReadUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteNotificationEventRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NotificationEvents"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markAllReadForUserUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    pushNotificationToUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markCaseNotificationsAsUnreadUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markPageTypesAsReadUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteNotificationByPagesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NotificationEvents"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    clearBillingProductOptionsUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveBillingProductOptionUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
                /** @description productId */
                productId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveBillingProductOptionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listBillingProductsUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
                /** @description active */
                active?: boolean;
                /** @description audience */
                audience?: string;
                /** @description userId */
                userId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListBillingProductsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listBillingSubscriptionsUsingGET: {
        parameters: {
            query?: {
                /** @description includeInactive */
                includeInactive?: boolean;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListBillingSubscriptionsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createBillingSubscriptionUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateBillingSubscriptionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CreateBillingSubscriptionResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelBillingSubscriptionUsingDELETE: {
        parameters: {
            query?: {
                /** @description isProrated */
                isProrated?: boolean;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: string;
                /** @description id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CancelBillingSubscriptionResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listSubscriptionInvoicesUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
                /** @description id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListSubscriptionInvoicesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRefLinksForUserUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userIdString */
                userIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetUserRefLinksResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getReferralCodesUsingGET: {
        parameters: {
            query?: {
                /** @description isActive */
                isActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReferralCodesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateReferralCodeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateReferralCodeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReferralCodeResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getReferralCodeUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description codeId */
                codeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReferralCodeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    markCodeAsInactiveUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description codeId */
                codeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    approveReferralCodeUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description codeId */
                codeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validateReferralCodeUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description codeId */
                codeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReferralCodeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getReferralHistoryUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReferralsHistoryResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addReferralUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddReferralRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    publishReferralContactsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PublishReferralRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishReferralContactsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listReferralsUsingGET: {
        parameters: {
            query: {
                /** @description userId */
                userId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListReferralsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserReferralSourceTypesUsingGET: {
        parameters: {
            query?: {
                /** @description flavor */
                flavor?: PathsApiV1ReferralsSourcesGetParametersQueryFlavor;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserReferralSourceTypesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setReferralSourceUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetReferralSourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterNewUserResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    isRefundEligibleUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IsRefundEligibleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    registerGhostUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RegisterGhostUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisterGhostUserResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    registerNewUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RegisterNewUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisterNewUserResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCourtCoverageReportUsingGET: {
        parameters: {
            query?: {
                /** @description urWindowInDays */
                urWindowInDays?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCourtCoverageReportResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmCoverageReportUsingGET: {
        parameters: {
            query?: {
                /** @description regionCode */
                regionCode?: string;
                /** @description countyId */
                countyId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLawfirmCoverageReportResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCourtCoverageForStateReportUsingGET: {
        parameters: {
            query?: {
                /** @description countyId */
                countyId?: number;
                /** @description urWindowInDays */
                urWindowInDays?: number;
            };
            header?: never;
            path: {
                /** @description regionCode */
                regionCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCourtCoverageForStateReportResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCourtCoverageForCountyReportUsingGET: {
        parameters: {
            query?: {
                /** @description urWindowInDays */
                urWindowInDays?: number;
            };
            header?: never;
            path: {
                /** @description regionCode */
                regionCode: string;
                /** @description countyId */
                countyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCourtCoverageForCountyReportResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getScheduledTasksUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description caseId */
                caseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduledTaskGetResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteScheduledTaskUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description taskId */
                taskId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduledTaskGetResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rescheduleTaskUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description taskId */
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RescheduleTaskRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    loginWithSSOUsingPOST: {
        parameters: {
            query: {
                /** @description email */
                email: string;
                /** @description password */
                password: string;
                /** @description brandId */
                brandId: string;
                /** @description isAdmin */
                isAdmin: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SingleSignOnResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleBounceComplaintEmailsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SNSNotificationRequest"];
                "text/plain": components["schemas"]["SNSNotificationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleIncomingEmailsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IncomingEmailRequest"];
                "text/plain": components["schemas"]["IncomingEmailRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleIncomingHelloEmailsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["IncomingEmailModels"];
                "text/plain": components["schemas"]["IncomingEmailModels"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    appleConnectUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AppleLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SocialLoginResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    facebookConnectUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SocialLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SocialLoginResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    googleConnectUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GoogleLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SocialLoginResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    appleConnectUsingPOST_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AppleLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SocialLoginResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    facebookConnectUsingPOST_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SocialLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SocialLoginResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    googleConnectUsingPOST_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GoogleLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SocialLoginResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLawfirmPaymentMethodsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLawfirmPaymentMethodsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addACHToLawfirmStripeAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddACHToStripeAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteBankAccountFromLawfirmStripeAccountUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
                /** @description bankAccountId */
                bankAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setDefaultPaymentMethodForLawfirmUsingPUT: {
        parameters: {
            query: {
                /** @description stripePaymentSourceId */
                stripePaymentSourceId: string;
            };
            header?: never;
            path: {
                /** @description lawfirmId */
                lawfirmId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCardToStripeAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddCardToStripeAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddCardToStripeAccountResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCardUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description cardId */
                cardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StripeCardDomain"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCardUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description cardId */
                cardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StripeCardDomain"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPaymentMethodsForUserUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userIdString */
                userIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetPaymentMethodsForUserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setCardAsPrimaryUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
                /** @description cardId */
                cardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCardForUserUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
                /** @description cardId */
                cardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StripeCardDomain"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addACHToUserStripeAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddACHToStripeAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createStripeConnectAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateStripeConnectAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CreateStripeConnectAccountResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createConnectAccountLinkUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateConnectAccountLinkRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CreateConnectAccountLinkResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    connectStripeAccountUsingPOST: {
        parameters: {
            query: {
                /** @description code */
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateDisputeUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description disputeId */
                disputeId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateDisputeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleOrphanedStripeChargesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["HandleOrphanedStripeChargeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["HandleOrphanedStripeChargeResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    syncAllDisputesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    syncDisputeUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description disputeId */
                disputeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SyncStripeDisputeResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    syncStripePaymentsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SyncStripePaymentsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SyncStripePaymentsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    syncStripeChargesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SyncStripeChargesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SyncStripeChargesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    syncStripeRefundsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SyncStripeRefundsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SyncStripeChargesResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    syncStripeTransfersUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SyncStripeTransfersRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SyncStripeTransfersResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleStripeWebhookFromLawfirmAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleStripeWebhookFromLawfirmConnectedAccountsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleStripeWebhookFromOTRAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleStripeWebhookFromOTRConnectedAccountsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleStripeWebhookForSubscriptionsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTicketReviewInfoUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description citationId */
                citationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetTicketReviewResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    persistTicketEvaluationUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PersistTicketEvaluationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateTicketEvaluationRequestUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ticketEvaluationRequestId */
                ticketEvaluationRequestId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TicketReviewRequestReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRedirectUrlUsingGET: {
        parameters: {
            query?: {
                /** @description landingPageUrl */
                landingPageUrl?: string;
                /** @description lawfirmId */
                lawfirmId?: string;
                /** @description pageType */
                pageType?: PathsApiV1RedirectsGetParametersQueryPageType;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetRedirectUrlResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addRedirectUrlUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddRedirectUrlRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    clearCacheUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addExtraAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddExtraAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    associateOAuthAccountUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AssociateOAuthAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AssociateOAuthAccountResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeAdditionalUserHandleUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
                /** @description userHandle */
                userHandle: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RemoveAdditionalUserHandleRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setPrimaryUserHandleUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
                /** @description userHandle */
                userHandle: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetPrimaryUserHandleRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLastLoginUsingGET: {
        parameters: {
            query?: {
                /** @description clients */
                clients?: PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetLastLoginResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listUserAuditEventsByCursorUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
                /** @description includeTypes */
                includeTypes?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
                /** @description excludeTypes */
                excludeTypes?: PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes;
                /** @description nextPageToken */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListUserAuditEventsByCursorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCurrentUserInfoUsingGET: {
        parameters: {
            query?: {
                /** @description serviceProviderId */
                serviceProviderId?: string;
                /** @description isAdmin */
                isAdmin?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetCurrentUserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    isUserLoggedInUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["IsUserLoggedInResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserRolesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateUserRolesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validateUserByEmailUsingGET: {
        parameters: {
            query: {
                /** @description email */
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ValidateUserEmailResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSupportTicketsForUserUsingGET: {
        parameters: {
            query?: {
                /** @description limit */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description email */
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetSupportTicketsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserDetailsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userIdString */
                userIdString: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserProfileUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateUserProfileRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateUserDetailsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeUserUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateUserDetailsResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findChargeDisputesByUserIdUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FindChargeDisputesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logoutUserUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOverduePaymentsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetOverduePaymentsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reviveUserUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateUserDetailsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserStripeAccountUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetUserStripeAccountResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendTextAlertUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SendTextAlertToUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    changeUserPasswordUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChangeUserPasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resetUserPasswordUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResetUserPasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verifyPwdResetTokenUsingGET: {
        parameters: {
            query: {
                /** @description token */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerifyPasswordResetTokenResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendResetPasswordTokenUsingPOST: {
        parameters: {
            query: {
                /** @description email */
                email: string;
                /** @description enableCode */
                enableCode?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendAccountVerificationCodeUsingPOST: {
        parameters: {
            query?: {
                /** @description userId */
                userId?: string;
                /** @description verificationMethod */
                verificationMethod?: PathsApiV1UsersSendVerificationCodePostParametersQueryVerificationMethod;
                /** @description email */
                email?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verifyUserAccountUsingPUT: {
        parameters: {
            query: {
                /** @description userId */
                userId?: string;
                /** @description code */
                code: string;
                /** @description fieldName */
                fieldName?: string;
                /** @description fieldValue */
                fieldValue?: string;
                /** @description email */
                email?: string;
                /** @description loginProvider */
                loginProvider?: PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VerifyUserAccountResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resetUserPasswordByAdminUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResetUserPasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verifyUserPasswordUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["VerifyUserPasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validatePhoneNumberUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidatePhoneNumberRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ValidatePhoneNumberResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mergeUserUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primaryUserId */
                primaryUserId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MergeUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MergeUserResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserAddressesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetUserAddressesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addUserAddressUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpsertAddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserAddressUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
                /** @description addressId */
                addressId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpsertAddressRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addUserPhoneNumberUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateUserPhoneNumberRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateUserDetailsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserPhoneNumberUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
                /** @description phoneNumberId */
                phoneNumberId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateUserPhoneNumberRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateUserDetailsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteUserPhoneNumberUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
                /** @description phoneNumberId */
                phoneNumberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateUserDetailsResponse"];
                };
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProfilePictureUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProfilePictureRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateProfilePictureResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setMarketingEmailOptInUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SetMarketingEmailOptInRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserByEmailUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetUserByEmailRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetUserByEmailResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findMatchingUsersUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FindMatchingUsersRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FindMatchingUsersResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserSettingUsingGET: {
        parameters: {
            query: {
                /** @description name */
                name: string;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserSettingsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetUserSettingsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetUserSettingsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserSettingUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserSettingsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateUserSettingsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UpdateUserSettingsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveUserSocialProfilesUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveUserSocialProfileRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeUserSocialProfileUsingDELETE: {
        parameters: {
            query: {
                /** @description platform */
                platform: PathsApiV1UsersUserIdSocialProfilesDeleteParametersQueryPlatform;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    backfillLawfirmTransactionRecordsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BackfillLawfirmTransactionRecordsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BackfillLawfirmTransactionRecordsResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatusUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: boolean;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setStatusUsingPOST: {
        parameters: {
            query?: {
                /** @description syncStatus */
                syncStatus?: boolean;
                /** @description lawfirmTransactionsStatus */
                lawfirmTransactionsStatus?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: boolean;
                    };
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validateEmailAddressUsingGET: {
        parameters: {
            query: {
                /** @description email */
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": boolean;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInviteByTokenUsingGET: {
        parameters: {
            query: {
                /** @description token */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetInviteByTokenResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTrafficViolationTypesUsingGET: {
        parameters: {
            query?: {
                /** @description includePenalties */
                includePenalties?: boolean;
                /** @description state */
                state?: string;
                /** @description audience */
                audience?: string;
                /** @description flavor */
                flavor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetTrafficViolationTypesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addViolationUsingPOST: {
        parameters: {
            query: {
                /** @description isLive */
                isLive: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddViolationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddViolationResponse"];
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listViolationClassificationsUsingGET: {
        parameters: {
            query?: {
                /** @description regionCode */
                regionCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListViolationClassificationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRegionsWithViolationsUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetRegionsWithViolationsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateViolationUsingPUT: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description violationId */
                violationId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateViolationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteViolationUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description violationId */
                violationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPenaltyTypesUsingGET: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetPenaltyTypesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPenaltiesByViolationUsingGET: {
        parameters: {
            query?: {
                /** @description flavor */
                flavor?: PathsApiV1ViolationsViolationIdPenaltiesGetParametersQueryFlavor;
            };
            header?: never;
            path: {
                /** @description violationId */
                violationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ViolationPenaltyResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsertPenaltyUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description violationId */
                violationId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddPenaltyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removePenaltyUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description violationId */
                violationId: string;
                /** @description penaltyTypeId */
                penaltyTypeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listUserWatchlistsUsingGET: {
        parameters: {
            query?: {
                /** @description watchlistId */
                watchlistId?: number;
                /** @description includeArchived */
                includeArchived?: boolean;
                /** @description includeDeleted */
                includeDeleted?: boolean;
            };
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ListUserWatchlistsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveUserWatchlistsUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description userId */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveUserWatchlistsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveItemToWatchlistUsingPOST: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description watchlistId */
                watchlistId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SaveItemToWatchlistRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeItemFromWatchlistUsingDELETE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description watchlistId */
                watchlistId: number;
                /** @description itemId */
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forwardMessageUsingPOST: {
        parameters: {
            query?: never;
            header: {
                /** @description X-Session-Id */
                "X-Session-Id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ForwardMessageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getWorkflowStateUsingGET: {
        parameters: {
            query?: {
                /** @description citationId */
                citationId?: number;
                /** @description caseId */
                caseId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GetWorkflowStateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export declare enum PathsApiV1ActivityFeedGetParametersQueryActivityType {
    PURCHASE = "PURCHASE",
    REFERRAL = "REFERRAL",
    REFUND = "REFUND",
    RESOLUTION = "RESOLUTION",
    TICKET_REVIEW = "TICKET_REVIEW"
}
export declare enum PathsApiV1ActivityFeedCaseOutcomesGetParametersQueryResolutionStatuses {
    LOST = "LOST",
    POINTS_REDUCED = "POINTS_REDUCED",
    REDUCED_TO_NON_MOVER = "REDUCED_TO_NON_MOVER",
    TICKET_DISMISSED = "TICKET_DISMISSED"
}
export declare enum PathsApiV1LawfirmsLawfirmIdAuditEventsGetParametersQueryIncludeTypes {
    ACCOUNT_COVERAGE_ADDED = "ACCOUNT_COVERAGE_ADDED",
    ACCOUNT_COVERAGE_REMOVED = "ACCOUNT_COVERAGE_REMOVED",
    ACCOUNT_NOTIFICATION_STATUS_CHANGED = "ACCOUNT_NOTIFICATION_STATUS_CHANGED",
    ACCOUNT_STATUS_CHANGED = "ACCOUNT_STATUS_CHANGED",
    CASE_ACCEPT = "CASE_ACCEPT",
    CASE_BOOKING = "CASE_BOOKING",
    CASE_CANCEL = "CASE_CANCEL",
    CASE_COUNTER_ACCEPTED = "CASE_COUNTER_ACCEPTED",
    CASE_COUNTER_DECLINED = "CASE_COUNTER_DECLINED",
    CASE_COUNTER_INITIATED = "CASE_COUNTER_INITIATED",
    CASE_COUNTER_WITHDRAWN = "CASE_COUNTER_WITHDRAWN",
    CASE_DECLINE = "CASE_DECLINE",
    CASE_MATCH = "CASE_MATCH",
    CASE_PAYMENT_DELETED = "CASE_PAYMENT_DELETED",
    CASE_PAYMENT_RESCHEDULED = "CASE_PAYMENT_RESCHEDULED",
    CASE_RESOLVE = "CASE_RESOLVE",
    CASE_STATUS = "CASE_STATUS",
    CASE_TRANSFER = "CASE_TRANSFER",
    CASE_UNSERVICEABLE_REQUEST = "CASE_UNSERVICEABLE_REQUEST",
    CITATION_UPDATED = "CITATION_UPDATED",
    CITATION_UPLOAD = "CITATION_UPLOAD",
    COURT_COVERAGE_ADDED = "COURT_COVERAGE_ADDED",
    COURT_COVERAGE_REMOVED = "COURT_COVERAGE_REMOVED",
    COURT_FEE_CHANGED = "COURT_FEE_CHANGED",
    CUSTOMER_REVIEW_ADDED = "CUSTOMER_REVIEW_ADDED",
    CUSTOM_FEES_RESET_TO_DEFAULT_FOR_VIOLATION = "CUSTOM_FEES_RESET_TO_DEFAULT_FOR_VIOLATION",
    DECIDE_EXPERIMENT_GROUP_COMMAND = "DECIDE_EXPERIMENT_GROUP_COMMAND",
    DEFAULT_FEE_ADDED = "DEFAULT_FEE_ADDED",
    DEFAULT_FEE_CHANGED = "DEFAULT_FEE_CHANGED",
    DEFAULT_FEE_REMOVED = "DEFAULT_FEE_REMOVED",
    EMAIL_SENT = "EMAIL_SENT",
    EXTERNAL_TICKET_REQUEST = "EXTERNAL_TICKET_REQUEST",
    GHOST_ACCOUNT_CREATED = "GHOST_ACCOUNT_CREATED",
    LAWFIRM_ACCOUNT_PRIORITY = "LAWFIRM_ACCOUNT_PRIORITY",
    LAWFIRM_ACCOUNT_STATUS = "LAWFIRM_ACCOUNT_STATUS",
    LAWFIRM_ADDRESS_UPDATED = "LAWFIRM_ADDRESS_UPDATED",
    LAWFIRM_DAILY_CAPACITY = "LAWFIRM_DAILY_CAPACITY",
    LAWFIRM_FEE_REFUNDED = "LAWFIRM_FEE_REFUNDED",
    LAWFIRM_NAME_CHANGED = "LAWFIRM_NAME_CHANGED",
    LAWFIRM_PERSONNEL_ADDED = "LAWFIRM_PERSONNEL_ADDED",
    LAWFIRM_PROFILE_UPDATED = "LAWFIRM_PROFILE_UPDATED",
    LAWFIRM_SETTING_UPDATED = "LAWFIRM_SETTING_UPDATED",
    LAWFIRM_TOTAL_CAPACITY = "LAWFIRM_TOTAL_CAPACITY",
    LAWFIRM_TRANSFER_REVERSED = "LAWFIRM_TRANSFER_REVERSED",
    LINE_ITEM_ADDED = "LINE_ITEM_ADDED",
    LINE_ITEM_DELETED = "LINE_ITEM_DELETED",
    LINE_ITEM_UPDATED = "LINE_ITEM_UPDATED",
    MBG_ELIGIBILITY_CHANGED = "MBG_ELIGIBILITY_CHANGED",
    NAME_CHANGED = "NAME_CHANGED",
    OCR_TEXT_EXTRACTED = "OCR_TEXT_EXTRACTED",
    PASSWORD_CHANGE = "PASSWORD_CHANGE",
    PASSWORD_RESET_REQUESTED = "PASSWORD_RESET_REQUESTED",
    PAYMENT_AUTHORIZED = "PAYMENT_AUTHORIZED",
    PAYMENT_CAPTURED = "PAYMENT_CAPTURED",
    PAYMENT_FAILED = "PAYMENT_FAILED",
    PAYMENT_METHOD_ADD = "PAYMENT_METHOD_ADD",
    PAYMENT_METHOD_DELETE = "PAYMENT_METHOD_DELETE",
    PAYMENT_PLAN_OPTION_CHANGED = "PAYMENT_PLAN_OPTION_CHANGED",
    PAYMENT_REFUNDED = "PAYMENT_REFUNDED",
    PAYMENT_SCHEDULED = "PAYMENT_SCHEDULED",
    PHONE_NUMBER_ADDED = "PHONE_NUMBER_ADDED",
    PHONE_NUMBER_DELETED = "PHONE_NUMBER_DELETED",
    REFERRAL_CODE_APPLIED = "REFERRAL_CODE_APPLIED",
    REFERRAL_CODE_ATTEMPT_FAILED = "REFERRAL_CODE_ATTEMPT_FAILED",
    REFERRAL_CODE_REMOVED = "REFERRAL_CODE_REMOVED",
    SAVE_VACATION_MODE_END_DATE = "SAVE_VACATION_MODE_END_DATE",
    SAVE_VACATION_MODE_REASON = "SAVE_VACATION_MODE_REASON",
    SUBSCRIPTION_PLAN_PURCHASED = "SUBSCRIPTION_PLAN_PURCHASED",
    UNKNOWN = "UNKNOWN",
    USER_DELETED = "USER_DELETED",
    USER_LOGIN_EVENT = "USER_LOGIN_EVENT",
    USER_MERGE = "USER_MERGE",
    USER_REGISTRATION = "USER_REGISTRATION",
    USER_REGISTRATION_ATTRIBUTED = "USER_REGISTRATION_ATTRIBUTED",
    USER_REVIVED = "USER_REVIVED",
    USER_SETTING_UPDATED = "USER_SETTING_UPDATED",
    VACATION_MODE_TOGGLE = "VACATION_MODE_TOGGLE",
    VACATION_MODE_UPDATE = "VACATION_MODE_UPDATE",
    VERIFY_EMAIL = "VERIFY_EMAIL",
    VERIFY_PHONE = "VERIFY_PHONE",
    VIOLATION_ENABLED_FOR_ALL_COVERED_COURTS = "VIOLATION_ENABLED_FOR_ALL_COVERED_COURTS"
}
export declare enum PathsApiV1CitationsCitationIdAuditLogsGetParametersQueryLogType {
    APPLY_REFERRAL_CODE = "APPLY_REFERRAL_CODE",
    CREATE_LEGAL_SERVICES = "CREATE_LEGAL_SERVICES",
    INITIATE_CASE = "INITIATE_CASE",
    MATCH_CASE = "MATCH_CASE",
    OTHER = "OTHER",
    TRANSFER_CASE = "TRANSFER_CASE"
}
export declare enum PathsApiV1CitationsCitationIdAuditLogsGetParametersQueryLogLevel {
    NON_TECHNICAL = "NON_TECHNICAL",
    TECHNICAL = "TECHNICAL"
}
export declare enum PathsApiV1CasesCaseIdCustomerCostGetParametersQueryPeriod {
    DAILY = "DAILY",
    MONTHLY = "MONTHLY",
    QUARTERLY = "QUARTERLY",
    WEEKLY = "WEEKLY",
    YEARLY = "YEARLY"
}
export declare enum PathsApiV1PaymentsCasePaymentIdOwnerPutParametersQueryRecipient {
    COURT = "COURT",
    LAWFIRM = "LAWFIRM",
    OTR = "OTR"
}
export declare enum PathsApiV1CaseStatusesGetParametersQueryCategories {
    ACTIVE = "ACTIVE",
    CANCELLED = "CANCELLED",
    RESOLVED = "RESOLVED",
    UNCONFIRMED = "UNCONFIRMED"
}
export declare enum PathsApiV1CertificatesSslGetParametersQueryEncoding {
    DER = "DER",
    PEM = "PEM"
}
export declare enum PathsApiV1CitationsCitationIdCourtMissingPostParametersQueryState {
    AK = "AK",
    AL = "AL",
    AR = "AR",
    AZ = "AZ",
    CA = "CA",
    CO = "CO",
    CT = "CT",
    DC = "DC",
    DE = "DE",
    FL = "FL",
    GA = "GA",
    HI = "HI",
    IA = "IA",
    ID = "ID",
    IL = "IL",
    IN = "IN",
    KS = "KS",
    KY = "KY",
    LA = "LA",
    MA = "MA",
    MD = "MD",
    ME = "ME",
    MI = "MI",
    MN = "MN",
    MO = "MO",
    MS = "MS",
    MT = "MT",
    NC = "NC",
    ND = "ND",
    NE = "NE",
    NH = "NH",
    NJ = "NJ",
    NM = "NM",
    NV = "NV",
    NY = "NY",
    OH = "OH",
    OK = "OK",
    OR = "OR",
    PA = "PA",
    RI = "RI",
    SC = "SC",
    SD = "SD",
    TN = "TN",
    TX = "TX",
    UT = "UT",
    VA = "VA",
    VT = "VT",
    WA = "WA",
    WI = "WI",
    WV = "WV",
    WY = "WY"
}
export declare enum PathsApiV1CoachingCardsUserIdCardsGetParametersQueryCoachingCardType {
    COACHING = "COACHING",
    KUDOS = "KUDOS"
}
export declare enum PathsApiV1BillingSubscribersGetParametersQueryBillingSubscriptionStatus {
    ACTIVE = "ACTIVE",
    CANCELED = "CANCELED",
    COMPLETE = "COMPLETE",
    INCOMPLETE = "INCOMPLETE",
    INCOMPLETE_EXPIRED = "INCOMPLETE_EXPIRED",
    IN_TRIAL_PERIOD = "IN_TRIAL_PERIOD",
    PAST_DUE = "PAST_DUE",
    UNKNOWN = "UNKNOWN",
    UNPAID = "UNPAID"
}
export declare enum PathsApiV1ConsolePhoneCallsGetParametersQueryCallStatus {
    ABANDONED = "ABANDONED",
    BLOCKED = "BLOCKED",
    BUSY = "BUSY",
    COMPLETED = "COMPLETED",
    CONNECTING = "CONNECTING",
    CONNECTION_FAILED = "CONNECTION_FAILED",
    DEFAULT = "DEFAULT",
    DISCONNECTED = "DISCONNECTED",
    ENQUEUED = "ENQUEUED",
    IN_PROGRESS = "IN_PROGRESS",
    MISSED_CALL = "MISSED_CALL",
    ON_HOLD = "ON_HOLD",
    RECENTLY_COMPLETED = "RECENTLY_COMPLETED",
    RESTRICTED = "RESTRICTED",
    VOICEMAIL = "VOICEMAIL",
    VOICEMAIL_RECORDING_IN_PROGRESS = "VOICEMAIL_RECORDING_IN_PROGRESS"
}
export declare enum PathsApiV1ConsolePhoneCallsGetParametersQueryDirection {
    INCOMING = "INCOMING",
    OUTGOING = "OUTGOING"
}
export declare enum PathsApiV2LawfirmLawfirmIdStringCasesPostParametersQueryCourtDateFilter {
    NO_COURT_DATE = "NO_COURT_DATE",
    PAST_DUE = "PAST_DUE",
    PAST_DUE_AND_NO_COURT_DATE = "PAST_DUE_AND_NO_COURT_DATE",
    UPCOMING = "UPCOMING"
}
export declare enum PathsApiV1LawfirmsGetParametersQueryStatuses {
    ACCOUNT_CLOSED = "ACCOUNT_CLOSED",
    ACTIVE = "ACTIVE",
    BLACKLISTED = "BLACKLISTED",
    DEMO_COMPLETED = "DEMO_COMPLETED",
    DUPLICATE = "DUPLICATE",
    FUTURE_LEAD = "FUTURE_LEAD",
    LEAD = "LEAD",
    NEW_PARTNER = "NEW_PARTNER",
    NOT_A_GOOD_FIT = "NOT_A_GOOD_FIT",
    NOT_INTERESTED_DO_NOT_CONTACT = "NOT_INTERESTED_DO_NOT_CONTACT",
    NOT_INTERESTED_FEE_SPLITTING = "NOT_INTERESTED_FEE_SPLITTING",
    NOT_INTERESTED_MARKETING_FEE = "NOT_INTERESTED_MARKETING_FEE",
    NOT_INTERESTED_MONEY_BACK_GUARANTEE = "NOT_INTERESTED_MONEY_BACK_GUARANTEE",
    NOT_INTERESTED_PLATFORM_RESISTANCE = "NOT_INTERESTED_PLATFORM_RESISTANCE",
    PAST_INTEREST = "PAST_INTEREST",
    SUPERVISED = "SUPERVISED",
    TEMPORARILY_TURNED_OFF = "TEMPORARILY_TURNED_OFF",
    TERMINATED_FRAUD = "TERMINATED_FRAUD",
    TERMINATED_GENERIC = "TERMINATED_GENERIC",
    TERMINATED_POOR_SERVICE = "TERMINATED_POOR_SERVICE",
    TERMINATED_POOR_SUCCESS = "TERMINATED_POOR_SUCCESS"
}
export declare enum PathsApiV1LawfirmsGetParametersQueryStatusCategories {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE",
    LEAD = "LEAD",
    NOT_INTERESTED = "NOT_INTERESTED",
    REJECTED = "REJECTED",
    TERMINATED = "TERMINATED"
}
export declare enum PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryFilter {
    ARCHIVE = "ARCHIVE",
    DEFAULT = "DEFAULT",
    FLAG_ONLY = "FLAG_ONLY",
    STAR_ONLY = "STAR_ONLY"
}
export declare enum PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryCaseStatuses {
    AMENDED_DOWN_WITHIN_CLASS = "AMENDED_DOWN_WITHIN_CLASS",
    AMENDED_FULL_FINE = "AMENDED_FULL_FINE",
    AMENDED_INCREASED_FINE = "AMENDED_INCREASED_FINE",
    AMENDED_NO_FINE = "AMENDED_NO_FINE",
    AMENDED_REDUCED_FINE = "AMENDED_REDUCED_FINE",
    AMENDED_TO_INFRACTION = "AMENDED_TO_INFRACTION",
    AMENDED_TO_NMV = "AMENDED_TO_NMV",
    CANCELLED_ATTORNEY_AT_FAULT = "CANCELLED_ATTORNEY_AT_FAULT",
    CANCELLED_BY_LAWFIRM = "CANCELLED_BY_LAWFIRM",
    CANCELLED_BY_USER = "CANCELLED_BY_USER",
    CANCELLED_DUPLICATE = "CANCELLED_DUPLICATE",
    CANCELLED_NMV = "CANCELLED_NMV",
    CANCELLED_NON_PAYMENT = "CANCELLED_NON_PAYMENT",
    CANCELLED_NO_LAWFIRM = "CANCELLED_NO_LAWFIRM",
    CANCELLED_OVERDUE = "CANCELLED_OVERDUE",
    CANCELLED_TOO_SHORT_NOTICE = "CANCELLED_TOO_SHORT_NOTICE",
    CASE_IN_PROGRESS = "CASE_IN_PROGRESS",
    CLIENT_CONFIRMED = "CLIENT_CONFIRMED",
    CLIENT_CONFIRMED_UNPAID = "CLIENT_CONFIRMED_UNPAID",
    CLIENT_FIRED_LAWFIRM = "CLIENT_FIRED_LAWFIRM",
    CLIENT_FORCED_LOSS = "CLIENT_FORCED_LOSS",
    CLIENT_PAID_FINE = "CLIENT_PAID_FINE",
    CLIENT_UNRESPONSIVE = "CLIENT_UNRESPONSIVE",
    DEFERRED = "DEFERRED",
    DISMISSED = "DISMISSED",
    DIVERSION = "DIVERSION",
    FEES_DISPUTED = "FEES_DISPUTED",
    FINE_REDUCTION_ONLY = "FINE_REDUCTION_ONLY",
    LAWFIRM_WITHDRAWN = "LAWFIRM_WITHDRAWN",
    LOST = "LOST",
    NO_LAWFIRM_AVAILABLE = "NO_LAWFIRM_AVAILABLE",
    POINT_REDUCTION = "POINT_REDUCTION",
    REFUSED_BY_LAWFIRM = "REFUSED_BY_LAWFIRM",
    RESOLVED_NON_PAYMENT = "RESOLVED_NON_PAYMENT",
    STALE = "STALE",
    TRAFFIC_SCHOOL = "TRAFFIC_SCHOOL",
    UNCONFIRMED = "UNCONFIRMED"
}
export declare enum PathsApiV1LawfirmsLawfirmIdInboxMessagesGetParametersQueryLatestMessageBy {
    ADMIN = "ADMIN",
    CLIENT = "CLIENT",
    LAWYER = "LAWYER"
}
export declare enum PathsApiV1LawfirmsLawfirmIdDocumentsGetParametersQueryDoc_type {
    ENGAGEMENT_LETTER = "ENGAGEMENT_LETTER",
    OTHER_DOCUMENT = "OTHER_DOCUMENT",
    OTHER_IMAGE = "OTHER_IMAGE"
}
export declare enum PathsApiV1LawfirmsLawfirmIdAccountFeesDeleteParametersQueryClassification {
    CLASS_1_FELONY = "CLASS_1_FELONY",
    CLASS_1_MISDEMEANOR = "CLASS_1_MISDEMEANOR",
    CLASS_2_FELONY = "CLASS_2_FELONY",
    CLASS_2_MISDEMEANOR = "CLASS_2_MISDEMEANOR",
    CLASS_3_FELONY = "CLASS_3_FELONY",
    CLASS_3_MISDEMEANOR = "CLASS_3_MISDEMEANOR",
    CLASS_4_FELONY = "CLASS_4_FELONY",
    CLASS_4_MISDEMEANOR = "CLASS_4_MISDEMEANOR",
    CLASS_5_FELONY = "CLASS_5_FELONY",
    CLASS_6_FELONY = "CLASS_6_FELONY",
    CLASS_A1_MISDEMEANOR = "CLASS_A1_MISDEMEANOR",
    CLASS_A_FELONY = "CLASS_A_FELONY",
    CLASS_A_INFRACTION = "CLASS_A_INFRACTION",
    CLASS_A_MISDEMEANOR = "CLASS_A_MISDEMEANOR",
    CLASS_A_VIOLATION = "CLASS_A_VIOLATION",
    CLASS_B_FELONY = "CLASS_B_FELONY",
    CLASS_B_INFRACTION = "CLASS_B_INFRACTION",
    CLASS_B_MISDEMEANOR = "CLASS_B_MISDEMEANOR",
    CLASS_B_VIOLATION = "CLASS_B_VIOLATION",
    CLASS_C_FELONY = "CLASS_C_FELONY",
    CLASS_C_INFRACTION = "CLASS_C_INFRACTION",
    CLASS_C_MISDEMEANOR = "CLASS_C_MISDEMEANOR",
    CLASS_C_VIOLATION = "CLASS_C_VIOLATION",
    CLASS_D_FELONY = "CLASS_D_FELONY",
    CLASS_D_MISDEMEANOR = "CLASS_D_MISDEMEANOR",
    CLASS_D_VIOLATION = "CLASS_D_VIOLATION",
    CLASS_E_FELONY = "CLASS_E_FELONY",
    CLASS_F_FELONY = "CLASS_F_FELONY",
    CLASS_H_FELONY = "CLASS_H_FELONY",
    DISORDERLY_PERSONS_OFFENSE = "DISORDERLY_PERSONS_OFFENSE",
    FELONY = "FELONY",
    FELONY_1ST_DEGREE = "FELONY_1ST_DEGREE",
    FELONY_2ND_DEGREE = "FELONY_2ND_DEGREE",
    FELONY_3RD_DEGREE = "FELONY_3RD_DEGREE",
    FELONY_4TH_DEGREE = "FELONY_4TH_DEGREE",
    FELONY_5TH_DEGREE = "FELONY_5TH_DEGREE",
    GROSS_MISDEMEANOR = "GROSS_MISDEMEANOR",
    HIGH_AND_AGGRAVATED_MISDEMEANOR = "HIGH_AND_AGGRAVATED_MISDEMEANOR",
    INFRACTION = "INFRACTION",
    LEVEL_4_FELONY = "LEVEL_4_FELONY",
    LEVEL_5_FELONY = "LEVEL_5_FELONY",
    LEVEL_6_FELONY = "LEVEL_6_FELONY",
    MINOR_MISDEMEANOR = "MINOR_MISDEMEANOR",
    MISDEMEANOR = "MISDEMEANOR",
    MISDEMEANOR_1ST_DEGREE = "MISDEMEANOR_1ST_DEGREE",
    MISDEMEANOR_2ND_DEGREE = "MISDEMEANOR_2ND_DEGREE",
    MISDEMEANOR_3RD_DEGREE = "MISDEMEANOR_3RD_DEGREE",
    MISDEMEANOR_4TH_DEGREE = "MISDEMEANOR_4TH_DEGREE",
    MISDEMEANOR_WITH_REFUND = "MISDEMEANOR_WITH_REFUND",
    NON_MOVING = "NON_MOVING",
    NON_REPORTABLE = "NON_REPORTABLE",
    PETTY_MISDEMEANOR = "PETTY_MISDEMEANOR",
    QUASI_CRIMINAL = "QUASI_CRIMINAL",
    SUMMARY_OFFENSE = "SUMMARY_OFFENSE",
    SUMMARY_OFFENSE_NO_REFUND = "SUMMARY_OFFENSE_NO_REFUND",
    WOBBLER_TO_FELONY = "WOBBLER_TO_FELONY",
    WOBBLER_TO_MISDEMEANOR = "WOBBLER_TO_MISDEMEANOR"
}
export declare enum PathsApiV2LawfirmsLawfirmIdCoverageGetParametersQueryLegalServiceType {
    DEFER = "DEFER",
    FIGHT = "FIGHT"
}
export declare enum PathsApiV1LawfirmsLawfirmIdSurchargesGetParametersQueryFeatureType {
    BLACK_BOX = "BLACK_BOX",
    FASTLANE_TEEN = "FASTLANE_TEEN",
    STATE_PAGE = "STATE_PAGE",
    STOREFRONT = "STOREFRONT"
}
export declare enum PathsApiV3UsersUserIdCasesGetParametersQuerySortBy {
    BOOKING_CONFIRMED_DATE = "BOOKING_CONFIRMED_DATE",
    CITATION_CREATION_DATE = "CITATION_CREATION_DATE",
    CITATION_ISSUE_DATE = "CITATION_ISSUE_DATE",
    COURT_DATE = "COURT_DATE",
    LAST_CITATION_UPDATE_DATE = "LAST_CITATION_UPDATE_DATE"
}
export declare enum PathsApiV2NotesSearchGetParametersQueryNoteType {
    CASE = "CASE",
    LAWFIRM = "LAWFIRM",
    PHONE_LEAD = "PHONE_LEAD",
    USER = "USER"
}
export declare enum PathsApiV1ReferralsSourcesGetParametersQueryFlavor {
    ALL = "ALL",
    ENABLED = "ENABLED"
}
export declare enum PathsApiV1RedirectsGetParametersQueryPageType {
    DEBUG = "DEBUG",
    SEO = "SEO",
    VANITY = "VANITY"
}
export declare enum PathsApiV1ApiV1UsersUserIdLastLoginGetParametersQueryClients {
    ANDROID = "ANDROID",
    DESKTOP_WEBAPP = "DESKTOP_WEBAPP",
    DMV_GO = "DMV_GO",
    DMV_ORG = "DMV_ORG",
    EMAIL = "EMAIL",
    FRESH_DESK = "FRESH_DESK",
    IOS = "IOS",
    LOCALHOST = "LOCALHOST",
    MOBILE_WEBAPP = "MOBILE_WEBAPP",
    OTR_ADMIN_CONSOLE = "OTR_ADMIN_CONSOLE",
    OTR_ADMIN_CONSOLE_DEVO = "OTR_ADMIN_CONSOLE_DEVO",
    OTR_ADMIN_CONSOLE_LOCALHOST = "OTR_ADMIN_CONSOLE_LOCALHOST",
    OTR_EXPLORER = "OTR_EXPLORER",
    OTR_JOB_SCHEDULER = "OTR_JOB_SCHEDULER",
    OTR_LAWFIRM_PORTAL = "OTR_LAWFIRM_PORTAL",
    OTR_LAWFIRM_PORTAL_DEVO = "OTR_LAWFIRM_PORTAL_DEVO",
    OTR_LAWFIRM_PORTAL_LOCALHOST = "OTR_LAWFIRM_PORTAL_LOCALHOST",
    OTR_WEBSITE = "OTR_WEBSITE",
    OTR_WEBSITE_DEVO = "OTR_WEBSITE_DEVO",
    OTR_WEBSITE_LOCALHOST = "OTR_WEBSITE_LOCALHOST",
    OTR_WIDGET = "OTR_WIDGET",
    UNKNOWN = "UNKNOWN"
}
export declare enum PathsApiV1UsersSendVerificationCodePostParametersQueryVerificationMethod {
    CODE_ONLY = "CODE_ONLY",
    WEB_LINK = "WEB_LINK"
}
export declare enum PathsApiV1UsersVerifyAccountPutParametersQueryLoginProvider {
    APPLE = "APPLE",
    EMAIL = "EMAIL",
    FACEBOOK = "FACEBOOK",
    GOOGLE = "GOOGLE",
    PHONE = "PHONE",
    TWITTER = "TWITTER",
    UNKNOWN = "UNKNOWN"
}
export declare enum PathsApiV1UsersUserIdSocialProfilesDeleteParametersQueryPlatform {
    INSTAGRAM = "INSTAGRAM",
    SNAPCHAT = "SNAPCHAT",
    TIKTOK = "TIKTOK",
    TWITCH = "TWITCH",
    X = "X",
    YOUTUBE = "YOUTUBE"
}
export declare enum PathsApiV1ViolationsViolationIdPenaltiesGetParametersQueryFlavor {
    ALL = "ALL",
    SHORT = "SHORT"
}
export declare enum AcceptCaseCounterRequestPaymentPlanType {
    ALL_UPFRONT = "ALL_UPFRONT",
    THREE_PAYMENTS_HALF_FIRST = "THREE_PAYMENTS_HALF_FIRST",
    TWO_PAYMENTS_MONTHLY = "TWO_PAYMENTS_MONTHLY"
}
export declare enum AccountLevelFeeRefundEligibility {
    FULL_REFUND = "FULL_REFUND",
    NO_REFUND = "NO_REFUND"
}
export declare enum ActivityFeedModelPrivacyMode {
    FRIENDS = "FRIENDS",
    PRIVATE = "PRIVATE",
    PUBLIC = "PUBLIC",
    SEMI_PUBLIC = "SEMI_PUBLIC"
}
export declare enum AddInnerCourtCourtType {
    CIRCUIT = "CIRCUIT",
    COUNTY_CLERK = "COUNTY_CLERK",
    DISTRICT = "DISTRICT",
    JUVENILE = "JUVENILE",
    MUNICIPAL = "MUNICIPAL",
    PROBATION = "PROBATION",
    SUPERIOR = "SUPERIOR",
    VIOLATIONS_BUREAU = "VIOLATIONS_BUREAU"
}
export declare enum AddNoteToPhoneLeadRequestEntityType {
    CASE = "CASE",
    CASE_PAYMENT = "CASE_PAYMENT",
    CITATION = "CITATION",
    COURT = "COURT",
    LAWFIRM = "LAWFIRM",
    LAWFIRM_CASE = "LAWFIRM_CASE",
    LAWYER = "LAWYER",
    LINE_ITEM = "LINE_ITEM",
    STRIPE_CHARGE = "STRIPE_CHARGE",
    USER = "USER"
}
export declare enum AddRedirectUrlRequestRedirectType {
    PERMANENT = "PERMANENT",
    TEMPORARY = "TEMPORARY"
}
export declare enum AddReferralRequestReferralEvent {
    CASE_BOOKING = "CASE_BOOKING",
    CASE_MATCH = "CASE_MATCH",
    INVITE = "INVITE",
    REGISTRATION = "REGISTRATION"
}
export declare enum AddReviewRequestSource {
    ANDROID = "ANDROID",
    APPLE = "APPLE",
    FACEBOOK = "FACEBOOK",
    GOOGLE_BUSINESS = "GOOGLE_BUSINESS",
    OTR = "OTR",
    REVIEWS_IO = "REVIEWS_IO"
}
export declare enum AlertActionType {
    ANNOUNCEMENT = "ANNOUNCEMENT",
    ENGAGEMENT_LETTER = "ENGAGEMENT_LETTER"
}
export declare enum AlertAlertType {
    ERROR = "ERROR",
    INFO = "INFO",
    SUCCESS = "SUCCESS",
    WARNING = "WARNING"
}
export declare enum AppEventCreateRequestAppEventName {
    FIRST_OPEN = "FIRST_OPEN",
    INSTALL = "INSTALL",
    PRE_INSTALL_ENGAGEMENT = "PRE_INSTALL_ENGAGEMENT"
}
export declare enum AuthorModelUserRole {
    ADMIN = "ADMIN",
    DEFENDANT = "DEFENDANT",
    LAWFIRM_ADMIN = "LAWFIRM_ADMIN",
    LAWYER = "LAWYER",
    PARTNER = "PARTNER",
    UNKNOWN = "UNKNOWN"
}
export declare enum AwsCredentialsRequestKeyName {
    S3_CITATION_IMAGES_RO = "S3_CITATION_IMAGES_RO"
}
export declare enum BillingInvoiceModelStatus {
    DRAFT = "DRAFT",
    OPEN = "OPEN",
    PAID = "PAID",
    UNCOLLECTIBLE = "UNCOLLECTIBLE",
    VOID = "VOID"
}
export declare enum BillingPriceModelBillingScheme {
    PER_UNIT = "PER_UNIT",
    TIERED = "TIERED",
    UNKNOWN = "UNKNOWN"
}
export declare enum BillingSubscriptionItemModelTiersMode {
    GRADUATED = "GRADUATED",
    VOLUME = "VOLUME"
}
export declare enum BillingSubscriptionItemModelUsageType {
    LICENSED = "LICENSED",
    METERED = "METERED"
}
export declare enum CallContactIntegratedResourceType {
    FRESHDESK = "FRESHDESK",
    UNKNOWN = "UNKNOWN"
}
export declare enum CaseGender {
    FEMALE = "FEMALE",
    MALE = "MALE",
    NOT_AVAILABLE = "NOT_AVAILABLE",
    NOT_LISTED = "NOT_LISTED",
    UNVERIFIED = "UNVERIFIED",
    X = "X"
}
export declare enum CaseRace {
    ASIAN = "ASIAN",
    BLACK = "BLACK",
    HISPANIC = "HISPANIC",
    MIDDLE_EASTERN = "MIDDLE_EASTERN",
    NATIVE = "NATIVE",
    NOT_AVAILABLE = "NOT_AVAILABLE",
    PACIFIC_ISLANDER = "PACIFIC_ISLANDER",
    TWO_OR_MORE = "TWO_OR_MORE",
    UNKNOWN = "UNKNOWN",
    UNVERIFIED = "UNVERIFIED",
    WHITE = "WHITE"
}
export declare enum CaseActionRequestModelActionType {
    CASE_ACCEPT = "CASE_ACCEPT",
    CASE_COUNTER_ACCEPTED = "CASE_COUNTER_ACCEPTED",
    CASE_COUNTER_DECLINED = "CASE_COUNTER_DECLINED",
    CASE_COUNTER_INITIATED = "CASE_COUNTER_INITIATED",
    CASE_COUNTER_WITHDRAWN = "CASE_COUNTER_WITHDRAWN",
    CASE_DECLINE = "CASE_DECLINE",
    CITATION_DATA_EXTRACTED = "CITATION_DATA_EXTRACTED",
    COURT_DATE_REMOVED = "COURT_DATE_REMOVED",
    COURT_DATE_SCHEDULED = "COURT_DATE_SCHEDULED",
    DISCOVERY_RECEIVED = "DISCOVERY_RECEIVED",
    DISCOVERY_REQUESTED = "DISCOVERY_REQUESTED",
    DISPUTE_FILED = "DISPUTE_FILED",
    DRIVER_LICENSE_REQUESTED = "DRIVER_LICENSE_REQUESTED",
    FAILED_PAYMENT_ATTEMPT = "FAILED_PAYMENT_ATTEMPT",
    NOTICE_OF_APPEARANCE_FILED = "NOTICE_OF_APPEARANCE_FILED",
    OTHER = "OTHER",
    OVERDUE_BALANCE_PAID = "OVERDUE_BALANCE_PAID",
    REVIEWED_BY_LAWFIRM = "REVIEWED_BY_LAWFIRM",
    SOCIAL_MEDIA_ASK = "SOCIAL_MEDIA_ASK",
    TICKET_MAILED_TO_COURT = "TICKET_MAILED_TO_COURT"
}
export declare enum CaseCounterOptionModelType {
    CHANGE_FEE = "CHANGE_FEE",
    CHANGE_MBG = "CHANGE_MBG"
}
export declare enum CaseLineItemDomainReqLineItemType {
    ACCIDENT_FEE = "ACCIDENT_FEE",
    BASE_LEGAL_FEE = "BASE_LEGAL_FEE",
    BOND_FEE = "BOND_FEE",
    BOOKING_FEE = "BOOKING_FEE",
    CDL_FEE = "CDL_FEE",
    COURT_FEE = "COURT_FEE",
    DISPUTE_FEE = "DISPUTE_FEE",
    FINE_PAYMENT = "FINE_PAYMENT",
    FTA_FEE = "FTA_FEE",
    INITIAL_SUBSCRIPTION_FEE = "INITIAL_SUBSCRIPTION_FEE",
    LATE_FEE = "LATE_FEE",
    MBG_REFUND = "MBG_REFUND",
    MVS_FEE = "MVS_FEE",
    OTHER = "OTHER",
    OTR_CREDIT = "OTR_CREDIT",
    OTR_SUBSCRIPTION_CREDIT = "OTR_SUBSCRIPTION_CREDIT",
    PAYMENT_PLAN_SERVICE_FEE = "PAYMENT_PLAN_SERVICE_FEE",
    WARRANT_FEE = "WARRANT_FEE"
}
export declare enum CaseMessageDomainMediaType {
    IMAGE = "IMAGE",
    PDF = "PDF"
}
export declare enum CasePaymentDomainTransactionMethod {
    CASH = "CASH",
    CHECK = "CHECK",
    DESTINATION_CHARGE_TRANSFER = "DESTINATION_CHARGE_TRANSFER",
    LOB_CHECK = "LOB_CHECK",
    PAYPAL = "PAYPAL",
    STRIPE_APPLICATION_FEE = "STRIPE_APPLICATION_FEE",
    STRIPE_CHARGE = "STRIPE_CHARGE",
    STRIPE_CONNECT_DEBIT = "STRIPE_CONNECT_DEBIT",
    STRIPE_TRANSFER = "STRIPE_TRANSFER",
    UNKNOWN = "UNKNOWN",
    VENMO = "VENMO",
    WIRE_TRANSFER = "WIRE_TRANSFER",
    ZELLE = "ZELLE"
}
export declare enum CaseSummaryDomainCaseDecisionStatus {
    ACCEPTED = "ACCEPTED",
    CREATED = "CREATED",
    DECLINED = "DECLINED",
    EXPIRED = "EXPIRED",
    PENDING = "PENDING",
    REMATCHED = "REMATCHED",
    REMATCHED_REFERRAL = "REMATCHED_REFERRAL"
}
export declare enum CaseTransferHistoryRefundOwner {
    LAWFIRM = "LAWFIRM",
    NONE = "NONE",
    OTR = "OTR"
}
export declare enum CaseUserDetailsModelRelationshipToClientType {
    CHILD = "CHILD",
    EMPLOYER = "EMPLOYER",
    FAMILY_MEMBER = "FAMILY_MEMBER",
    FRIEND = "FRIEND",
    LAWYER = "LAWYER",
    OTHER = "OTHER",
    PARENT = "PARENT",
    SELF = "SELF",
    SERVICE_PROVIDER = "SERVICE_PROVIDER",
    SIGNIFICANT_OTHER = "SIGNIFICANT_OTHER",
    UNKNOWN = "UNKNOWN"
}
export declare enum CaseViolationPenaltyPenaltyType {
    DEMERIT_POINTS = "DEMERIT_POINTS",
    INCARCERATION_MAX_DAYS = "INCARCERATION_MAX_DAYS",
    INCARCERATION_MIN_DAYS = "INCARCERATION_MIN_DAYS",
    INSURANCE_POINTS = "INSURANCE_POINTS",
    INSURANCE_RATE_INCREASE = "INSURANCE_RATE_INCREASE",
    LICENSE_REVOCATION_MAX_DAYS = "LICENSE_REVOCATION_MAX_DAYS",
    LICENSE_REVOCATION_MIN_DAYS = "LICENSE_REVOCATION_MIN_DAYS",
    LICENSE_SUSPENSION_MAX_DAYS = "LICENSE_SUSPENSION_MAX_DAYS",
    LICENSE_SUSPENSION_MIN_DAYS = "LICENSE_SUSPENSION_MIN_DAYS",
    MANDATORY_COURT_APPEARANCE = "MANDATORY_COURT_APPEARANCE",
    MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY = "MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY",
    MAX_BAIL_AMOUNT = "MAX_BAIL_AMOUNT",
    MIN_BAIL_AMOUNT = "MIN_BAIL_AMOUNT",
    PROBATION_IN_DAYS = "PROBATION_IN_DAYS",
    TOTAL_BAIL_AMOUNT = "TOTAL_BAIL_AMOUNT"
}
export declare enum CitationInputRequestCdlStatus {
    CDL_IN_COMMERCIAL_VEHICLE = "CDL_IN_COMMERCIAL_VEHICLE",
    CDL_IN_PERSONAL_VEHICLE = "CDL_IN_PERSONAL_VEHICLE",
    NO_CDL = "NO_CDL"
}
export declare enum CitationsResponseModelExperimentName {
    PRINCETON_PROJECT_1 = "PRINCETON_PROJECT_1"
}
export declare enum ClientActionRequiredRequestCaseActionItem {
    FEE_ADJUSTMENT = "FEE_ADJUSTMENT",
    NO_REFUND_OFFERED = "NO_REFUND_OFFERED",
    REQUEST_COURT_EXTENSION = "REQUEST_COURT_EXTENSION"
}
export declare enum CoachingCardUsersModelPermissionType {
    AUTHOR = "AUTHOR",
    MANAGER = "MANAGER",
    PARTICIPANT = "PARTICIPANT",
    RECIPIENT = "RECIPIENT"
}
export declare enum CreateLawfirmModelLawfirmPaymentModel {
    DESTINATION_ACCOUNT = "DESTINATION_ACCOUNT",
    SEPARATE_CHARGE = "SEPARATE_CHARGE",
    TRANSFER_DEDUCTION = "TRANSFER_DEDUCTION"
}
export declare enum CreateReferralCodeRequestRefereeCreditType {
    CENTS_VALUE = "CENTS_VALUE",
    NO_CREDIT = "NO_CREDIT",
    PERCENTAGE_DISCOUNT = "PERCENTAGE_DISCOUNT"
}
export declare enum CreateStripeConnectAccountRequestAccountType {
    EXPRESS = "EXPRESS",
    STANDARD = "STANDARD"
}
export declare enum CustomerLeadChannel {
    DMV_COM = "DMV_COM",
    DMV_ORG = "DMV_ORG",
    EDUCATED_DRIVER = "EDUCATED_DRIVER",
    NOLO = "NOLO",
    PHOTO_ENFORCED = "PHOTO_ENFORCED",
    RIDE_SHARE_GUY = "RIDE_SHARE_GUY",
    RIDE_SHARING_DRIVER = "RIDE_SHARING_DRIVER",
    UNKNOWN = "UNKNOWN",
    WTL = "WTL"
}
export declare enum CustomerReviewLoggedInUserVote {
    HELPFUL = "HELPFUL",
    UNHELPFUL = "UNHELPFUL"
}
export declare enum CustomerReviewNameSetting {
    ANONYMOUS = "ANONYMOUS",
    FIRST_NAME_LAST_INITIAL = "FIRST_NAME_LAST_INITIAL",
    FULL_NAME = "FULL_NAME"
}
export declare enum DashboardCaseCounterOfferModelCounterOfferStatus {
    ACCEPTED = "ACCEPTED",
    DECLINED = "DECLINED",
    PENDING = "PENDING",
    WITHDRAWN = "WITHDRAWN"
}
export declare enum DeleteNotificationByPagesRequestPageTypes {
    CASE_ACTION = "CASE_ACTION",
    CASE_MESSAGES = "CASE_MESSAGES",
    CASE_STATUS = "CASE_STATUS",
    COURT_DATE_SCHEDULED = "COURT_DATE_SCHEDULED",
    NEW_TICKET = "NEW_TICKET",
    PROFILE = "PROFILE"
}
export declare enum DirectMailContactMailType {
    CHECK = "CHECK",
    LETTER = "LETTER",
    POST_CARD = "POST_CARD"
}
export declare enum DirectMailContactTrackingStatus {
    CREATED = "CREATED",
    IN_LOCAL_AREA = "IN_LOCAL_AREA",
    IN_TRANSIT = "IN_TRANSIT",
    PROCESSED_FOR_DELIVERY = "PROCESSED_FOR_DELIVERY",
    RETURNED_TO_SENDER = "RETURNED_TO_SENDER",
    RE_ROUTED = "RE_ROUTED"
}
export declare enum DirectMailSendRequestReconcileType {
    OTR_CITATION_ID = "OTR_CITATION_ID",
    OTR_LAWFIRM_ID = "OTR_LAWFIRM_ID",
    TICKET_REFERENCE_ID = "TICKET_REFERENCE_ID"
}
export declare enum DripRemoveRequestDripAction {
    DELETE = "DELETE",
    UNSUBSCRIBE = "UNSUBSCRIBE"
}
export declare enum ExternalContentVoteVoteType {
    DISLIKE = "DISLIKE",
    LIKE = "LIKE"
}
export declare enum FeedbackDomainFeedbackType {
    GENERIC = "GENERIC",
    NOT_READY_TO_BOOK = "NOT_READY_TO_BOOK"
}
export declare enum FinancialTransactionTaskStatus {
    CANCELLED = "CANCELLED",
    COMPLETE = "COMPLETE",
    ERROR = "ERROR",
    IN_PROGRESS = "IN_PROGRESS",
    NO_OPERATION = "NO_OPERATION",
    QUEUED = "QUEUED"
}
export declare enum FinancialTransactionTransactionType {
    FEE = "FEE",
    FEE_REFUND = "FEE_REFUND",
    TRANSFER = "TRANSFER",
    TRANSFER_REVERSAL = "TRANSFER_REVERSAL"
}
export declare enum FreshDeskTicketPriorityType {
    HIGH = "HIGH",
    LOW = "LOW",
    MEDIUM = "MEDIUM",
    UNKNOWN = "UNKNOWN",
    URGENT = "URGENT"
}
export declare enum FreshDeskTicketStatusType {
    CLOSED = "CLOSED",
    OPEN = "OPEN",
    PENDING = "PENDING",
    PENDING_ONE_WEEK = "PENDING_ONE_WEEK",
    PENDING_TWO_DAYS = "PENDING_TWO_DAYS",
    QUEUED_FOR_AUTOMATION = "QUEUED_FOR_AUTOMATION",
    RESOLVED = "RESOLVED",
    UNKNOWN = "UNKNOWN",
    WAITING_ON_ATTORNEY = "WAITING_ON_ATTORNEY",
    WAITING_ON_CUSTOMER = "WAITING_ON_CUSTOMER",
    WAITING_ON_OTR = "WAITING_ON_OTR",
    WAITING_ON_THIRD_PARTY = "WAITING_ON_THIRD_PARTY"
}
export declare enum FreshdeskTicketReferenceDomainTicketType {
    CARD_PROBLEM = "CARD_PROBLEM",
    POST_BOOKING_PAYMENT_FAILURE = "POST_BOOKING_PAYMENT_FAILURE",
    PRE_BOOKING_PAYMENT_FAILURE = "PRE_BOOKING_PAYMENT_FAILURE"
}
export declare enum GenerateTemplateRequestEmailTemplateId {
    AFTERNOON_HELLO_2 = "AFTERNOON_HELLO_2",
    ATTICUS_ATTORNEY_CONTACT_1 = "ATTICUS_ATTORNEY_CONTACT_1",
    CAMERA_TICKET_NMV = "CAMERA_TICKET_NMV",
    CASE_CANCELLED_BY_USER = "CASE_CANCELLED_BY_USER",
    CASE_CANCELLED_DUPLICATE = "CASE_CANCELLED_DUPLICATE",
    CASE_CANCELLED_NMV = "CASE_CANCELLED_NMV",
    CASE_CANCELLED_NON_PAYMENT = "CASE_CANCELLED_NON_PAYMENT",
    CASE_CANCELLED_NO_LAWFIRM = "CASE_CANCELLED_NO_LAWFIRM",
    CASE_CANCELLED_OVERDUE = "CASE_CANCELLED_OVERDUE",
    CASE_CANCELLED_TOO_SHORT_NOTICE = "CASE_CANCELLED_TOO_SHORT_NOTICE",
    CASUAL_FIRST_V1 = "CASUAL_FIRST_V1",
    CASUAL_SECOND_V1 = "CASUAL_SECOND_V1",
    FRIDAY_INTRO = "FRIDAY_INTRO",
    HUBSPOT_GENERIC = "HUBSPOT_GENERIC",
    INVALID_IMAGE_UPLOAD_1 = "INVALID_IMAGE_UPLOAD_1",
    LAWFIRM_CONTACT_10_V1 = "LAWFIRM_CONTACT_10_V1",
    LAWFIRM_CONTACT_1_V1 = "LAWFIRM_CONTACT_1_V1",
    LAWFIRM_CONTACT_2_V1 = "LAWFIRM_CONTACT_2_V1",
    LAWFIRM_CONTACT_3_V1 = "LAWFIRM_CONTACT_3_V1",
    LAWFIRM_CONTACT_4_V1 = "LAWFIRM_CONTACT_4_V1",
    LAWFIRM_CONTACT_5_V1 = "LAWFIRM_CONTACT_5_V1",
    LAWFIRM_CONTACT_6_V1 = "LAWFIRM_CONTACT_6_V1",
    LAWFIRM_CONTACT_7_V1 = "LAWFIRM_CONTACT_7_V1",
    LAWFIRM_CONTACT_8_V1 = "LAWFIRM_CONTACT_8_V1",
    LAWFIRM_CONTACT_9_V1 = "LAWFIRM_CONTACT_9_V1",
    LAWYER_POST_COURT_REMINDER = "LAWYER_POST_COURT_REMINDER",
    NO_COVERAGE_AVAILABLE = "NO_COVERAGE_AVAILABLE",
    NO_COVERAGE_AVAILABLE_MISSING_COURT = "NO_COVERAGE_AVAILABLE_MISSING_COURT",
    PARKING_TICKET = "PARKING_TICKET",
    POST_WIN = "POST_WIN",
    POST_WIN_LAST_ASK = "POST_WIN_LAST_ASK",
    POST_WIN_V2 = "POST_WIN_V2",
    SUNDAY_AFTERNOON_HELLO = "SUNDAY_AFTERNOON_HELLO",
    TICKET_DUE_WA = "TICKET_DUE_WA",
    TICKET_EVAL_WITH_CITATION = "TICKET_EVAL_WITH_CITATION",
    TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP = "TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP",
    TICKET_EVAL_WITH_CITATION_CLOSE_OUT = "TICKET_EVAL_WITH_CITATION_CLOSE_OUT"
}
export declare enum GetHouseHoldMateModelInviteStatus {
    CANCELLED = "CANCELLED",
    PENDING = "PENDING",
    VERIFIED = "VERIFIED"
}
export declare enum GetHouseHoldMateModelRelationshipType {
    OWNER = "OWNER",
    SIBLING = "SIBLING",
    SPOUSE = "SPOUSE",
    TEENAGER = "TEENAGER",
    UNKNOWN = "UNKNOWN"
}
export declare enum GetReferralCodeResponseOwnerType {
    LAWFIRM = "LAWFIRM",
    OTR = "OTR"
}
export declare enum InviteLawyerToLawfirmRequestRole {
    LAWFIRM_ADMIN = "LAWFIRM_ADMIN",
    LAWYER = "LAWYER"
}
export declare enum LawfirmBankPayoutModelMethod {
    INSTANT = "INSTANT",
    STANDARD = "STANDARD"
}
export declare enum LawfirmBankPayoutModelReconciliationStatus {
    COMPLETED = "COMPLETED",
    IN_PROGRESS = "IN_PROGRESS",
    NOT_APPLICABLE = "NOT_APPLICABLE"
}
export declare enum LawfirmBankPayoutModelStatus {
    CANCELED = "CANCELED",
    FAILED = "FAILED",
    IN_TRANSIT = "IN_TRANSIT",
    PAID = "PAID",
    PENDING = "PENDING"
}
export declare enum LawfirmBankPayoutModelType {
    BANK_ACCOUNT = "BANK_ACCOUNT",
    CARD = "CARD"
}
export declare enum LawfirmCaseDocumentClientDocRequirement {
    ACK = "ACK",
    NONE = "NONE",
    NOTARY = "NOTARY",
    SIGNATURE = "SIGNATURE"
}
export declare enum LawfirmJobTitleModelName {
    ACCOUNTANT = "ACCOUNTANT",
    ATTORNEY = "ATTORNEY",
    ATTORNEY_ASSOCIATE = "ATTORNEY_ASSOCIATE",
    ATTORNEY_COUNSEL = "ATTORNEY_COUNSEL",
    ATTORNEY_MANAGING_PARTNER = "ATTORNEY_MANAGING_PARTNER",
    ATTORNEY_PARTNER = "ATTORNEY_PARTNER",
    ATTORNEY_STAFF = "ATTORNEY_STAFF",
    CUSTOMER_SERVICE_REP = "CUSTOMER_SERVICE_REP",
    LEGAL_ASSISTANT = "LEGAL_ASSISTANT",
    LEGAL_INTERN = "LEGAL_INTERN",
    LEGAL_SECRETARY = "LEGAL_SECRETARY",
    OTHER = "OTHER",
    PARALEGAL = "PARALEGAL"
}
export declare enum LawfirmRatesResponseFeeLevel {
    ACCOUNT_CLASS_FEE = "ACCOUNT_CLASS_FEE",
    ACCOUNT_VIOLATION_FEE = "ACCOUNT_VIOLATION_FEE",
    COURT_CLASS_FEE = "COURT_CLASS_FEE",
    COURT_VIOLATION_FEE = "COURT_VIOLATION_FEE"
}
export declare enum LawfirmRatesResponseIneligibleMatchReasons {
    CDL_MISMATCH = "CDL_MISMATCH",
    DAILY_CAPACITY_BREACHED = "DAILY_CAPACITY_BREACHED",
    ON_VACATION = "ON_VACATION",
    OUT_OF_CAPACITY = "OUT_OF_CAPACITY",
    OUT_PRICED = "OUT_PRICED",
    OUT_RANKED = "OUT_RANKED"
}
export declare enum LawfirmSettingsDomainReferralFeeType {
    FLAT_FEE_IN_CENTS = "FLAT_FEE_IN_CENTS",
    PERCENT = "PERCENT"
}
export declare enum LawyerLicenseModelLicenseType {
    BAR = "BAR"
}
export declare enum LegalServiceModelLegalVertical {
    TRAFFIC = "TRAFFIC"
}
export declare enum ListCitationsRequestExperimentGroup {
    CONTROL = "CONTROL",
    VARIATION_1 = "VARIATION_1",
    VARIATION_2 = "VARIATION_2"
}
export declare enum ListLawfirmSurchargeModelFeeType {
    FLAT_FEE_IN_CENTS = "FLAT_FEE_IN_CENTS",
    FORMULA = "FORMULA",
    PERCENT = "PERCENT"
}
export declare enum ListLawfirmSurchargeModelRefundEligibility {
    DEFAULT = "DEFAULT",
    NON_REFUNDABLE = "NON_REFUNDABLE",
    SURCHARGE_ONLY = "SURCHARGE_ONLY"
}
export declare enum ListLawfirmSurchargeTypeModelType {
    CDL = "CDL",
    FAILURE_TO_APPEAR = "FAILURE_TO_APPEAR",
    LATE = "LATE",
    MULTIPLE_VIOLATIONS = "MULTIPLE_VIOLATIONS",
    OUT_OF_STATE = "OUT_OF_STATE",
    SHORT_NOTICE = "SHORT_NOTICE",
    WARRANT = "WARRANT"
}
export declare enum LookupParamValueValue {
    CITATION_ID = "CITATION_ID",
    DATE_OF_BIRTH = "DATE_OF_BIRTH",
    DRIVERS_LICENSE = "DRIVERS_LICENSE",
    DROPDOWN_SEARCH_TYPE = "DROPDOWN_SEARCH_TYPE",
    DROPDOWN_SEARCH_VALUE = "DROPDOWN_SEARCH_VALUE",
    LAST_NAME = "LAST_NAME",
    ORGANIZATION_NAME = "ORGANIZATION_NAME"
}
export declare enum MatchingFieldValueMatchingField {
    COURT_ID = "COURT_ID",
    VIOLATION_CLASSIFICATION_ID = "VIOLATION_CLASSIFICATION_ID",
    VIOLATION_ID = "VIOLATION_ID"
}
export declare enum OCRCitationPredictionResponseRace {
    american_indian = "american_indian",
    asian = "asian",
    black = "black",
    latino_hispanic = "latino_hispanic",
    middle_eastern = "middle_eastern",
    other = "other",
    pacific_islander = "pacific_islander",
    white = "white"
}
export declare enum OCRCitationPredictionResponseSex {
    F = "F",
    M = "M",
    U = "U"
}
export declare enum PersistTicketEvaluationRequestSource {
    OTR_EXIT_POPUP = "OTR_EXIT_POPUP",
    QUARANTINE_LANDING_PAGE = "QUARANTINE_LANDING_PAGE",
    TICKET_REVIEW_PAGE = "TICKET_REVIEW_PAGE"
}
export declare enum PhoneNumberDomainType {
    HOME = "HOME",
    MOBILE = "MOBILE",
    NOT_SPECIFIED = "NOT_SPECIFIED",
    OFFICE = "OFFICE"
}
export declare enum PredictImageClassificationResponseDocumentType {
    CAMERA_TICKET = "CAMERA_TICKET",
    CASE_DOCKET = "CASE_DOCKET",
    CASE_RESOLUTION = "CASE_RESOLUTION",
    CHANGE_OF_COUNCIL = "CHANGE_OF_COUNCIL",
    COLLECTIONS_NOTICE = "COLLECTIONS_NOTICE",
    COURT_NOTICE = "COURT_NOTICE",
    DRIVER_LICENSE = "DRIVER_LICENSE",
    FAILURE_TO_APPEAR = "FAILURE_TO_APPEAR",
    FAILURE_TO_PAY = "FAILURE_TO_PAY",
    INSURANCE_CARD = "INSURANCE_CARD",
    NOTICE_OF_APPEARANCE = "NOTICE_OF_APPEARANCE",
    NOT_A_DOCUMENT = "NOT_A_DOCUMENT",
    PARKING_TICKET = "PARKING_TICKET",
    POLICE_REPORT = "POLICE_REPORT",
    REMINDER_NOTICE = "REMINDER_NOTICE",
    REQUEST_FOR_DISCOVERY = "REQUEST_FOR_DISCOVERY",
    SCREENSHOT_TICKET_LIST = "SCREENSHOT_TICKET_LIST",
    SCREENSHOT_TRAFFIC_TICKET = "SCREENSHOT_TRAFFIC_TICKET",
    SUSPENSION_NOTICE = "SUSPENSION_NOTICE",
    TRAFFIC_TICKET = "TRAFFIC_TICKET",
    UNRECOGNIZED_DOCUMENT = "UNRECOGNIZED_DOCUMENT",
    WARNING_NOTICE = "WARNING_NOTICE",
    WARRANT = "WARRANT"
}
export declare enum PriceMatchResponsePriceMatchStatus {
    COMPLETE = "COMPLETE",
    PENDING = "PENDING",
    REJECTED = "REJECTED"
}
export declare enum PushNotificationRegistrationRequestPlatformType {
    ANDROID = "ANDROID",
    IOS = "IOS",
    WEBAPP = "WEBAPP"
}
export declare enum ReferralContactStatusErrorType {
    EMAIL_ALREADY_EXISTS = "EMAIL_ALREADY_EXISTS",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    INVALID_EMAIL = "INVALID_EMAIL"
}
export declare enum ReferralResponseReferralCreditStatus {
    APPLIED = "APPLIED",
    CASE_CANCELLED = "CASE_CANCELLED",
    CONFIRMED = "CONFIRMED",
    NOTIFIED = "NOTIFIED",
    SAVED = "SAVED",
    SUPERSEDED = "SUPERSEDED"
}
export declare enum ReferralResponseReferralPaymentStatus {
    ERROR = "ERROR",
    NONE = "NONE",
    PAID_OUT = "PAID_OUT",
    PENDING_ACCOUNT_VERIFICATION = "PENDING_ACCOUNT_VERIFICATION",
    PENDING_CASE_RESOLUTION = "PENDING_CASE_RESOLUTION"
}
export declare enum ReferralResponseReferralSourceType {
    ADMIN = "ADMIN",
    BILLBOARDS = "BILLBOARDS",
    CHECKOUT_CODE = "CHECKOUT_CODE",
    DMV_COM = "DMV_COM",
    DMV_ORG = "DMV_ORG",
    DWA = "DWA",
    FACEBOOK = "FACEBOOK",
    FRIEND_OR_FAMILY = "FRIEND_OR_FAMILY",
    GOOGLE_SEARCH = "GOOGLE_SEARCH",
    INFLUENCER_AFFILIATE = "INFLUENCER_AFFILIATE",
    INSTAGRAM = "INSTAGRAM",
    KICKBACK_APP = "KICKBACK_APP",
    OTHER = "OTHER",
    RADIO = "RADIO",
    REDDIT = "REDDIT",
    THE_SMOKING_TIRE = "THE_SMOKING_TIRE",
    UNKNOWN = "UNKNOWN",
    VINWIKI = "VINWIKI",
    YOUTUBE_AD = "YOUTUBE_AD"
}
export declare enum RefundCasePaymentRequestRefundReasonType {
    CANCELATION = "CANCELATION",
    CLIENT_DISPUTED_CHARGE = "CLIENT_DISPUTED_CHARGE",
    DUPLICATE_CASE = "DUPLICATE_CASE",
    LOST_CASE = "LOST_CASE",
    OTHER = "OTHER"
}
export declare enum SaveItemToWatchlistRequestEntityType {
    CASE = "CASE",
    LAWFIRM = "LAWFIRM",
    UNKNOWN = "UNKNOWN",
    USER = "USER"
}
export declare enum SaveItemToWatchlistRequestPriority {
    HIGH = "HIGH",
    LOW = "LOW",
    MEDIUM = "MEDIUM"
}
export declare enum SaveLawyerLeadRequestLeadProvidedSource {
    DIRECT_MAIL = "DIRECT_MAIL",
    EMAIL_AD = "EMAIL_AD",
    GOOGLE_AD = "GOOGLE_AD",
    NMA = "NMA",
    OTHER = "OTHER",
    UNKNOWN = "UNKNOWN"
}
export declare enum ScheduledTaskResponseTaskType {
    EMAIL_FOLLOW_UP_TASK = "EMAIL_FOLLOW_UP_TASK",
    PAY_INSTALLMENT_TASK = "PAY_INSTALLMENT_TASK",
    PDF_TO_IMAGE_TASK = "PDF_TO_IMAGE_TASK",
    TICKET_REVIEW_TASK = "TICKET_REVIEW_TASK",
    VALIDATE_SUBSCRIPTION_TASK = "VALIDATE_SUBSCRIPTION_TASK"
}
export declare enum SendEmailToUserRequestReviewPlatform {
    FACEBOOK = "FACEBOOK",
    GOOGLE_MY_BUSINESS = "GOOGLE_MY_BUSINESS",
    GOOGLE_PLAY_STORE = "GOOGLE_PLAY_STORE",
    HIGHYA = "HIGHYA",
    IOS_APP_STORE = "IOS_APP_STORE",
    REVIEWS_IO = "REVIEWS_IO",
    TRUST_PILOT = "TRUST_PILOT"
}
export declare enum SendTextAlertToUserRequestTextAlertType {
    DOWNLOAD_APP = "DOWNLOAD_APP"
}
export declare enum SetCustomerReviewStatusRequestStatus {
    APPROVED = "APPROVED",
    REJECTED = "REJECTED"
}
export declare enum SettingResponseType {
    Boolean = "Boolean",
    Integer = "Integer",
    List = "List",
    String = "String"
}
export declare enum SourceDelivered_as {
    ADMIN_INITIATED = "ADMIN_INITIATED",
    INBOUND = "INBOUND",
    OUTBOUND = "OUTBOUND"
}
export declare enum StripeCardDomainFunding {
    CREDIT = "CREDIT",
    DEBIT = "DEBIT",
    PREPAID = "PREPAID"
}
export declare enum SubscriberDomainSubscriptionType {
    WEB_BROCHURE_LAUNCH_NOTIFICATION = "WEB_BROCHURE_LAUNCH_NOTIFICATION"
}
export declare enum SubscriptionDiscountEligibilitySubscriptionDiscountEligibilityType {
    IS_ELIGIBLE = "IS_ELIGIBLE",
    IS_NOT_ELIGIBLE = "IS_NOT_ELIGIBLE",
    NOT_APPLICABLE = "NOT_APPLICABLE"
}
export declare enum UserReferralLinkModelReferralLinkType {
    FASTLANE_TEEN = "FASTLANE_TEEN",
    PRIMARY = "PRIMARY"
}
export declare enum UserSubscriptionPlanModelProductName {
    CONVOY_PRO = "CONVOY_PRO",
    OTR_FASTLANE = "OTR_FASTLANE",
    OTR_FASTLANE_TEEN = "OTR_FASTLANE_TEEN"
}
export declare enum ValidateDirectMailResponseOtrError {
    ACCESS_DENIED = "ACCESS_DENIED",
    ACCOUNT_DISABLED = "ACCOUNT_DISABLED",
    ACTIVE_CASE_COUNTERS_BLOCK_ACCEPT = "ACTIVE_CASE_COUNTERS_BLOCK_ACCEPT",
    ARAG_NOT_CAPTURED = "ARAG_NOT_CAPTURED",
    AUTHENTICATION_CREDENTIALS_NOT_FOUND = "AUTHENTICATION_CREDENTIALS_NOT_FOUND",
    AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
    AUTHENTICATION_SERVICE_FAILURE = "AUTHENTICATION_SERVICE_FAILURE",
    AUTHORIZATION_SERVICE_FAILURE = "AUTHORIZATION_SERVICE_FAILURE",
    AUTHORIZED_CHARGES_ON_CASE = "AUTHORIZED_CHARGES_ON_CASE",
    BAD_CREDENTIALS = "BAD_CREDENTIALS",
    BLOCKED_DUE_TO_FIREWALL = "BLOCKED_DUE_TO_FIREWALL",
    BLOCKED_FROM_BOOKING = "BLOCKED_FROM_BOOKING",
    CANCELLATION_WINDOW_CLOSED = "CANCELLATION_WINDOW_CLOSED",
    CASE_ALREADY_EXISTS = "CASE_ALREADY_EXISTS",
    CASE_ALREADY_PAID = "CASE_ALREADY_PAID",
    CASE_ALREADY_RESOLVED = "CASE_ALREADY_RESOLVED",
    CASE_COUNTER_MISMATCH = "CASE_COUNTER_MISMATCH",
    CASE_ID_COLLISION = "CASE_ID_COLLISION",
    CASE_IS_CANCELLED = "CASE_IS_CANCELLED",
    CASE_MATCH_FAILED = "CASE_MATCH_FAILED",
    CASE_MISSING_LAWFIRM = "CASE_MISSING_LAWFIRM",
    CASE_NOT_ACCEPTED_BY_LAWFIRM = "CASE_NOT_ACCEPTED_BY_LAWFIRM",
    CASE_NOT_CONFIRMED = "CASE_NOT_CONFIRMED",
    CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_FEES = "CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_FEES",
    CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_PAYOUTS = "CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_PAYOUTS",
    CASE_PAYMENT_HAS_STRIPE_CHARGE = "CASE_PAYMENT_HAS_STRIPE_CHARGE",
    CASE_STATUS_NOT_ALLOWED = "CASE_STATUS_NOT_ALLOWED",
    CASE_USER_MISMATCH = "CASE_USER_MISMATCH",
    CASE_USER_NOT_FOUND = "CASE_USER_NOT_FOUND",
    CC_WILL_EXPIRE_BEFORE_PAYMENT_PLAN = "CC_WILL_EXPIRE_BEFORE_PAYMENT_PLAN",
    CHARGE_ALREADY_CAPTURED = "CHARGE_ALREADY_CAPTURED",
    CHARGE_EXPIRED = "CHARGE_EXPIRED",
    CHARGE_NOT_ALLOWED = "CHARGE_NOT_ALLOWED",
    CHARGE_NOT_CAPTURED = "CHARGE_NOT_CAPTURED",
    CHARGE_NO_LONGER_AUTHORIZED = "CHARGE_NO_LONGER_AUTHORIZED",
    CHARGE_REFUNDED = "CHARGE_REFUNDED",
    CITATION_ALREADY_DELETED = "CITATION_ALREADY_DELETED",
    CITATION_DOES_NOT_MATCH_USER = "CITATION_DOES_NOT_MATCH_USER",
    CITATION_NOT_OWNED_BY_USER = "CITATION_NOT_OWNED_BY_USER",
    CODE_ALREADY_EXISTS_FOR_DRIVER = "CODE_ALREADY_EXISTS_FOR_DRIVER",
    CODE_BENEFIT_TYPE_NOT_SUPPORTED = "CODE_BENEFIT_TYPE_NOT_SUPPORTED",
    CODE_DOES_NOT_EXIST = "CODE_DOES_NOT_EXIST",
    CODE_EXCEEDED_MAX_USAGE = "CODE_EXCEEDED_MAX_USAGE",
    CODE_HAS_EXPIRED = "CODE_HAS_EXPIRED",
    CODE_IS_ALREADY_TAKEN = "CODE_IS_ALREADY_TAKEN",
    CODE_IS_NOT_ACTIVE = "CODE_IS_NOT_ACTIVE",
    CODE_NOT_ALLOWED_DUE_TO_CREDIT = "CODE_NOT_ALLOWED_DUE_TO_CREDIT",
    CODE_NOT_SUPPORTED_BY_LAWFIRM = "CODE_NOT_SUPPORTED_BY_LAWFIRM",
    CODE_NOT_VALID_FOR_LEGAL_SERVICE = "CODE_NOT_VALID_FOR_LEGAL_SERVICE",
    CODE_NOT_YET_APPROVED = "CODE_NOT_YET_APPROVED",
    CODE_REFERRER_BENEFITS_NOT_AUTHORIZED = "CODE_REFERRER_BENEFITS_NOT_AUTHORIZED",
    COMMENT_ALREADY_EXISTS = "COMMENT_ALREADY_EXISTS",
    COURT_MISSING_ADDRESS = "COURT_MISSING_ADDRESS",
    COURT_NOT_IN_SUPPORTED_REGION = "COURT_NOT_IN_SUPPORTED_REGION",
    COURT_NOT_SUPPORTED_BY_LAWFIRM = "COURT_NOT_SUPPORTED_BY_LAWFIRM",
    CURRENT_PASSWORD_INCORRECT = "CURRENT_PASSWORD_INCORRECT",
    DATABASE_RECORD_LOCKED = "DATABASE_RECORD_LOCKED",
    DATA_ACCESS_ERROR = "DATA_ACCESS_ERROR",
    DIRECT_MAIL_RECONCILATION_ID_NOT_EXIST = "DIRECT_MAIL_RECONCILATION_ID_NOT_EXIST",
    DIRECT_MAIL_SENT_ALREADY = "DIRECT_MAIL_SENT_ALREADY",
    DIRECT_MAIL_TEMPLATE_DUPLICATE_DETECTED = "DIRECT_MAIL_TEMPLATE_DUPLICATE_DETECTED",
    DIRECT_MAIL_TEMPLATE_NOT_EXIST = "DIRECT_MAIL_TEMPLATE_NOT_EXIST",
    DRIP_DEPENDENCY_FAILURE = "DRIP_DEPENDENCY_FAILURE",
    DUPLICATE_COURT = "DUPLICATE_COURT",
    DUPLICATE_EMAIL = "DUPLICATE_EMAIL",
    DUPLICATE_ENTRY = "DUPLICATE_ENTRY",
    DUPLICATE_LANDING_PAGE_URL = "DUPLICATE_LANDING_PAGE_URL",
    DUPLICATE_MESSAGE_ATTEMPT = "DUPLICATE_MESSAGE_ATTEMPT",
    EMAIL_ADDRESS_ALREADY_SUBSCRIBED = "EMAIL_ADDRESS_ALREADY_SUBSCRIBED",
    EMAIL_ADDRESS_BLACKLISTED = "EMAIL_ADDRESS_BLACKLISTED",
    EMAIL_ALREADY_EXISTS = "EMAIL_ALREADY_EXISTS",
    EMAIL_ALREADY_IN_USE = "EMAIL_ALREADY_IN_USE",
    EMAIL_ALREADY_SENT = "EMAIL_ALREADY_SENT",
    EMAIL_NOT_CONFIRMED = "EMAIL_NOT_CONFIRMED",
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    EXPECTED_NULL_INPUT = "EXPECTED_NULL_INPUT",
    EXPECTED_ROLE_MISSING = "EXPECTED_ROLE_MISSING",
    FAILED_TO_REVERSE_TRANSFER = "FAILED_TO_REVERSE_TRANSFER",
    FRESHDESK_TICKET_NOT_FOUND = "FRESHDESK_TICKET_NOT_FOUND",
    FRESHDESK_UNEXPECTED_NUMBER_OF_RESULTS = "FRESHDESK_UNEXPECTED_NUMBER_OF_RESULTS",
    GHOST_USER_NOT_ALLOWED = "GHOST_USER_NOT_ALLOWED",
    HTTP_REQUEST_ERROR = "HTTP_REQUEST_ERROR",
    IMAGE_NOT_COMPRESSED_PROPERLY = "IMAGE_NOT_COMPRESSED_PROPERLY",
    INACTIVE_STOREFRONT = "INACTIVE_STOREFRONT",
    INCORRECT_DIMENSIONS = "INCORRECT_DIMENSIONS",
    INCORRECT_ENCODING = "INCORRECT_ENCODING",
    INELIGIBLE_STATUS_FOR_TRANSFER = "INELIGIBLE_STATUS_FOR_TRANSFER",
    INVALID_ADDRESS_ID = "INVALID_ADDRESS_ID",
    INVALID_AMOUNT = "INVALID_AMOUNT",
    INVALID_API_TOKEN = "INVALID_API_TOKEN",
    INVALID_API_USAGE = "INVALID_API_USAGE",
    INVALID_CASE_ACTION_ID = "INVALID_CASE_ACTION_ID",
    INVALID_CASE_COUNTER_ID = "INVALID_CASE_COUNTER_ID",
    INVALID_CASE_COUNTER_STATUS = "INVALID_CASE_COUNTER_STATUS",
    INVALID_CASE_ID = "INVALID_CASE_ID",
    INVALID_CASE_PAYMENT_ID = "INVALID_CASE_PAYMENT_ID",
    INVALID_CASE_STATUS_FOR_CASE_RESOLVE = "INVALID_CASE_STATUS_FOR_CASE_RESOLVE",
    INVALID_CITATION_ID = "INVALID_CITATION_ID",
    INVALID_CODE = "INVALID_CODE",
    INVALID_COURT_ID = "INVALID_COURT_ID",
    INVALID_DATE = "INVALID_DATE",
    INVALID_DECLINE_CATEGORY_ID = "INVALID_DECLINE_CATEGORY_ID",
    INVALID_DECLINE_REASON_TYPE_ID = "INVALID_DECLINE_REASON_TYPE_ID",
    INVALID_DISPUTE_ID = "INVALID_DISPUTE_ID",
    INVALID_DOCUMENT_ID = "INVALID_DOCUMENT_ID",
    INVALID_EMAIL_ADDRESS = "INVALID_EMAIL_ADDRESS",
    INVALID_EMAIL_TEMPLATE = "INVALID_EMAIL_TEMPLATE",
    INVALID_END_DATE = "INVALID_END_DATE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    INVALID_FEE_PERCENTAGE = "INVALID_FEE_PERCENTAGE",
    INVALID_FIRST_NAME = "INVALID_FIRST_NAME",
    INVALID_INTERNET_ADDRESS = "INVALID_INTERNET_ADDRESS",
    INVALID_INVITATION_TOKEN = "INVALID_INVITATION_TOKEN",
    INVALID_INVOICE_LINE_ITEM_ID = "INVALID_INVOICE_LINE_ITEM_ID",
    INVALID_LAST_NAME = "INVALID_LAST_NAME",
    INVALID_LAWFIRM = "INVALID_LAWFIRM",
    INVALID_LAWYER_ID = "INVALID_LAWYER_ID",
    INVALID_LEAD_IN_CONTACT_LOOP = "INVALID_LEAD_IN_CONTACT_LOOP",
    INVALID_LEGAL_SERVICE = "INVALID_LEGAL_SERVICE",
    INVALID_LINE_ITEM = "INVALID_LINE_ITEM",
    INVALID_MESSAGE_ID = "INVALID_MESSAGE_ID",
    INVALID_PAGINATION_TOKEN = "INVALID_PAGINATION_TOKEN",
    INVALID_PARAMETER_VALUE = "INVALID_PARAMETER_VALUE",
    INVALID_PASSWORD = "INVALID_PASSWORD",
    INVALID_PASSWORD_RESET_TOKEN = "INVALID_PASSWORD_RESET_TOKEN",
    INVALID_PUSH_TOKEN = "INVALID_PUSH_TOKEN",
    INVALID_RECIPIENT_LIST = "INVALID_RECIPIENT_LIST",
    INVALID_REQUEST = "INVALID_REQUEST",
    INVALID_REQUEST_BODY = "INVALID_REQUEST_BODY",
    INVALID_RESOLUTION_STATUS = "INVALID_RESOLUTION_STATUS",
    INVALID_REVIEW_COPY = "INVALID_REVIEW_COPY",
    INVALID_ROLE_TYPE = "INVALID_ROLE_TYPE",
    INVALID_SOCIAL_LOGIN_PROVIDER = "INVALID_SOCIAL_LOGIN_PROVIDER",
    INVALID_STATE = "INVALID_STATE",
    INVALID_STRIPE_ACCOUNT = "INVALID_STRIPE_ACCOUNT",
    INVALID_STRIPE_CHARGE_ID = "INVALID_STRIPE_CHARGE_ID",
    INVALID_STRIPE_REQUEST = "INVALID_STRIPE_REQUEST",
    INVALID_STRIPE_TRANSACTION_ID = "INVALID_STRIPE_TRANSACTION_ID",
    INVALID_SUBSCRIPTION_TYPE = "INVALID_SUBSCRIPTION_TYPE",
    INVALID_TASK_ID = "INVALID_TASK_ID",
    INVALID_TEXT_ALERT_TYPE = "INVALID_TEXT_ALERT_TYPE",
    INVALID_TICKET_ID = "INVALID_TICKET_ID",
    INVALID_TICKET_REVIEW_ID = "INVALID_TICKET_REVIEW_ID",
    INVALID_TRAFFIC_VIOLATION = "INVALID_TRAFFIC_VIOLATION",
    INVALID_USER_ID = "INVALID_USER_ID",
    INVALID_USER_NAME = "INVALID_USER_NAME",
    INVITATION_ALREADY_SENT = "INVITATION_ALREADY_SENT",
    INVITATION_ALREADY_VERIFIED = "INVITATION_ALREADY_VERIFIED",
    INVITATION_CANCELLED = "INVITATION_CANCELLED",
    INVITATION_HAS_EXPIRED = "INVITATION_HAS_EXPIRED",
    INVITATION_RECIPIENT_NO_ACCOUNT = "INVITATION_RECIPIENT_NO_ACCOUNT",
    IO_ERROR = "IO_ERROR",
    LAMBDA_URL_INVOKE_FAILURE = "LAMBDA_URL_INVOKE_FAILURE",
    LAWFIRM_CASE_CAPACITY_REACHED = "LAWFIRM_CASE_CAPACITY_REACHED",
    LAWFIRM_CASE_NOT_ACTIVE = "LAWFIRM_CASE_NOT_ACTIVE",
    LAWFIRM_DOES_NOT_HANDLE_ACCIDENTS = "LAWFIRM_DOES_NOT_HANDLE_ACCIDENTS",
    LAWFIRM_DOES_NOT_HANDLE_PAST_DUE = "LAWFIRM_DOES_NOT_HANDLE_PAST_DUE",
    LAWFIRM_FEE_HAS_STRIPE_REFERENCE = "LAWFIRM_FEE_HAS_STRIPE_REFERENCE",
    LAWFIRM_MISSING_ACCOUNT_FEE = "LAWFIRM_MISSING_ACCOUNT_FEE",
    LAWFIRM_NOT_ELIGIBLE = "LAWFIRM_NOT_ELIGIBLE",
    LAWFIRM_ON_VACATION_MODE = "LAWFIRM_ON_VACATION_MODE",
    LAWFIRM_PAYOUT_HAS_STRIPE_REFERENCE = "LAWFIRM_PAYOUT_HAS_STRIPE_REFERENCE",
    LAW_FIRM_NEEDS_ADDRESS = "LAW_FIRM_NEEDS_ADDRESS",
    LEGAL_SERVICE_NOT_SUPPORTED = "LEGAL_SERVICE_NOT_SUPPORTED",
    LEGAL_SERVICE_QUOTE_EXPIRED = "LEGAL_SERVICE_QUOTE_EXPIRED",
    LINE_ITEM_MISSING_RECIPIENT = "LINE_ITEM_MISSING_RECIPIENT",
    LINKS_NOT_ALLOWED = "LINKS_NOT_ALLOWED",
    LOB_ADDRESS_CREATION_FAILURE = "LOB_ADDRESS_CREATION_FAILURE",
    LOB_ADDRESS_VALIDATION_FAILURE = "LOB_ADDRESS_VALIDATION_FAILURE",
    LOB_CANCEL_CHECK_DELIVERY_FAILURE = "LOB_CANCEL_CHECK_DELIVERY_FAILURE",
    LOB_CANCEL_MAIL_DELIVERY_FAILURE = "LOB_CANCEL_MAIL_DELIVERY_FAILURE",
    LOB_CHECK_MAIL_DELIVERY_FAILURE = "LOB_CHECK_MAIL_DELIVERY_FAILURE",
    LOB_POSTCARD_CREATION_FAILURE = "LOB_POSTCARD_CREATION_FAILURE",
    MEDIA_TYPE_INCORRECT = "MEDIA_TYPE_INCORRECT",
    MERGE_ROLLBACK_NOT_ALLOWED = "MERGE_ROLLBACK_NOT_ALLOWED",
    MISSING_ACTION_TYPE = "MISSING_ACTION_TYPE",
    MISSING_ADJUSTED_FINE_AMOUNT = "MISSING_ADJUSTED_FINE_AMOUNT",
    MISSING_BIRTHDAY = "MISSING_BIRTHDAY",
    MISSING_CASE = "MISSING_CASE",
    MISSING_CITATION_ID = "MISSING_CITATION_ID",
    MISSING_COURT_FEE = "MISSING_COURT_FEE",
    MISSING_COURT_ID = "MISSING_COURT_ID",
    MISSING_DECLINE_CATEGORY = "MISSING_DECLINE_CATEGORY",
    MISSING_DECLINE_REASON_TYPE = "MISSING_DECLINE_REASON_TYPE",
    MISSING_EMAIL_ADDRESS = "MISSING_EMAIL_ADDRESS",
    MISSING_FEEDBACK_CONTENT = "MISSING_FEEDBACK_CONTENT",
    MISSING_FIRSTNAME = "MISSING_FIRSTNAME",
    MISSING_IMAGE_URL = "MISSING_IMAGE_URL",
    MISSING_LASTNAME = "MISSING_LASTNAME",
    MISSING_LAWFIRM_ID = "MISSING_LAWFIRM_ID",
    MISSING_LAWYER_ID = "MISSING_LAWYER_ID",
    MISSING_MEDIA_DATA = "MISSING_MEDIA_DATA",
    MISSING_NUM_VIOLATIONS = "MISSING_NUM_VIOLATIONS",
    MISSING_PARAMETER = "MISSING_PARAMETER",
    MISSING_PASSWORD = "MISSING_PASSWORD",
    MISSING_PAYMENT_METHOD = "MISSING_PAYMENT_METHOD",
    MISSING_RECIPIENT_EMAIL = "MISSING_RECIPIENT_EMAIL",
    MISSING_REQUEST_BODY = "MISSING_REQUEST_BODY",
    MISSING_RESOLUTION_STATUS = "MISSING_RESOLUTION_STATUS",
    MISSING_SENDER_EMAIL = "MISSING_SENDER_EMAIL",
    MISSING_SENDER_PHONE_NUMBER = "MISSING_SENDER_PHONE_NUMBER",
    MISSING_SEO_URL = "MISSING_SEO_URL",
    MISSING_STRIPE_TOKEN = "MISSING_STRIPE_TOKEN",
    MISSING_SUBSCRIBER = "MISSING_SUBSCRIBER",
    MISSING_TICKET_ISSUE_DATE = "MISSING_TICKET_ISSUE_DATE",
    MISSING_USER_NAME = "MISSING_USER_NAME",
    MULTIPLE_LAWFIRM_FEES = "MULTIPLE_LAWFIRM_FEES",
    MULTIPLE_LAWFIRM_PAYOUTS = "MULTIPLE_LAWFIRM_PAYOUTS",
    MULTIPLE_REFUNDS_ON_CHARGE = "MULTIPLE_REFUNDS_ON_CHARGE",
    MULTIPLE_STRIPE_CUSTOMER_ACCOUNTS_FOUND = "MULTIPLE_STRIPE_CUSTOMER_ACCOUNTS_FOUND",
    MULTIPLE_STRIPE_TRANSFERS_FOUND = "MULTIPLE_STRIPE_TRANSFERS_FOUND",
    MUST_BE_POSITIVE = "MUST_BE_POSITIVE",
    NOTIFICATION_ERROR = "NOTIFICATION_ERROR",
    NOTIFICATION_INCORRECT_ROLE = "NOTIFICATION_INCORRECT_ROLE",
    NOTIFICATION_TOO_LONG = "NOTIFICATION_TOO_LONG",
    NOTIFICATION_TO_SELF = "NOTIFICATION_TO_SELF",
    NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
    NO_ACCOUNT_FOUND_WITH_PROVIDER = "NO_ACCOUNT_FOUND_WITH_PROVIDER",
    NO_ACCOUNT_WITH_EMAIL = "NO_ACCOUNT_WITH_EMAIL",
    NO_CASE_OWNER = "NO_CASE_OWNER",
    NO_CHARGES_ON_CASE = "NO_CHARGES_ON_CASE",
    NO_INSURANCE = "NO_INSURANCE",
    NO_LAWFIRM_AVAILABLE = "NO_LAWFIRM_AVAILABLE",
    NO_LEGAL_SERVICES_IN_REGION = "NO_LEGAL_SERVICES_IN_REGION",
    NO_STRIPE_ACCOUNT = "NO_STRIPE_ACCOUNT",
    OLD_PASSWORD_INCORRECT = "OLD_PASSWORD_INCORRECT",
    OWNER_CASE_MESSAGE_MISMATCH = "OWNER_CASE_MESSAGE_MISMATCH",
    PAYMENT_PLANS_DENIED = "PAYMENT_PLANS_DENIED",
    PAYMENT_PLAN_LEGAL_FEE_HAS_CENTS = "PAYMENT_PLAN_LEGAL_FEE_HAS_CENTS",
    PAYMENT_PLAN_NOT_SUPPORTED_WITH_PREPAID_CARD = "PAYMENT_PLAN_NOT_SUPPORTED_WITH_PREPAID_CARD",
    PDF_PASSWORD_PROTECTED = "PDF_PASSWORD_PROTECTED",
    PHONE_NUMBER_NOT_CELLULAR = "PHONE_NUMBER_NOT_CELLULAR",
    PLAID_ERROR = "PLAID_ERROR",
    QBO_BILL_CREATION_FAILURE = "QBO_BILL_CREATION_FAILURE",
    QBO_VENDOR_CREATION_FAILURE = "QBO_VENDOR_CREATION_FAILURE",
    RATE_THROTTLE_LIMIT_EXCEEDED = "RATE_THROTTLE_LIMIT_EXCEEDED",
    REFERRALS_NOT_ALLOWED_TO_BE_REDEEMED = "REFERRALS_NOT_ALLOWED_TO_BE_REDEEMED",
    REFUND_NOT_ALLOWED = "REFUND_NOT_ALLOWED",
    REFUND_NOT_ELIGIBLE = "REFUND_NOT_ELIGIBLE",
    REFUND_NOT_ELIGIBLE_CRIMINAL = "REFUND_NOT_ELIGIBLE_CRIMINAL",
    REQUEST_NOT_WELL_FORMATTED = "REQUEST_NOT_WELL_FORMATTED",
    RESET_TOKEN_EXPIRED = "RESET_TOKEN_EXPIRED",
    RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND",
    REVIEW_ALREADY_EXISTS = "REVIEW_ALREADY_EXISTS",
    REVIEW_NOT_FOUND = "REVIEW_NOT_FOUND",
    ROLE_NOT_SUPPORTED = "ROLE_NOT_SUPPORTED",
    S3_CLIENT_FAILED = "S3_CLIENT_FAILED",
    S3_SERVER_FAILED = "S3_SERVER_FAILED",
    SAME_USER_CANNOT_BE_MERGED = "SAME_USER_CANNOT_BE_MERGED",
    SEO_URL_ALREADY_EXISTS = "SEO_URL_ALREADY_EXISTS",
    SERVICE_RATE_NOT_FOUND = "SERVICE_RATE_NOT_FOUND",
    SIMILAR_COURT = "SIMILAR_COURT",
    SOCIAL_PROFILE_MISSING_EMAIL = "SOCIAL_PROFILE_MISSING_EMAIL",
    SSO_SERVICE_PROVIDER_ID_NOT_FOUND = "SSO_SERVICE_PROVIDER_ID_NOT_FOUND",
    STATE_NOT_SUPPORTED = "STATE_NOT_SUPPORTED",
    STRIPE_API_CONNECTION_EXCEPTION = "STRIPE_API_CONNECTION_EXCEPTION",
    STRIPE_API_EXCEPTION = "STRIPE_API_EXCEPTION",
    STRIPE_APPLICATION_FEE_ALREADY_REFUNDED = "STRIPE_APPLICATION_FEE_ALREADY_REFUNDED",
    STRIPE_APPLICATION_FEE_NOT_FOUND = "STRIPE_APPLICATION_FEE_NOT_FOUND",
    STRIPE_AUTHENTICATION_EXCEPTION = "STRIPE_AUTHENTICATION_EXCEPTION",
    STRIPE_CARD_EXCEPTION = "STRIPE_CARD_EXCEPTION",
    STRIPE_CONNECT_ACCOUNT_NOT_FOUND = "STRIPE_CONNECT_ACCOUNT_NOT_FOUND",
    STRIPE_ERROR = "STRIPE_ERROR",
    STRIPE_FAILED_CHARGE = "STRIPE_FAILED_CHARGE",
    STRIPE_OAUTH_CONNECT_FAILED = "STRIPE_OAUTH_CONNECT_FAILED",
    STRIPE_OBJECT_MISSING_METADATA = "STRIPE_OBJECT_MISSING_METADATA",
    STRIPE_RESOURCE_NOT_FOUND = "STRIPE_RESOURCE_NOT_FOUND",
    STRIPE_TRANSFER_EXISTS = "STRIPE_TRANSFER_EXISTS",
    STRIPE_TRANSFER_NOT_FOUND = "STRIPE_TRANSFER_NOT_FOUND",
    SUBSCRIPTION_NOT_OWNED_BY_USER = "SUBSCRIPTION_NOT_OWNED_BY_USER",
    SUBSCRIPTION_TEENAGER_AGE_OUT = "SUBSCRIPTION_TEENAGER_AGE_OUT",
    TEMPLATE_NOT_SUPPORTED = "TEMPLATE_NOT_SUPPORTED",
    TRANSFER_ALREADY_REVERSED = "TRANSFER_ALREADY_REVERSED",
    TRANSFER_ID_DOESNT_MATCH_CHARGE = "TRANSFER_ID_DOESNT_MATCH_CHARGE",
    TRANSFER_NOT_SAFE = "TRANSFER_NOT_SAFE",
    TRANSFER_REVERSAL_NOT_ALLOWED = "TRANSFER_REVERSAL_NOT_ALLOWED",
    TRANSFER_TO_SAME_LAWFIRM = "TRANSFER_TO_SAME_LAWFIRM",
    UNABLE_TO_VERIFY_REQUEST = "UNABLE_TO_VERIFY_REQUEST",
    UNAUTHORIZED = "UNAUTHORIZED",
    UNEXPECTED_CASE_STATUS = "UNEXPECTED_CASE_STATUS",
    UNEXPECTED_NULL_INPUT = "UNEXPECTED_NULL_INPUT",
    UNEXPECTED_NUMBER_OF_CHARGES = "UNEXPECTED_NUMBER_OF_CHARGES",
    UNKNOWN = "UNKNOWN",
    UNKNOWN_CRM_ERROR = "UNKNOWN_CRM_ERROR",
    UNVERIFIED_PHONE_NUMBER = "UNVERIFIED_PHONE_NUMBER",
    URL_ENTITY_MISMATCH = "URL_ENTITY_MISMATCH",
    USER_ALREADY_HAS_SECONDARY_ACCOUNT = "USER_ALREADY_HAS_SECONDARY_ACCOUNT",
    USER_ALREADY_LOGGED_IN = "USER_ALREADY_LOGGED_IN",
    USER_ALREADY_MERGED = "USER_ALREADY_MERGED",
    USER_CANT_USE_OWN_CODE = "USER_CANT_USE_OWN_CODE",
    USER_DOES_NOT_MATCH_CITATION = "USER_DOES_NOT_MATCH_CITATION",
    USER_IS_NOT_THE_OWNER = "USER_IS_NOT_THE_OWNER",
    USER_NOT_FOUND = "USER_NOT_FOUND",
    USER_NOT_FOUND_IN_LAWFIRM = "USER_NOT_FOUND_IN_LAWFIRM",
    VERIFICATION_CODE_NOT_VALID = "VERIFICATION_CODE_NOT_VALID",
    VERIFICATION_LINK_NOT_VALID = "VERIFICATION_LINK_NOT_VALID"
}
export declare enum ValidatePhoneNumberResponsePhoneType {
    CELLULAR = "CELLULAR",
    LANDLINE = "LANDLINE",
    UNKNOWN = "UNKNOWN",
    VOIP = "VOIP"
}
export declare enum VerifyCaptchaTokenRequestVersion {
    V2_GOOGLE = "V2_GOOGLE",
    V3_GOOGLE = "V3_GOOGLE"
}
export declare enum ZoneOffsetTransitionRuleDayOfWeek {
    FRIDAY = "FRIDAY",
    MONDAY = "MONDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY",
    THURSDAY = "THURSDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY"
}
export declare enum ZoneOffsetTransitionRuleMonth {
    APRIL = "APRIL",
    AUGUST = "AUGUST",
    DECEMBER = "DECEMBER",
    FEBRUARY = "FEBRUARY",
    JANUARY = "JANUARY",
    JULY = "JULY",
    JUNE = "JUNE",
    MARCH = "MARCH",
    MAY = "MAY",
    NOVEMBER = "NOVEMBER",
    OCTOBER = "OCTOBER",
    SEPTEMBER = "SEPTEMBER"
}
export declare enum ZoneOffsetTransitionRuleTimeDefinition {
    STANDARD = "STANDARD",
    UTC = "UTC",
    WALL = "WALL"
}
