"use strict";
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchlistControllerApi = void 0;
/* tslint:disable:no-unused-variable member-ordering */
var WatchlistControllerApi = /** @class */ (function () {
    function WatchlistControllerApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary listUserWatchlists
     * @param userId userId
     * @param isArchived isArchived
     * @param watchlistId watchlistId
     */
    WatchlistControllerApi.prototype.listUserWatchlistsUsingGET = function (userId, isArchived, watchlistId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/watchlists/{userId}/lists'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listUserWatchlistsUsingGET.');
        }
        if (isArchived !== undefined) {
            queryParameters['isArchived'] = isArchived;
        }
        if (watchlistId !== undefined) {
            queryParameters['watchlistId'] = watchlistId;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary saveUserWatchlists
     * @param userId userId
     * @param request request
     */
    WatchlistControllerApi.prototype.saveUserWatchlistsUsingPOST = function (userId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/watchlists/{userId}/lists'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveUserWatchlistsUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveUserWatchlistsUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    WatchlistControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return WatchlistControllerApi;
}());
exports.WatchlistControllerApi = WatchlistControllerApi;
