/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class AuditLogControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary getAuditLogs
     * @param citationId citationId
     * @param logLevel logLevel
     * @param logType logType
     * @param showActiveOnly showActiveOnly
     */
    public getAuditLogsUsingGET (citationId: number, logLevel?: 'NON_TECHNICAL' | 'TECHNICAL', logType?: 'APPLY_REFERRAL_CODE' | 'CREATE_LEGAL_SERVICES' | 'INITIATE_CASE' | 'MATCH_CASE' | 'OTHER' | 'TRANSFER_CASE', showActiveOnly?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCitationAuditLogsResponse> {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/audit-logs'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling getAuditLogsUsingGET.');
        }

        if (logLevel !== undefined) {
            queryParameters['logLevel'] = logLevel;
        }

        if (logType !== undefined) {
            queryParameters['logType'] = logType;
        }

        if (showActiveOnly !== undefined) {
            queryParameters['showActiveOnly'] = showActiveOnly;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
