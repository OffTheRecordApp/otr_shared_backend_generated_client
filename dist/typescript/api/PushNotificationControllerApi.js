"use strict";
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushNotificationControllerApi = void 0;
/* tslint:disable:no-unused-variable member-ordering */
var PushNotificationControllerApi = /** @class */ (function () {
    function PushNotificationControllerApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary getUnreadCounts
     * @param includeMessage includeMessage
     */
    PushNotificationControllerApi.prototype.getUnreadCountsUsingGET = function (includeMessage, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/notifications/unread';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        if (includeMessage !== undefined) {
            queryParameters['includeMessage'] = includeMessage;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary markAllReadForUser
     * @param userId userId
     */
    PushNotificationControllerApi.prototype.markAllReadForUserUsingDELETE = function (userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/notifications/unread/{userId}/user'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling markAllReadForUserUsingDELETE.');
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary markCaseNotificationsAsUnread
     * @param caseId caseId
     * @param userId userId
     */
    PushNotificationControllerApi.prototype.markCaseNotificationsAsUnreadUsingPUT = function (caseId, userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/notifications/{userId}/unread/{caseId}/message'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling markCaseNotificationsAsUnreadUsingPUT.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling markCaseNotificationsAsUnreadUsingPUT.');
        }
        var httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary markPageTypesAsRead
     * @param caseId caseId
     * @param request request
     */
    PushNotificationControllerApi.prototype.markPageTypesAsReadUsingDELETE = function (caseId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v2/notifications/unread/{caseId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling markPageTypesAsReadUsingDELETE.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling markPageTypesAsReadUsingDELETE.');
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary markRead
     * @param caseId caseId
     * @param request request
     */
    PushNotificationControllerApi.prototype.markReadUsingDELETE = function (caseId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/notifications/unread/{caseId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling markReadUsingDELETE.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling markReadUsingDELETE.');
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary pushCaseMessage
     * @param caseId caseId
     * @param pushRequest pushRequest
     */
    PushNotificationControllerApi.prototype.pushCaseMessageUsingPOST = function (caseId, pushRequest, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/notifications/cases/{caseId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling pushCaseMessageUsingPOST.');
        }
        // verify required parameter 'pushRequest' is not null or undefined
        if (pushRequest === null || pushRequest === undefined) {
            throw new Error('Required parameter pushRequest was null or undefined when calling pushCaseMessageUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: pushRequest,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary pushNotificationToUser
     * @param recipientId recipientId
     * @param pushRequest pushRequest
     */
    PushNotificationControllerApi.prototype.pushNotificationToUserUsingPOST = function (recipientId, pushRequest, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/notifications/users/{recipientId}'
            .replace('{' + 'recipientId' + '}', encodeURIComponent(String(recipientId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'recipientId' is not null or undefined
        if (recipientId === null || recipientId === undefined) {
            throw new Error('Required parameter recipientId was null or undefined when calling pushNotificationToUserUsingPOST.');
        }
        // verify required parameter 'pushRequest' is not null or undefined
        if (pushRequest === null || pushRequest === undefined) {
            throw new Error('Required parameter pushRequest was null or undefined when calling pushNotificationToUserUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: pushRequest,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary register
     * @param request request
     */
    PushNotificationControllerApi.prototype.registerUsingPOST = function (request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/notifications/register';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling registerUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    PushNotificationControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return PushNotificationControllerApi;
}());
exports.PushNotificationControllerApi = PushNotificationControllerApi;
