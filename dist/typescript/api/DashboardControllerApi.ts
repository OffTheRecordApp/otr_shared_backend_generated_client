/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class DashboardControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary getBookings
     * @param request request
     */
    public getBookingsUsingPOST (request: models.GetBookingsRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetBookingsResponse> {
        const localVarPath = this.basePath + '/api/v1/console/bookings';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getBookingsUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getUserRegistrations
     * @param request request
     */
    public getUserRegistrationsUsingPOST (request: models.GetUserRegistrationsRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetUserRegistrationsResponse> {
        const localVarPath = this.basePath + '/api/v1/console/registrations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getUserRegistrationsUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listCitations
     * @param request request
     */
    public listCitationsUsingPOST (request: models.ListCitationsRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ListCitationsResponse> {
        const localVarPath = this.basePath + '/api/v1/console/citations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling listCitationsUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listCustomers
     * @param graphRequest graphRequest
     */
    public listCustomersUsingPOST (graphRequest: models.GraphRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SqlResponse> {
        const localVarPath = this.basePath + '/api/v1/console/customers';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'graphRequest' is not null or undefined
        if (graphRequest === null || graphRequest === undefined) {
            throw new Error('Required parameter graphRequest was null or undefined when calling listCustomersUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: graphRequest,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listDropoffs
     * @param graphRequest graphRequest
     */
    public listDropoffsUsingPOST (graphRequest: models.GraphRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SqlResponse> {
        const localVarPath = this.basePath + '/api/v1/console/dropoff';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'graphRequest' is not null or undefined
        if (graphRequest === null || graphRequest === undefined) {
            throw new Error('Required parameter graphRequest was null or undefined when calling listDropoffsUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: graphRequest,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listExpenses
     * @param graphRequest graphRequest
     */
    public listExpensesUsingPOST (graphRequest: models.GraphRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SqlResponse> {
        const localVarPath = this.basePath + '/api/v1/console/expenses';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'graphRequest' is not null or undefined
        if (graphRequest === null || graphRequest === undefined) {
            throw new Error('Required parameter graphRequest was null or undefined when calling listExpensesUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: graphRequest,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listLawyerLeads
     * @param graphRequest graphRequest
     */
    public listLawyerLeadsUsingPOST (graphRequest: models.GraphRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SqlResponse> {
        const localVarPath = this.basePath + '/api/v1/console/lawyer-leads';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'graphRequest' is not null or undefined
        if (graphRequest === null || graphRequest === undefined) {
            throw new Error('Required parameter graphRequest was null or undefined when calling listLawyerLeadsUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: graphRequest,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listPhoneCalls
     * @param agentId agentId
     * @param agentName agentName
     * @param callQueueName callQueueName
     * @param callStatus callStatus
     * @param direction direction
     * @param endDate endDate
     * @param ivrName ivrName
     * @param length length
     * @param page page
     * @param shouldIncludePhoneCalls shouldIncludePhoneCalls
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param startDate startDate
     * @param teamName teamName
     * @param timeZoneId timeZoneId
     */
    public listPhoneCallsUsingGET (agentId?: number, agentName?: string, callQueueName?: string, callStatus?: 'ABANDONED' | 'BLOCKED' | 'BUSY' | 'COMPLETED' | 'CONNECTING' | 'CONNECTION_FAILED' | 'DEFAULT' | 'DISCONNECTED' | 'ENQUEUED' | 'IN_PROGRESS' | 'MISSED_CALL' | 'ON_HOLD' | 'RECENTLY_COMPLETED' | 'RESTRICTED' | 'VOICEMAIL' | 'VOICEMAIL_RECORDING_IN_PROGRESS', direction?: 'INCOMING' | 'OUTGOING', endDate?: string, ivrName?: string, length?: number, page?: number, shouldIncludePhoneCalls?: boolean, sortBy?: string, sortOrder?: string, startDate?: string, teamName?: string, timeZoneId?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ListPhoneCallsResponse> {
        const localVarPath = this.basePath + '/api/v1/console/phone-calls';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (agentId !== undefined) {
            queryParameters['agentId'] = agentId;
        }

        if (agentName !== undefined) {
            queryParameters['agentName'] = agentName;
        }

        if (callQueueName !== undefined) {
            queryParameters['callQueueName'] = callQueueName;
        }

        if (callStatus !== undefined) {
            queryParameters['callStatus'] = callStatus;
        }

        if (direction !== undefined) {
            queryParameters['direction'] = direction;
        }

        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }

        if (ivrName !== undefined) {
            queryParameters['ivrName'] = ivrName;
        }

        if (length !== undefined) {
            queryParameters['length'] = length;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (shouldIncludePhoneCalls !== undefined) {
            queryParameters['shouldIncludePhoneCalls'] = shouldIncludePhoneCalls;
        }

        if (sortBy !== undefined) {
            queryParameters['sortBy'] = sortBy;
        }

        if (sortOrder !== undefined) {
            queryParameters['sortOrder'] = sortOrder;
        }

        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }

        if (teamName !== undefined) {
            queryParameters['teamName'] = teamName;
        }

        if (timeZoneId !== undefined) {
            queryParameters['timeZoneId'] = timeZoneId;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
