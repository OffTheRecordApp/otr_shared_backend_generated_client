/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class LawfirmTransactionsControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary chargeFeeToLawfirm
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public chargeFeeToLawfirmUsingPOST (lawfirmId: number, request: models.ChargeFeeToLawfirmRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ChargeFeeToLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/debits'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary debitLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     */
    public debitLawfirmFeeUsingPOST (lawfirmFeeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirm-fees/{lawfirmFeeId}/debit'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling debitLawfirmFeeUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary deleteLawfirmFeeRecord
     * @param lawfirmFeeId lawfirmFeeId
     */
    public deleteLawfirmFeeRecordUsingDELETE (lawfirmFeeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/fees/{lawfirmFeeId}'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling deleteLawfirmFeeRecordUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary deleteLawfirmPayoutRecord
     * @param lawfirmPayoutId lawfirmPayoutId
     */
    public deleteLawfirmPayoutRecordUsingDELETE (lawfirmPayoutId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/payouts/{lawfirmPayoutId}'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling deleteLawfirmPayoutRecordUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary executeLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     */
    public executeLawfirmPayoutUsingPOST (lawfirmPayoutId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirm-payouts/{lawfirmPayoutId}/transfer'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling executeLawfirmPayoutUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmFees
     * @param caseId caseId
     */
    public getLawfirmFeesUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmFeesResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/lawfirm-fees'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmFeesUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmFinancialTransactions
     * @param lawfirmId lawfirmId
     * @param length length
     * @param page page
     */
    public getLawfirmFinancialTransactionsUsingGET (lawfirmId: number, length?: number, page?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmFinancialTransactionsResponse> {
        const localVarPath = this.basePath + '/api/v2/lawfirms/{lawfirmId}/transactions'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmFinancialTransactionsUsingGET.');
        }

        if (length !== undefined) {
            queryParameters['length'] = length;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmPayoutReversals
     * @param caseId caseId
     */
    public getLawfirmPayoutReversalsUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmPayoutReversalsResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/reversals'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmPayoutReversalsUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmPayouts
     * @param caseId caseId
     */
    public getLawfirmPayoutsUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmPayoutsResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/payouts'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmPayoutsUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmTransactionsForCase
     * @param caseId caseId
     */
    public getLawfirmTransactionsForCaseUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmTransactionsForCaseResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/lawfirm-transactions'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmTransactionsForCaseUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listLawfirmBankPayouts
     * @param includeTransactions includeTransactions 
     * @param index index
     * @param lawfirmId lawfirmId
     * @param size size
     */
    public listLawfirmBankPayoutsUsingGET (includeTransactions: boolean, index: number, lawfirmId: number, size?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ListLawfirmBankPayoutsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/bank-payouts'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'includeTransactions' is not null or undefined
        if (includeTransactions === null || includeTransactions === undefined) {
            throw new Error('Required parameter includeTransactions was null or undefined when calling listLawfirmBankPayoutsUsingGET.');
        }

        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling listLawfirmBankPayoutsUsingGET.');
        }

        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling listLawfirmBankPayoutsUsingGET.');
        }

        if (includeTransactions !== undefined) {
            queryParameters['includeTransactions '] = includeTransactions;
        }

        if (index !== undefined) {
            queryParameters['index'] = index;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary refundLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     * @param request request
     */
    public refundLawfirmFeeUsingPOST (lawfirmFeeId: string, request: models.RefundLawfirmFeeRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirm-fee/{lawfirmFeeId}/refund'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling refundLawfirmFeeUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling refundLawfirmFeeUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary reverseLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     * @param request request
     */
    public reverseLawfirmPayoutUsingPOST (lawfirmPayoutId: string, request: models.ReverseLawfirmPayoutRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirm-payouts/{lawfirmPayoutId}/reverse'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary sendPayoutToLawfirm
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public sendPayoutToLawfirmUsingPOST (lawfirmId: number, request: models.SendPayoutToLawfirmRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SendPayoutToLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/payouts'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     * @param request request
     */
    public updateLawfirmFeeUsingPUT (lawfirmFeeId: string, request: models.UpdateLawfirmFeeRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UpdateLawfirmFeeResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirm-fees/{lawfirmFeeId}'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling updateLawfirmFeeUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmFeeUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     * @param request request
     */
    public updateLawfirmPayoutUsingPUT (lawfirmPayoutId: string, request: models.UpdateLawfirmPayoutRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UpdateLawfirmPayoutResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirm-payouts/{lawfirmPayoutId}'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling updateLawfirmPayoutUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmPayoutUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
