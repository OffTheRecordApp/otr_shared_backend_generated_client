"use strict";
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressControllerApi = void 0;
/* tslint:disable:no-unused-variable member-ordering */
var AddressControllerApi = /** @class */ (function () {
    function AddressControllerApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary getCountryList
     */
    AddressControllerApi.prototype.getCountryListUsingGET = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/countries';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getCountryRegions
     * @param countryCode countryCode
     */
    AddressControllerApi.prototype.getCountryRegionsUsingGET = function (countryCode, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/countries/{countryCode}/regions'
            .replace('{' + 'countryCode' + '}', encodeURIComponent(String(countryCode)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'countryCode' is not null or undefined
        if (countryCode === null || countryCode === undefined) {
            throw new Error('Required parameter countryCode was null or undefined when calling getCountryRegionsUsingGET.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getLocation
     * @param zipCode zipCode
     * @param countryCode countryCode
     */
    AddressControllerApi.prototype.getLocationUsingGET = function (zipCode, countryCode, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/locations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'zipCode' is not null or undefined
        if (zipCode === null || zipCode === undefined) {
            throw new Error('Required parameter zipCode was null or undefined when calling getLocationUsingGET.');
        }
        if (countryCode !== undefined) {
            queryParameters['countryCode'] = countryCode;
        }
        if (zipCode !== undefined) {
            queryParameters['zipCode'] = zipCode;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    AddressControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return AddressControllerApi;
}());
exports.AddressControllerApi = AddressControllerApi;
