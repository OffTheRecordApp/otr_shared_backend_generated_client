/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class ViolationControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary addViolation
     * @param isLive isLive
     * @param request request
     */
    addViolationUsingPOST(isLive, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/violations';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'isLive' is not null or undefined
        if (isLive === null || isLive === undefined) {
            throw new Error('Required parameter isLive was null or undefined when calling addViolationUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling addViolationUsingPOST.');
        }
        if (isLive !== undefined) {
            queryParameters['isLive'] = isLive;
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteViolation
     * @param violationId violationId
     */
    deleteViolationUsingDELETE(violationId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/violations/{violationId}'
            .replace('{' + 'violationId' + '}', encodeURIComponent(String(violationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'violationId' is not null or undefined
        if (violationId === null || violationId === undefined) {
            throw new Error('Required parameter violationId was null or undefined when calling deleteViolationUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getRegionsWithViolations
     */
    getRegionsWithViolationsUsingGET(extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/violations/region-availability';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getTrafficViolationTypes
     * @param audience audience
     * @param flavor flavor
     * @param includePenalties includePenalties
     * @param state state
     */
    getTrafficViolationTypesUsingGET(audience, flavor, includePenalties, state, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/violations';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (audience !== undefined) {
            queryParameters['audience'] = audience;
        }
        if (flavor !== undefined) {
            queryParameters['flavor'] = flavor;
        }
        if (includePenalties !== undefined) {
            queryParameters['includePenalties'] = includePenalties;
        }
        if (state !== undefined) {
            queryParameters['state'] = state;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listViolationClassifications
     * @param regionCode regionCode
     */
    listViolationClassificationsUsingGET(regionCode, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/violations/classifications';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (regionCode !== undefined) {
            queryParameters['regionCode'] = regionCode;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateViolation
     * @param violationId violationId
     * @param request request
     */
    updateViolationUsingPUT(violationId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/violations/{violationId}'
            .replace('{' + 'violationId' + '}', encodeURIComponent(String(violationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'violationId' is not null or undefined
        if (violationId === null || violationId === undefined) {
            throw new Error('Required parameter violationId was null or undefined when calling updateViolationUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateViolationUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
ViolationControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
