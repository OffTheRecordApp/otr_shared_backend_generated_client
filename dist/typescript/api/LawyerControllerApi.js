/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class LawyerControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary cancelLawyerInvite
     * @param inviteeEmail inviteeEmail
     * @param userId userId
     */
    cancelLawyerInviteUsingDELETE(inviteeEmail, userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers/{userId}/invite'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'inviteeEmail' is not null or undefined
        if (inviteeEmail === null || inviteeEmail === undefined) {
            throw new Error('Required parameter inviteeEmail was null or undefined when calling cancelLawyerInviteUsingDELETE.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling cancelLawyerInviteUsingDELETE.');
        }
        if (inviteeEmail !== undefined) {
            queryParameters['inviteeEmail'] = inviteeEmail;
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteLawyerLicenses
     * @param userId userId
     * @param request request
     */
    deleteLawyerLicensesUsingDELETE(userId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers/{userId}/licenses'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteLawyer
     * @param userId userId
     * @param removeAdminOnly removeAdminOnly
     */
    deleteLawyerUsingDELETE(userId, removeAdminOnly, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers/{userId}'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteLawyerUsingDELETE.');
        }
        if (removeAdminOnly !== undefined) {
            queryParameters['removeAdminOnly'] = removeAdminOnly;
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLawyerEmailGuesses
     * @param lawyerId lawyerId
     */
    getLawyerEmailGuessesUsingGET(lawyerId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers/{lawyerId}/email-guesses'
            .replace('{' + 'lawyerId' + '}', encodeURIComponent(String(lawyerId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawyerId' is not null or undefined
        if (lawyerId === null || lawyerId === undefined) {
            throw new Error('Required parameter lawyerId was null or undefined when calling getLawyerEmailGuessesUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLawyer
     * @param userId userId
     */
    getLawyerUsingGET(userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers/{userId}'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getLawyerUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary inviteLawyerToLawfirm
     * @param lawfirmId lawfirmId
     * @param userId userId
     * @param request request
     */
    inviteLawyerToLawfirmUsingPOST(lawfirmId, userId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/lawyers/{userId}/invite'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)))
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling inviteLawyerToLawfirmUsingPOST.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling inviteLawyerToLawfirmUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling inviteLawyerToLawfirmUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary saveLawyerLead
     * @param request request
     */
    saveLawyerLeadUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers/lead';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveLawyerLeadUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary saveLawyerLicenses
     * @param userId userId
     * @param request request
     */
    saveLawyerLicensesUsingPOST(userId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers/{userId}/licenses'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveLawyerLicensesUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveLawyerLicensesUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary upsertLawyer
     * @param request request
     */
    upsertLawyerUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawyers';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling upsertLawyerUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
LawyerControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
