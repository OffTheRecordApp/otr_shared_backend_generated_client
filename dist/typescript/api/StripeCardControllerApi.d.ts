/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="angular" />
import * as models from '../model/models';
export declare class StripeCardControllerApi {
    protected $http: ng.IHttpService;
    protected $httpParamSerializer?: (d: any) => any;
    protected basePath: string;
    defaultHeaders: any;
    static $inject: string[];
    constructor($http: ng.IHttpService, $httpParamSerializer?: (d: any) => any, basePath?: string);
    /**
     *
     * @summary addACHToLawfirmStripeAccount
     * @param lawfirmId lawfirmId
     * @param request request
     */
    addACHToLawfirmStripeAccountUsingPOST(lawfirmId: string, request: models.AddACHToStripeAccountRequest, extraHttpRequestParams?: any): ng.IHttpPromise<object>;
    /**
     *
     * @summary addACHToUserStripeAccount
     * @param userId userId
     * @param request request
     */
    addACHToUserStripeAccountUsingPOST(userId: string, request: models.AddACHToStripeAccountRequest, extraHttpRequestParams?: any): ng.IHttpPromise<object>;
    /**
     *
     * @summary addCardToStripeAccount
     * @param request request
     */
    addCardToStripeAccountUsingPOST(request: models.AddCardToStripeAccountRequest, extraHttpRequestParams?: any): ng.IHttpPromise<models.AddCardToStripeAccountResponse>;
    /**
     *
     * @summary deleteBankAccountFromLawfirmStripeAccount
     * @param bankAccountId bankAccountId
     * @param lawfirmId lawfirmId
     */
    deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId: string, lawfirmId: number, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary deleteCardForUser
     * @param cardId cardId
     * @param userId userId
     */
    deleteCardForUserUsingDELETE(cardId: string, userId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.StripeCardDomain>;
    /**
     *
     * @summary deleteCard
     * @param cardId cardId
     */
    deleteCardUsingDELETE(cardId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.StripeCardDomain>;
    /**
     *
     * @summary getCard
     * @param cardId cardId
     */
    getCardUsingGET(cardId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.StripeCardDomain>;
    /**
     *
     * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
     * @param lawfirmId lawfirmId
     */
    getLawfirmPaymentMethodsUsingGET(lawfirmId: number, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetLawfirmPaymentMethodsResponse>;
    /**
     *
     * @summary Retrieves all the payment methods available on the user\'s Stripe account.
     * @param userIdString userIdString
     */
    getPaymentMethodsForUserUsingGET(userIdString: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetPaymentMethodsForUserResponse>;
    /**
     *
     * @summary setCardAsPrimary
     * @param cardId cardId
     * @param userId userId
     */
    setCardAsPrimaryUsingPUT(cardId: string, userId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary setDefaultPaymentMethodForLawfirm
     * @param lawfirmId lawfirmId
     * @param stripePaymentSourceId stripePaymentSourceId
     */
    setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId: number, stripePaymentSourceId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
}
