"use strict";
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoachingCardsControllerApi = void 0;
/* tslint:disable:no-unused-variable member-ordering */
var CoachingCardsControllerApi = /** @class */ (function () {
    function CoachingCardsControllerApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary acknowledgeCoachingCard
     * @param request request
     */
    CoachingCardsControllerApi.prototype.acknowledgeCoachingCardUsingPUT = function (request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/api/v1/coaching-cards/acknowledge';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling acknowledgeCoachingCardUsingPUT.');
        }
        var httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getCoachingCardCategories
     */
    CoachingCardsControllerApi.prototype.getCoachingCardCategoriesUsingGET = function (extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/api/v1/coaching-cards/categories';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary listUserCoachingCards
     * @param userId userId
     * @param includeCreated includeCreated
     * @param includeReceived includeReceived
     */
    CoachingCardsControllerApi.prototype.listUserCoachingCardsUsingGET = function (userId, includeCreated, includeReceived, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/coaching-cards/{userId}/cards'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listUserCoachingCardsUsingGET.');
        }
        if (includeCreated !== undefined) {
            queryParameters['includeCreated'] = includeCreated;
        }
        if (includeReceived !== undefined) {
            queryParameters['includeReceived'] = includeReceived;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary saveCoachingCard
     * @param request request
     */
    CoachingCardsControllerApi.prototype.saveCoachingCardUsingPOST = function (request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/coaching-cards/cards';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveCoachingCardUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    CoachingCardsControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return CoachingCardsControllerApi;
}());
exports.CoachingCardsControllerApi = CoachingCardsControllerApi;
