"use strict";
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CasePaymentControllerApi = void 0;
/* tslint:disable:no-unused-variable member-ordering */
var CasePaymentControllerApi = /** @class */ (function () {
    function CasePaymentControllerApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary authorizeChargeForCasePayment
     * @param caseId caseId
     * @param casePaymentId casePaymentId
     * @param request request
     */
    CasePaymentControllerApi.prototype.authorizeChargeForCasePaymentUsingPOST = function (caseId, casePaymentId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/payments/{casePaymentId}/authorize'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'casePaymentId' + '}', encodeURIComponent(String(casePaymentId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling authorizeChargeForCasePaymentUsingPOST.');
        }
        // verify required parameter 'casePaymentId' is not null or undefined
        if (casePaymentId === null || casePaymentId === undefined) {
            throw new Error('Required parameter casePaymentId was null or undefined when calling authorizeChargeForCasePaymentUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary captureChargeFromCasePayment
     * @param caseId caseId
     * @param casePaymentId casePaymentId
     * @param request request
     */
    CasePaymentControllerApi.prototype.captureChargeFromCasePaymentUsingPOST = function (caseId, casePaymentId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/payments/{casePaymentId}/capture'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'casePaymentId' + '}', encodeURIComponent(String(casePaymentId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling captureChargeFromCasePaymentUsingPOST.');
        }
        // verify required parameter 'casePaymentId' is not null or undefined
        if (casePaymentId === null || casePaymentId === undefined) {
            throw new Error('Required parameter casePaymentId was null or undefined when calling captureChargeFromCasePaymentUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary deleteCasePayment
     * @param caseId caseId
     * @param casePaymentId casePaymentId
     */
    CasePaymentControllerApi.prototype.deleteCasePaymentUsingDELETE = function (caseId, casePaymentId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/payments/{casePaymentId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'casePaymentId' + '}', encodeURIComponent(String(casePaymentId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling deleteCasePaymentUsingDELETE.');
        }
        // verify required parameter 'casePaymentId' is not null or undefined
        if (casePaymentId === null || casePaymentId === undefined) {
            throw new Error('Required parameter casePaymentId was null or undefined when calling deleteCasePaymentUsingDELETE.');
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary generateCasePaymentPlan
     * @param caseId caseId
     * @param paymentPlanTypeId paymentPlanTypeId
     * @param period period
     * @param productId productId
     */
    CasePaymentControllerApi.prototype.generateCasePaymentPlanUsingGET = function (caseId, paymentPlanTypeId, period, productId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/payment-plans/{paymentPlanTypeId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'paymentPlanTypeId' + '}', encodeURIComponent(String(paymentPlanTypeId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling generateCasePaymentPlanUsingGET.');
        }
        // verify required parameter 'paymentPlanTypeId' is not null or undefined
        if (paymentPlanTypeId === null || paymentPlanTypeId === undefined) {
            throw new Error('Required parameter paymentPlanTypeId was null or undefined when calling generateCasePaymentPlanUsingGET.');
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (productId !== undefined) {
            queryParameters['productId'] = productId;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getAvailablePaymentPlans
     * @param lawfirmId lawfirmId
     * @param legalFeeInCents legalFeeInCents
     * @param state state
     */
    CasePaymentControllerApi.prototype.getAvailablePaymentPlansUsingPOST = function (lawfirmId, legalFeeInCents, state, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/payment-plans/{lawfirmId}/case-payment'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
        }
        // verify required parameter 'legalFeeInCents' is not null or undefined
        if (legalFeeInCents === null || legalFeeInCents === undefined) {
            throw new Error('Required parameter legalFeeInCents was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
        }
        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
        }
        if (legalFeeInCents !== undefined) {
            queryParameters['legalFeeInCents'] = legalFeeInCents;
        }
        if (state !== undefined) {
            queryParameters['state'] = state;
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getCasePayments
     * @param caseId caseId
     */
    CasePaymentControllerApi.prototype.getCasePaymentsUsingGET = function (caseId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/payments'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getCasePaymentsUsingGET.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getPaymentPlanOptions
     * @param caseId caseId
     * @param feeInCents feeInCents
     * @param lawfirmId lawfirmId
     * @param userId userId
     */
    CasePaymentControllerApi.prototype.getPaymentPlanOptionsUsingGET = function (caseId, feeInCents, lawfirmId, userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/payment-plans'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getPaymentPlanOptionsUsingGET.');
        }
        // verify required parameter 'feeInCents' is not null or undefined
        if (feeInCents === null || feeInCents === undefined) {
            throw new Error('Required parameter feeInCents was null or undefined when calling getPaymentPlanOptionsUsingGET.');
        }
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getPaymentPlanOptionsUsingGET.');
        }
        if (feeInCents !== undefined) {
            queryParameters['feeInCents'] = feeInCents;
        }
        if (lawfirmId !== undefined) {
            queryParameters['lawfirmId'] = lawfirmId;
        }
        if (userId !== undefined) {
            queryParameters['userId'] = userId;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getStripeCharge
     * @param caseId caseId
     * @param stripeChargeId stripeChargeId
     */
    CasePaymentControllerApi.prototype.getStripeChargeUsingGET = function (caseId, stripeChargeId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/charges/{stripeChargeId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'stripeChargeId' + '}', encodeURIComponent(String(stripeChargeId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getStripeChargeUsingGET.');
        }
        // verify required parameter 'stripeChargeId' is not null or undefined
        if (stripeChargeId === null || stripeChargeId === undefined) {
            throw new Error('Required parameter stripeChargeId was null or undefined when calling getStripeChargeUsingGET.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getStripeCharges
     * @param caseId caseId
     */
    CasePaymentControllerApi.prototype.getStripeChargesUsingGET = function (caseId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/stripe-charges'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getStripeChargesUsingGET.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary listCostItemsForAttorney
     * @param caseId caseId
     */
    CasePaymentControllerApi.prototype.listCostItemsForAttorneyUsingGET = function (caseId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/attorney/cost'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling listCostItemsForAttorneyUsingGET.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary listCostItemsForCustomer
     * @param caseId caseId
     * @param period period
     * @param productId productId
     */
    CasePaymentControllerApi.prototype.listCostItemsForCustomerUsingGET = function (caseId, period, productId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/customer/cost'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling listCostItemsForCustomerUsingGET.');
        }
        if (period !== undefined) {
            queryParameters['period'] = period;
        }
        if (productId !== undefined) {
            queryParameters['productId'] = productId;
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary scheduleNewPayment
     * @param caseId caseId
     * @param request request
     */
    CasePaymentControllerApi.prototype.scheduleNewPaymentUsingPOST = function (caseId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/cases/{caseId}/payments'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling scheduleNewPaymentUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling scheduleNewPaymentUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary updateCasePayment
     * @param casePaymentId casePaymentId
     * @param request request
     */
    CasePaymentControllerApi.prototype.updateCasePaymentUsingPUT = function (casePaymentId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/payments/{casePaymentId}'
            .replace('{' + 'casePaymentId' + '}', encodeURIComponent(String(casePaymentId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'casePaymentId' is not null or undefined
        if (casePaymentId === null || casePaymentId === undefined) {
            throw new Error('Required parameter casePaymentId was null or undefined when calling updateCasePaymentUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateCasePaymentUsingPUT.');
        }
        var httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary updatePaymentDueDate
     * @param casePaymentId casePaymentId
     * @param request request
     */
    CasePaymentControllerApi.prototype.updatePaymentDueDateUsingPUT = function (casePaymentId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/payments/{casePaymentId}/due-date'
            .replace('{' + 'casePaymentId' + '}', encodeURIComponent(String(casePaymentId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'casePaymentId' is not null or undefined
        if (casePaymentId === null || casePaymentId === undefined) {
            throw new Error('Required parameter casePaymentId was null or undefined when calling updatePaymentDueDateUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updatePaymentDueDateUsingPUT.');
        }
        var httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary updatePaymentRecipient
     * @param casePaymentId casePaymentId
     * @param recipient recipient
     */
    CasePaymentControllerApi.prototype.updatePaymentRecipientUsingPUT = function (casePaymentId, recipient, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/payments/{casePaymentId}/owner'
            .replace('{' + 'casePaymentId' + '}', encodeURIComponent(String(casePaymentId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'casePaymentId' is not null or undefined
        if (casePaymentId === null || casePaymentId === undefined) {
            throw new Error('Required parameter casePaymentId was null or undefined when calling updatePaymentRecipientUsingPUT.');
        }
        // verify required parameter 'recipient' is not null or undefined
        if (recipient === null || recipient === undefined) {
            throw new Error('Required parameter recipient was null or undefined when calling updatePaymentRecipientUsingPUT.');
        }
        if (recipient !== undefined) {
            queryParameters['recipient'] = recipient;
        }
        var httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    CasePaymentControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return CasePaymentControllerApi;
}());
exports.CasePaymentControllerApi = CasePaymentControllerApi;
