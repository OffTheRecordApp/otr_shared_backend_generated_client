/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class CaseUserControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary deleteCaseUser
     * @param caseId caseId
     * @param caseUsersId caseUsersId
     */
    deleteCaseUserUsingDELETE(caseId, caseUsersId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/case-users/{caseUsersId}/cases/{caseId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'caseUsersId' + '}', encodeURIComponent(String(caseUsersId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling deleteCaseUserUsingDELETE.');
        }
        // verify required parameter 'caseUsersId' is not null or undefined
        if (caseUsersId === null || caseUsersId === undefined) {
            throw new Error('Required parameter caseUsersId was null or undefined when calling deleteCaseUserUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCaseUsersByCase
     * @param caseId caseId
     * @param getRemovedUsers getRemovedUsers
     */
    getCaseUsersByCaseUsingGET(caseId, getRemovedUsers, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/users'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getCaseUsersByCaseUsingGET.');
        }
        if (getRemovedUsers !== undefined) {
            queryParameters['getRemovedUsers'] = getRemovedUsers;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listDashboardCaseUsers
     * @param userId userId
     * @param isDefendant isDefendant
     * @param limit limit
     */
    listDashboardCaseUsersUsingGET(userId, isDefendant, limit, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}/case_users'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listDashboardCaseUsersUsingGET.');
        }
        if (isDefendant !== undefined) {
            queryParameters['isDefendant'] = isDefendant;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary saveCaseUser
     * @param caseId caseId
     * @param request request
     */
    saveCaseUserUsingPOST(caseId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/users'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling saveCaseUserUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveCaseUserUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
CaseUserControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
