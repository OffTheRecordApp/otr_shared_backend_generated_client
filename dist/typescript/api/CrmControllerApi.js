/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class CrmControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary generateTemplate
     * @param request request
     */
    generateTemplateUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/generate-template';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling generateTemplateUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getOutgoingContacts
     * @param recipientEmailAddress recipientEmailAddress
     */
    getOutgoingContactsUsingGET(recipientEmailAddress, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/contacts';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'recipientEmailAddress' is not null or undefined
        if (recipientEmailAddress === null || recipientEmailAddress === undefined) {
            throw new Error('Required parameter recipientEmailAddress was null or undefined when calling getOutgoingContactsUsingGET.');
        }
        if (recipientEmailAddress !== undefined) {
            queryParameters['recipientEmailAddress'] = recipientEmailAddress;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getTemplates
     * @param category category
     */
    getTemplatesUsingGET(category, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/templates';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (category !== undefined) {
            queryParameters['category'] = category;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary replyToTicket
     * @param ticketId ticketId
     * @param request request
     */
    replyToTicketUsingPOST(ticketId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/ticket/{ticketId}/reply'
            .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error('Required parameter ticketId was null or undefined when calling replyToTicketUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling replyToTicketUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary sendBookingReceipt
     * @param request request
     */
    sendBookingReceiptUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/booking-receipt';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling sendBookingReceiptUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary sendConsolidatedEmailToUser
     * @param request request
     */
    sendConsolidatedEmailToUserUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/user/consolidate-email';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling sendConsolidatedEmailToUserUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary sendEmailToUser
     * @param request request
     */
    sendEmailToUserUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/user/email';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling sendEmailToUserUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary sendEmailToUsers
     * @param request request
     */
    sendEmailToUsersUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/crm/users/email';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling sendEmailToUsersUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
CrmControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
