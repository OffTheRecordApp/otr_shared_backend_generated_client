/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class LawfirmTransactionsControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary chargeFeeToLawfirm
     * @param lawfirmId lawfirmId
     * @param request request
     */
    chargeFeeToLawfirmUsingPOST(lawfirmId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/debits'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary debitLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     */
    debitLawfirmFeeUsingPOST(lawfirmFeeId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirm-fees/{lawfirmFeeId}/debit'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling debitLawfirmFeeUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteLawfirmFeeRecord
     * @param lawfirmFeeId lawfirmFeeId
     */
    deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirms/fees/{lawfirmFeeId}'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling deleteLawfirmFeeRecordUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteLawfirmPayoutRecord
     * @param lawfirmPayoutId lawfirmPayoutId
     */
    deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirms/payouts/{lawfirmPayoutId}'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling deleteLawfirmPayoutRecordUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary executeLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     */
    executeLawfirmPayoutUsingPOST(lawfirmPayoutId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirm-payouts/{lawfirmPayoutId}/transfer'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling executeLawfirmPayoutUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLawfirmFees
     * @param caseId caseId
     */
    getLawfirmFeesUsingGET(caseId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/lawfirm-fees'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmFeesUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLawfirmFinancialTransactions
     * @param lawfirmId lawfirmId
     * @param length length
     * @param page page
     */
    getLawfirmFinancialTransactionsUsingGET(lawfirmId, length, page, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v2/lawfirms/{lawfirmId}/transactions'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmFinancialTransactionsUsingGET.');
        }
        if (length !== undefined) {
            queryParameters['length'] = length;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLawfirmPayoutReversals
     * @param caseId caseId
     */
    getLawfirmPayoutReversalsUsingGET(caseId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/reversals'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmPayoutReversalsUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLawfirmPayouts
     * @param caseId caseId
     */
    getLawfirmPayoutsUsingGET(caseId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/payouts'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmPayoutsUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLawfirmTransactionsForCase
     * @param caseId caseId
     */
    getLawfirmTransactionsForCaseUsingGET(caseId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/lawfirm-transactions'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getLawfirmTransactionsForCaseUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listLawfirmBankPayouts
     * @param includeTransactions includeTransactions
     * @param index index
     * @param lawfirmId lawfirmId
     * @param size size
     */
    listLawfirmBankPayoutsUsingGET(includeTransactions, index, lawfirmId, size, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/bank-payouts'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'includeTransactions' is not null or undefined
        if (includeTransactions === null || includeTransactions === undefined) {
            throw new Error('Required parameter includeTransactions was null or undefined when calling listLawfirmBankPayoutsUsingGET.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling listLawfirmBankPayoutsUsingGET.');
        }
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling listLawfirmBankPayoutsUsingGET.');
        }
        if (includeTransactions !== undefined) {
            queryParameters['includeTransactions '] = includeTransactions;
        }
        if (index !== undefined) {
            queryParameters['index'] = index;
        }
        if (size !== undefined) {
            queryParameters['size'] = size;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary refundLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     * @param request request
     */
    refundLawfirmFeeUsingPOST(lawfirmFeeId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirm-fee/{lawfirmFeeId}/refund'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling refundLawfirmFeeUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling refundLawfirmFeeUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary reverseLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     * @param request request
     */
    reverseLawfirmPayoutUsingPOST(lawfirmPayoutId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirm-payouts/{lawfirmPayoutId}/reverse'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary sendPayoutToLawfirm
     * @param lawfirmId lawfirmId
     * @param request request
     */
    sendPayoutToLawfirmUsingPOST(lawfirmId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/payouts'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     * @param request request
     */
    updateLawfirmFeeUsingPUT(lawfirmFeeId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirm-fees/{lawfirmFeeId}'
            .replace('{' + 'lawfirmFeeId' + '}', encodeURIComponent(String(lawfirmFeeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmFeeId' is not null or undefined
        if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
            throw new Error('Required parameter lawfirmFeeId was null or undefined when calling updateLawfirmFeeUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmFeeUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     * @param request request
     */
    updateLawfirmPayoutUsingPUT(lawfirmPayoutId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/lawfirm-payouts/{lawfirmPayoutId}'
            .replace('{' + 'lawfirmPayoutId' + '}', encodeURIComponent(String(lawfirmPayoutId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmPayoutId' is not null or undefined
        if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
            throw new Error('Required parameter lawfirmPayoutId was null or undefined when calling updateLawfirmPayoutUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmPayoutUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
LawfirmTransactionsControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
