/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class ReferralCodeControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary Only for admins. This will approve and activate a given referral code
     * @param codeId codeId
     */
    approveReferralCodeUsingPUT(codeId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/referrals/codes/{codeId}/approve'
            .replace('{' + 'codeId' + '}', encodeURIComponent(String(codeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'codeId' is not null or undefined
        if (codeId === null || codeId === undefined) {
            throw new Error('Required parameter codeId was null or undefined when calling approveReferralCodeUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
     * @param request request
     */
    generateReferralCodeUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/referrals/codes';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling generateReferralCodeUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getReferralCode
     * @param codeId codeId
     */
    getReferralCodeUsingGET(codeId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/referrals/codes/{codeId}'
            .replace('{' + 'codeId' + '}', encodeURIComponent(String(codeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'codeId' is not null or undefined
        if (codeId === null || codeId === undefined) {
            throw new Error('Required parameter codeId was null or undefined when calling getReferralCodeUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getReferralCodes
     * @param isActive isActive
     */
    getReferralCodesUsingGET(isActive, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/referrals/codes';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (isActive !== undefined) {
            queryParameters['isActive'] = isActive;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary markCodeAsInactive
     * @param codeId codeId
     */
    markCodeAsInactiveUsingDELETE(codeId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/referrals/codes/{codeId}'
            .replace('{' + 'codeId' + '}', encodeURIComponent(String(codeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'codeId' is not null or undefined
        if (codeId === null || codeId === undefined) {
            throw new Error('Required parameter codeId was null or undefined when calling markCodeAsInactiveUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
     * @param codeId codeId
     */
    validateReferralCodeUsingGET(codeId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/referrals/codes/{codeId}/validate'
            .replace('{' + 'codeId' + '}', encodeURIComponent(String(codeId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'codeId' is not null or undefined
        if (codeId === null || codeId === undefined) {
            throw new Error('Required parameter codeId was null or undefined when calling validateReferralCodeUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
ReferralCodeControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
