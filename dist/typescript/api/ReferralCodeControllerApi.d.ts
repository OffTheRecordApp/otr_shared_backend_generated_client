/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as models from '../model/models';
export declare class ReferralCodeControllerApi {
    protected $http: ng.IHttpService;
    protected $httpParamSerializer?: (d: any) => any;
    protected basePath: string;
    defaultHeaders: any;
    static $inject: string[];
    constructor($http: ng.IHttpService, $httpParamSerializer?: (d: any) => any, basePath?: string);
    /**
     *
     * @summary Only for admins. This will approve and activate a given referral code
     * @param codeId codeId
     */
    approveReferralCodeUsingPUT(codeId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
     * @param request request
     */
    generateReferralCodeUsingPOST(request: models.CreateReferralCodeRequest, extraHttpRequestParams?: any): ng.IHttpPromise<models.CreateReferralCodeResponse>;
    /**
     *
     * @summary getReferralCode
     * @param codeId codeId
     */
    getReferralCodeUsingGET(codeId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetReferralCodeResponse>;
    /**
     *
     * @summary getReferralCodes
     * @param isActive isActive
     */
    getReferralCodesUsingGET(isActive?: boolean, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetReferralCodesResponse>;
    /**
     *
     * @summary markCodeAsInactive
     * @param codeId codeId
     */
    markCodeAsInactiveUsingDELETE(codeId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
     * @param codeId codeId
     */
    validateReferralCodeUsingGET(codeId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetReferralCodeResponse>;
}
