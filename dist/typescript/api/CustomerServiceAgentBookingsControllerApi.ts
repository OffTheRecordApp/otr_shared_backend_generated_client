/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class CustomerServiceAgentBookingsControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary deleteAgentBooking
     * @param agentBookingId agentBookingId
     */
    public deleteAgentBookingUsingDELETE (agentBookingId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/cs-agent-bookings/{agentBookingId}'
            .replace('{' + 'agentBookingId' + '}', encodeURIComponent(String(agentBookingId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'agentBookingId' is not null or undefined
        if (agentBookingId === null || agentBookingId === undefined) {
            throw new Error('Required parameter agentBookingId was null or undefined when calling deleteAgentBookingUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listAgentBookings
     * @param agentTeam agentTeam
     * @param agentUserId agentUserId
     * @param caseStatus caseStatus
     * @param channel channel
     * @param direction direction
     * @param endDate endDate
     * @param length length
     * @param offset offset
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param startDate startDate
     * @param state state
     * @param statusCategory statusCategory
     * @param timeZoneId timeZoneId
     */
    public listAgentBookingsUsingGET (agentTeam?: string, agentUserId?: number, caseStatus?: string, channel?: string, direction?: string, endDate?: string, length?: number, offset?: number, sortBy?: string, sortOrder?: string, startDate?: string, state?: string, statusCategory?: string, timeZoneId?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ListAgentBookingsResponse> {
        const localVarPath = this.basePath + '/api/v1/cs-agent-bookings';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (agentTeam !== undefined) {
            queryParameters['agentTeam'] = agentTeam;
        }

        if (agentUserId !== undefined) {
            queryParameters['agentUserId'] = agentUserId;
        }

        if (caseStatus !== undefined) {
            queryParameters['caseStatus'] = caseStatus;
        }

        if (channel !== undefined) {
            queryParameters['channel'] = channel;
        }

        if (direction !== undefined) {
            queryParameters['direction'] = direction;
        }

        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }

        if (length !== undefined) {
            queryParameters['length'] = length;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (sortBy !== undefined) {
            queryParameters['sortBy'] = sortBy;
        }

        if (sortOrder !== undefined) {
            queryParameters['sortOrder'] = sortOrder;
        }

        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }

        if (state !== undefined) {
            queryParameters['state'] = state;
        }

        if (statusCategory !== undefined) {
            queryParameters['statusCategory'] = statusCategory;
        }

        if (timeZoneId !== undefined) {
            queryParameters['timeZoneId'] = timeZoneId;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary saveAgentBooking
     * @param request request
     */
    public saveAgentBookingUsingPOST (request: models.SaveAgentBookingRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SaveAgentBookingResponse> {
        const localVarPath = this.basePath + '/api/v1/cs-agent-bookings';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveAgentBookingUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
