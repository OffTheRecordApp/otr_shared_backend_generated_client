/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class UserControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary findChargeDisputesByUserId
     * @param userId userId
     */
    findChargeDisputesByUserIdUsingGET(userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}/disputes'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling findChargeDisputesByUserIdUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCurrentUserInfo
     * @param isAdmin isAdmin
     * @param serviceProviderId serviceProviderId
     */
    getCurrentUserInfoUsingGET(isAdmin, serviceProviderId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/user';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (isAdmin !== undefined) {
            queryParameters['isAdmin'] = isAdmin;
        }
        if (serviceProviderId !== undefined) {
            queryParameters['serviceProviderId'] = serviceProviderId;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getOverduePayments
     * @param userId userId
     */
    getOverduePaymentsUsingGET(userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}/overdue-payments'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getOverduePaymentsUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getSupportTicketsForUser
     * @param email email
     * @param limit limit
     */
    getSupportTicketsForUserUsingGET(email, limit, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{email}/support-tickets'
            .replace('{' + 'email' + '}', encodeURIComponent(String(email)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling getSupportTicketsForUserUsingGET.');
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getUserDetails
     * @param userIdString userIdString
     */
    getUserDetailsUsingGET(userIdString, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userIdString}'
            .replace('{' + 'userIdString' + '}', encodeURIComponent(String(userIdString)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userIdString' is not null or undefined
        if (userIdString === null || userIdString === undefined) {
            throw new Error('Required parameter userIdString was null or undefined when calling getUserDetailsUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getUserStripeAccount
     * @param userId userId
     */
    getUserStripeAccountUsingGET(userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}/stripe/account'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserStripeAccountUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary isUserLoggedIn
     */
    isUserLoggedInUsingGET(extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/authentication/status';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary logoutUser
     * @param userId userId
     */
    logoutUserUsingDELETE(userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}/logout'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling logoutUserUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary removeUser
     * @param userId userId
     */
    removeUserUsingDELETE(userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeUserUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary reviveUser
     * @param userId userId
     */
    reviveUserUsingPUT(userId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}/revive'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling reviveUserUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary sendTextAlert
     * @param userId userId
     * @param sendTextAlertToUserRequest sendTextAlertToUserRequest
     */
    sendTextAlertUsingPOST(userId, sendTextAlertToUserRequest, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}/text-alerts'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling sendTextAlertUsingPOST.');
        }
        // verify required parameter 'sendTextAlertToUserRequest' is not null or undefined
        if (sendTextAlertToUserRequest === null || sendTextAlertToUserRequest === undefined) {
            throw new Error('Required parameter sendTextAlertToUserRequest was null or undefined when calling sendTextAlertUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: sendTextAlertToUserRequest,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateUserProfile
     * @param userId userId
     * @param request request
     */
    updateUserProfileUsingPUT(userId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/{userId}'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUserProfileUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateUserProfileUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateUserRoles
     * @param request request
     */
    updateUserRolesUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/roles';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateUserRolesUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary validateUserByEmail
     * @param email email
     */
    validateUserByEmailUsingGET(email, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/users/validate';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling validateUserByEmailUsingGET.');
        }
        if (email !== undefined) {
            queryParameters['email'] = email;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
UserControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
