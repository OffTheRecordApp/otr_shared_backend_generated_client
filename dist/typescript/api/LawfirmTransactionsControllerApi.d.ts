/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="angular" />
import * as models from '../model/models';
export declare class LawfirmTransactionsControllerApi {
    protected $http: ng.IHttpService;
    protected $httpParamSerializer?: (d: any) => any;
    protected basePath: string;
    defaultHeaders: any;
    static $inject: string[];
    constructor($http: ng.IHttpService, $httpParamSerializer?: (d: any) => any, basePath?: string);
    /**
     *
     * @summary chargeFeeToLawfirm
     * @param lawfirmId lawfirmId
     * @param request request
     */
    chargeFeeToLawfirmUsingPOST(lawfirmId: number, request: models.ChargeFeeToLawfirmRequest, extraHttpRequestParams?: any): ng.IHttpPromise<models.ChargeFeeToLawfirmResponse>;
    /**
     *
     * @summary debitLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     */
    debitLawfirmFeeUsingPOST(lawfirmFeeId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary deleteLawfirmFeeRecord
     * @param lawfirmFeeId lawfirmFeeId
     */
    deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary deleteLawfirmPayoutRecord
     * @param lawfirmPayoutId lawfirmPayoutId
     */
    deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary executeLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     */
    executeLawfirmPayoutUsingPOST(lawfirmPayoutId: string, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary getLawfirmFees
     * @param caseId caseId
     */
    getLawfirmFeesUsingGET(caseId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetLawfirmFeesResponse>;
    /**
     *
     * @summary getLawfirmFinancialTransactions
     * @param lawfirmId lawfirmId
     * @param length length
     * @param page page
     */
    getLawfirmFinancialTransactionsUsingGET(lawfirmId: number, length?: number, page?: number, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetLawfirmFinancialTransactionsResponse>;
    /**
     *
     * @summary getLawfirmPayoutReversals
     * @param caseId caseId
     */
    getLawfirmPayoutReversalsUsingGET(caseId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetLawfirmPayoutReversalsResponse>;
    /**
     *
     * @summary getLawfirmPayouts
     * @param caseId caseId
     */
    getLawfirmPayoutsUsingGET(caseId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetLawfirmPayoutsResponse>;
    /**
     *
     * @summary getLawfirmTransactionsForCase
     * @param caseId caseId
     */
    getLawfirmTransactionsForCaseUsingGET(caseId: string, extraHttpRequestParams?: any): ng.IHttpPromise<models.GetLawfirmTransactionsForCaseResponse>;
    /**
     *
     * @summary refundLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     * @param request request
     */
    refundLawfirmFeeUsingPOST(lawfirmFeeId: string, request: models.RefundLawfirmFeeRequest, extraHttpRequestParams?: any): ng.IHttpPromise<{}>;
    /**
     *
     * @summary reverseLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     * @param request request
     */
    reverseLawfirmPayoutUsingPOST(lawfirmPayoutId: string, request: models.ReverseLawfirmPayoutRequest, extraHttpRequestParams?: any): ng.IHttpPromise<object>;
    /**
     *
     * @summary sendPayoutToLawfirm
     * @param lawfirmId lawfirmId
     * @param request request
     */
    sendPayoutToLawfirmUsingPOST(lawfirmId: number, request: models.SendPayoutToLawfirmRequest, extraHttpRequestParams?: any): ng.IHttpPromise<models.SendPayoutToLawfirmResponse>;
    /**
     *
     * @summary updateLawfirmFee
     * @param lawfirmFeeId lawfirmFeeId
     * @param request request
     */
    updateLawfirmFeeUsingPUT(lawfirmFeeId: string, request: models.UpdateLawfirmFeeRequest, extraHttpRequestParams?: any): ng.IHttpPromise<models.UpdateLawfirmFeeResponse>;
    /**
     *
     * @summary updateLawfirmPayout
     * @param lawfirmPayoutId lawfirmPayoutId
     * @param request request
     */
    updateLawfirmPayoutUsingPUT(lawfirmPayoutId: string, request: models.UpdateLawfirmPayoutRequest, extraHttpRequestParams?: any): ng.IHttpPromise<models.UpdateLawfirmPayoutResponse>;
}
