/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class RecurringBillingControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary cancelBillingSubscription
     * @param id id
     * @param userId userId
     * @param isProrated isProrated
     */
    public cancelBillingSubscriptionUsingDELETE (id: string, userId: string, isProrated?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.CancelBillingSubscriptionResponse> {
        const localVarPath = this.basePath + '/api/v1/billing/{userId}/subscriptions/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
        }

        if (isProrated !== undefined) {
            queryParameters['isProrated'] = isProrated;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary createBillingSubscription
     * @param userId userId
     * @param request request
     */
    public createBillingSubscriptionUsingPOST (userId: number, request: models.CreateBillingSubscriptionRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.CreateBillingSubscriptionResponse> {
        const localVarPath = this.basePath + '/api/v1/billing/{userId}/subscriptions'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling createBillingSubscriptionUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createBillingSubscriptionUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listBillingProducts
     * @param active active
     * @param audience audience
     * @param limit limit
     */
    public listBillingProductsUsingGET (active?: boolean, audience?: string, limit?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ListBillingProductsResponse> {
        const localVarPath = this.basePath + '/api/v1/billing/products';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (active !== undefined) {
            queryParameters['active'] = active;
        }

        if (audience !== undefined) {
            queryParameters['audience'] = audience;
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listBillingSubscriptions
     * @param userId userId
     * @param includeInactive includeInactive
     */
    public listBillingSubscriptionsUsingGET (userId: number, includeInactive?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ListBillingSubscriptionsResponse> {
        const localVarPath = this.basePath + '/api/v1/billing/{userId}/subscriptions'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listBillingSubscriptionsUsingGET.');
        }

        if (includeInactive !== undefined) {
            queryParameters['includeInactive'] = includeInactive;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listSubscriptionInvoices
     * @param id id
     * @param userId userId
     * @param limit limit
     */
    public listSubscriptionInvoicesUsingGET (id: string, userId: number, limit?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ListSubscriptionInvoicesResponse> {
        const localVarPath = this.basePath + '/api/v1/billing/{userId}/subscriptions/{id}/invoices'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listSubscriptionInvoicesUsingGET.');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listSubscriptionInvoicesUsingGET.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
