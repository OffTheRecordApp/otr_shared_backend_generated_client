/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class CaseActionsControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary addActionToCaseV2
     * @param caseId caseId
     * @param request request
     */
    public addActionToCaseV2UsingPOST (caseId: string, request: models.AddActionToCaseRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.AddActionToCaseResponse> {
        const localVarPath = this.basePath + '/api/v2/cases/{caseId}/actions'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling addActionToCaseV2UsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling addActionToCaseV2UsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getActionTimeline
     * @param caseId caseId
     */
    public getActionTimelineUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCaseActionTimelineResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/actions/timeline'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getActionTimelineUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getAllActions
     */
    public getAllActionsUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCaseActionTypesResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/actions';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getCaseActions
     * @param caseId caseId
     * @param showDeleted showDeleted
     */
    public getCaseActionsUsingGET (caseId: string, showDeleted?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCaseActionResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/actions'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getCaseActionsUsingGET.');
        }

        if (showDeleted !== undefined) {
            queryParameters['showDeleted'] = showDeleted;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary markActionAsDeleted
     * @param caseActionId caseActionId
     * @param caseId caseId
     * @param isDeleted isDeleted
     */
    public markActionAsDeletedUsingDELETE (caseActionId: number, caseId: string, isDeleted: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.MarkActionAsDeletedResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/actions/{caseActionId}'
            .replace('{' + 'caseActionId' + '}', encodeURIComponent(String(caseActionId)))
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseActionId' is not null or undefined
        if (caseActionId === null || caseActionId === undefined) {
            throw new Error('Required parameter caseActionId was null or undefined when calling markActionAsDeletedUsingDELETE.');
        }

        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling markActionAsDeletedUsingDELETE.');
        }

        // verify required parameter 'isDeleted' is not null or undefined
        if (isDeleted === null || isDeleted === undefined) {
            throw new Error('Required parameter isDeleted was null or undefined when calling markActionAsDeletedUsingDELETE.');
        }

        if (isDeleted !== undefined) {
            queryParameters['isDeleted'] = isDeleted;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateCaseAction
     * @param caseActionId caseActionId
     * @param caseId caseId
     * @param request request
     */
    public updateCaseActionUsingPUT (caseActionId: number, caseId: string, request: models.UpdateCaseActionRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UpdateCaseActionResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/actions/{caseActionId}'
            .replace('{' + 'caseActionId' + '}', encodeURIComponent(String(caseActionId)))
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseActionId' is not null or undefined
        if (caseActionId === null || caseActionId === undefined) {
            throw new Error('Required parameter caseActionId was null or undefined when calling updateCaseActionUsingPUT.');
        }

        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling updateCaseActionUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateCaseActionUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
