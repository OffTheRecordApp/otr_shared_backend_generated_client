"use strict";
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HouseholdMateControllerApi = void 0;
/* tslint:disable:no-unused-variable member-ordering */
var HouseholdMateControllerApi = /** @class */ (function () {
    function HouseholdMateControllerApi($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary acceptHouseholdInvite
     * @param email email
     * @param token token
     */
    HouseholdMateControllerApi.prototype.acceptHouseholdInviteUsingPUT = function (email, token, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/household-mates/accept-invite';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling acceptHouseholdInviteUsingPUT.');
        }
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling acceptHouseholdInviteUsingPUT.');
        }
        if (email !== undefined) {
            queryParameters['email'] = email;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        var httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary cancelHouseholdMateInvite
     * @param inviteeEmail inviteeEmail
     * @param userId userId
     */
    HouseholdMateControllerApi.prototype.cancelHouseholdMateInviteUsingDELETE = function (inviteeEmail, userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/household-mates/{userId}/invite'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'inviteeEmail' is not null or undefined
        if (inviteeEmail === null || inviteeEmail === undefined) {
            throw new Error('Required parameter inviteeEmail was null or undefined when calling cancelHouseholdMateInviteUsingDELETE.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling cancelHouseholdMateInviteUsingDELETE.');
        }
        if (inviteeEmail !== undefined) {
            queryParameters['inviteeEmail'] = inviteeEmail;
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary getHouseholdMates
     * @param userId userId
     */
    HouseholdMateControllerApi.prototype.getHouseholdMatesUsingGET = function (userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/household-mates/{userId}'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getHouseholdMatesUsingGET.');
        }
        var httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary inviteHouseholdMate
     * @param userId userId
     * @param request request
     */
    HouseholdMateControllerApi.prototype.inviteHouseholdMateUsingPOST = function (userId, request, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/household-mates/{userId}/invite'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling inviteHouseholdMateUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling inviteHouseholdMateUsingPOST.');
        }
        var httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    /**
     *
     * @summary removeHouseholdMate
     * @param mateUserId mateUserId
     * @param userId userId
     */
    HouseholdMateControllerApi.prototype.removeHouseholdMateUsingDELETE = function (mateUserId, userId, extraHttpRequestParams) {
        var localVarPath = this.basePath + '/api/v1/household-mates/{userId}'
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'mateUserId' is not null or undefined
        if (mateUserId === null || mateUserId === undefined) {
            throw new Error('Required parameter mateUserId was null or undefined when calling removeHouseholdMateUsingDELETE.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeHouseholdMateUsingDELETE.');
        }
        if (mateUserId !== undefined) {
            queryParameters['mateUserId'] = mateUserId;
        }
        var httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    };
    HouseholdMateControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
    return HouseholdMateControllerApi;
}());
exports.HouseholdMateControllerApi = HouseholdMateControllerApi;
