/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class CaseCounterOfferControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary acceptCaseCounter
     * @param caseId caseId
     * @param counterId counterId
     * @param request request
     */
    acceptCaseCounterUsingPUT(caseId, counterId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/counters/{counterId}/accept'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'counterId' + '}', encodeURIComponent(String(counterId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling acceptCaseCounterUsingPUT.');
        }
        // verify required parameter 'counterId' is not null or undefined
        if (counterId === null || counterId === undefined) {
            throw new Error('Required parameter counterId was null or undefined when calling acceptCaseCounterUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary declineCaseCounter
     * @param caseId caseId
     * @param counterId counterId
     * @param request request
     */
    declineCaseCounterUsingPUT(caseId, counterId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/counters/{counterId}/decline'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'counterId' + '}', encodeURIComponent(String(counterId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling declineCaseCounterUsingPUT.');
        }
        // verify required parameter 'counterId' is not null or undefined
        if (counterId === null || counterId === undefined) {
            throw new Error('Required parameter counterId was null or undefined when calling declineCaseCounterUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling declineCaseCounterUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCaseCounterOptions
     */
    getCaseCounterOptionsUsingGET(extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/counter-options';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCounterOfferByCounterId
     * @param caseId caseId
     * @param counterId counterId
     */
    getCounterOfferByCounterIdUsingGET(caseId, counterId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/counters/{counterId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'counterId' + '}', encodeURIComponent(String(counterId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getCounterOfferByCounterIdUsingGET.');
        }
        // verify required parameter 'counterId' is not null or undefined
        if (counterId === null || counterId === undefined) {
            throw new Error('Required parameter counterId was null or undefined when calling getCounterOfferByCounterIdUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCounterOffer
     * @param caseId caseId
     */
    getCounterOfferUsingGET(caseId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/counters'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getCounterOfferUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary initiateCaseCounter
     * @param caseId caseId
     * @param request request
     */
    initiateCaseCounterUsingPOST(caseId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/counters'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling initiateCaseCounterUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling initiateCaseCounterUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary withdrawCaseCounter
     * @param caseId caseId
     * @param counterId counterId
     */
    withdrawCaseCounterUsingPUT(caseId, counterId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/counters/{counterId}/withdraw'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'counterId' + '}', encodeURIComponent(String(counterId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling withdrawCaseCounterUsingPUT.');
        }
        // verify required parameter 'counterId' is not null or undefined
        if (counterId === null || counterId === undefined) {
            throw new Error('Required parameter counterId was null or undefined when calling withdrawCaseCounterUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
CaseCounterOfferControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
