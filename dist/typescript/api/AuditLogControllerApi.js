/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class AuditLogControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary getAuditLogs
     * @param citationId citationId
     * @param logLevel logLevel
     * @param logType logType
     * @param showActiveOnly showActiveOnly
     */
    getAuditLogsUsingGET(citationId, logLevel, logType, showActiveOnly, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/audit-logs'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling getAuditLogsUsingGET.');
        }
        if (logLevel !== undefined) {
            queryParameters['logLevel'] = logLevel;
        }
        if (logType !== undefined) {
            queryParameters['logType'] = logType;
        }
        if (showActiveOnly !== undefined) {
            queryParameters['showActiveOnly'] = showActiveOnly;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
AuditLogControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
