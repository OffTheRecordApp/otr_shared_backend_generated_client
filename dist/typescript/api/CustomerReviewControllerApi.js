/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class CustomerReviewControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary addCustomerReview
     * @param addReviewRequest addReviewRequest
     */
    addCustomerReviewUsingPOST(addReviewRequest, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'addReviewRequest' is not null or undefined
        if (addReviewRequest === null || addReviewRequest === undefined) {
            throw new Error('Required parameter addReviewRequest was null or undefined when calling addCustomerReviewUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: addReviewRequest,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary editCustomerReview
     * @param reviewId reviewId
     * @param editCustomerReviewRequest editCustomerReviewRequest
     */
    editCustomerReviewUsingPUT(reviewId, editCustomerReviewRequest, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews/api/v1/reviews/{reviewId}'
            .replace('{' + 'reviewId' + '}', encodeURIComponent(String(reviewId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'reviewId' is not null or undefined
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling editCustomerReviewUsingPUT.');
        }
        // verify required parameter 'editCustomerReviewRequest' is not null or undefined
        if (editCustomerReviewRequest === null || editCustomerReviewRequest === undefined) {
            throw new Error('Required parameter editCustomerReviewRequest was null or undefined when calling editCustomerReviewUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: editCustomerReviewRequest,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listCustomerReviews
     * @param includeAnonymous includeAnonymous
     * @param includeDeleted includeDeleted
     * @param includeRatings includeRatings
     * @param isFeatured isFeatured
     * @param lawfirmId lawfirmId
     * @param limit limit
     * @param nextPageToken nextPageToken
     * @param previousPageToken previousPageToken
     * @param state state
     * @param tags tags
     * @param version version
     */
    listCustomerReviewsUsingGET(includeAnonymous, includeDeleted, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, version, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (includeAnonymous !== undefined) {
            queryParameters['includeAnonymous'] = includeAnonymous;
        }
        if (includeDeleted !== undefined) {
            queryParameters['includeDeleted'] = includeDeleted;
        }
        if (includeRatings !== undefined) {
            queryParameters['includeRatings'] = includeRatings;
        }
        if (isFeatured !== undefined) {
            queryParameters['isFeatured'] = isFeatured;
        }
        if (lawfirmId !== undefined) {
            queryParameters['lawfirmId'] = lawfirmId;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (nextPageToken !== undefined) {
            queryParameters['nextPageToken'] = nextPageToken;
        }
        if (previousPageToken !== undefined) {
            queryParameters['previousPageToken'] = previousPageToken;
        }
        if (state !== undefined) {
            queryParameters['state'] = state;
        }
        if (tags !== undefined) {
            queryParameters['tags'] = tags;
        }
        if (version !== undefined) {
            queryParameters['version'] = version;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listEligibleStatusesForReview
     */
    listEligibleStatusesForReviewUsingGET(extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews/eligible-statuses';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary markCommentWithVote
     * @param commentId commentId
     * @param reviewId reviewId
     * @param like like
     */
    markCommentWithVoteUsingPUT(commentId, reviewId, like, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews/{reviewId}/comments/{commentId}/vote'
            .replace('{' + 'commentId' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'reviewId' + '}', encodeURIComponent(String(reviewId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling markCommentWithVoteUsingPUT.');
        }
        // verify required parameter 'reviewId' is not null or undefined
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling markCommentWithVoteUsingPUT.');
        }
        if (like !== undefined) {
            queryParameters['like'] = like;
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary markReviewWithVote
     * @param reviewId reviewId
     * @param helpful helpful
     */
    markReviewWithVoteUsingPUT(reviewId, helpful, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews/{reviewId}/vote'
            .replace('{' + 'reviewId' + '}', encodeURIComponent(String(reviewId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'reviewId' is not null or undefined
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling markReviewWithVoteUsingPUT.');
        }
        if (helpful !== undefined) {
            queryParameters['helpful'] = helpful;
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary replyToCustomerReview
     * @param reviewId reviewId
     * @param request request
     */
    replyToCustomerReviewUsingPOST(reviewId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews/{reviewId}/comments'
            .replace('{' + 'reviewId' + '}', encodeURIComponent(String(reviewId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'reviewId' is not null or undefined
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling replyToCustomerReviewUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling replyToCustomerReviewUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary setCustomerReviewStatus
     * @param reviewId reviewId
     * @param setCustomerReviewStatusRequest setCustomerReviewStatusRequest
     */
    setCustomerReviewStatusUsingPUT(reviewId, setCustomerReviewStatusRequest, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews/api/v1/reviews/{reviewId}/status'
            .replace('{' + 'reviewId' + '}', encodeURIComponent(String(reviewId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'reviewId' is not null or undefined
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling setCustomerReviewStatusUsingPUT.');
        }
        // verify required parameter 'setCustomerReviewStatusRequest' is not null or undefined
        if (setCustomerReviewStatusRequest === null || setCustomerReviewStatusRequest === undefined) {
            throw new Error('Required parameter setCustomerReviewStatusRequest was null or undefined when calling setCustomerReviewStatusUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: setCustomerReviewStatusRequest,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateCommentForCustomerReview
     * @param commentId commentId
     * @param reviewId reviewId
     * @param request request
     */
    updateCommentForCustomerReviewUsingPOST(commentId, reviewId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/reviews/{reviewId}/comments/{commentId}'
            .replace('{' + 'commentId' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'reviewId' + '}', encodeURIComponent(String(reviewId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
        }
        // verify required parameter 'reviewId' is not null or undefined
        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
CustomerReviewControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
