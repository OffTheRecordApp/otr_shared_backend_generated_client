/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class LawfirmControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary addLawfirmAddress
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public addLawfirmAddressUsingPOST (lawfirmId: number, request: models.UpsertAddressRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/addresses'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling addLawfirmAddressUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling addLawfirmAddressUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary createLawfirm
     * @param request request
     */
    public createLawfirmUsingPOST (request: models.CreateNewLawfirmRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createLawfirmUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary deleteLawfirmConnectedAccount
     * @param lawfirmId lawfirmId
     * @param stripeAccountId stripeAccountId
     */
    public deleteLawfirmConnectedAccountUsingDELETE (lawfirmId: number, stripeAccountId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/stripe/account/{stripeAccountId}'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)))
            .replace('{' + 'stripeAccountId' + '}', encodeURIComponent(String(stripeAccountId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
        }

        // verify required parameter 'stripeAccountId' is not null or undefined
        if (stripeAccountId === null || stripeAccountId === undefined) {
            throw new Error('Required parameter stripeAccountId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary deleteLawfirmCoverPhoto
     * @param lawfirmId lawfirmId
     */
    public deleteLawfirmCoverPhotoUsingDELETE (lawfirmId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/cover-photo'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling deleteLawfirmCoverPhotoUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getInboxMessages
     * @param lawfirmId lawfirmId
     * @param caseStatuses caseStatuses
     * @param courtDateFilter courtDateFilter
     * @param filter filter
     * @param latestMessageBy latestMessageBy
     * @param length length
     * @param page page
     * @param query query
     * @param statusCategories statusCategories
     */
    public getInboxMessagesUsingGET (lawfirmId: number, caseStatuses?: 'AMENDED_DOWN_WITHIN_CLASS' | 'AMENDED_FULL_FINE' | 'AMENDED_INCREASED_FINE' | 'AMENDED_NO_FINE' | 'AMENDED_REDUCED_FINE' | 'AMENDED_TO_INFRACTION' | 'AMENDED_TO_NMV' | 'CANCELLED_ATTORNEY_AT_FAULT' | 'CANCELLED_BY_LAWFIRM' | 'CANCELLED_BY_USER' | 'CANCELLED_DUPLICATE' | 'CANCELLED_NMV' | 'CANCELLED_NON_PAYMENT' | 'CANCELLED_NO_LAWFIRM' | 'CANCELLED_OVERDUE' | 'CANCELLED_TOO_SHORT_NOTICE' | 'CASE_IN_PROGRESS' | 'CLIENT_CONFIRMED' | 'CLIENT_CONFIRMED_UNPAID' | 'CLIENT_FIRED_LAWFIRM' | 'CLIENT_FORCED_LOSS' | 'CLIENT_PAID_FINE' | 'CLIENT_UNRESPONSIVE' | 'DEFERRED' | 'DISMISSED' | 'DIVERSION' | 'FEES_DISPUTED' | 'FINE_REDUCTION_ONLY' | 'LAWFIRM_WITHDRAWN' | 'LOST' | 'NO_LAWFIRM_AVAILABLE' | 'POINT_REDUCTION' | 'REFUSED_BY_LAWFIRM' | 'RESOLVED_NON_PAYMENT' | 'STALE' | 'TRAFFIC_SCHOOL' | 'UNCONFIRMED', courtDateFilter?: 'NO_COURT_DATE' | 'PAST_DUE' | 'PAST_DUE_AND_NO_COURT_DATE' | 'UPCOMING', filter?: 'ARCHIVE' | 'DEFAULT' | 'FLAG_ONLY' | 'STAR_ONLY', latestMessageBy?: 'ADMIN' | 'CLIENT' | 'LAWYER', length?: number, page?: number, query?: string, statusCategories?: 'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED', extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmInboxMessagesResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/inbox-messages'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getInboxMessagesUsingGET.');
        }

        if (caseStatuses !== undefined) {
            queryParameters['caseStatuses'] = caseStatuses;
        }

        if (courtDateFilter !== undefined) {
            queryParameters['courtDateFilter'] = courtDateFilter;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (latestMessageBy !== undefined) {
            queryParameters['latestMessageBy'] = latestMessageBy;
        }

        if (length !== undefined) {
            queryParameters['length'] = length;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (query !== undefined) {
            queryParameters['query'] = query;
        }

        if (statusCategories !== undefined) {
            queryParameters['statusCategories'] = statusCategories;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmAddresses
     * @param lawfirmId lawfirmId
     */
    public getLawfirmAddressesUsingGET (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmAddressesResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/addresses'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmAddressesUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmByPrimaryEmail
     * @param primaryLawfirmEmail primaryLawfirmEmail
     */
    public getLawfirmByPrimaryEmailUsingGET (primaryLawfirmEmail: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/email/{primaryLawfirmEmail}'
            .replace('{' + 'primaryLawfirmEmail' + '}', encodeURIComponent(String(primaryLawfirmEmail)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'primaryLawfirmEmail' is not null or undefined
        if (primaryLawfirmEmail === null || primaryLawfirmEmail === undefined) {
            throw new Error('Required parameter primaryLawfirmEmail was null or undefined when calling getLawfirmByPrimaryEmailUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmByUrl
     * @param seoUrl seoUrl
     */
    public getLawfirmByUrlUsingGET (seoUrl: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/url';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'seoUrl' is not null or undefined
        if (seoUrl === null || seoUrl === undefined) {
            throw new Error('Required parameter seoUrl was null or undefined when calling getLawfirmByUrlUsingGET.');
        }

        if (seoUrl !== undefined) {
            queryParameters['seoUrl'] = seoUrl;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmCaseStats
     * @param lawfirmId lawfirmId
     */
    public getLawfirmCaseStatsUsingGET (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmCaseStatsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/cases/stats'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmCaseStatsUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmJobTitles
     */
    public getLawfirmJobTitlesUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmJobTitleResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/job-titles';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmLawyers
     * @param lawfirmId lawfirmId
     * @param settingName settingName
     */
    public getLawfirmLawyersUsingGET (lawfirmId: number, settingName?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmLawyersResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/lawyers'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmLawyersUsingGET.');
        }

        if (settingName !== undefined) {
            queryParameters['settingName'] = settingName;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmStatuses
     */
    public getLawfirmStatusesUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/statuses';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmSupportTickets
     * @param lawfirmId lawfirmId
     * @param limit limit
     */
    public getLawfirmSupportTicketsUsingGET (lawfirmId: number, limit?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.IntercomSearchTicketsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/lawfirms/{lawfirmId}/support-tickets'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmSupportTicketsUsingGET.');
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirm
     * @param lawfirmIdString lawfirmIdString
     * @param isDetailsRequired isDetailsRequired
     */
    public getLawfirmUsingGET (lawfirmIdString: string, isDetailsRequired?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling getLawfirmUsingGET.');
        }

        if (isDetailsRequired !== undefined) {
            queryParameters['isDetailsRequired'] = isDetailsRequired;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirms
     * @param acceptsAccidentTickets acceptsAccidentTickets
     * @param acceptsPastDueTickets acceptsPastDueTickets
     * @param includeTestLawfirms includeTestLawfirms
     * @param includeVacationMode includeVacationMode
     * @param q q
     * @param states states
     * @param statusCategories statusCategories
     * @param statuses statuses
     */
    public getLawfirmsUsingGET (acceptsAccidentTickets?: boolean, acceptsPastDueTickets?: boolean, includeTestLawfirms?: boolean, includeVacationMode?: boolean, q?: string, states?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', statusCategories?: 'ACTIVE' | 'INACTIVE' | 'LEAD' | 'NOT_INTERESTED' | 'REJECTED' | 'TERMINATED', statuses?: 'ACCOUNT_CLOSED' | 'ACTIVE' | 'BLACKLISTED' | 'DEMO_COMPLETED' | 'DUPLICATE' | 'FUTURE_LEAD' | 'LEAD' | 'NEW_PARTNER' | 'NOT_A_GOOD_FIT' | 'NOT_INTERESTED_DO_NOT_CONTACT' | 'NOT_INTERESTED_FEE_SPLITTING' | 'NOT_INTERESTED_MARKETING_FEE' | 'NOT_INTERESTED_MONEY_BACK_GUARANTEE' | 'NOT_INTERESTED_PLATFORM_RESISTANCE' | 'PAST_INTEREST' | 'SUPERVISED' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS', extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (acceptsAccidentTickets !== undefined) {
            queryParameters['acceptsAccidentTickets'] = acceptsAccidentTickets;
        }

        if (acceptsPastDueTickets !== undefined) {
            queryParameters['acceptsPastDueTickets'] = acceptsPastDueTickets;
        }

        if (includeTestLawfirms !== undefined) {
            queryParameters['includeTestLawfirms'] = includeTestLawfirms;
        }

        if (includeVacationMode !== undefined) {
            queryParameters['includeVacationMode'] = includeVacationMode;
        }

        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (states !== undefined) {
            queryParameters['states'] = states;
        }

        if (statusCategories !== undefined) {
            queryParameters['statusCategories'] = statusCategories;
        }

        if (statuses !== undefined) {
            queryParameters['statuses'] = statuses;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getOtrLawfirmNotes
     * @param lawfirmId lawfirmId
     */
    public getOtrLawfirmNotesUsingGET (lawfirmId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/otr-notes'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getOtrLawfirmNotesUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getStripeConnectedAccounts
     * @param lawfirmId lawfirmId
     */
    public getStripeConnectedAccountsUsingGET (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetStripeConnectedAccountsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/stripe'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getStripeConnectedAccountsUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getSupportedStatesForLawfirm
     * @param lawfirmId lawfirmId
     */
    public getSupportedStatesForLawfirmUsingGET (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmSupportedStatesResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/supported-states'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getSupportedStatesForLawfirmUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary setVacationMode
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public setVacationModeUsingPOST (lawfirmId: number, request: models.LawfirmVacationRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/vacation'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling setVacationModeUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling setVacationModeUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirmAddress
     * @param addressId addressId
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public updateLawfirmAddressUsingPUT (addressId: number, lawfirmId: number, request: models.UpsertAddressRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/addresses/{addressId}'
            .replace('{' + 'addressId' + '}', encodeURIComponent(String(addressId)))
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'addressId' is not null or undefined
        if (addressId === null || addressId === undefined) {
            throw new Error('Required parameter addressId was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirm
     * @param lawfirmIdString lawfirmIdString
     * @param request request
     */
    public updateLawfirmUsingPUT (lawfirmIdString: string, request: models.UpdateLawfirmRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling updateLawfirmUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirmWithPicture
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public updateLawfirmWithPictureUsingPUT (lawfirmId: string, request: models.LawfirmPictureRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/picture'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawyerRole
     * @param lawfirmId lawfirmId
     * @param userId userId
     * @param request request
     */
    public updateLawyerRoleUsingPUT (lawfirmId: number, userId: number, request: models.UpdateLawyerRoleRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/lawyers/{userId}/update-role'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)))
            .replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling updateLawyerRoleUsingPUT.');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateLawyerRoleUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawyerRoleUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updatePaymentModel
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public updatePaymentModelUsingPUT (lawfirmId: number, request: models.UpdateLawfirmPaymentModelRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/payment-model'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling updatePaymentModelUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updatePaymentModelUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary uploadLawfirms
     * @param request request
     */
    public uploadLawfirmsUsingPOST (request: models.UploadLawfirmsRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UploadLawfirmsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/bulk-upload';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling uploadLawfirmsUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
