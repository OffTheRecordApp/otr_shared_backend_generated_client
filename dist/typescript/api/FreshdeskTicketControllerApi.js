/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class FreshdeskTicketControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary mergeTicket
     * @param ticketId ticketId
     * @param request request
     */
    mergeTicketUsingPOST(ticketId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/freshdesk/webhook/ticket/{ticketId}/merge'
            .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error('Required parameter ticketId was null or undefined when calling mergeTicketUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling mergeTicketUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary ticketStatusChangeHook
     * @param ticketId ticketId
     * @param request request
     */
    ticketStatusChangeHookUsingPUT(ticketId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/freshdesk/ticket/{ticketId}/webhook/status-change'
            .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error('Required parameter ticketId was null or undefined when calling ticketStatusChangeHookUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling ticketStatusChangeHookUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateFreshdeskTicket
     * @param ticketId ticketId
     * @param request request
     */
    updateFreshdeskTicketUsingPUT(ticketId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/freshdesk/ticket/{ticketId}'
            .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'ticketId' is not null or undefined
        if (ticketId === null || ticketId === undefined) {
            throw new Error('Required parameter ticketId was null or undefined when calling updateFreshdeskTicketUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateFreshdeskTicketUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
FreshdeskTicketControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
