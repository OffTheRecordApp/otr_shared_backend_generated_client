/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class ConsoleListControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary findDisputes
     * @param request request
     */
    findDisputesUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/disputes';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling findDisputesUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCasesWithCoverageObtained
     * @param request request
     */
    getCasesWithCoverageObtainedUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/cases-with-coverage-obtained';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getCasesWithCoverageObtainedUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCasesWithMissingLawfirmPayouts
     * @param request request
     */
    getCasesWithMissingLawfirmPayoutsUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/cases/missing-lawfirm-payouts';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getCasesWithMissingLawfirmPayoutsUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCasesWithOverduePayments
     * @param request request
     */
    getCasesWithOverduePaymentsUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/cases/unpaid';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getCasesWithOverduePaymentsUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCitationPhoneLeads
     * @param request request
     */
    getCitationPhoneLeadsUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/citation-phone-leads';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getCitationPhoneLeadsUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCitationsWithMissingFields
     * @param request request
     */
    getCitationsWithMissingFieldsUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/citations-with-missing-fields';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getCitationsWithMissingFieldsUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCitationsWithMissingFieldsV2
     * @param request request
     */
    getCitationsWithMissingFieldsV2UsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v2/console/citations-with-missing-fields';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getCitationsWithMissingFieldsV2UsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getClientConfirmedUnpaidCases
     * @param request request
     */
    getClientConfirmedUnpaidCasesUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/cases/client-confirmed-unpaid';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getClientConfirmedUnpaidCasesUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getDeclinedCases
     * @param request request
     */
    getDeclinedCasesUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/declined';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getDeclinedCasesUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getInvalidCasesWithStripeCharge
     * @param request request
     */
    getInvalidCasesWithStripeChargeUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/cases/invalid-with-charge';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getInvalidCasesWithStripeChargeUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getLostCasesWithTransferNotReversed
     * @param request request
     */
    getLostCasesWithTransferNotReversedUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/cases/lost/not-reversed';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getLostCasesWithTransferNotReversedUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getPendingCases
     * @param request request
     */
    getPendingCasesUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/cases/pending';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getPendingCasesUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getPendingTicketReviews
     * @param request request
     */
    getPendingTicketReviewsUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/ticket-review-requests/pending';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getPendingTicketReviewsUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listBillingSubscribers
     * @param billingInterval billingInterval
     * @param billingSubscriptionStatus billingSubscriptionStatus
     * @param coveredSubscriptionsOnly coveredSubscriptionsOnly
     * @param endDate endDate
     * @param length length
     * @param page page
     * @param planName planName
     * @param shouldIncludeSubscribers shouldIncludeSubscribers
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param startDate startDate
     * @param subscriberName subscriberName
     * @param timeZoneId timeZoneId
     */
    listBillingSubscribersUsingGET(billingInterval, billingSubscriptionStatus, coveredSubscriptionsOnly, endDate, length, page, planName, shouldIncludeSubscribers, sortBy, sortOrder, startDate, subscriberName, timeZoneId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/billing/subscribers';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (billingInterval !== undefined) {
            queryParameters['billingInterval'] = billingInterval;
        }
        if (billingSubscriptionStatus !== undefined) {
            queryParameters['billingSubscriptionStatus'] = billingSubscriptionStatus;
        }
        if (coveredSubscriptionsOnly !== undefined) {
            queryParameters['coveredSubscriptionsOnly'] = coveredSubscriptionsOnly;
        }
        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }
        if (length !== undefined) {
            queryParameters['length'] = length;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (planName !== undefined) {
            queryParameters['planName'] = planName;
        }
        if (shouldIncludeSubscribers !== undefined) {
            queryParameters['shouldIncludeSubscribers'] = shouldIncludeSubscribers;
        }
        if (sortBy !== undefined) {
            queryParameters['sortBy'] = sortBy;
        }
        if (sortOrder !== undefined) {
            queryParameters['sortOrder'] = sortOrder;
        }
        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }
        if (subscriberName !== undefined) {
            queryParameters['subscriberName'] = subscriberName;
        }
        if (timeZoneId !== undefined) {
            queryParameters['timeZoneId'] = timeZoneId;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listLawfirmLeads
     * @param request request
     */
    listLawfirmLeadsUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/lawfirms/leads';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling listLawfirmLeadsUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary listPotentialCustomers
     * @param request request
     */
    listPotentialCustomersUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/console/potential-customers';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling listPotentialCustomersUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
ConsoleListControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
