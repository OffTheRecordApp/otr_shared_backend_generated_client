/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
export class CitationControllerApi {
    constructor($http, $httpParamSerializer, basePath) {
        this.$http = $http;
        this.$httpParamSerializer = $httpParamSerializer;
        this.basePath = 'http://otr-backend-service-us-devo.offtherecord.com';
        this.defaultHeaders = {};
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }
    /**
     *
     * @summary assignCitationOwner
     * @param citationId citationId
     * @param request request
     */
    assignCitationOwnerUsingPOST(citationId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/owner'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling assignCitationOwnerUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary createNewCitation
     * @param request request
     */
    createNewCitationUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createNewCitationUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary createReferralSourceForCitation
     * @param citationId citationId
     * @param request request
     */
    createReferralSourceForCitationUsingPOST(citationId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/referral-source'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling createReferralSourceForCitationUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createReferralSourceForCitationUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteCitationCourt
     * @param citationId citationId
     */
    deleteCitationCourtUsingDELETE(citationId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/court'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling deleteCitationCourtUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteCitation
     * @param citationIdString citationIdString
     */
    deleteCitationUsingDELETE(citationIdString, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationIdString}'
            .replace('{' + 'citationIdString' + '}', encodeURIComponent(String(citationIdString)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationIdString' is not null or undefined
        if (citationIdString === null || citationIdString === undefined) {
            throw new Error('Required parameter citationIdString was null or undefined when calling deleteCitationUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary deleteMissingCourtRecord
     * @param citationId citationId
     */
    deleteMissingCourtRecordUsingDELETE(citationId, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/courts/missing'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling deleteMissingCourtRecordUsingDELETE.');
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary dismissCitationsFromContactList
     * @param request request
     */
    dismissCitationsFromContactListUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/dismiss';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling dismissCitationsFromContactListUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getAnonymousTicketUploads
     * @param emailAddress emailAddress
     */
    getAnonymousTicketUploadsUsingGET(emailAddress, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{emailAddress}/anonymous-tickets'
            .replace('{' + 'emailAddress' + '}', encodeURIComponent(String(emailAddress)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'emailAddress' is not null or undefined
        if (emailAddress === null || emailAddress === undefined) {
            throw new Error('Required parameter emailAddress was null or undefined when calling getAnonymousTicketUploadsUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getCitation
     * @param citationIdString citationIdString
     */
    getCitationUsingGET(citationIdString, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationIdString}'
            .replace('{' + 'citationIdString' + '}', encodeURIComponent(String(citationIdString)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationIdString' is not null or undefined
        if (citationIdString === null || citationIdString === undefined) {
            throw new Error('Required parameter citationIdString was null or undefined when calling getCitationUsingGET.');
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getListOfCitationsWithMissingCourt
     */
    getListOfCitationsWithMissingCourtUsingGET(extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/courts/missing';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary getNoViolationCitations
     * @param regionCodes regionCodes
     * @param trailingDays trailingDays
     */
    getNoViolationCitationsUsingGET(regionCodes, trailingDays, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/no-violation-uploads';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        if (regionCodes !== undefined) {
            queryParameters['regionCodes'] = regionCodes;
        }
        if (trailingDays !== undefined) {
            queryParameters['trailingDays'] = trailingDays;
        }
        let httpRequestParams = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary postMissingCourtForCitation
     * @param citationId citationId
     * @param state state
     */
    postMissingCourtForCitationUsingPOST(citationId, state, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/court/missing'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling postMissingCourtForCitationUsingPOST.');
        }
        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling postMissingCourtForCitationUsingPOST.');
        }
        if (state !== undefined) {
            queryParameters['state'] = state;
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary setCitationContactListFlag
     * @param citationIdString citationIdString
     * @param isDismissed isDismissed
     */
    setCitationContactListFlagUsingPOST(citationIdString, isDismissed, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationIdString}/dismiss'
            .replace('{' + 'citationIdString' + '}', encodeURIComponent(String(citationIdString)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationIdString' is not null or undefined
        if (citationIdString === null || citationIdString === undefined) {
            throw new Error('Required parameter citationIdString was null or undefined when calling setCitationContactListFlagUsingPOST.');
        }
        // verify required parameter 'isDismissed' is not null or undefined
        if (isDismissed === null || isDismissed === undefined) {
            throw new Error('Required parameter isDismissed was null or undefined when calling setCitationContactListFlagUsingPOST.');
        }
        if (isDismissed !== undefined) {
            queryParameters['isDismissed'] = isDismissed;
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary setLockForCitation
     * @param citationId citationId
     * @param isLocked isLocked
     */
    setLockForCitationUsingPUT(citationId, isLocked, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/lock-citation/{isLocked}'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)))
            .replace('{' + 'isLocked' + '}', encodeURIComponent(String(isLocked)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling setLockForCitationUsingPUT.');
        }
        // verify required parameter 'isLocked' is not null or undefined
        if (isLocked === null || isLocked === undefined) {
            throw new Error('Required parameter isLocked was null or undefined when calling setLockForCitationUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary signImageUrl
     * @param request request
     */
    signImageUrlUsingPOST(request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/sign-image-url';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling signImageUrlUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary toggleDeleteCitation
     * @param citationId citationId
     * @param isDeleteRequest isDeleteRequest
     */
    toggleDeleteCitationUsingDELETE(citationId, isDeleteRequest, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v2/citations/{citationId}'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling toggleDeleteCitationUsingDELETE.');
        }
        // verify required parameter 'isDeleteRequest' is not null or undefined
        if (isDeleteRequest === null || isDeleteRequest === undefined) {
            throw new Error('Required parameter isDeleteRequest was null or undefined when calling toggleDeleteCitationUsingDELETE.');
        }
        if (isDeleteRequest !== undefined) {
            queryParameters['isDeleteRequest'] = isDeleteRequest;
        }
        let httpRequestParams = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateCitationAddress
     * @param citationId citationId
     * @param request request
     */
    updateCitationAddressUsingPOST(citationId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/address'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling updateCitationAddressUsingPOST.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateCitationAddressUsingPOST.');
        }
        let httpRequestParams = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateCitationPicture
     * @param citationId citationId
     * @param request request
     */
    updateCitationPictureUsingPUT(citationId, request, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationId}/picture'
            .replace('{' + 'citationId' + '}', encodeURIComponent(String(citationId)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationId' is not null or undefined
        if (citationId === null || citationId === undefined) {
            throw new Error('Required parameter citationId was null or undefined when calling updateCitationPictureUsingPUT.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateCitationPictureUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
    /**
     *
     * @summary updateCitation
     * @param citationIdString citationIdString
     * @param updateCitationRequest updateCitationRequest
     */
    updateCitationUsingPUT(citationIdString, updateCitationRequest, extraHttpRequestParams) {
        const localVarPath = this.basePath + '/api/v1/citations/{citationIdString}'
            .replace('{' + 'citationIdString' + '}', encodeURIComponent(String(citationIdString)));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        // verify required parameter 'citationIdString' is not null or undefined
        if (citationIdString === null || citationIdString === undefined) {
            throw new Error('Required parameter citationIdString was null or undefined when calling updateCitationUsingPUT.');
        }
        // verify required parameter 'updateCitationRequest' is not null or undefined
        if (updateCitationRequest === null || updateCitationRequest === undefined) {
            throw new Error('Required parameter updateCitationRequest was null or undefined when calling updateCitationUsingPUT.');
        }
        let httpRequestParams = {
            method: 'PUT',
            url: localVarPath,
            data: updateCitationRequest,
            params: queryParameters,
            headers: headerParams
        };
        if (extraHttpRequestParams) {
            httpRequestParams = Object.assign(httpRequestParams, extraHttpRequestParams);
        }
        return this.$http(httpRequestParams);
    }
}
CitationControllerApi.$inject = ['$http', '$httpParamSerializer', 'basePath'];
