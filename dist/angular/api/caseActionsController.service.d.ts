/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AddActionToCaseRequest } from '../model/addActionToCaseRequest';
import { AddActionToCaseResponse } from '../model/addActionToCaseResponse';
import { GetCaseActionResponse } from '../model/getCaseActionResponse';
import { GetCaseActionTimelineResponse } from '../model/getCaseActionTimelineResponse';
import { GetCaseActionTypesResponse } from '../model/getCaseActionTypesResponse';
import { MarkActionAsDeletedResponse } from '../model/markActionAsDeletedResponse';
import { UpdateCaseActionRequest } from '../model/updateCaseActionRequest';
import { UpdateCaseActionResponse } from '../model/updateCaseActionResponse';
import { Configuration } from '../configuration';
export declare class CaseActionsControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * addActionToCaseV2
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addActionToCaseV2UsingPOST(caseId: string, request: AddActionToCaseRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<AddActionToCaseResponse>;
    addActionToCaseV2UsingPOST(caseId: string, request: AddActionToCaseRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<AddActionToCaseResponse>>;
    addActionToCaseV2UsingPOST(caseId: string, request: AddActionToCaseRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<AddActionToCaseResponse>>;
    /**
     * getActionTimeline
     * @param caseId caseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getActionTimelineUsingGET(caseId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseActionTimelineResponse>;
    getActionTimelineUsingGET(caseId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseActionTimelineResponse>>;
    getActionTimelineUsingGET(caseId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseActionTimelineResponse>>;
    /**
     * getAllActions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllActionsUsingGET(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseActionTypesResponse>;
    getAllActionsUsingGET(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseActionTypesResponse>>;
    getAllActionsUsingGET(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseActionTypesResponse>>;
    /**
     * getCaseActions
     * @param caseId caseId
     * @param showDeleted showDeleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCaseActionsUsingGET(caseId: string, showDeleted?: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseActionResponse>;
    getCaseActionsUsingGET(caseId: string, showDeleted?: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseActionResponse>>;
    getCaseActionsUsingGET(caseId: string, showDeleted?: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseActionResponse>>;
    /**
     * markActionAsDeleted
     * @param caseActionId caseActionId
     * @param caseId caseId
     * @param isDeleted isDeleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    markActionAsDeletedUsingDELETE(caseActionId: number, caseId: string, isDeleted: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<MarkActionAsDeletedResponse>;
    markActionAsDeletedUsingDELETE(caseActionId: number, caseId: string, isDeleted: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<MarkActionAsDeletedResponse>>;
    markActionAsDeletedUsingDELETE(caseActionId: number, caseId: string, isDeleted: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<MarkActionAsDeletedResponse>>;
    /**
     * updateCaseAction
     * @param caseActionId caseActionId
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCaseActionUsingPUT(caseActionId: number, caseId: string, request: UpdateCaseActionRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<UpdateCaseActionResponse>;
    updateCaseActionUsingPUT(caseActionId: number, caseId: string, request: UpdateCaseActionRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<UpdateCaseActionResponse>>;
    updateCaseActionUsingPUT(caseActionId: number, caseId: string, request: UpdateCaseActionRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<UpdateCaseActionResponse>>;
}
