/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AddACHToStripeAccountRequest } from '../model/addACHToStripeAccountRequest';
import { AddCardToStripeAccountRequest } from '../model/addCardToStripeAccountRequest';
import { AddCardToStripeAccountResponse } from '../model/addCardToStripeAccountResponse';
import { GetLawfirmPaymentMethodsResponse } from '../model/getLawfirmPaymentMethodsResponse';
import { GetPaymentMethodsForUserResponse } from '../model/getPaymentMethodsForUserResponse';
import { StripeCardDomain } from '../model/stripeCardDomain';
import { Configuration } from '../configuration';
export declare class StripeCardControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * addACHToLawfirmStripeAccount
     * @param lawfirmId lawfirmId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addACHToLawfirmStripeAccountUsingPOST(lawfirmId: string, request: AddACHToStripeAccountRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    addACHToLawfirmStripeAccountUsingPOST(lawfirmId: string, request: AddACHToStripeAccountRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    addACHToLawfirmStripeAccountUsingPOST(lawfirmId: string, request: AddACHToStripeAccountRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * addACHToUserStripeAccount
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addACHToUserStripeAccountUsingPOST(userId: string, request: AddACHToStripeAccountRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    addACHToUserStripeAccountUsingPOST(userId: string, request: AddACHToStripeAccountRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    addACHToUserStripeAccountUsingPOST(userId: string, request: AddACHToStripeAccountRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * addCardToStripeAccount
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addCardToStripeAccountUsingPOST(request: AddCardToStripeAccountRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<AddCardToStripeAccountResponse>;
    addCardToStripeAccountUsingPOST(request: AddCardToStripeAccountRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<AddCardToStripeAccountResponse>>;
    addCardToStripeAccountUsingPOST(request: AddCardToStripeAccountRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<AddCardToStripeAccountResponse>>;
    /**
     * deleteBankAccountFromLawfirmStripeAccount
     * @param bankAccountId bankAccountId
     * @param lawfirmId lawfirmId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId: string, lawfirmId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId: string, lawfirmId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId: string, lawfirmId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * deleteCardForUser
     * @param cardId cardId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteCardForUserUsingDELETE(cardId: string, userId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<StripeCardDomain>;
    deleteCardForUserUsingDELETE(cardId: string, userId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<StripeCardDomain>>;
    deleteCardForUserUsingDELETE(cardId: string, userId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<StripeCardDomain>>;
    /**
     * deleteCard
     * @param cardId cardId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    deleteCardUsingDELETE(cardId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<StripeCardDomain>;
    deleteCardUsingDELETE(cardId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<StripeCardDomain>>;
    deleteCardUsingDELETE(cardId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<StripeCardDomain>>;
    /**
     * getCard
     * @param cardId cardId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCardUsingGET(cardId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<StripeCardDomain>;
    getCardUsingGET(cardId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<StripeCardDomain>>;
    getCardUsingGET(cardId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<StripeCardDomain>>;
    /**
     * Retrieves all the payment methods available on the lawfirm\&#39;s Stripe account.
     * @param lawfirmId lawfirmId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getLawfirmPaymentMethodsUsingGET(lawfirmId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetLawfirmPaymentMethodsResponse>;
    getLawfirmPaymentMethodsUsingGET(lawfirmId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetLawfirmPaymentMethodsResponse>>;
    getLawfirmPaymentMethodsUsingGET(lawfirmId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetLawfirmPaymentMethodsResponse>>;
    /**
     * Retrieves all the payment methods available on the user\&#39;s Stripe account.
     * @param userIdString userIdString
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaymentMethodsForUserUsingGET(userIdString: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetPaymentMethodsForUserResponse>;
    getPaymentMethodsForUserUsingGET(userIdString: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetPaymentMethodsForUserResponse>>;
    getPaymentMethodsForUserUsingGET(userIdString: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetPaymentMethodsForUserResponse>>;
    /**
     * setCardAsPrimary
     * @param cardId cardId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    setCardAsPrimaryUsingPUT(cardId: string, userId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    setCardAsPrimaryUsingPUT(cardId: string, userId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    setCardAsPrimaryUsingPUT(cardId: string, userId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * setDefaultPaymentMethodForLawfirm
     * @param lawfirmId lawfirmId
     * @param stripePaymentSourceId stripePaymentSourceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId: number, stripePaymentSourceId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId: number, stripePaymentSourceId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId: number, stripePaymentSourceId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
}
