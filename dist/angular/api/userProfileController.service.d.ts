/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetUserAddressesResponse } from '../model/getUserAddressesResponse';
import { MergeUserRequest } from '../model/mergeUserRequest';
import { MergeUserResponse } from '../model/mergeUserResponse';
import { UpdateProfilePictureRequest } from '../model/updateProfilePictureRequest';
import { UpdateUserDetailsResponse } from '../model/updateUserDetailsResponse';
import { UpdateUserPhoneNumberRequest } from '../model/updateUserPhoneNumberRequest';
import { UpsertAddressRequest } from '../model/upsertAddressRequest';
import { Configuration } from '../configuration';
export declare class UserProfileControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * addUserAddress
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addUserAddressUsingPOST(userId: number, request: UpsertAddressRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    addUserAddressUsingPOST(userId: number, request: UpsertAddressRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    addUserAddressUsingPOST(userId: number, request: UpsertAddressRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * addUserPhoneNumber
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addUserPhoneNumberUsingPOST(userId: number, request: UpdateUserPhoneNumberRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<UpdateUserDetailsResponse>;
    addUserPhoneNumberUsingPOST(userId: number, request: UpdateUserPhoneNumberRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<UpdateUserDetailsResponse>>;
    addUserPhoneNumberUsingPOST(userId: number, request: UpdateUserPhoneNumberRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<UpdateUserDetailsResponse>>;
    /**
     * deleteUserPhoneNumber
     * @param phoneNumberId phoneNumberId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteUserPhoneNumberUsingDELETE(phoneNumberId: number, userId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<UpdateUserDetailsResponse>;
    deleteUserPhoneNumberUsingDELETE(phoneNumberId: number, userId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<UpdateUserDetailsResponse>>;
    deleteUserPhoneNumberUsingDELETE(phoneNumberId: number, userId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<UpdateUserDetailsResponse>>;
    /**
     * getUserAddresses
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUserAddressesUsingGET(userId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetUserAddressesResponse>;
    getUserAddressesUsingGET(userId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetUserAddressesResponse>>;
    getUserAddressesUsingGET(userId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetUserAddressesResponse>>;
    /**
     * mergeUser
     * @param primaryUserId primaryUserId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    mergeUserUsingPOST(primaryUserId: string, request: MergeUserRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<MergeUserResponse>;
    mergeUserUsingPOST(primaryUserId: string, request: MergeUserRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<MergeUserResponse>>;
    mergeUserUsingPOST(primaryUserId: string, request: MergeUserRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<MergeUserResponse>>;
    /**
     * updateProfilePicture
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateProfilePictureUsingPUT(userId: number, request: UpdateProfilePictureRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    updateProfilePictureUsingPUT(userId: number, request: UpdateProfilePictureRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    updateProfilePictureUsingPUT(userId: number, request: UpdateProfilePictureRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * updateUserAddress
     * @param addressId addressId
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUserAddressUsingPUT(addressId: number, userId: number, request: UpsertAddressRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    updateUserAddressUsingPUT(addressId: number, userId: number, request: UpsertAddressRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    updateUserAddressUsingPUT(addressId: number, userId: number, request: UpsertAddressRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * updateUserPhoneNumber
     * @param phoneNumberId phoneNumberId
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUserPhoneNumberUsingPUT(phoneNumberId: number, userId: number, request: UpdateUserPhoneNumberRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<UpdateUserDetailsResponse>;
    updateUserPhoneNumberUsingPUT(phoneNumberId: number, userId: number, request: UpdateUserPhoneNumberRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<UpdateUserDetailsResponse>>;
    updateUserPhoneNumberUsingPUT(phoneNumberId: number, userId: number, request: UpdateUserPhoneNumberRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<UpdateUserDetailsResponse>>;
}
