/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CancelCaseRequest } from '../model/cancelCaseRequest';
import { GetCaseResponse } from '../model/getCaseResponse';
import { GetSupportTicketsResponse } from '../model/getSupportTicketsResponse';
import { RefundCasePaymentRequest } from '../model/refundCasePaymentRequest';
import { UpdateRefundEligibilityForCaseRequest } from '../model/updateRefundEligibilityForCaseRequest';
import { Configuration } from '../configuration';
export declare class CaseRefundControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * cancelCase
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    cancelCaseUsingDELETE(request: CancelCaseRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseResponse>;
    cancelCaseUsingDELETE(request: CancelCaseRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseResponse>>;
    cancelCaseUsingDELETE(request: CancelCaseRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseResponse>>;
    /**
     * refundCasePayment
     * @param caseId caseId
     * @param casePaymentId casePaymentId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    refundCasePaymentUsingPOST(caseId: string, casePaymentId: string, request: RefundCasePaymentRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    refundCasePaymentUsingPOST(caseId: string, casePaymentId: string, request: RefundCasePaymentRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    refundCasePaymentUsingPOST(caseId: string, casePaymentId: string, request: RefundCasePaymentRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * releasePayment
     * @param caseId caseId
     * @param casePaymentId casePaymentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releasePaymentUsingPOST(caseId: string, casePaymentId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    releasePaymentUsingPOST(caseId: string, casePaymentId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    releasePaymentUsingPOST(caseId: string, casePaymentId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * updateRefundEligibilityForCase
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateRefundEligibilityForCaseUsingPUT(caseId: string, request: UpdateRefundEligibilityForCaseRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetSupportTicketsResponse>;
    updateRefundEligibilityForCaseUsingPUT(caseId: string, request: UpdateRefundEligibilityForCaseRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetSupportTicketsResponse>>;
    updateRefundEligibilityForCaseUsingPUT(caseId: string, request: UpdateRefundEligibilityForCaseRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetSupportTicketsResponse>>;
}
