/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetLawfirmResponse } from '../model/getLawfirmResponse';
import { GetLawfirmSettingsResponse } from '../model/getLawfirmSettingsResponse';
import { SettingRequest } from '../model/settingRequest';
import { SettingResponse } from '../model/settingResponse';
import { UpdateLawfirmSettingsRequest } from '../model/updateLawfirmSettingsRequest';
import { Configuration } from '../configuration';
export declare class LawfirmSettingsControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * getLawfirmSetting
     * @param lawfirmId lawfirmId
     * @param name name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getLawfirmSettingUsingGET(lawfirmId: number, name: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SettingResponse>;
    getLawfirmSettingUsingGET(lawfirmId: number, name: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SettingResponse>>;
    getLawfirmSettingUsingGET(lawfirmId: number, name: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SettingResponse>>;
    /**
     * getLawfirmSettings
     * @param lawfirmId lawfirmId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    getLawfirmSettingsUsingGET(lawfirmId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetLawfirmSettingsResponse>;
    getLawfirmSettingsUsingGET(lawfirmId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetLawfirmSettingsResponse>>;
    getLawfirmSettingsUsingGET(lawfirmId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetLawfirmSettingsResponse>>;
    /**
     * updateLawfirmSetting
     * @param lawfirmId lawfirmId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateLawfirmSettingUsingPOST(lawfirmId: number, request: SettingRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SettingResponse>;
    updateLawfirmSettingUsingPOST(lawfirmId: number, request: SettingRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SettingResponse>>;
    updateLawfirmSettingUsingPOST(lawfirmId: number, request: SettingRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SettingResponse>>;
    /**
     * updateLawfirmSettings
     * @param lawfirmIdString lawfirmIdString
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateLawfirmSettingsUsingPOST(lawfirmIdString: string, request: UpdateLawfirmSettingsRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetLawfirmResponse>;
    updateLawfirmSettingsUsingPOST(lawfirmIdString: string, request: UpdateLawfirmSettingsRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetLawfirmResponse>>;
    updateLawfirmSettingsUsingPOST(lawfirmIdString: string, request: UpdateLawfirmSettingsRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetLawfirmResponse>>;
}
