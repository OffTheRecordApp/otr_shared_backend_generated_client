/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DocumentDecisionRequest } from '../model/documentDecisionRequest';
import { GetCaseDocumentResponse } from '../model/getCaseDocumentResponse';
import { GetDocumentsRequest } from '../model/getDocumentsRequest';
import { LawfirmDocumentResponse } from '../model/lawfirmDocumentResponse';
import { LawfirmDocumentTemplateResponse } from '../model/lawfirmDocumentTemplateResponse';
import { PreviewDocumentRequest } from '../model/previewDocumentRequest';
import { PutDocumentRequest } from '../model/putDocumentRequest';
import { Configuration } from '../configuration';
export declare class LawfirmDocumentControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * generateDoc
     * @param docType doc_type
     * @param lawfirmId lawfirmId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    generateDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request?: GetDocumentsRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<LawfirmDocumentResponse>;
    generateDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request?: GetDocumentsRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<LawfirmDocumentResponse>>;
    generateDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request?: GetDocumentsRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<LawfirmDocumentResponse>>;
    /**
     * getDocument
     * @param docType doc_type
     * @param lawfirmId lawfirmId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDocumentUsingGET(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<LawfirmDocumentTemplateResponse>;
    getDocumentUsingGET(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<LawfirmDocumentTemplateResponse>>;
    getDocumentUsingGET(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<LawfirmDocumentTemplateResponse>>;
    /**
     * getLawfirmCaseDocuments
     * @param caseId caseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getLawfirmCaseDocumentsUsingGET(caseId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseDocumentResponse>;
    getLawfirmCaseDocumentsUsingGET(caseId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseDocumentResponse>>;
    getLawfirmCaseDocumentsUsingGET(caseId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseDocumentResponse>>;
    /**
     * markDocumentWithDecision
     * @param docId docId
     * @param decisionRequest decisionRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    markDocumentWithDecisionUsingPOST(docId: string, decisionRequest: DocumentDecisionRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    markDocumentWithDecisionUsingPOST(docId: string, decisionRequest: DocumentDecisionRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    markDocumentWithDecisionUsingPOST(docId: string, decisionRequest: DocumentDecisionRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * previewDoc
     * @param docType doc_type
     * @param lawfirmId lawfirmId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    previewDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request: PreviewDocumentRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<LawfirmDocumentResponse>;
    previewDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request: PreviewDocumentRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<LawfirmDocumentResponse>>;
    previewDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request: PreviewDocumentRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<LawfirmDocumentResponse>>;
    /**
     * uploadCopy
     * @param lawfirmId lawfirmId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    uploadCopyUsingPUT(lawfirmId: string, request: PutDocumentRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    uploadCopyUsingPUT(lawfirmId: string, request: PutDocumentRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    uploadCopyUsingPUT(lawfirmId: string, request: PutDocumentRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
}
