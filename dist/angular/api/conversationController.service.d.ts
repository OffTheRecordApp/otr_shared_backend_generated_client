/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AddCaseMessageResponse } from '../model/addCaseMessageResponse';
import { AddNewCaseMessageRequest } from '../model/addNewCaseMessageRequest';
import { EditConversationMessageRequest } from '../model/editConversationMessageRequest';
import { GetCaseMessagesResponse } from '../model/getCaseMessagesResponse';
import { SetFlagOnMessagesRequest } from '../model/setFlagOnMessagesRequest';
import { SetStarOnMessagesRequest } from '../model/setStarOnMessagesRequest';
import { Configuration } from '../configuration';
export declare class ConversationControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * addMessageToConversation
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addMessageToConversationUsingPOST(caseId: string, request: AddNewCaseMessageRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<AddCaseMessageResponse>;
    addMessageToConversationUsingPOST(caseId: string, request: AddNewCaseMessageRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<AddCaseMessageResponse>>;
    addMessageToConversationUsingPOST(caseId: string, request: AddNewCaseMessageRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<AddCaseMessageResponse>>;
    /**
     * editMessage
     * @param caseId caseId
     * @param messageId messageId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    editMessageUsingPUT(caseId: string, messageId: number, request: EditConversationMessageRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    editMessageUsingPUT(caseId: string, messageId: number, request: EditConversationMessageRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    editMessageUsingPUT(caseId: string, messageId: number, request: EditConversationMessageRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * getConversation
     * @param caseId caseId
     * @param length length
     * @param page page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getConversationUsingGET(caseId: string, length?: number, page?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseMessagesResponse>;
    getConversationUsingGET(caseId: string, length?: number, page?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseMessagesResponse>>;
    getConversationUsingGET(caseId: string, length?: number, page?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseMessagesResponse>>;
    /**
     * getMessage
     * @param caseId caseId
     * @param messageId messageId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getMessageUsingGET(caseId: string, messageId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseMessagesResponse>;
    getMessageUsingGET(caseId: string, messageId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseMessagesResponse>>;
    getMessageUsingGET(caseId: string, messageId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseMessagesResponse>>;
    /**
     * markMessageAsDeleted
     * @param caseId caseId
     * @param isDeleted isDeleted
     * @param messageId messageId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    markMessageAsDeletedUsingPUT(caseId: string, isDeleted: boolean, messageId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    markMessageAsDeletedUsingPUT(caseId: string, isDeleted: boolean, messageId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    markMessageAsDeletedUsingPUT(caseId: string, isDeleted: boolean, messageId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * setFlagOnMessages
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    setFlagOnMessagesUsingPUT(request: SetFlagOnMessagesRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    setFlagOnMessagesUsingPUT(request: SetFlagOnMessagesRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    setFlagOnMessagesUsingPUT(request: SetFlagOnMessagesRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * setStarOnMessages
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    setStarOnMessagesUsingPUT(request: SetStarOnMessagesRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    setStarOnMessagesUsingPUT(request: SetStarOnMessagesRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    setStarOnMessagesUsingPUT(request: SetStarOnMessagesRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
}
