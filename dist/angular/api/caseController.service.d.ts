/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AddViolationsToCitationRequest } from '../model/addViolationsToCitationRequest';
import { CaseDomainReq } from '../model/caseDomainReq';
import { FindChargeDisputesResponse } from '../model/findChargeDisputesResponse';
import { GetAppearanceAttorneysResponse } from '../model/getAppearanceAttorneysResponse';
import { GetCaseResponse } from '../model/getCaseResponse';
import { GetSupportTicketsResponse } from '../model/getSupportTicketsResponse';
import { InitiateCaseAndChargeCustomerRequest } from '../model/initiateCaseAndChargeCustomerRequest';
import { InitiateCaseAndChargeCustomerResponse } from '../model/initiateCaseAndChargeCustomerResponse';
import { MarkCaseAsResolvedRequest } from '../model/markCaseAsResolvedRequest';
import { MarkCaseAsResolvedResponse } from '../model/markCaseAsResolvedResponse';
import { PriceMatchRequest } from '../model/priceMatchRequest';
import { PriceMatchResponse } from '../model/priceMatchResponse';
import { SetArchiveOnCasesRequest } from '../model/setArchiveOnCasesRequest';
import { SetCourtDateForCaseRequest } from '../model/setCourtDateForCaseRequest';
import { UpdateCaseDeclineTicketsRequest } from '../model/updateCaseDeclineTicketsRequest';
import { Configuration } from '../configuration';
export declare class CaseControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * addViolationsToCitation
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addViolationsToCitationUsingPOST(caseId: string, request: AddViolationsToCitationRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    addViolationsToCitationUsingPOST(caseId: string, request: AddViolationsToCitationRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    addViolationsToCitationUsingPOST(caseId: string, request: AddViolationsToCitationRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * assignCaseToUser
     * @param caseId caseId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    assignCaseToUserUsingPOST(caseId: string, userId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    assignCaseToUserUsingPOST(caseId: string, userId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    assignCaseToUserUsingPOST(caseId: string, userId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * assignOwner
     * @param caseId caseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    assignOwnerUsingPOST(caseId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    assignOwnerUsingPOST(caseId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    assignOwnerUsingPOST(caseId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * findChargeDisputesByCaseId
     * @param caseId caseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findChargeDisputesByCaseIdUsingGET(caseId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<FindChargeDisputesResponse>;
    findChargeDisputesByCaseIdUsingGET(caseId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<FindChargeDisputesResponse>>;
    findChargeDisputesByCaseIdUsingGET(caseId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<FindChargeDisputesResponse>>;
    /**
     * getAppearanceAttorneysForCase
     * @param caseId caseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAppearanceAttorneysForCaseUsingGET(caseId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetAppearanceAttorneysResponse>;
    getAppearanceAttorneysForCaseUsingGET(caseId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetAppearanceAttorneysResponse>>;
    getAppearanceAttorneysForCaseUsingGET(caseId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetAppearanceAttorneysResponse>>;
    /**
     * getSupportTicketsForCase
     * @param caseId caseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSupportTicketsForCaseUsingGET(caseId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetSupportTicketsResponse>;
    getSupportTicketsForCaseUsingGET(caseId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetSupportTicketsResponse>>;
    getSupportTicketsForCaseUsingGET(caseId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetSupportTicketsResponse>>;
    /**
     * initiateCaseAndChargeCustomer
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    initiateCaseAndChargeCustomerUsingPOST(caseId: string, request: InitiateCaseAndChargeCustomerRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<InitiateCaseAndChargeCustomerResponse>;
    initiateCaseAndChargeCustomerUsingPOST(caseId: string, request: InitiateCaseAndChargeCustomerRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<InitiateCaseAndChargeCustomerResponse>>;
    initiateCaseAndChargeCustomerUsingPOST(caseId: string, request: InitiateCaseAndChargeCustomerRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<InitiateCaseAndChargeCustomerResponse>>;
    /**
     * initiateCase
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    initiateCaseUsingPOST(caseId: string, request?: object, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    initiateCaseUsingPOST(caseId: string, request?: object, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    initiateCaseUsingPOST(caseId: string, request?: object, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * markCaseAsResolved
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    markCaseAsResolvedUsingPOST(caseId: string, request: MarkCaseAsResolvedRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<MarkCaseAsResolvedResponse>;
    markCaseAsResolvedUsingPOST(caseId: string, request: MarkCaseAsResolvedRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<MarkCaseAsResolvedResponse>>;
    markCaseAsResolvedUsingPOST(caseId: string, request: MarkCaseAsResolvedRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<MarkCaseAsResolvedResponse>>;
    /**
     * removeViolationsFromCitation
     * @param caseId caseId
     * @param violationTypes violationTypes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    removeViolationsFromCitationUsingDELETE(caseId: string, violationTypes: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    removeViolationsFromCitationUsingDELETE(caseId: string, violationTypes: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    removeViolationsFromCitationUsingDELETE(caseId: string, violationTypes: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * reopenCase
     * @param caseId caseId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    reopenCaseUsingPUT(caseId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    reopenCaseUsingPUT(caseId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    reopenCaseUsingPUT(caseId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * setArchiveOnCases
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    setArchiveOnCasesUsingPUT(request: SetArchiveOnCasesRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    setArchiveOnCasesUsingPUT(request: SetArchiveOnCasesRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    setArchiveOnCasesUsingPUT(request: SetArchiveOnCasesRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * setCourtDateForCase
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    setCourtDateForCaseUsingPOST(caseId: string, request: SetCourtDateForCaseRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    setCourtDateForCaseUsingPOST(caseId: string, request: SetCourtDateForCaseRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    setCourtDateForCaseUsingPOST(caseId: string, request: SetCourtDateForCaseRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * submitRequestForPriceMatch
     * @param caseId caseId
     * @param priceMatchRequest priceMatchRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    submitRequestForPriceMatchUsingPOST(caseId: string, priceMatchRequest: PriceMatchRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<PriceMatchResponse>;
    submitRequestForPriceMatchUsingPOST(caseId: string, priceMatchRequest: PriceMatchRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<PriceMatchResponse>>;
    submitRequestForPriceMatchUsingPOST(caseId: string, priceMatchRequest: PriceMatchRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<PriceMatchResponse>>;
    /**
     * updateCase
     * @param caseId caseId
     * @param caseFromRequest caseFromRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCaseUsingPUT(caseId: string, caseFromRequest: CaseDomainReq, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCaseResponse>;
    updateCaseUsingPUT(caseId: string, caseFromRequest: CaseDomainReq, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCaseResponse>>;
    updateCaseUsingPUT(caseId: string, caseFromRequest: CaseDomainReq, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCaseResponse>>;
    /**
     * updateDeclineTickets
     * @param caseId caseId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateDeclineTicketsUsingPUT(caseId: string, request: UpdateCaseDeclineTicketsRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<object>;
    updateDeclineTicketsUsingPUT(caseId: string, request: UpdateCaseDeclineTicketsRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    updateDeclineTicketsUsingPUT(caseId: string, request: UpdateCaseDeclineTicketsRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
}
