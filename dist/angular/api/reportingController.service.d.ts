/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetCourtCoverageForCountyReportResponse } from '../model/getCourtCoverageForCountyReportResponse';
import { GetCourtCoverageForStateReportResponse } from '../model/getCourtCoverageForStateReportResponse';
import { GetCourtCoverageReportResponse } from '../model/getCourtCoverageReportResponse';
import { GetLawfirmCoverageReportResponse } from '../model/getLawfirmCoverageReportResponse';
import { Configuration } from '../configuration';
export declare class ReportingControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * getCourtCoverageForCountyReport
     * @param countyId countyId
     * @param regionCode regionCode
     * @param urWindowInDays urWindowInDays
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCourtCoverageForCountyReportUsingGET(countyId: number, regionCode: string, urWindowInDays?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetCourtCoverageForCountyReportResponse>;
    getCourtCoverageForCountyReportUsingGET(countyId: number, regionCode: string, urWindowInDays?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCourtCoverageForCountyReportResponse>>;
    getCourtCoverageForCountyReportUsingGET(countyId: number, regionCode: string, urWindowInDays?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCourtCoverageForCountyReportResponse>>;
    /**
     * getCourtCoverageForStateReport
     * @param regionCode regionCode
     * @param countyId countyId
     * @param urWindowInDays urWindowInDays
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCourtCoverageForStateReportUsingGET(regionCode: string, countyId?: number, urWindowInDays?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetCourtCoverageForStateReportResponse>;
    getCourtCoverageForStateReportUsingGET(regionCode: string, countyId?: number, urWindowInDays?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCourtCoverageForStateReportResponse>>;
    getCourtCoverageForStateReportUsingGET(regionCode: string, countyId?: number, urWindowInDays?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCourtCoverageForStateReportResponse>>;
    /**
     * getCourtCoverageReport
     * @param urWindowInDays urWindowInDays
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCourtCoverageReportUsingGET(urWindowInDays?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetCourtCoverageReportResponse>;
    getCourtCoverageReportUsingGET(urWindowInDays?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCourtCoverageReportResponse>>;
    getCourtCoverageReportUsingGET(urWindowInDays?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCourtCoverageReportResponse>>;
    /**
     * getLawfirmCoverageReport
     * @param countyId countyId
     * @param regionCode regionCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getLawfirmCoverageReportUsingGET(countyId?: number, regionCode?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetLawfirmCoverageReportResponse>;
    getLawfirmCoverageReportUsingGET(countyId?: number, regionCode?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetLawfirmCoverageReportResponse>>;
    getLawfirmCoverageReportUsingGET(countyId?: number, regionCode?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetLawfirmCoverageReportResponse>>;
}
