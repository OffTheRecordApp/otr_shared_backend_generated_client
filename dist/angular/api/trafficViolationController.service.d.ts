/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AddViolationRequest } from '../model/addViolationRequest';
import { AddViolationResponse } from '../model/addViolationResponse';
import { GetRegionsWithViolationsResponse } from '../model/getRegionsWithViolationsResponse';
import { GetTrafficViolationTypesResponse } from '../model/getTrafficViolationTypesResponse';
import { ListViolationClassificationResponse } from '../model/listViolationClassificationResponse';
import { UpdateViolationRequest } from '../model/updateViolationRequest';
import { Configuration } from '../configuration';
export declare class TrafficViolationControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * addViolation
     * @param isLive isLive
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addViolationUsingPOST(isLive: boolean, request: AddViolationRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<AddViolationResponse>;
    addViolationUsingPOST(isLive: boolean, request: AddViolationRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<AddViolationResponse>>;
    addViolationUsingPOST(isLive: boolean, request: AddViolationRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<AddViolationResponse>>;
    /**
     * deleteViolation
     * @param violationId violationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteViolationUsingDELETE(violationId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    deleteViolationUsingDELETE(violationId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    deleteViolationUsingDELETE(violationId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * getRegionsWithViolations
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getRegionsWithViolationsUsingGET(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetRegionsWithViolationsResponse>;
    getRegionsWithViolationsUsingGET(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetRegionsWithViolationsResponse>>;
    getRegionsWithViolationsUsingGET(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetRegionsWithViolationsResponse>>;
    /**
     * getTrafficViolationTypes
     * @param audience audience
     * @param flavor flavor
     * @param includePenalties includePenalties
     * @param state state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getTrafficViolationTypesUsingGET(audience?: string, flavor?: string, includePenalties?: boolean, state?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetTrafficViolationTypesResponse>;
    getTrafficViolationTypesUsingGET(audience?: string, flavor?: string, includePenalties?: boolean, state?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetTrafficViolationTypesResponse>>;
    getTrafficViolationTypesUsingGET(audience?: string, flavor?: string, includePenalties?: boolean, state?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetTrafficViolationTypesResponse>>;
    /**
     * listViolationClassifications
     * @param regionCode regionCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listViolationClassificationsUsingGET(regionCode?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<ListViolationClassificationResponse>;
    listViolationClassificationsUsingGET(regionCode?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<ListViolationClassificationResponse>>;
    listViolationClassificationsUsingGET(regionCode?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<ListViolationClassificationResponse>>;
    /**
     * updateViolation
     * @param violationId violationId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateViolationUsingPUT(violationId: number, request: UpdateViolationRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    updateViolationUsingPUT(violationId: number, request: UpdateViolationRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    updateViolationUsingPUT(violationId: number, request: UpdateViolationRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
}
