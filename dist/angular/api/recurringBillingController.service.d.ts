/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CancelBillingSubscriptionResponse } from '../model/cancelBillingSubscriptionResponse';
import { CreateBillingSubscriptionRequest } from '../model/createBillingSubscriptionRequest';
import { CreateBillingSubscriptionResponse } from '../model/createBillingSubscriptionResponse';
import { ListBillingProductsResponse } from '../model/listBillingProductsResponse';
import { ListBillingSubscriptionsResponse } from '../model/listBillingSubscriptionsResponse';
import { ListSubscriptionInvoicesResponse } from '../model/listSubscriptionInvoicesResponse';
import { Configuration } from '../configuration';
export declare class RecurringBillingControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * cancelBillingSubscription
     * @param id id
     * @param userId userId
     * @param isProrated isProrated
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    cancelBillingSubscriptionUsingDELETE(id: string, userId: string, isProrated?: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<CancelBillingSubscriptionResponse>;
    cancelBillingSubscriptionUsingDELETE(id: string, userId: string, isProrated?: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<CancelBillingSubscriptionResponse>>;
    cancelBillingSubscriptionUsingDELETE(id: string, userId: string, isProrated?: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<CancelBillingSubscriptionResponse>>;
    /**
     * createBillingSubscription
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createBillingSubscriptionUsingPOST(userId: number, request: CreateBillingSubscriptionRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<CreateBillingSubscriptionResponse>;
    createBillingSubscriptionUsingPOST(userId: number, request: CreateBillingSubscriptionRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<CreateBillingSubscriptionResponse>>;
    createBillingSubscriptionUsingPOST(userId: number, request: CreateBillingSubscriptionRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<CreateBillingSubscriptionResponse>>;
    /**
     * listBillingProducts
     * @param active active
     * @param audience audience
     * @param limit limit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listBillingProductsUsingGET(active?: boolean, audience?: string, limit?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<ListBillingProductsResponse>;
    listBillingProductsUsingGET(active?: boolean, audience?: string, limit?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<ListBillingProductsResponse>>;
    listBillingProductsUsingGET(active?: boolean, audience?: string, limit?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<ListBillingProductsResponse>>;
    /**
     * listBillingSubscriptions
     * @param userId userId
     * @param includeInactive includeInactive
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listBillingSubscriptionsUsingGET(userId: number, includeInactive?: boolean, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<ListBillingSubscriptionsResponse>;
    listBillingSubscriptionsUsingGET(userId: number, includeInactive?: boolean, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<ListBillingSubscriptionsResponse>>;
    listBillingSubscriptionsUsingGET(userId: number, includeInactive?: boolean, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<ListBillingSubscriptionsResponse>>;
    /**
     * listSubscriptionInvoices
     * @param id id
     * @param userId userId
     * @param limit limit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listSubscriptionInvoicesUsingGET(id: string, userId: number, limit?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<ListSubscriptionInvoicesResponse>;
    listSubscriptionInvoicesUsingGET(id: string, userId: number, limit?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<ListSubscriptionInvoicesResponse>>;
    listSubscriptionInvoicesUsingGET(id: string, userId: number, limit?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<ListSubscriptionInvoicesResponse>>;
}
