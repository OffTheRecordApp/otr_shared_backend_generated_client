/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FindChargeDisputesResponse } from '../model/findChargeDisputesResponse';
import { GetCurrentUserResponse } from '../model/getCurrentUserResponse';
import { GetOverduePaymentsResponse } from '../model/getOverduePaymentsResponse';
import { GetSupportTicketsResponse } from '../model/getSupportTicketsResponse';
import { GetUserDetailsResponse } from '../model/getUserDetailsResponse';
import { GetUserStripeAccountResponse } from '../model/getUserStripeAccountResponse';
import { IsUserLoggedInResponse } from '../model/isUserLoggedInResponse';
import { UpdateUserDetailsResponse } from '../model/updateUserDetailsResponse';
import { UpdateUserProfileRequest } from '../model/updateUserProfileRequest';
import { UpdateUserRolesRequest } from '../model/updateUserRolesRequest';
import { ValidateUserEmailResponse } from '../model/validateUserEmailResponse';
import { Configuration } from '../configuration';
export declare class UserControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * findChargeDisputesByUserId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findChargeDisputesByUserIdUsingGET(userId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<FindChargeDisputesResponse>;
    findChargeDisputesByUserIdUsingGET(userId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<FindChargeDisputesResponse>>;
    findChargeDisputesByUserIdUsingGET(userId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<FindChargeDisputesResponse>>;
    /**
     * getCurrentUserInfo
     * @param isAdmin isAdmin
     * @param serviceProviderId serviceProviderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCurrentUserInfoUsingGET(isAdmin?: boolean, serviceProviderId?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetCurrentUserResponse>;
    getCurrentUserInfoUsingGET(isAdmin?: boolean, serviceProviderId?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetCurrentUserResponse>>;
    getCurrentUserInfoUsingGET(isAdmin?: boolean, serviceProviderId?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetCurrentUserResponse>>;
    /**
     * getOverduePayments
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOverduePaymentsUsingGET(userId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetOverduePaymentsResponse>;
    getOverduePaymentsUsingGET(userId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetOverduePaymentsResponse>>;
    getOverduePaymentsUsingGET(userId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetOverduePaymentsResponse>>;
    /**
     * getSupportTicketsForUser
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSupportTicketsForUserUsingGET(email: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetSupportTicketsResponse>;
    getSupportTicketsForUserUsingGET(email: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetSupportTicketsResponse>>;
    getSupportTicketsForUserUsingGET(email: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetSupportTicketsResponse>>;
    /**
     * getUserDetails
     * @param userIdString userIdString
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUserDetailsUsingGET(userIdString: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetUserDetailsResponse>;
    getUserDetailsUsingGET(userIdString: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetUserDetailsResponse>>;
    getUserDetailsUsingGET(userIdString: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetUserDetailsResponse>>;
    /**
     * getUserStripeAccount
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUserStripeAccountUsingGET(userId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<GetUserStripeAccountResponse>;
    getUserStripeAccountUsingGET(userId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<GetUserStripeAccountResponse>>;
    getUserStripeAccountUsingGET(userId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<GetUserStripeAccountResponse>>;
    /**
     * isUserLoggedIn
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    isUserLoggedInUsingGET(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<IsUserLoggedInResponse>;
    isUserLoggedInUsingGET(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<IsUserLoggedInResponse>>;
    isUserLoggedInUsingGET(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<IsUserLoggedInResponse>>;
    /**
     * updateUserProfile
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUserProfileUsingPUT(userId: number, request: UpdateUserProfileRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<UpdateUserDetailsResponse>;
    updateUserProfileUsingPUT(userId: number, request: UpdateUserProfileRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<UpdateUserDetailsResponse>>;
    updateUserProfileUsingPUT(userId: number, request: UpdateUserProfileRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<UpdateUserDetailsResponse>>;
    /**
     * updateUserRoles
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUserRolesUsingPOST(request: UpdateUserRolesRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    updateUserRolesUsingPOST(request: UpdateUserRolesRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    updateUserRolesUsingPOST(request: UpdateUserRolesRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * validateUserByEmail
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    validateUserByEmailUsingGET(email: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<ValidateUserEmailResponse>;
    validateUserByEmailUsingGET(email: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<ValidateUserEmailResponse>>;
    validateUserByEmailUsingGET(email: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<ValidateUserEmailResponse>>;
}
