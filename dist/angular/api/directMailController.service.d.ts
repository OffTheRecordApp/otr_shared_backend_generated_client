/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DirectMailContactResponse } from '../model/directMailContactResponse';
import { DirectMailGetRequest } from '../model/directMailGetRequest';
import { DirectMailSendRequest } from '../model/directMailSendRequest';
import { DirectMailTemplateResponse } from '../model/directMailTemplateResponse';
import { DirectMailTemplateToAdd } from '../model/directMailTemplateToAdd';
import { LobEventRequest } from '../model/lobEventRequest';
import { SendDirectCheckResponse } from '../model/sendDirectCheckResponse';
import { SendDirectMailResponse } from '../model/sendDirectMailResponse';
import { SendDirectReferralCheckRequest } from '../model/sendDirectReferralCheckRequest';
import { ValidateDirectMailRequest } from '../model/validateDirectMailRequest';
import { ValidateDirectMailResponse } from '../model/validateDirectMailResponse';
import { VerifyMailingAddressRequest } from '../model/verifyMailingAddressRequest';
import { VerifyMailingAddressResponse } from '../model/verifyMailingAddressResponse';
import { Configuration } from '../configuration';
export declare class DirectMailControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * addDirectMailTemplate
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addDirectMailTemplateUsingPOST(request: DirectMailTemplateToAdd, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    addDirectMailTemplateUsingPOST(request: DirectMailTemplateToAdd, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    addDirectMailTemplateUsingPOST(request: DirectMailTemplateToAdd, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * getDirectMailTemplates
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDirectMailTemplatesUsingGET(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<DirectMailTemplateResponse>;
    getDirectMailTemplatesUsingGET(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<DirectMailTemplateResponse>>;
    getDirectMailTemplatesUsingGET(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<DirectMailTemplateResponse>>;
    /**
     * getSentMail
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSentMailUsingPOST(request: DirectMailGetRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<DirectMailContactResponse>;
    getSentMailUsingPOST(request: DirectMailGetRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<DirectMailContactResponse>>;
    getSentMailUsingPOST(request: DirectMailGetRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<DirectMailContactResponse>>;
    /**
     * handleLobEvent
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    handleLobEventUsingPOST(request: LobEventRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    handleLobEventUsingPOST(request: LobEventRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    handleLobEventUsingPOST(request: LobEventRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * sendDirectMail
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sendDirectMailUsingPOST(request: DirectMailSendRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SendDirectMailResponse>;
    sendDirectMailUsingPOST(request: DirectMailSendRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SendDirectMailResponse>>;
    sendDirectMailUsingPOST(request: DirectMailSendRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SendDirectMailResponse>>;
    /**
     * sendDirectReferralCheck
     * @param userId userId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sendDirectReferralCheckUsingPOST(userId: number, request: SendDirectReferralCheckRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SendDirectCheckResponse>;
    sendDirectReferralCheckUsingPOST(userId: number, request: SendDirectReferralCheckRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SendDirectCheckResponse>>;
    sendDirectReferralCheckUsingPOST(userId: number, request: SendDirectReferralCheckRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SendDirectCheckResponse>>;
    /**
     * validateDirectMailRequestForSend
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    validateDirectMailRequestForSendUsingPOST(request: ValidateDirectMailRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<ValidateDirectMailResponse>;
    validateDirectMailRequestForSendUsingPOST(request: ValidateDirectMailRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<ValidateDirectMailResponse>>;
    validateDirectMailRequestForSendUsingPOST(request: ValidateDirectMailRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<ValidateDirectMailResponse>>;
    /**
     * verifyMailingAddress
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    verifyMailingAddressUsingPOST(request: VerifyMailingAddressRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<VerifyMailingAddressResponse>;
    verifyMailingAddressUsingPOST(request: VerifyMailingAddressRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<VerifyMailingAddressResponse>>;
    verifyMailingAddressUsingPOST(request: VerifyMailingAddressRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<VerifyMailingAddressResponse>>;
}
