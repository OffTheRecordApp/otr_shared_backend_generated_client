/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FreshDeskTicketReq } from '../model/freshDeskTicketReq';
import { FreshDeskTicketRes } from '../model/freshDeskTicketRes';
import { FreshdeskWebhookRequest } from '../model/freshdeskWebhookRequest';
import { MergeTicketResponse } from '../model/mergeTicketResponse';
import { Configuration } from '../configuration';
export declare class FreshdeskTicketControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * mergeTicket
     * @param ticketId ticketId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    mergeTicketUsingPOST(ticketId: number, request: FreshdeskWebhookRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<MergeTicketResponse>;
    mergeTicketUsingPOST(ticketId: number, request: FreshdeskWebhookRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<MergeTicketResponse>>;
    mergeTicketUsingPOST(ticketId: number, request: FreshdeskWebhookRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<MergeTicketResponse>>;
    /**
     * ticketStatusChangeHook
     * @param ticketId ticketId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    ticketStatusChangeHookUsingPUT(ticketId: string, request: FreshdeskWebhookRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    ticketStatusChangeHookUsingPUT(ticketId: string, request: FreshdeskWebhookRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    ticketStatusChangeHookUsingPUT(ticketId: string, request: FreshdeskWebhookRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * updateFreshdeskTicket
     * @param ticketId ticketId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateFreshdeskTicketUsingPUT(ticketId: number, request: FreshDeskTicketReq, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<FreshDeskTicketRes>;
    updateFreshdeskTicketUsingPUT(ticketId: number, request: FreshDeskTicketReq, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<FreshDeskTicketRes>>;
    updateFreshdeskTicketUsingPUT(ticketId: number, request: FreshDeskTicketReq, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<FreshDeskTicketRes>>;
}
