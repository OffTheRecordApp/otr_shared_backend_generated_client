/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GenerateTemplateRequest } from '../model/generateTemplateRequest';
import { GetEmailTemplateResponse } from '../model/getEmailTemplateResponse';
import { GetOutgoingContactsResponse } from '../model/getOutgoingContactsResponse';
import { ReplyToTicketRequest } from '../model/replyToTicketRequest';
import { SendBookingReceiptRequest } from '../model/sendBookingReceiptRequest';
import { SendConsolidatedEmailToUser } from '../model/sendConsolidatedEmailToUser';
import { SendEmailToUserRequest } from '../model/sendEmailToUserRequest';
import { SendEmailToUsersRequest } from '../model/sendEmailToUsersRequest';
import { Configuration } from '../configuration';
export declare class CrmControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * generateTemplate
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    generateTemplateUsingPOST(request: GenerateTemplateRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetEmailTemplateResponse>;
    generateTemplateUsingPOST(request: GenerateTemplateRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetEmailTemplateResponse>>;
    generateTemplateUsingPOST(request: GenerateTemplateRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetEmailTemplateResponse>>;
    /**
     * getOutgoingContacts
     * @param recipientEmailAddress recipientEmailAddress
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOutgoingContactsUsingGET(recipientEmailAddress: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetOutgoingContactsResponse>;
    getOutgoingContactsUsingGET(recipientEmailAddress: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetOutgoingContactsResponse>>;
    getOutgoingContactsUsingGET(recipientEmailAddress: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetOutgoingContactsResponse>>;
    /**
     * getTemplates
     * @param category category
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getTemplatesUsingGET(category?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<Array<string>>;
    getTemplatesUsingGET(category?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<Array<string>>>;
    getTemplatesUsingGET(category?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<Array<string>>>;
    /**
     * replyToTicket
     * @param ticketId ticketId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    replyToTicketUsingPOST(ticketId: number, request: ReplyToTicketRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<object>;
    replyToTicketUsingPOST(ticketId: number, request: ReplyToTicketRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    replyToTicketUsingPOST(ticketId: number, request: ReplyToTicketRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * sendBookingReceipt
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sendBookingReceiptUsingPOST(request: SendBookingReceiptRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    sendBookingReceiptUsingPOST(request: SendBookingReceiptRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    sendBookingReceiptUsingPOST(request: SendBookingReceiptRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * sendConsolidatedEmailToUser
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sendConsolidatedEmailToUserUsingPOST(request: SendConsolidatedEmailToUser, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<object>;
    sendConsolidatedEmailToUserUsingPOST(request: SendConsolidatedEmailToUser, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<object>>;
    sendConsolidatedEmailToUserUsingPOST(request: SendConsolidatedEmailToUser, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<object>>;
    /**
     * sendEmailToUser
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sendEmailToUserUsingPOST(request: SendEmailToUserRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    sendEmailToUserUsingPOST(request: SendEmailToUserRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    sendEmailToUserUsingPOST(request: SendEmailToUserRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * sendEmailToUsers
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    sendEmailToUsersUsingPOST(request: SendEmailToUsersRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    sendEmailToUsersUsingPOST(request: SendEmailToUsersRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    sendEmailToUsersUsingPOST(request: SendEmailToUsersRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
}
