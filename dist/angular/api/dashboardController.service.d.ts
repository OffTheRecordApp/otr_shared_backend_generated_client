/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetBookingsRequest } from '../model/getBookingsRequest';
import { GetBookingsResponse } from '../model/getBookingsResponse';
import { GetUserRegistrationsRequest } from '../model/getUserRegistrationsRequest';
import { GetUserRegistrationsResponse } from '../model/getUserRegistrationsResponse';
import { GraphRequest } from '../model/graphRequest';
import { SqlResponse } from '../model/sqlResponse';
import { Configuration } from '../configuration';
export declare class DashboardControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * getBookings
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getBookingsUsingPOST(request: GetBookingsRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetBookingsResponse>;
    getBookingsUsingPOST(request: GetBookingsRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetBookingsResponse>>;
    getBookingsUsingPOST(request: GetBookingsRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetBookingsResponse>>;
    /**
     * getRegisteredUsers
     * @param graphRequest graphRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getRegisteredUsersUsingPOST(graphRequest: GraphRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<SqlResponse>;
    getRegisteredUsersUsingPOST(graphRequest: GraphRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<SqlResponse>>;
    getRegisteredUsersUsingPOST(graphRequest: GraphRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<SqlResponse>>;
    /**
     * getUserRegistrations
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUserRegistrationsUsingPOST(request: GetUserRegistrationsRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<GetUserRegistrationsResponse>;
    getUserRegistrationsUsingPOST(request: GetUserRegistrationsRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<GetUserRegistrationsResponse>>;
    getUserRegistrationsUsingPOST(request: GetUserRegistrationsRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<GetUserRegistrationsResponse>>;
    /**
     * listCasesByStatus
     * @param graphRequest graphRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listCasesByStatusUsingPOST(graphRequest: GraphRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<SqlResponse>;
    listCasesByStatusUsingPOST(graphRequest: GraphRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<SqlResponse>>;
    listCasesByStatusUsingPOST(graphRequest: GraphRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<SqlResponse>>;
    /**
     * listCustomers
     * @param graphRequest graphRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listCustomersUsingPOST(graphRequest: GraphRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<SqlResponse>;
    listCustomersUsingPOST(graphRequest: GraphRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<SqlResponse>>;
    listCustomersUsingPOST(graphRequest: GraphRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<SqlResponse>>;
    /**
     * listDropoffs
     * @param graphRequest graphRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listDropoffsUsingPOST(graphRequest: GraphRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<SqlResponse>;
    listDropoffsUsingPOST(graphRequest: GraphRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<SqlResponse>>;
    listDropoffsUsingPOST(graphRequest: GraphRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<SqlResponse>>;
    /**
     * listExpenses
     * @param graphRequest graphRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listExpensesUsingPOST(graphRequest: GraphRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<SqlResponse>;
    listExpensesUsingPOST(graphRequest: GraphRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<SqlResponse>>;
    listExpensesUsingPOST(graphRequest: GraphRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<SqlResponse>>;
    /**
     * listLawyerLeads
     * @param graphRequest graphRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listLawyerLeadsUsingPOST(graphRequest: GraphRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<SqlResponse>;
    listLawyerLeadsUsingPOST(graphRequest: GraphRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpResponse<SqlResponse>>;
    listLawyerLeadsUsingPOST(graphRequest: GraphRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
        context?: HttpContext;
    }): Observable<HttpEvent<SqlResponse>>;
}
