/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SyncStripeChargesRequest } from '../model/syncStripeChargesRequest';
import { SyncStripeChargesResponse } from '../model/syncStripeChargesResponse';
import { SyncStripeDisputeResponse } from '../model/syncStripeDisputeResponse';
import { SyncStripePaymentsRequest } from '../model/syncStripePaymentsRequest';
import { SyncStripePaymentsResponse } from '../model/syncStripePaymentsResponse';
import { SyncStripeRefundsRequest } from '../model/syncStripeRefundsRequest';
import { SyncStripeTransfersRequest } from '../model/syncStripeTransfersRequest';
import { SyncStripeTransfersResponse } from '../model/syncStripeTransfersResponse';
import { Configuration } from '../configuration';
export declare class StripeSyncControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string | string[], configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * syncAllDisputes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    syncAllDisputesUsingPOST(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<any>;
    syncAllDisputesUsingPOST(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpResponse<any>>;
    syncAllDisputesUsingPOST(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
        context?: HttpContext;
    }): Observable<HttpEvent<any>>;
    /**
     * syncDispute
     * @param disputeId disputeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    syncDisputeUsingPOST(disputeId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SyncStripeDisputeResponse>;
    syncDisputeUsingPOST(disputeId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SyncStripeDisputeResponse>>;
    syncDisputeUsingPOST(disputeId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SyncStripeDisputeResponse>>;
    /**
     * syncStripeCharges
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    syncStripeChargesUsingPOST(request: SyncStripeChargesRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SyncStripeChargesResponse>;
    syncStripeChargesUsingPOST(request: SyncStripeChargesRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SyncStripeChargesResponse>>;
    syncStripeChargesUsingPOST(request: SyncStripeChargesRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SyncStripeChargesResponse>>;
    /**
     * syncStripePayments
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    syncStripePaymentsUsingPOST(request: SyncStripePaymentsRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SyncStripePaymentsResponse>;
    syncStripePaymentsUsingPOST(request: SyncStripePaymentsRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SyncStripePaymentsResponse>>;
    syncStripePaymentsUsingPOST(request: SyncStripePaymentsRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SyncStripePaymentsResponse>>;
    /**
     * syncStripeRefunds
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    syncStripeRefundsUsingPOST(request: SyncStripeRefundsRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SyncStripeChargesResponse>;
    syncStripeRefundsUsingPOST(request: SyncStripeRefundsRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SyncStripeChargesResponse>>;
    syncStripeRefundsUsingPOST(request: SyncStripeRefundsRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SyncStripeChargesResponse>>;
    /**
     * syncStripeTransfers
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    syncStripeTransfersUsingPOST(request: SyncStripeTransfersRequest, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<SyncStripeTransfersResponse>;
    syncStripeTransfersUsingPOST(request: SyncStripeTransfersRequest, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpResponse<SyncStripeTransfersResponse>>;
    syncStripeTransfersUsingPOST(request: SyncStripeTransfersRequest, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
        context?: HttpContext;
    }): Observable<HttpEvent<SyncStripeTransfersResponse>>;
}
