/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class CaseFinancialsControllerApi {
    protected basePath = 'https://otr-backend-service-us-devo.offtherecord.com:443';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary deleteCaseLineItem
     * @param caseId caseId
     * @param lineItemId lineItemId
     */
    public deleteCaseLineItemUsingDELETE (caseId: string, lineItemId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/lineitems/{lineItemId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'lineItemId' + '}', encodeURIComponent(String(lineItemId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling deleteCaseLineItemUsingDELETE.');
        }

        // verify required parameter 'lineItemId' is not null or undefined
        if (lineItemId === null || lineItemId === undefined) {
            throw new Error('Required parameter lineItemId was null or undefined when calling deleteCaseLineItemUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getCaseCharges
     * @param caseId caseId
     */
    public getCaseChargesUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCaseChargesResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/charges'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getCaseChargesUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getCaseFinancials
     * @param caseId caseId
     */
    public getCaseFinancialsUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCaseFinancialsResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/financials'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling getCaseFinancialsUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary insertCaseLineItem
     * @param caseId caseId
     * @param request request
     */
    public insertCaseLineItemUsingPOST (caseId: string, request: models.InsertInvoiceLineItemRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/lineitems'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling insertCaseLineItemUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling insertCaseLineItemUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listCostItemsForAttorney
     * @param caseId caseId
     */
    public listCostItemsForAttorneyUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCaseCostsAttorneyResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/attorney/cost'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling listCostItemsForAttorneyUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary listCostItemsForCustomer
     * @param caseId caseId
     */
    public listCostItemsForCustomerUsingGET (caseId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetCaseLineItemsResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/customer/cost'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling listCostItemsForCustomerUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary submitRequestForPriceMatch
     * @param caseId caseId
     * @param priceMatchRequest priceMatchRequest
     */
    public submitRequestForPriceMatchUsingPOST (caseId: string, priceMatchRequest: models.PriceMatchRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PriceMatchResponse> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/price-match'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
        }

        // verify required parameter 'priceMatchRequest' is not null or undefined
        if (priceMatchRequest === null || priceMatchRequest === undefined) {
            throw new Error('Required parameter priceMatchRequest was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: priceMatchRequest,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateCaseLineItem
     * @param caseId caseId
     * @param lineItemId lineItemId
     * @param request request
     */
    public updateCaseLineItemUsingPUT (caseId: string, lineItemId: string, request: models.UpdateInvoiceLineItemRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<any> {
        const localVarPath = this.basePath + '/api/v1/cases/{caseId}/lineitems/{lineItemId}'
            .replace('{' + 'caseId' + '}', encodeURIComponent(String(caseId)))
            .replace('{' + 'lineItemId' + '}', encodeURIComponent(String(lineItemId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'caseId' is not null or undefined
        if (caseId === null || caseId === undefined) {
            throw new Error('Required parameter caseId was null or undefined when calling updateCaseLineItemUsingPUT.');
        }

        // verify required parameter 'lineItemId' is not null or undefined
        if (lineItemId === null || lineItemId === undefined) {
            throw new Error('Required parameter lineItemId was null or undefined when calling updateCaseLineItemUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateCaseLineItemUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
