/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class LawfirmControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com:443';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary addLawfirmAddress
     * @param lawfirmId lawfirmId
     * @param request request
     */
    public addLawfirmAddressUsingPOST (lawfirmId: number, request: models.UpsertAddressRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/addresses'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling addLawfirmAddressUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling addLawfirmAddressUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary createLawfirm
     * @param request request
     */
    public createLawfirmUsingPOST (request: models.CreateNewLawfirmRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createLawfirmUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary deleteLawfirmConnectedAccount
     * @param lawfirmId lawfirmId
     */
    public deleteLawfirmConnectedAccountUsingDELETE (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/stripe/account'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmAddresses
     * @param lawfirmId lawfirmId
     */
    public getLawfirmAddressesUsingGET (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmAddressesResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/addresses'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmAddressesUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmCaseStats
     * @param lawfirmId lawfirmId
     */
    public getLawfirmCaseStatsUsingGET (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmCaseStatsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/cases/stats'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmCaseStatsUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmInboxMessages
     * @param lawfirmId lawfirmId
     * @param page page
     * @param length length
     */
    public getLawfirmInboxMessagesUsingGET (lawfirmId: number, page?: number, length?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmInboxMessagesResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/messages'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmInboxMessagesUsingGET.');
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (length !== undefined) {
            queryParameters['length'] = length;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmLawyers
     * @param lawfirmIdString lawfirmIdString
     */
    public getLawfirmLawyersUsingGET (lawfirmIdString: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}/lawyers'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling getLawfirmLawyersUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmStatuses
     */
    public getLawfirmStatusesUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/statuses';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirm
     * @param lawfirmIdString lawfirmIdString
     * @param isDetailsRequired isDetailsRequired
     */
    public getLawfirmUsingGET (lawfirmIdString: string, isDetailsRequired?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling getLawfirmUsingGET.');
        }

        if (isDetailsRequired !== undefined) {
            queryParameters['isDetailsRequired'] = isDetailsRequired;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirms
     * @param q q
     * @param states states
     * @param statuses statuses
     * @param includeTestLawfirms includeTestLawfirms
     * @param includeVacationMode includeVacationMode
     * @param acceptsAccidentTickets acceptsAccidentTickets
     * @param acceptsPastDueTickets acceptsPastDueTickets
     */
    public getLawfirmsUsingGET (q?: string, states?: Array<string>, statuses?: Array<string>, includeTestLawfirms?: boolean, includeVacationMode?: boolean, acceptsAccidentTickets?: boolean, acceptsPastDueTickets?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmsResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (states !== undefined) {
            queryParameters['states'] = states;
        }

        if (statuses !== undefined) {
            queryParameters['statuses'] = statuses;
        }

        if (includeTestLawfirms !== undefined) {
            queryParameters['includeTestLawfirms'] = includeTestLawfirms;
        }

        if (includeVacationMode !== undefined) {
            queryParameters['includeVacationMode'] = includeVacationMode;
        }

        if (acceptsAccidentTickets !== undefined) {
            queryParameters['acceptsAccidentTickets'] = acceptsAccidentTickets;
        }

        if (acceptsPastDueTickets !== undefined) {
            queryParameters['acceptsPastDueTickets'] = acceptsPastDueTickets;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getOtrLawfirmNotes
     * @param lawfirmId lawfirmId
     */
    public getOtrLawfirmNotesUsingGET (lawfirmId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/otr-notes'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getOtrLawfirmNotesUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getStripeConnectedAccount
     * @param lawfirmIdString lawfirmIdString
     */
    public getStripeConnectedAccountUsingGET (lawfirmIdString: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetStripeConnectedAccountResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}/stripe'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling getStripeConnectedAccountUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getSupportedStatesForLawfirm
     * @param lawfirmId lawfirmId
     */
    public getSupportedStatesForLawfirmUsingGET (lawfirmId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmSupportedStatesResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/supported-states'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getSupportedStatesForLawfirmUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirmAddress
     * @param lawfirmId lawfirmId
     * @param addressId addressId
     * @param request request
     */
    public updateLawfirmAddressUsingPUT (lawfirmId: number, addressId: number, request: models.UpsertAddressRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/addresses/{addressId}'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)))
            .replace('{' + 'addressId' + '}', encodeURIComponent(String(addressId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        // verify required parameter 'addressId' is not null or undefined
        if (addressId === null || addressId === undefined) {
            throw new Error('Required parameter addressId was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirmSettings
     * @param lawfirmIdString lawfirmIdString
     * @param request request
     */
    public updateLawfirmSettingsUsingPOST (lawfirmIdString: string, request: models.UpdateLawfirmSettingsRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}/settings'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling updateLawfirmSettingsUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmSettingsUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirm
     * @param lawfirmIdString lawfirmIdString
     * @param request request
     */
    public updateLawfirmUsingPUT (lawfirmIdString: string, request: models.UpdateLawfirmRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling updateLawfirmUsingPUT.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateLawfirmUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary updateLawfirmWithPicture
     * @param lawfirmId lawfirmId
     * @param lawfirmPictureRequest lawfirmPictureRequest
     */
    public updateLawfirmWithPictureUsingPUT (lawfirmId: string, lawfirmPictureRequest: models.LawfirmDomainPictureRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/picture'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
        }

        // verify required parameter 'lawfirmPictureRequest' is not null or undefined
        if (lawfirmPictureRequest === null || lawfirmPictureRequest === undefined) {
            throw new Error('Required parameter lawfirmPictureRequest was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: lawfirmPictureRequest,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
