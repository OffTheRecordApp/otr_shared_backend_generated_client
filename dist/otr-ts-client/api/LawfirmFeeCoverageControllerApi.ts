/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class LawfirmFeeCoverageControllerApi {
    protected basePath = 'http://otr-backend-service-us-devo.offtherecord.com:443';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary addCourtToCoverage
     * @param lawfirmIdString lawfirmIdString
     * @param request request
     */
    public addCourtToCoverageUsingPOST (lawfirmIdString: string, request: models.PostCourtCoverageRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}/courts'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling addCourtToCoverageUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling addCourtToCoverageUsingPOST.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getAccountFees
     * @param lawfirmId lawfirmId
     */
    public getAccountFeesUsingGET (lawfirmId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.AccountLevelFeeResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/account-fees'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getAccountFeesUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmCoverage
     * @param lawfirmIdString lawfirmIdString
     */
    public getLawfirmCoverageUsingGET (lawfirmIdString: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmCoverageResponse> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmIdString}/coverage'
            .replace('{' + 'lawfirmIdString' + '}', encodeURIComponent(String(lawfirmIdString)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmIdString' is not null or undefined
        if (lawfirmIdString === null || lawfirmIdString === undefined) {
            throw new Error('Required parameter lawfirmIdString was null or undefined when calling getLawfirmCoverageUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getLawfirmFeeCoverage
     * @param lawfirmId lawfirmId
     */
    public getLawfirmFeeCoverageUsingGET (lawfirmId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetLawfirmFeeCoverageResponse> {
        const localVarPath = this.basePath + '/api/v2/lawfirms/{lawfirmId}/coverage'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling getLawfirmFeeCoverageUsingGET.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary removeCourts
     * @param lawfirmId lawfirmId
     * @param courtsToRemove courtsToRemove
     */
    public removeCourtsUsingDELETE (lawfirmId: string, courtsToRemove: Array<number>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/courts'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling removeCourtsUsingDELETE.');
        }

        // verify required parameter 'courtsToRemove' is not null or undefined
        if (courtsToRemove === null || courtsToRemove === undefined) {
            throw new Error('Required parameter courtsToRemove was null or undefined when calling removeCourtsUsingDELETE.');
        }

        if (courtsToRemove !== undefined) {
            queryParameters['courtsToRemove'] = courtsToRemove;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary removeCoverage
     * @param lawfirmId lawfirmId
     * @param courtsToRemove courtsToRemove
     */
    public removeCoverageUsingDELETE (lawfirmId: string, courtsToRemove: models.RemoveCoverageRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/api/v2/lawfirms/{lawfirmId}/courts'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling removeCoverageUsingDELETE.');
        }

        // verify required parameter 'courtsToRemove' is not null or undefined
        if (courtsToRemove === null || courtsToRemove === undefined) {
            throw new Error('Required parameter courtsToRemove was null or undefined when calling removeCoverageUsingDELETE.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            data: courtsToRemove,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary saveAccountFees
     * @param lawfirmId lawfirmId
     * @param isSyncEnabled isSyncEnabled
     * @param request request
     */
    public saveAccountFeesUsingPOST (lawfirmId: string, isSyncEnabled: boolean, request: models.AccountLevelFeeRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<object> {
        const localVarPath = this.basePath + '/api/v1/lawfirms/{lawfirmId}/account-fees'
            .replace('{' + 'lawfirmId' + '}', encodeURIComponent(String(lawfirmId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lawfirmId' is not null or undefined
        if (lawfirmId === null || lawfirmId === undefined) {
            throw new Error('Required parameter lawfirmId was null or undefined when calling saveAccountFeesUsingPOST.');
        }

        // verify required parameter 'isSyncEnabled' is not null or undefined
        if (isSyncEnabled === null || isSyncEnabled === undefined) {
            throw new Error('Required parameter isSyncEnabled was null or undefined when calling saveAccountFeesUsingPOST.');
        }

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveAccountFeesUsingPOST.');
        }

        if (isSyncEnabled !== undefined) {
            queryParameters['isSyncEnabled'] = isSyncEnabled;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
