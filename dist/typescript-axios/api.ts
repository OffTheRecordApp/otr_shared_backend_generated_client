// tslint:disable
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountLevelFee
 */
export interface AccountLevelFee {
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFee
     */
    classification?: AccountLevelFeeClassificationEnum;
    /**
     * 
     * @type {number}
     * @memberof AccountLevelFee
     */
    classificationId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AccountLevelFee
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountLevelFee
     */
    isPermitted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountLevelFee
     */
    lawfirmFee?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFee
     */
    lawyerfriendlyClassName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFee
     */
    refundEligibility?: AccountLevelFeeRefundEligibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFee
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFee
     */
    violationCodes?: string;
    /**
     * 
     * @type {number}
     * @memberof AccountLevelFee
     */
    violationId?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFee
     */
    violationName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountLevelFeeClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}
/**
    * @export
    * @enum {string}
    */
export enum AccountLevelFeeRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface AccountLevelFeeRequest
 */
export interface AccountLevelFeeRequest {
    /**
     * 
     * @type {Array<AccountLevelFeeToSave>}
     * @memberof AccountLevelFeeRequest
     */
    fees?: Array<AccountLevelFeeToSave>;
}
/**
 * 
 * @export
 * @interface AccountLevelFeeResponse
 */
export interface AccountLevelFeeResponse {
    /**
     * 
     * @type {Array<DefaultClassModel>}
     * @memberof AccountLevelFeeResponse
     */
    defaultClassByRegions?: Array<DefaultClassModel>;
    /**
     * 
     * @type {Array<AccountLevelFee>}
     * @memberof AccountLevelFeeResponse
     */
    fees?: Array<AccountLevelFee>;
}
/**
 * 
 * @export
 * @interface AccountLevelFeeToSave
 */
export interface AccountLevelFeeToSave {
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFeeToSave
     */
    classification?: AccountLevelFeeToSaveClassificationEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AccountLevelFeeToSave
     */
    isPermitted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountLevelFeeToSave
     */
    lawfirmFee?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFeeToSave
     */
    refundEligibility?: AccountLevelFeeToSaveRefundEligibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountLevelFeeToSave
     */
    regionCode?: string;
    /**
     * 
     * @type {number}
     * @memberof AccountLevelFeeToSave
     */
    violationId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountLevelFeeToSaveClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}
/**
    * @export
    * @enum {string}
    */
export enum AccountLevelFeeToSaveRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface ActivityFeedModel
 */
export interface ActivityFeedModel {
    /**
     * 
     * @type {string}
     * @memberof ActivityFeedModel
     */
    activityDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityFeedModel
     */
    activityDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityFeedModel
     */
    activityDescriptionInHtml?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityFeedModel
     */
    activityType?: ActivityFeedModelActivityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ActivityFeedModel
     */
    ownerName?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityFeedModel
     */
    privacyMode?: ActivityFeedModelPrivacyModeEnum;
    /**
     * 
     * @type {string}
     * @memberof ActivityFeedModel
     */
    profilePicUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ActivityFeedModelActivityTypeEnum {
    PURCHASE = 'PURCHASE',
    REFERRAL = 'REFERRAL',
    REFUND = 'REFUND',
    RESOLUTION = 'RESOLUTION',
    TICKETREVIEW = 'TICKET_REVIEW'
}
/**
    * @export
    * @enum {string}
    */
export enum ActivityFeedModelPrivacyModeEnum {
    FRIENDS = 'FRIENDS',
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    SEMIPUBLIC = 'SEMI_PUBLIC'
}

/**
 * 
 * @export
 * @interface AddACHToStripeAccountRequest
 */
export interface AddACHToStripeAccountRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AddACHToStripeAccountRequest
     */
    makeDefault?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddACHToStripeAccountRequest
     */
    plaidBankAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof AddACHToStripeAccountRequest
     */
    plaidPublicToken?: string;
}
/**
 * 
 * @export
 * @interface AddActionToCaseRequest
 */
export interface AddActionToCaseRequest {
    /**
     * 
     * @type {CaseActionDomainReq}
     * @memberof AddActionToCaseRequest
     */
    caseAction?: CaseActionDomainReq;
}
/**
 * 
 * @export
 * @interface AddActionToCaseResponse
 */
export interface AddActionToCaseResponse {
    /**
     * 
     * @type {CaseDomain}
     * @memberof AddActionToCaseResponse
     */
    theCase?: CaseDomain;
}
/**
 * 
 * @export
 * @interface AddCardToStripeAccountRequest
 */
export interface AddCardToStripeAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof AddCardToStripeAccountRequest
     */
    caseId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddCardToStripeAccountRequest
     */
    makeDefault?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddCardToStripeAccountRequest
     */
    sourceToken?: string;
    /**
     * 
     * @type {string}
     * @memberof AddCardToStripeAccountRequest
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface AddCardToStripeAccountResponse
 */
export interface AddCardToStripeAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof AddCardToStripeAccountResponse
     */
    cardId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddCardToStripeAccountResponse
     */
    _default?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddCardToStripeAccountResponse
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface AddCaseMessageResponse
 */
export interface AddCaseMessageResponse {
    /**
     * 
     * @type {CaseMessageDomain}
     * @memberof AddCaseMessageResponse
     */
    messageAdded?: CaseMessageDomain;
}
/**
 * 
 * @export
 * @interface AddCourtCoverageRequest
 */
export interface AddCourtCoverageRequest {
    /**
     * 
     * @type {number}
     * @memberof AddCourtCoverageRequest
     */
    courtId?: number;
    /**
     * 
     * @type {number}
     * @memberof AddCourtCoverageRequest
     */
    lawfirmFee?: number;
    /**
     * 
     * @type {string}
     * @memberof AddCourtCoverageRequest
     */
    refundEligibility?: AddCourtCoverageRequestRefundEligibilityEnum;
    /**
     * 
     * @type {number}
     * @memberof AddCourtCoverageRequest
     */
    violationId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AddCourtCoverageRequestRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface AddCourtRequest
 */
export interface AddCourtRequest {
    /**
     * 
     * @type {AddInnerCourtAddress}
     * @memberof AddCourtRequest
     */
    address?: AddInnerCourtAddress;
    /**
     * 
     * @type {AddInnerCourt}
     * @memberof AddCourtRequest
     */
    court?: AddInnerCourt;
    /**
     * 
     * @type {boolean}
     * @memberof AddCourtRequest
     */
    forceAdd?: boolean;
}
/**
 * 
 * @export
 * @interface AddCustomerLeadRequest
 */
export interface AddCustomerLeadRequest {
    /**
     * 
     * @type {CustomerLead}
     * @memberof AddCustomerLeadRequest
     */
    lead?: CustomerLead;
}
/**
 * 
 * @export
 * @interface AddExtraAccountRequest
 */
export interface AddExtraAccountRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AddExtraAccountRequest
     */
    isPrimaryAccount?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddExtraAccountRequest
     */
    newEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof AddExtraAccountRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface AddInnerCourt
 */
export interface AddInnerCourt {
    /**
     * 
     * @type {CountyDomain}
     * @memberof AddInnerCourt
     */
    countyObj?: CountyDomain;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourt
     */
    courtCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourt
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourt
     */
    courtNameAdditional?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourt
     */
    courtType?: AddInnerCourtCourtTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AddInnerCourt
     */
    otrTargetFee?: number;
    /**
     * 
     * @type {number}
     * @memberof AddInnerCourt
     */
    unserviceableRequests?: number;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourt
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddInnerCourtCourtTypeEnum {
    CIRCUIT = 'CIRCUIT',
    COUNTYCLERK = 'COUNTY_CLERK',
    DISTRICT = 'DISTRICT',
    JUVENILE = 'JUVENILE',
    MUNICIPAL = 'MUNICIPAL',
    PROBATION = 'PROBATION',
    SUPERIOR = 'SUPERIOR',
    VIOLATIONSBUREAU = 'VIOLATIONS_BUREAU'
}

/**
 * 
 * @export
 * @interface AddInnerCourtAddress
 */
export interface AddInnerCourtAddress {
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourtAddress
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourtAddress
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourtAddress
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourtAddress
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourtAddress
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof AddInnerCourtAddress
     */
    postalCode?: string;
    /**
     * 
     * @type {CountryRegion}
     * @memberof AddInnerCourtAddress
     */
    region?: CountryRegion;
}
/**
 * 
 * @export
 * @interface AddNewCaseMessageRequest
 */
export interface AddNewCaseMessageRequest {
    /**
     * 
     * @type {MessageInputModel}
     * @memberof AddNewCaseMessageRequest
     */
    messageDomain?: MessageInputModel;
}
/**
 * 
 * @export
 * @interface AddNoteToPhoneLeadRequest
 */
export interface AddNoteToPhoneLeadRequest {
    /**
     * 
     * @type {string}
     * @memberof AddNoteToPhoneLeadRequest
     */
    entityType?: AddNoteToPhoneLeadRequestEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddNoteToPhoneLeadRequest
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof AddNoteToPhoneLeadRequest
     */
    referenceId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddNoteToPhoneLeadRequestEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}

/**
 * 
 * @export
 * @interface AddPenaltyRequest
 */
export interface AddPenaltyRequest {
    /**
     * 
     * @type {Array<PenaltyRequest>}
     * @memberof AddPenaltyRequest
     */
    penaltiesToAdd?: Array<PenaltyRequest>;
}
/**
 * 
 * @export
 * @interface AddRedirectUrlRequest
 */
export interface AddRedirectUrlRequest {
    /**
     * 
     * @type {string}
     * @memberof AddRedirectUrlRequest
     */
    landingPageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof AddRedirectUrlRequest
     */
    pageType?: AddRedirectUrlRequestPageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddRedirectUrlRequest
     */
    redirectType?: AddRedirectUrlRequestRedirectTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddRedirectUrlRequest
     */
    redirectUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof AddRedirectUrlRequest
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddRedirectUrlRequestPageTypeEnum {
    DEBUG = 'DEBUG',
    SEO = 'SEO',
    VANITY = 'VANITY'
}
/**
    * @export
    * @enum {string}
    */
export enum AddRedirectUrlRequestRedirectTypeEnum {
    PERMANENT = 'PERMANENT',
    TEMPORARY = 'TEMPORARY'
}

/**
 * 
 * @export
 * @interface AddReviewRequest
 */
export interface AddReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof AddReviewRequest
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof AddReviewRequest
     */
    copy?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddReviewRequest
     */
    isRecommended?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddReviewRequest
     */
    privacyMode?: AddReviewRequestPrivacyModeEnum;
    /**
     * 
     * @type {ReviewRatingModel}
     * @memberof AddReviewRequest
     */
    ratingModel?: ReviewRatingModel;
    /**
     * 
     * @type {string}
     * @memberof AddReviewRequest
     */
    source?: AddReviewRequestSourceEnum;
    /**
     * 
     * @type {number}
     * @memberof AddReviewRequest
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AddReviewRequestPrivacyModeEnum {
    FRIENDS = 'FRIENDS',
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    SEMIPUBLIC = 'SEMI_PUBLIC'
}
/**
    * @export
    * @enum {string}
    */
export enum AddReviewRequestSourceEnum {
    ANDROID = 'ANDROID',
    APPLE = 'APPLE',
    FACEBOOK = 'FACEBOOK',
    GOOGLEBUSINESS = 'GOOGLE_BUSINESS',
    OTR = 'OTR',
    REVIEWSIO = 'REVIEWS_IO'
}

/**
 * 
 * @export
 * @interface AddViolationRequest
 */
export interface AddViolationRequest {
    /**
     * 
     * @type {string}
     * @memberof AddViolationRequest
     */
    stateAbbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationRequest
     */
    userFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationRequest
     */
    userFriendlyShortForm?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationRequest
     */
    violationClassification?: AddViolationRequestViolationClassificationEnum;
    /**
     * 
     * @type {string}
     * @memberof AddViolationRequest
     */
    violationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationRequest
     */
    violationDescription?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddViolationRequestViolationClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface AddViolationResponse
 */
export interface AddViolationResponse {
    /**
     * 
     * @type {number}
     * @memberof AddViolationResponse
     */
    otrViolationId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddViolationResponse
     */
    stateAbbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationResponse
     */
    userFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationResponse
     */
    userFriendlyShortForm?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationResponse
     */
    violationClassification?: AddViolationResponseViolationClassificationEnum;
    /**
     * 
     * @type {string}
     * @memberof AddViolationResponse
     */
    violationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddViolationResponse
     */
    violationDescription?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddViolationResponseViolationClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface AddViolationsToCitationRequest
 */
export interface AddViolationsToCitationRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof AddViolationsToCitationRequest
     */
    violationTypes?: Array<number>;
}
/**
 * 
 * @export
 * @interface AddressDomain
 */
export interface AddressDomain {
    /**
     * 
     * @type {number}
     * @memberof AddressDomain
     */
    addressId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    addressedTo?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    entityType?: AddressDomainEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    fullAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    postalCode?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressDomain
     */
    referenceId?: number;
    /**
     * 
     * @type {CountryRegion}
     * @memberof AddressDomain
     */
    region?: CountryRegion;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    state?: AddressDomainStateEnum;
    /**
     * 
     * @type {string}
     * @memberof AddressDomain
     */
    timeZoneName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressDomainEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum AddressDomainStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface AddressDomainReq
 */
export interface AddressDomainReq {
    /**
     * 
     * @type {number}
     * @memberof AddressDomainReq
     */
    addressId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    addressedTo?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    entityType?: AddressDomainReqEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    postalCode?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressDomainReq
     */
    referenceId?: number;
    /**
     * 
     * @type {CountryRegion}
     * @memberof AddressDomainReq
     */
    region?: CountryRegion;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    state?: AddressDomainReqStateEnum;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainReq
     */
    timeZoneName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressDomainReqEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum AddressDomainReqStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface AddressDomainRes
 */
export interface AddressDomainRes {
    /**
     * 
     * @type {number}
     * @memberof AddressDomainRes
     */
    addressId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    addressedTo?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    entityType?: AddressDomainResEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    fullAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    postalCode?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressDomainRes
     */
    referenceId?: number;
    /**
     * 
     * @type {CountryRegion}
     * @memberof AddressDomainRes
     */
    region?: CountryRegion;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    state?: AddressDomainResStateEnum;
    /**
     * 
     * @type {string}
     * @memberof AddressDomainRes
     */
    timeZoneName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressDomainResEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum AddressDomainResStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface AggregateBySource
 */
export interface AggregateBySource {
    /**
     * 
     * @type {number}
     * @memberof AggregateBySource
     */
    overallRating?: number;
    /**
     * 
     * @type {string}
     * @memberof AggregateBySource
     */
    reviewSource?: AggregateBySourceReviewSourceEnum;
    /**
     * 
     * @type {number}
     * @memberof AggregateBySource
     */
    totalRatingCount?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateBySource
     */
    totalReviewCount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AggregateBySourceReviewSourceEnum {
    ANDROID = 'ANDROID',
    APPLE = 'APPLE',
    FACEBOOK = 'FACEBOOK',
    GOOGLEBUSINESS = 'GOOGLE_BUSINESS',
    OTR = 'OTR',
    REVIEWSIO = 'REVIEWS_IO'
}

/**
 * 
 * @export
 * @interface AggregateRatingMetrics
 */
export interface AggregateRatingMetrics {
    /**
     * 
     * @type {Array<AggregateBySource>}
     * @memberof AggregateRatingMetrics
     */
    aggregatesBySource?: Array<AggregateBySource>;
    /**
     * 
     * @type {number}
     * @memberof AggregateRatingMetrics
     */
    overallRating?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateRatingMetrics
     */
    totalRatingCount?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateRatingMetrics
     */
    totalReviewCount?: number;
}
/**
 * 
 * @export
 * @interface AggregateReferralCredit
 */
export interface AggregateReferralCredit {
    /**
     * 
     * @type {number}
     * @memberof AggregateReferralCredit
     */
    availableCreditValue?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateReferralCredit
     */
    earnedCreditValue?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateReferralCredit
     */
    redeemedCreditValue?: number;
}
/**
 * 
 * @export
 * @interface Alert
 */
export interface Alert {
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    actionType?: AlertActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    alertId?: string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    alertType?: AlertAlertTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    bannerMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    clickThruUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    hexColor?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AlertActionTypeEnum {
    ANNOUNCEMENT = 'ANNOUNCEMENT',
    ENGAGEMENTLETTER = 'ENGAGEMENT_LETTER'
}
/**
    * @export
    * @enum {string}
    */
export enum AlertAlertTypeEnum {
    ERROR = 'ERROR',
    INFO = 'INFO',
    SUCCESS = 'SUCCESS',
    WARNING = 'WARNING'
}

/**
 * 
 * @export
 * @interface AlertNotificationResponse
 */
export interface AlertNotificationResponse {
    /**
     * 
     * @type {Array<Alert>}
     * @memberof AlertNotificationResponse
     */
    alerts?: Array<Alert>;
    /**
     * 
     * @type {Array<CaseAlert>}
     * @memberof AlertNotificationResponse
     */
    caseAlerts?: Array<CaseAlert>;
}
/**
 * 
 * @export
 * @interface AppEventCreateRequest
 */
export interface AppEventCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppEventCreateRequest
     */
    appEventName?: AppEventCreateRequestAppEventNameEnum;
    /**
     * 
     * @type {string}
     * @memberof AppEventCreateRequest
     */
    fingerPrintId?: string;
    /**
     * 
     * @type {string}
     * @memberof AppEventCreateRequest
     */
    overrideEventDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AppEventCreateRequestAppEventNameEnum {
    FIRSTOPEN = 'FIRST_OPEN',
    INSTALL = 'INSTALL',
    PREINSTALLENGAGEMENT = 'PRE_INSTALL_ENGAGEMENT'
}

/**
 * 
 * @export
 * @interface AppearanceAttorneyDomain
 */
export interface AppearanceAttorneyDomain {
    /**
     * 
     * @type {string}
     * @memberof AppearanceAttorneyDomain
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearanceAttorneyDomain
     */
    lastName?: string;
    /**
     * 
     * @type {number}
     * @memberof AppearanceAttorneyDomain
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof AppearanceAttorneyDomain
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface AppleLoginRequest
 */
export interface AppleLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof AppleLoginRequest
     */
    authCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleLoginRequest
     */
    familyName?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleLoginRequest
     */
    fingerPrintId?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleLoginRequest
     */
    givenName?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleLoginRequest
     */
    identityToken?: string;
}
/**
 * 
 * @export
 * @interface AuthorModel
 */
export interface AuthorModel {
    /**
     * 
     * @type {string}
     * @memberof AuthorModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorModel
     */
    profilePicture?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorModel
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorModel
     */
    userRole?: AuthorModelUserRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AuthorModelUserRoleEnum {
    ADMIN = 'ADMIN',
    DEFENDANT = 'DEFENDANT',
    LAWYER = 'LAWYER',
    PARTNER = 'PARTNER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface AuthorizeChargeForCasePaymentRequest
 */
export interface AuthorizeChargeForCasePaymentRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AuthorizeChargeForCasePaymentRequest
     */
    ignoreCaseStatus?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthorizeChargeForCasePaymentRequest
     */
    paymentMethodId?: string;
}
/**
 * 
 * @export
 * @interface AuthorizeChargeForCasePaymentResponse
 */
export interface AuthorizeChargeForCasePaymentResponse {
    /**
     * 
     * @type {Array<CaseChargeResponsePojo>}
     * @memberof AuthorizeChargeForCasePaymentResponse
     */
    charges?: Array<CaseChargeResponsePojo>;
}
/**
 * 
 * @export
 * @interface AvailablePaymentPlan
 */
export interface AvailablePaymentPlan {
    /**
     * 
     * @type {string}
     * @memberof AvailablePaymentPlan
     */
    paymentPlanDisplayName?: string;
    /**
     * 
     * @type {number}
     * @memberof AvailablePaymentPlan
     */
    paymentPlanId?: number;
    /**
     * 
     * @type {string}
     * @memberof AvailablePaymentPlan
     */
    paymentPlanType?: AvailablePaymentPlanPaymentPlanTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AvailablePaymentPlanPaymentPlanTypeEnum {
    ALLUPFRONT = 'ALL_UPFRONT',
    THREEPAYMENTSHALFFIRST = 'THREE_PAYMENTS_HALF_FIRST',
    TWOPAYMENTSMONTHLY = 'TWO_PAYMENTS_MONTHLY'
}

/**
 * 
 * @export
 * @interface AvailableRegion
 */
export interface AvailableRegion {
    /**
     * 
     * @type {string}
     * @memberof AvailableRegion
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AvailableRegion
     */
    regionName?: string;
}
/**
 * 
 * @export
 * @interface AwsCredentialsRequest
 */
export interface AwsCredentialsRequest {
    /**
     * 
     * @type {string}
     * @memberof AwsCredentialsRequest
     */
    keyName?: AwsCredentialsRequestKeyNameEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AwsCredentialsRequestKeyNameEnum {
    S3CITATIONIMAGESRO = 'S3_CITATION_IMAGES_RO'
}

/**
 * 
 * @export
 * @interface BackfillLawfirmTransactionRecordsRequest
 */
export interface BackfillLawfirmTransactionRecordsRequest {
    /**
     * 
     * @type {string}
     * @memberof BackfillLawfirmTransactionRecordsRequest
     */
    caseId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BackfillLawfirmTransactionRecordsRequest
     */
    caseIds?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof BackfillLawfirmTransactionRecordsRequest
     */
    deleteExistingRecords?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BackfillLawfirmTransactionRecordsRequest
     */
    lawfirmId?: number;
    /**
     * 
     * @type {number}
     * @memberof BackfillLawfirmTransactionRecordsRequest
     */
    maxCases?: number;
}
/**
 * 
 * @export
 * @interface BackfillLawfirmTransactionRecordsResponse
 */
export interface BackfillLawfirmTransactionRecordsResponse {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BackfillLawfirmTransactionRecordsResponse
     */
    errors?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface BillingInvoiceModel
 */
export interface BillingInvoiceModel {
    /**
     * 
     * @type {number}
     * @memberof BillingInvoiceModel
     */
    amountDueInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof BillingInvoiceModel
     */
    amountPaidInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof BillingInvoiceModel
     */
    invoicePdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingInvoiceModel
     */
    periodEndDate?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingInvoiceModel
     */
    periodStartDate?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingInvoiceModel
     */
    status?: BillingInvoiceModelStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BillingInvoiceModelStatusEnum {
    DRAFT = 'DRAFT',
    OPEN = 'OPEN',
    PAID = 'PAID',
    UNCOLLECTIBLE = 'UNCOLLECTIBLE',
    VOID = 'VOID'
}

/**
 * 
 * @export
 * @interface BillingPriceModel
 */
export interface BillingPriceModel {
    /**
     * 
     * @type {boolean}
     * @memberof BillingPriceModel
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BillingPriceModel
     */
    billingScheme?: BillingPriceModelBillingSchemeEnum;
    /**
     * 
     * @type {string}
     * @memberof BillingPriceModel
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingPriceModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingPriceModel
     */
    interval?: BillingPriceModelIntervalEnum;
    /**
     * 
     * @type {number}
     * @memberof BillingPriceModel
     */
    intervalCount?: number;
    /**
     * 
     * @type {number}
     * @memberof BillingPriceModel
     */
    monthlyUnitAmountInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof BillingPriceModel
     */
    priceDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof BillingPriceModel
     */
    unitAmountInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof BillingPriceModel
     */
    yearlyDiscountInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof BillingPriceModel
     */
    yearlyDiscountInPercentage?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum BillingPriceModelBillingSchemeEnum {
    PERUNIT = 'PER_UNIT',
    TIERED = 'TIERED',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum BillingPriceModelIntervalEnum {
    DAILY = 'DAILY',
    MONTHLY = 'MONTHLY',
    QUARTERLY = 'QUARTERLY',
    WEEKLY = 'WEEKLY',
    YEARLY = 'YEARLY'
}

/**
 * 
 * @export
 * @interface BillingProductModel
 */
export interface BillingProductModel {
    /**
     * 
     * @type {boolean}
     * @memberof BillingProductModel
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BillingProductModel
     */
    caption?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingProductModel
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingProductModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingProductModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingProductModel
     */
    name?: string;
    /**
     * 
     * @type {Array<BillingPriceModel>}
     * @memberof BillingProductModel
     */
    priceModels?: Array<BillingPriceModel>;
}
/**
 * 
 * @export
 * @interface BillingSubscriptionItemModel
 */
export interface BillingSubscriptionItemModel {
    /**
     * 
     * @type {number}
     * @memberof BillingSubscriptionItemModel
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionItemModel
     */
    billingScheme?: BillingSubscriptionItemModelBillingSchemeEnum;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionItemModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionItemModel
     */
    interval?: BillingSubscriptionItemModelIntervalEnum;
    /**
     * 
     * @type {number}
     * @memberof BillingSubscriptionItemModel
     */
    intervalCount?: number;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionItemModel
     */
    priceDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionItemModel
     */
    productId?: string;
    /**
     * 
     * @type {number}
     * @memberof BillingSubscriptionItemModel
     */
    quantity?: number;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionItemModel
     */
    tiersMode?: BillingSubscriptionItemModelTiersModeEnum;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionItemModel
     */
    usageType?: BillingSubscriptionItemModelUsageTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BillingSubscriptionItemModelBillingSchemeEnum {
    PERUNIT = 'PER_UNIT',
    TIERED = 'TIERED',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum BillingSubscriptionItemModelIntervalEnum {
    DAILY = 'DAILY',
    MONTHLY = 'MONTHLY',
    QUARTERLY = 'QUARTERLY',
    WEEKLY = 'WEEKLY',
    YEARLY = 'YEARLY'
}
/**
    * @export
    * @enum {string}
    */
export enum BillingSubscriptionItemModelTiersModeEnum {
    GRADUATED = 'GRADUATED',
    VOLUME = 'VOLUME'
}
/**
    * @export
    * @enum {string}
    */
export enum BillingSubscriptionItemModelUsageTypeEnum {
    LICENSED = 'LICENSED',
    METERED = 'METERED'
}

/**
 * 
 * @export
 * @interface BillingSubscriptionModel
 */
export interface BillingSubscriptionModel {
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionModel
     */
    cancelAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionModel
     */
    canceledAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionModel
     */
    id?: string;
    /**
     * 
     * @type {Array<BillingSubscriptionItemModel>}
     * @memberof BillingSubscriptionModel
     */
    items?: Array<BillingSubscriptionItemModel>;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionModel
     */
    productDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionModel
     */
    productName?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionModel
     */
    startAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingSubscriptionModel
     */
    status?: BillingSubscriptionModelStatusEnum;
    /**
     * 
     * @type {BillingUpcomingInvoiceModel}
     * @memberof BillingSubscriptionModel
     */
    upcomingInvoicePreview?: BillingUpcomingInvoiceModel;
}

/**
    * @export
    * @enum {string}
    */
export enum BillingSubscriptionModelStatusEnum {
    ACTIVE = 'ACTIVE',
    CANCELED = 'CANCELED',
    INCOMPLETE = 'INCOMPLETE',
    INCOMPLETEEXPIRED = 'INCOMPLETE_EXPIRED',
    INTRIALPERIOD = 'IN_TRIAL_PERIOD',
    PASTDUE = 'PAST_DUE',
    UNKNOWN = 'UNKNOWN',
    UNPAID = 'UNPAID'
}

/**
 * 
 * @export
 * @interface BillingUpcomingInvoiceModel
 */
export interface BillingUpcomingInvoiceModel {
    /**
     * 
     * @type {string}
     * @memberof BillingUpcomingInvoiceModel
     */
    nextPaymentAttemptDate?: string;
    /**
     * 
     * @type {number}
     * @memberof BillingUpcomingInvoiceModel
     */
    paymentAmountInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof BillingUpcomingInvoiceModel
     */
    periodEndDate?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingUpcomingInvoiceModel
     */
    periodStartDate?: string;
}
/**
 * 
 * @export
 * @interface BlogDocument
 */
export interface BlogDocument {
    /**
     * 
     * @type {Array<BlogMetadata>}
     * @memberof BlogDocument
     */
    addition?: Array<BlogMetadata>;
    /**
     * 
     * @type {Array<BlogMetadata>}
     * @memberof BlogDocument
     */
    deletion?: Array<BlogMetadata>;
    /**
     * 
     * @type {Array<BlogMetadata>}
     * @memberof BlogDocument
     */
    update?: Array<BlogMetadata>;
}
/**
 * 
 * @export
 * @interface BlogEvent
 */
export interface BlogEvent {
    /**
     * 
     * @type {string}
     * @memberof BlogEvent
     */
    apiUrl?: string;
    /**
     * 
     * @type {BlogDocument}
     * @memberof BlogEvent
     */
    release?: BlogDocument;
    /**
     * 
     * @type {string}
     * @memberof BlogEvent
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogEvent
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface BlogMetadata
 */
export interface BlogMetadata {
    /**
     * 
     * @type {string}
     * @memberof BlogMetadata
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogMetadata
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogMetadata
     */
    ref?: string;
}
/**
 * 
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    bookingDate?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof Booking
     */
    bookingDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    caseStatus?: BookingCaseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    clientTotalCost?: number;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    numPayments?: number;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    otrPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    otrRevenue?: number;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    state?: BookingStateEnum;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    userFirstName?: string;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    userLastName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BookingCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum BookingStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface BookingCancelation
 */
export interface BookingCancelation {
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    bookingDate?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof BookingCancelation
     */
    bookingDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    cancelationDate?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof BookingCancelation
     */
    cancelationDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    cancelationReason?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    canceledBy?: string;
    /**
     * 
     * @type {number}
     * @memberof BookingCancelation
     */
    canceledByUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    caseStatus?: BookingCancelationCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    city?: string;
    /**
     * 
     * @type {number}
     * @memberof BookingCancelation
     */
    clientTotalCost?: number;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    declineReason?: string;
    /**
     * 
     * @type {number}
     * @memberof BookingCancelation
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof BookingCancelation
     */
    otrRevenue?: number;
    /**
     * 
     * @type {string}
     * @memberof BookingCancelation
     */
    state?: BookingCancelationStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BookingCancelationCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum BookingCancelationStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CallContact
 */
export interface CallContact {
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    agentId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    agentName?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    callDirection?: CallContactCallDirectionEnum;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    callDurationInSeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    callId?: number;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    callQueueId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    callQueueName?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    callStartDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    callStatus?: CallContactCallStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    customerName?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    customerNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    integratedResourceType?: CallContactIntegratedResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    integratedResourceValue?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    ivrId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    ivrName?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    parentCallId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    recordingUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    rootCallId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    tags?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    teamId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    teamName?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    thirdPartyCallId?: number;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CallContactCallDirectionEnum {
    INCOMING = 'INCOMING',
    OUTGOING = 'OUTGOING'
}
/**
    * @export
    * @enum {string}
    */
export enum CallContactCallStatusEnum {
    BLOCKED = 'BLOCKED',
    BUSY = 'BUSY',
    COMPLETED = 'COMPLETED',
    CONNECTING = 'CONNECTING',
    CONNECTIONFAILED = 'CONNECTION_FAILED',
    DISCONNECTED = 'DISCONNECTED',
    ENQUEUED = 'ENQUEUED',
    INPROGRESS = 'IN_PROGRESS',
    MISSEDCALL = 'MISSED_CALL',
    ONHOLD = 'ON_HOLD',
    RECENTLYCOMPLETED = 'RECENTLY_COMPLETED',
    RESTRICTED = 'RESTRICTED',
    UNKNOWN = 'UNKNOWN',
    VOICEMAIL = 'VOICEMAIL',
    VOICEMAILRECORDINGINPROGRESS = 'VOICEMAIL_RECORDING_IN_PROGRESS'
}
/**
    * @export
    * @enum {string}
    */
export enum CallContactIntegratedResourceTypeEnum {
    FRESHDESK = 'FRESHDESK',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface CancelBillingSubscriptionResponse
 */
export interface CancelBillingSubscriptionResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CancelBillingSubscriptionResponse
     */
    cancelAtPeriodEnd?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CancelBillingSubscriptionResponse
     */
    cancelledAt?: string;
    /**
     * 
     * @type {string}
     * @memberof CancelBillingSubscriptionResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CancelBillingSubscriptionResponse
     */
    status?: CancelBillingSubscriptionResponseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CancelBillingSubscriptionResponse
     */
    stripeCustomerId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CancelBillingSubscriptionResponseStatusEnum {
    ACTIVE = 'ACTIVE',
    CANCELED = 'CANCELED',
    INCOMPLETE = 'INCOMPLETE',
    INCOMPLETEEXPIRED = 'INCOMPLETE_EXPIRED',
    INTRIALPERIOD = 'IN_TRIAL_PERIOD',
    PASTDUE = 'PAST_DUE',
    UNKNOWN = 'UNKNOWN',
    UNPAID = 'UNPAID'
}

/**
 * 
 * @export
 * @interface CancelCaseRequest
 */
export interface CancelCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof CancelCaseRequest
     */
    cancelationReason?: string;
    /**
     * 
     * @type {string}
     * @memberof CancelCaseRequest
     */
    cancelationStatus?: CancelCaseRequestCancelationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CancelCaseRequest
     */
    caseId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CancelCaseRequest
     */
    shouldIssueRefund?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum CancelCaseRequestCancelationStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface CancelationDetails
 */
export interface CancelationDetails {
    /**
     * 
     * @type {Timestamp}
     * @memberof CancelationDetails
     */
    cancelationDate?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof CancelationDetails
     */
    cancelationReason?: string;
    /**
     * 
     * @type {number}
     * @memberof CancelationDetails
     */
    canceledByUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof CancelationDetails
     */
    canceledByUserName?: string;
}
/**
 * 
 * @export
 * @interface CancelationDetailsReq
 */
export interface CancelationDetailsReq {
    /**
     * 
     * @type {TimestampReq}
     * @memberof CancelationDetailsReq
     */
    cancelationDate?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof CancelationDetailsReq
     */
    cancelationReason?: string;
    /**
     * 
     * @type {number}
     * @memberof CancelationDetailsReq
     */
    canceledByUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof CancelationDetailsReq
     */
    canceledByUserName?: string;
}
/**
 * 
 * @export
 * @interface CancelationDetailsRes
 */
export interface CancelationDetailsRes {
    /**
     * 
     * @type {TimestampRes}
     * @memberof CancelationDetailsRes
     */
    cancelationDate?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof CancelationDetailsRes
     */
    cancelationReason?: string;
    /**
     * 
     * @type {number}
     * @memberof CancelationDetailsRes
     */
    canceledByUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof CancelationDetailsRes
     */
    canceledByUserName?: string;
}
/**
 * 
 * @export
 * @interface CaptureChargeFromCasePaymentRequest
 */
export interface CaptureChargeFromCasePaymentRequest {
    /**
     * 
     * @type {boolean}
     * @memberof CaptureChargeFromCasePaymentRequest
     */
    ignoreCaseStatus?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CaptureChargeFromCasePaymentRequest
     */
    paymentMethodId?: string;
}
/**
 * 
 * @export
 * @interface CaseActionDomain
 */
export interface CaseActionDomain {
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseActionDomain
     */
    actionDate?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    actionNote?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    actionType?: CaseActionDomainActionTypeEnum;
    /**
     * 
     * @type {AuthorModel}
     * @memberof CaseActionDomain
     */
    author?: AuthorModel;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomain
     */
    authorId?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    authorName?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomain
     */
    caseActionId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseActionDomainActionTypeEnum {
    CITATIONDATAEXTRACTED = 'CITATION_DATA_EXTRACTED',
    COURTDATEREMOVED = 'COURT_DATE_REMOVED',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    DISCOVERYRECEIVED = 'DISCOVERY_RECEIVED',
    DISCOVERYREQUESTED = 'DISCOVERY_REQUESTED',
    FAILEDPAYMENTATTEMPT = 'FAILED_PAYMENT_ATTEMPT',
    NOTICEOFAPPEARANCEFILED = 'NOTICE_OF_APPEARANCE_FILED',
    OTHER = 'OTHER',
    REVIEWEDBYLAWFIRM = 'REVIEWED_BY_LAWFIRM',
    TICKETMAILEDTOCOURT = 'TICKET_MAILED_TO_COURT'
}

/**
 * 
 * @export
 * @interface CaseActionDomainReq
 */
export interface CaseActionDomainReq {
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseActionDomainReq
     */
    actionDate?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomainReq
     */
    actionNote?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomainReq
     */
    actionType?: CaseActionDomainReqActionTypeEnum;
    /**
     * 
     * @type {AuthorModel}
     * @memberof CaseActionDomainReq
     */
    author?: AuthorModel;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomainReq
     */
    authorId?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomainReq
     */
    authorName?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomainReq
     */
    caseActionId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseActionDomainReqActionTypeEnum {
    CITATIONDATAEXTRACTED = 'CITATION_DATA_EXTRACTED',
    COURTDATEREMOVED = 'COURT_DATE_REMOVED',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    DISCOVERYRECEIVED = 'DISCOVERY_RECEIVED',
    DISCOVERYREQUESTED = 'DISCOVERY_REQUESTED',
    FAILEDPAYMENTATTEMPT = 'FAILED_PAYMENT_ATTEMPT',
    NOTICEOFAPPEARANCEFILED = 'NOTICE_OF_APPEARANCE_FILED',
    OTHER = 'OTHER',
    REVIEWEDBYLAWFIRM = 'REVIEWED_BY_LAWFIRM',
    TICKETMAILEDTOCOURT = 'TICKET_MAILED_TO_COURT'
}

/**
 * 
 * @export
 * @interface CaseActionDomainRes
 */
export interface CaseActionDomainRes {
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseActionDomainRes
     */
    actionDate?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomainRes
     */
    actionNote?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomainRes
     */
    actionType?: CaseActionDomainResActionTypeEnum;
    /**
     * 
     * @type {AuthorModel}
     * @memberof CaseActionDomainRes
     */
    author?: AuthorModel;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomainRes
     */
    authorId?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomainRes
     */
    authorName?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomainRes
     */
    caseActionId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseActionDomainResActionTypeEnum {
    CITATIONDATAEXTRACTED = 'CITATION_DATA_EXTRACTED',
    COURTDATEREMOVED = 'COURT_DATE_REMOVED',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    DISCOVERYRECEIVED = 'DISCOVERY_RECEIVED',
    DISCOVERYREQUESTED = 'DISCOVERY_REQUESTED',
    FAILEDPAYMENTATTEMPT = 'FAILED_PAYMENT_ATTEMPT',
    NOTICEOFAPPEARANCEFILED = 'NOTICE_OF_APPEARANCE_FILED',
    OTHER = 'OTHER',
    REVIEWEDBYLAWFIRM = 'REVIEWED_BY_LAWFIRM',
    TICKETMAILEDTOCOURT = 'TICKET_MAILED_TO_COURT'
}

/**
 * 
 * @export
 * @interface CaseAlert
 */
export interface CaseAlert {
    /**
     * 
     * @type {string}
     * @memberof CaseAlert
     */
    actionType?: CaseAlertActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseAlert
     */
    alertType?: CaseAlertAlertTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseAlert
     */
    bannerMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseAlert
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseAlert
     */
    clickThruUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseAlert
     */
    hexColor?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseAlert
     */
    lawfirmId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseAlertActionTypeEnum {
    ANNOUNCEMENT = 'ANNOUNCEMENT',
    ENGAGEMENTLETTER = 'ENGAGEMENT_LETTER'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseAlertAlertTypeEnum {
    ERROR = 'ERROR',
    INFO = 'INFO',
    SUCCESS = 'SUCCESS',
    WARNING = 'WARNING'
}

/**
 * 
 * @export
 * @interface CaseBookingsStats
 */
export interface CaseBookingsStats {
    /**
     * 
     * @type {string}
     * @memberof CaseBookingsStats
     */
    endDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseBookingsStats
     */
    numBookings?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseBookingsStats
     */
    numCancelations?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseBookingsStats
     */
    numLawfirmsEngaged?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseBookingsStats
     */
    onTrackTransactions?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseBookingsStats
     */
    otrRevenue?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseBookingsStats
     */
    startDate?: string;
    /**
     * 
     * @type {ZoneId}
     * @memberof CaseBookingsStats
     */
    zoneId?: ZoneId;
}
/**
 * 
 * @export
 * @interface CaseChargeResponsePojo
 */
export interface CaseChargeResponsePojo {
    /**
     * 
     * @type {string}
     * @memberof CaseChargeResponsePojo
     */
    casePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseChargeResponsePojo
     */
    stripeChargeId?: string;
}
/**
 * 
 * @export
 * @interface CaseCreationRequest
 */
export interface CaseCreationRequest {
    /**
     * 
     * @type {string}
     * @memberof CaseCreationRequest
     */
    courtDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CaseCreationRequest
     */
    forcePredeterminedLawfirmId?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CaseCreationRequest
     */
    predeterminedLawfirmId?: number;
}
/**
 * 
 * @export
 * @interface CaseDomain
 */
export interface CaseDomain {
    /**
     * 
     * @type {Array<CaseActionDomain>}
     * @memberof CaseDomain
     */
    actions?: Array<CaseActionDomain>;
    /**
     * 
     * @type {number}
     * @memberof CaseDomain
     */
    adjustedFineAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseDomain
     */
    adjustedPointCount?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseDomain
     */
    bookingConfirmedDate?: Timestamp;
    /**
     * 
     * @type {CancelationDetails}
     * @memberof CaseDomain
     */
    cancelationDetails?: CancelationDetails;
    /**
     * 
     * @type {string}
     * @memberof CaseDomain
     */
    cancelationReason?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseDomain
     */
    cancellationExpiryDate?: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseDomain
     */
    caseCancellationDate?: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseDomain
     */
    caseCreationDate?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof CaseDomain
     */
    caseId?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseDomain
     */
    caseResolutionDate?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof CaseDomain
     */
    caseStatus?: CaseDomainCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseDomain
     */
    caseStatusCategory?: CaseDomainCaseStatusCategoryEnum;
    /**
     * 
     * @type {CaseStatusDomain}
     * @memberof CaseDomain
     */
    caseStatusDomain?: CaseStatusDomain;
    /**
     * 
     * @type {CitationDomain}
     * @memberof CaseDomain
     */
    citation?: CitationDomain;
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseDomain
     */
    courtAppointmentDate?: Timestamp;
    /**
     * 
     * @type {boolean}
     * @memberof CaseDomain
     */
    hasLeftLawyerReview?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CaseDomain
     */
    isPointSystemState?: boolean;
    /**
     * 
     * @type {LawfirmCaseDomain}
     * @memberof CaseDomain
     */
    lawfirmCaseDecision?: LawfirmCaseDomain;
    /**
     * 
     * @type {string}
     * @memberof CaseDomain
     */
    refundEligibility?: CaseDomainRefundEligibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseDomain
     */
    resolutionSummary?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseDomain
     */
    uiRefundMsg?: string;
    /**
     * 
     * @type {UserDomain}
     * @memberof CaseDomain
     */
    user?: UserDomain;
    /**
     * 
     * @type {number}
     * @memberof CaseDomain
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseDomainCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseDomainCaseStatusCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseDomainRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface CaseDomainReq
 */
export interface CaseDomainReq {
    /**
     * 
     * @type {Array<CaseActionDomainReq>}
     * @memberof CaseDomainReq
     */
    actions?: Array<CaseActionDomainReq>;
    /**
     * 
     * @type {number}
     * @memberof CaseDomainReq
     */
    adjustedFineAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseDomainReq
     */
    adjustedPointCount?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseDomainReq
     */
    bookingConfirmedDate?: TimestampReq;
    /**
     * 
     * @type {CancelationDetailsReq}
     * @memberof CaseDomainReq
     */
    cancelationDetails?: CancelationDetailsReq;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainReq
     */
    cancelationReason?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseDomainReq
     */
    cancellationExpiryDate?: TimestampReq;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseDomainReq
     */
    caseCancellationDate?: TimestampReq;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseDomainReq
     */
    caseCreationDate?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainReq
     */
    caseId?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseDomainReq
     */
    caseResolutionDate?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainReq
     */
    caseStatus?: CaseDomainReqCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainReq
     */
    caseStatusCategory?: CaseDomainReqCaseStatusCategoryEnum;
    /**
     * 
     * @type {CaseStatusDomain}
     * @memberof CaseDomainReq
     */
    caseStatusDomain?: CaseStatusDomain;
    /**
     * 
     * @type {CitationDomainReq}
     * @memberof CaseDomainReq
     */
    citation?: CitationDomainReq;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseDomainReq
     */
    courtAppointmentDate?: TimestampReq;
    /**
     * 
     * @type {boolean}
     * @memberof CaseDomainReq
     */
    hasLeftLawyerReview?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CaseDomainReq
     */
    isPointSystemState?: boolean;
    /**
     * 
     * @type {LawfirmCaseDomainReq}
     * @memberof CaseDomainReq
     */
    lawfirmCaseDecision?: LawfirmCaseDomainReq;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainReq
     */
    refundEligibility?: CaseDomainReqRefundEligibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainReq
     */
    resolutionSummary?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainReq
     */
    uiRefundMsg?: string;
    /**
     * 
     * @type {UserDomainReq}
     * @memberof CaseDomainReq
     */
    user?: UserDomainReq;
    /**
     * 
     * @type {number}
     * @memberof CaseDomainReq
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseDomainReqCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseDomainReqCaseStatusCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseDomainReqRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface CaseDomainRes
 */
export interface CaseDomainRes {
    /**
     * 
     * @type {Array<CaseActionDomainRes>}
     * @memberof CaseDomainRes
     */
    actions?: Array<CaseActionDomainRes>;
    /**
     * 
     * @type {number}
     * @memberof CaseDomainRes
     */
    adjustedFineAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseDomainRes
     */
    adjustedPointCount?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseDomainRes
     */
    bookingConfirmedDate?: TimestampRes;
    /**
     * 
     * @type {CancelationDetailsRes}
     * @memberof CaseDomainRes
     */
    cancelationDetails?: CancelationDetailsRes;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainRes
     */
    cancelationReason?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseDomainRes
     */
    cancellationExpiryDate?: TimestampRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseDomainRes
     */
    caseCancellationDate?: TimestampRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseDomainRes
     */
    caseCreationDate?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainRes
     */
    caseId?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseDomainRes
     */
    caseResolutionDate?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainRes
     */
    caseStatus?: CaseDomainResCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainRes
     */
    caseStatusCategory?: CaseDomainResCaseStatusCategoryEnum;
    /**
     * 
     * @type {CaseStatusDomain}
     * @memberof CaseDomainRes
     */
    caseStatusDomain?: CaseStatusDomain;
    /**
     * 
     * @type {CitationDomainRes}
     * @memberof CaseDomainRes
     */
    citation?: CitationDomainRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseDomainRes
     */
    courtAppointmentDate?: TimestampRes;
    /**
     * 
     * @type {boolean}
     * @memberof CaseDomainRes
     */
    hasLeftLawyerReview?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CaseDomainRes
     */
    isPointSystemState?: boolean;
    /**
     * 
     * @type {LawfirmCaseDomainRes}
     * @memberof CaseDomainRes
     */
    lawfirmCaseDecision?: LawfirmCaseDomainRes;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainRes
     */
    refundEligibility?: CaseDomainResRefundEligibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainRes
     */
    resolutionSummary?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseDomainRes
     */
    uiRefundMsg?: string;
    /**
     * 
     * @type {UserDomainRes}
     * @memberof CaseDomainRes
     */
    user?: UserDomainRes;
    /**
     * 
     * @type {number}
     * @memberof CaseDomainRes
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseDomainResCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseDomainResCaseStatusCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseDomainResRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface CaseLineItemDomainReq
 */
export interface CaseLineItemDomainReq {
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainReq
     */
    additionalDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainReq
     */
    chargeDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    clientTotalCost?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CaseLineItemDomainReq
     */
    creationDate?: TimestampReq;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    feeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    lawfirmAssumedCost?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    lawfirmCaseFees?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    lawfirmEarningsForCase?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    lawfirmReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainReq
     */
    lineItemId?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainReq
     */
    lineItemOwner?: CaseLineItemDomainReqLineItemOwnerEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainReq
     */
    lineItemType?: CaseLineItemDomainReqLineItemTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    otrEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    otrMarketingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    otrMarketingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    otrReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    paymentProcessingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    paymentProcessingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainReq
     */
    platformFee?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseLineItemDomainReqLineItemOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseLineItemDomainReqLineItemTypeEnum {
    ACCIDENTFEE = 'ACCIDENT_FEE',
    BASELEGALFEE = 'BASE_LEGAL_FEE',
    BONDFEE = 'BOND_FEE',
    BOOKINGFEE = 'BOOKING_FEE',
    CDLFEE = 'CDL_FEE',
    DISPUTEFEE = 'DISPUTE_FEE',
    FINEPAYMENT = 'FINE_PAYMENT',
    FTAFEE = 'FTA_FEE',
    LATEFEE = 'LATE_FEE',
    MBGREFUND = 'MBG_REFUND',
    MVSFEE = 'MVS_FEE',
    OTHER = 'OTHER',
    OTRCREDIT = 'OTR_CREDIT',
    PAYMENTPLANSERVICEFEE = 'PAYMENT_PLAN_SERVICE_FEE',
    WARRANTFEE = 'WARRANT_FEE'
}

/**
 * 
 * @export
 * @interface CaseLineItemDomainRes
 */
export interface CaseLineItemDomainRes {
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainRes
     */
    additionalDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainRes
     */
    chargeDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    clientTotalCost?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseLineItemDomainRes
     */
    creationDate?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    feeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    lawfirmAssumedCost?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    lawfirmCaseFees?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    lawfirmEarningsForCase?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    lawfirmReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainRes
     */
    lineItemId?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainRes
     */
    lineItemOwner?: CaseLineItemDomainResLineItemOwnerEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseLineItemDomainRes
     */
    lineItemType?: CaseLineItemDomainResLineItemTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    otrEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    otrMarketingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    otrMarketingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    otrReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    paymentProcessingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    paymentProcessingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemDomainRes
     */
    platformFee?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseLineItemDomainResLineItemOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseLineItemDomainResLineItemTypeEnum {
    ACCIDENTFEE = 'ACCIDENT_FEE',
    BASELEGALFEE = 'BASE_LEGAL_FEE',
    BONDFEE = 'BOND_FEE',
    BOOKINGFEE = 'BOOKING_FEE',
    CDLFEE = 'CDL_FEE',
    DISPUTEFEE = 'DISPUTE_FEE',
    FINEPAYMENT = 'FINE_PAYMENT',
    FTAFEE = 'FTA_FEE',
    LATEFEE = 'LATE_FEE',
    MBGREFUND = 'MBG_REFUND',
    MVSFEE = 'MVS_FEE',
    OTHER = 'OTHER',
    OTRCREDIT = 'OTR_CREDIT',
    PAYMENTPLANSERVICEFEE = 'PAYMENT_PLAN_SERVICE_FEE',
    WARRANTFEE = 'WARRANT_FEE'
}

/**
 * 
 * @export
 * @interface CaseLineItemsSummary
 */
export interface CaseLineItemsSummary {
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    caseBaseCostInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    clientTotalCostInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    lawfirmAssumedCostInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    lawfirmCaseFees?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    lawfirmEarningsForCase?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    lawfirmRefcodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    lawfirmServiceChargeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    otrEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    otrMarketingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    otrRefcodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    paymentProcessingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    paymentProcessingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseLineItemsSummary
     */
    platformFee?: number;
}
/**
 * 
 * @export
 * @interface CaseMessageDomain
 */
export interface CaseMessageDomain {
    /**
     * 
     * @type {string}
     * @memberof CaseMessageDomain
     */
    authorFirstname?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseMessageDomain
     */
    authorLastname?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseMessageDomain
     */
    authorRoleType?: CaseMessageDomainAuthorRoleTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CaseMessageDomain
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CaseMessageDomain
     */
    mediaType?: CaseMessageDomainMediaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseMessageDomain
     */
    mediaUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseMessageDomain
     */
    messageBody?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseMessageDomain
     */
    messageId?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof CaseMessageDomain
     */
    messageSentDateUtc?: Timestamp;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseMessageDomainAuthorRoleTypeEnum {
    ADMIN = 'ADMIN',
    DEFENDANT = 'DEFENDANT',
    LAWYER = 'LAWYER',
    PARTNER = 'PARTNER',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseMessageDomainMediaTypeEnum {
    IMAGE = 'IMAGE',
    PDF = 'PDF'
}

/**
 * 
 * @export
 * @interface CaseNotesDomain
 */
export interface CaseNotesDomain {
    /**
     * 
     * @type {string}
     * @memberof CaseNotesDomain
     */
    lawfirmCaseNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseNotesDomain
     */
    otrCaseNotes?: string;
}
/**
 * 
 * @export
 * @interface CasePaymentDomain
 */
export interface CasePaymentDomain {
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    baseFeeInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    casePaymentId?: string;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    chargeAttempts?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    clientTotalCost?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof CasePaymentDomain
     */
    creationDateUTC?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    dueDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CasePaymentDomain
     */
    isLocked?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    lastAttemptDate?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof CasePaymentDomain
     */
    lastUpdatedDateUTC?: Timestamp;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmAssumedCost?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    mostRecentChargeError?: string;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    otrEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    otrMarketingFeeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    otrReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    paymentProcessingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    paymentProcessingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    recipient?: CasePaymentDomainRecipientEnum;
    /**
     * 
     * @type {StripeChargeDomain}
     * @memberof CasePaymentDomain
     */
    stripeCharge?: StripeChargeDomain;
    /**
     * 
     * @type {Array<FreshdeskTicketReferenceDomain>}
     * @memberof CasePaymentDomain
     */
    supportTickets?: Array<FreshdeskTicketReferenceDomain>;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    transactionMethod?: CasePaymentDomainTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    updatedDueDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CasePaymentDomainRecipientEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum CasePaymentDomainTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface CasePaymentModel
 */
export interface CasePaymentModel {
    /**
     * 
     * @type {string}
     * @memberof CasePaymentModel
     */
    dueDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CasePaymentModel
     */
    dueNow?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentModel
     */
    feeAmount?: number;
}
/**
 * 
 * @export
 * @interface CaseStatusDetailsResponse
 */
export interface CaseStatusDetailsResponse {
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDetailsResponse
     */
    category?: CaseStatusDetailsResponseCategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof CaseStatusDetailsResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDetailsResponse
     */
    status?: CaseStatusDetailsResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseStatusDetailsResponseCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseStatusDetailsResponseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface CaseStatusDomain
 */
export interface CaseStatusDomain {
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDomain
     */
    caseStatus?: CaseStatusDomainCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDomain
     */
    clientFriendlyDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDomain
     */
    clientFriendlyName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CaseStatusDomain
     */
    isDeprecated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDomain
     */
    lawfirmFriendlyDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDomain
     */
    lawfirmFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDomain
     */
    stateCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseStatusDomain
     */
    statusCategory?: CaseStatusDomainStatusCategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof CaseStatusDomain
     */
    statusId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseStatusDomainCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseStatusDomainStatusCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface CaseSummaryDomain
 */
export interface CaseSummaryDomain {
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    bookingConfirmedDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    caseDecisionStatus?: CaseSummaryDomainCaseDecisionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    caseId?: string;
    /**
     * 
     * @type {CaseStatusDomain}
     * @memberof CaseSummaryDomain
     */
    caseStatusDomain?: CaseStatusDomain;
    /**
     * 
     * @type {number}
     * @memberof CaseSummaryDomain
     */
    citationId?: number;
    /**
     * 
     * @type {PureDate}
     * @memberof CaseSummaryDomain
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    citationIssueDateUTC?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    countyName?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    courtDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    firstName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CaseSummaryDomain
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    lastName?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseSummaryDomain
     */
    legalFeeInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    resolutionDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseSummaryDomain
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseSummaryDomain
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof CaseSummaryDomain
     */
    violationCount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseSummaryDomainCaseDecisionStatusEnum {
    ACCEPTED = 'ACCEPTED',
    CREATED = 'CREATED',
    DECLINED = 'DECLINED',
    EXPIRED = 'EXPIRED',
    PENDING = 'PENDING',
    REMATCHED = 'REMATCHED',
    REMATCHEDREFERRAL = 'REMATCHED_REFERRAL'
}

/**
 * 
 * @export
 * @interface CaseTransferHistory
 */
export interface CaseTransferHistory {
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    decisionDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    decisionStatus?: CaseTransferHistoryDecisionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    declineNote?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseTransferHistory
     */
    discountInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    lawfirmCaseCreationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    lawfirmCaseId?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    lawfirmId?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseTransferHistory
     */
    refundOwner?: CaseTransferHistoryRefundOwnerEnum;
    /**
     * 
     * @type {number}
     * @memberof CaseTransferHistory
     */
    totalClientCostInCents?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseTransferHistoryDecisionStatusEnum {
    ACCEPTED = 'ACCEPTED',
    CREATED = 'CREATED',
    DECLINED = 'DECLINED',
    EXPIRED = 'EXPIRED',
    PENDING = 'PENDING',
    REMATCHED = 'REMATCHED',
    REMATCHEDREFERRAL = 'REMATCHED_REFERRAL'
}
/**
    * @export
    * @enum {string}
    */
export enum CaseTransferHistoryRefundOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    NONE = 'NONE',
    OTR = 'OTR'
}

/**
 * 
 * @export
 * @interface CaseTransferResponse
 */
export interface CaseTransferResponse {
    /**
     * 
     * @type {Array<CaseTransferHistory>}
     * @memberof CaseTransferResponse
     */
    transfers?: Array<CaseTransferHistory>;
}
/**
 * 
 * @export
 * @interface CaseViolationPenalty
 */
export interface CaseViolationPenalty {
    /**
     * 
     * @type {string}
     * @memberof CaseViolationPenalty
     */
    penaltyFriendlyDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseViolationPenalty
     */
    penaltyType?: CaseViolationPenaltyPenaltyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CaseViolationPenalty
     */
    penaltyValue?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseViolationPenaltyPenaltyTypeEnum {
    DEMERITPOINTS = 'DEMERIT_POINTS',
    INCARCERATIONMAXDAYS = 'INCARCERATION_MAX_DAYS',
    INCARCERATIONMINDAYS = 'INCARCERATION_MIN_DAYS',
    INSURANCEPOINTS = 'INSURANCE_POINTS',
    INSURANCERATEINCREASE = 'INSURANCE_RATE_INCREASE',
    LICENSEREVOCATIONMAXDAYS = 'LICENSE_REVOCATION_MAX_DAYS',
    LICENSEREVOCATIONMINDAYS = 'LICENSE_REVOCATION_MIN_DAYS',
    LICENSESUSPENSIONMAXDAYS = 'LICENSE_SUSPENSION_MAX_DAYS',
    LICENSESUSPENSIONMINDAYS = 'LICENSE_SUSPENSION_MIN_DAYS',
    MANDATORYCOURTAPPEARANCE = 'MANDATORY_COURT_APPEARANCE',
    MANDATORYCOURTAPPEARANCEWITHATTORNEY = 'MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY',
    MAXBAILAMOUNT = 'MAX_BAIL_AMOUNT',
    MINBAILAMOUNT = 'MIN_BAIL_AMOUNT',
    PROBATIONINDAYS = 'PROBATION_IN_DAYS',
    TOTALBAILAMOUNT = 'TOTAL_BAIL_AMOUNT'
}

/**
 * 
 * @export
 * @interface CaseWithCoverageObtained
 */
export interface CaseWithCoverageObtained {
    /**
     * 
     * @type {string}
     * @memberof CaseWithCoverageObtained
     */
    caseClassification?: CaseWithCoverageObtainedCaseClassificationEnum;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CaseWithCoverageObtained
     */
    caseCreationDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof CaseWithCoverageObtained
     */
    caseId?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseWithCoverageObtained
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseWithCoverageObtained
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseWithCoverageObtained
     */
    courtName?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseWithCoverageObtained
     */
    fee?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CaseWithCoverageObtained
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CaseWithCoverageObtained
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseWithCoverageObtained
     */
    lawfirmName?: string;
    /**
     * 
     * @type {CountryRegion}
     * @memberof CaseWithCoverageObtained
     */
    region?: CountryRegion;
}

/**
    * @export
    * @enum {string}
    */
export enum CaseWithCoverageObtainedCaseClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface ChangeUserPasswordRequest
 */
export interface ChangeUserPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeUserPasswordRequest
     */
    plainTextPasswordNew?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeUserPasswordRequest
     */
    plainTextPasswordOld?: string;
    /**
     * 
     * @type {number}
     * @memberof ChangeUserPasswordRequest
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface ChargeFeeToLawfirmRequest
 */
export interface ChargeFeeToLawfirmRequest {
    /**
     * 
     * @type {string}
     * @memberof ChargeFeeToLawfirmRequest
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargeFeeToLawfirmRequest
     */
    dueDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof ChargeFeeToLawfirmRequest
     */
    feeAmountInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargeFeeToLawfirmRequest
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {string}
     * @memberof ChargeFeeToLawfirmRequest
     */
    note?: string;
    /**
     * 
     * @type {number}
     * @memberof ChargeFeeToLawfirmRequest
     */
    otrFeeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargeFeeToLawfirmRequest
     */
    processingFeeInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof ChargeFeeToLawfirmRequest
     */
    sourceCasePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargeFeeToLawfirmRequest
     */
    transactionDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof ChargeFeeToLawfirmRequest
     */
    transactionMethod?: ChargeFeeToLawfirmRequestTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof ChargeFeeToLawfirmRequest
     */
    transactionReference?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ChargeFeeToLawfirmRequestTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface ChargeFeeToLawfirmResponse
 */
export interface ChargeFeeToLawfirmResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ChargeFeeToLawfirmResponse
     */
    isSuccess?: boolean;
}
/**
 * 
 * @export
 * @interface CitationDomain
 */
export interface CitationDomain {
    /**
     * 
     * @type {AddressDomain}
     * @memberof CitationDomain
     */
    address?: AddressDomain;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    cdlStatus?: CitationDomainCdlStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CitationDomain
     */
    citationId?: number;
    /**
     * 
     * @type {PureDate}
     * @memberof CitationDomain
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {Timestamp}
     * @memberof CitationDomain
     */
    citationIssueDateUTC?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    clientFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    clientType?: CitationDomainClientTypeEnum;
    /**
     * 
     * @type {CourtDomain}
     * @memberof CitationDomain
     */
    court?: CourtDomain;
    /**
     * 
     * @type {Timestamp}
     * @memberof CitationDomain
     */
    creationDateUTC?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    documentUrlToConvert?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomain
     */
    fineAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomain
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomain
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomain
     */
    isDismissedFromContactList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomain
     */
    isPastDue?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CitationDomain
     */
    originalPointCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    state?: CitationDomainStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    ticketLocationTags?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    ticketNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomain
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationDomain
     */
    violationCategoryName?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomain
     */
    violationCount?: number;
    /**
     * 
     * @type {Array<TrafficViolationTypeDomain>}
     * @memberof CitationDomain
     */
    violations?: Array<TrafficViolationTypeDomain>;
}

/**
    * @export
    * @enum {string}
    */
export enum CitationDomainCdlStatusEnum {
    CDLINCOMMERCIALVEHICLE = 'CDL_IN_COMMERCIAL_VEHICLE',
    CDLINPERSONALVEHICLE = 'CDL_IN_PERSONAL_VEHICLE',
    NOCDL = 'NO_CDL'
}
/**
    * @export
    * @enum {string}
    */
export enum CitationDomainClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum CitationDomainStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CitationDomainReq
 */
export interface CitationDomainReq {
    /**
     * 
     * @type {AddressDomainReq}
     * @memberof CitationDomainReq
     */
    address?: AddressDomainReq;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    cdlStatus?: CitationDomainReqCdlStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainReq
     */
    citationId?: number;
    /**
     * 
     * @type {PureDate}
     * @memberof CitationDomainReq
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CitationDomainReq
     */
    citationIssueDateUTC?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    clientFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    clientType?: CitationDomainReqClientTypeEnum;
    /**
     * 
     * @type {CourtDomainReq}
     * @memberof CitationDomainReq
     */
    court?: CourtDomainReq;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CitationDomainReq
     */
    creationDateUTC?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    documentUrlToConvert?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainReq
     */
    fineAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainReq
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainReq
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainReq
     */
    isDismissedFromContactList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainReq
     */
    isPastDue?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainReq
     */
    originalPointCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    state?: CitationDomainReqStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    ticketLocationTags?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    ticketNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainReq
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainReq
     */
    violationCategoryName?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainReq
     */
    violationCount?: number;
    /**
     * 
     * @type {Array<TrafficViolationTypeDomain>}
     * @memberof CitationDomainReq
     */
    violations?: Array<TrafficViolationTypeDomain>;
}

/**
    * @export
    * @enum {string}
    */
export enum CitationDomainReqCdlStatusEnum {
    CDLINCOMMERCIALVEHICLE = 'CDL_IN_COMMERCIAL_VEHICLE',
    CDLINPERSONALVEHICLE = 'CDL_IN_PERSONAL_VEHICLE',
    NOCDL = 'NO_CDL'
}
/**
    * @export
    * @enum {string}
    */
export enum CitationDomainReqClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum CitationDomainReqStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CitationDomainRes
 */
export interface CitationDomainRes {
    /**
     * 
     * @type {AddressDomainRes}
     * @memberof CitationDomainRes
     */
    address?: AddressDomainRes;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    cdlStatus?: CitationDomainResCdlStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainRes
     */
    citationId?: number;
    /**
     * 
     * @type {PureDate}
     * @memberof CitationDomainRes
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CitationDomainRes
     */
    citationIssueDateUTC?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    clientFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    clientType?: CitationDomainResClientTypeEnum;
    /**
     * 
     * @type {CourtDomainRes}
     * @memberof CitationDomainRes
     */
    court?: CourtDomainRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof CitationDomainRes
     */
    creationDateUTC?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    documentUrlToConvert?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainRes
     */
    fineAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainRes
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainRes
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainRes
     */
    isDismissedFromContactList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationDomainRes
     */
    isPastDue?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainRes
     */
    originalPointCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    state?: CitationDomainResStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    ticketLocationTags?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    ticketNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainRes
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationDomainRes
     */
    violationCategoryName?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationDomainRes
     */
    violationCount?: number;
    /**
     * 
     * @type {Array<TrafficViolationTypeDomain>}
     * @memberof CitationDomainRes
     */
    violations?: Array<TrafficViolationTypeDomain>;
}

/**
    * @export
    * @enum {string}
    */
export enum CitationDomainResCdlStatusEnum {
    CDLINCOMMERCIALVEHICLE = 'CDL_IN_COMMERCIAL_VEHICLE',
    CDLINPERSONALVEHICLE = 'CDL_IN_PERSONAL_VEHICLE',
    NOCDL = 'NO_CDL'
}
/**
    * @export
    * @enum {string}
    */
export enum CitationDomainResClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum CitationDomainResStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CitationInputRequest
 */
export interface CitationInputRequest {
    /**
     * 
     * @type {AddressDomainReq}
     * @memberof CitationInputRequest
     */
    address?: AddressDomainReq;
    /**
     * 
     * @type {string}
     * @memberof CitationInputRequest
     */
    cdlStatus?: CitationInputRequestCdlStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CitationInputRequest
     */
    citationIssueDate?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof CitationInputRequest
     */
    citationIssueDateUTC?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof CitationInputRequest
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationInputRequest
     */
    clientFirstName?: string;
    /**
     * 
     * @type {CourtInputRequest}
     * @memberof CitationInputRequest
     */
    court?: CourtInputRequest;
    /**
     * 
     * @type {string}
     * @memberof CitationInputRequest
     */
    documentUrlToConvert?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationInputRequest
     */
    fineAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CitationInputRequest
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationInputRequest
     */
    isDismissedFromContactList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CitationInputRequest
     */
    isPastDue?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CitationInputRequest
     */
    state?: CitationInputRequestStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CitationInputRequest
     */
    ticketNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationInputRequest
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof CitationInputRequest
     */
    violationCount?: number;
    /**
     * 
     * @type {Array<TrafficViolationInputRequest>}
     * @memberof CitationInputRequest
     */
    violations?: Array<TrafficViolationInputRequest>;
}

/**
    * @export
    * @enum {string}
    */
export enum CitationInputRequestCdlStatusEnum {
    CDLINCOMMERCIALVEHICLE = 'CDL_IN_COMMERCIAL_VEHICLE',
    CDLINPERSONALVEHICLE = 'CDL_IN_PERSONAL_VEHICLE',
    NOCDL = 'NO_CDL'
}
/**
    * @export
    * @enum {string}
    */
export enum CitationInputRequestStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CitationWithMissingCourt
 */
export interface CitationWithMissingCourt {
    /**
     * 
     * @type {number}
     * @memberof CitationWithMissingCourt
     */
    citationId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CitationWithMissingCourt
     */
    deleted?: boolean;
    /**
     * 
     * @type {CountryRegion}
     * @memberof CitationWithMissingCourt
     */
    region?: CountryRegion;
    /**
     * 
     * @type {string}
     * @memberof CitationWithMissingCourt
     */
    state?: CitationWithMissingCourtStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CitationWithMissingCourtStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CitationWithMissingFields
 */
export interface CitationWithMissingFields {
    /**
     * 
     * @type {TimestampRes}
     * @memberof CitationWithMissingFields
     */
    citationCreationDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof CitationWithMissingFields
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationWithMissingFields
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CitationWithMissingFields
     */
    clientFirstName?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationWithMissingFields
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof CitationWithMissingFields
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CitationWithMissingFields
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface ClientActionRequiredRequest
 */
export interface ClientActionRequiredRequest {
    /**
     * 
     * @type {string}
     * @memberof ClientActionRequiredRequest
     */
    caseActionItem?: ClientActionRequiredRequestCaseActionItemEnum;
    /**
     * 
     * @type {string}
     * @memberof ClientActionRequiredRequest
     */
    caseId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientActionRequiredRequest
     */
    includeDeclineReason?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ClientActionRequiredRequestCaseActionItemEnum {
    FEEADJUSTMENT = 'FEE_ADJUSTMENT',
    NOREFUNDOFFERED = 'NO_REFUND_OFFERED',
    REQUESTCOURTEXTENSION = 'REQUEST_COURT_EXTENSION'
}

/**
 * 
 * @export
 * @interface ClientConfirmedUnpaidCase
 */
export interface ClientConfirmedUnpaidCase {
    /**
     * 
     * @type {number}
     * @memberof ClientConfirmedUnpaidCase
     */
    amountDisputed?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientConfirmedUnpaidCase
     */
    amountDueLater?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientConfirmedUnpaidCase
     */
    amountOverdue?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientConfirmedUnpaidCase
     */
    amountPaid?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientConfirmedUnpaidCase
     */
    bookingConfirmedDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientConfirmedUnpaidCase
     */
    caseId?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientConfirmedUnpaidCase
     */
    caseSubtotal?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientConfirmedUnpaidCase
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientConfirmedUnpaidCase
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientConfirmedUnpaidCase
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientConfirmedUnpaidCase
     */
    userName?: string;
}
/**
 * 
 * @export
 * @interface ClientLeadDomain
 */
export interface ClientLeadDomain {
    /**
     * 
     * @type {string}
     * @memberof ClientLeadDomain
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLeadDomain
     */
    firstName?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof ClientLeadDomain
     */
    lastBookingDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof ClientLeadDomain
     */
    lastName?: string;
    /**
     * 
     * @type {Array<PhoneNumberDomain>}
     * @memberof ClientLeadDomain
     */
    phoneNumbers?: Array<PhoneNumberDomain>;
    /**
     * 
     * @type {Array<TicketLeadDomain>}
     * @memberof ClientLeadDomain
     */
    tickets?: Array<TicketLeadDomain>;
    /**
     * 
     * @type {number}
     * @memberof ClientLeadDomain
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface ContactTimelineResponse
 */
export interface ContactTimelineResponse {
    /**
     * 
     * @type {CallContact}
     * @memberof ContactTimelineResponse
     */
    call?: CallContact;
    /**
     * 
     * @type {string}
     * @memberof ContactTimelineResponse
     */
    creationDate?: string;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof ContactTimelineResponse
     */
    ticket?: FreshDeskTicket;
}
/**
 * 
 * @export
 * @interface CountryDomain
 */
export interface CountryDomain {
    /**
     * 
     * @type {string}
     * @memberof CountryDomain
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryDomain
     */
    countryName?: string;
}
/**
 * 
 * @export
 * @interface CountryRegion
 */
export interface CountryRegion {
    /**
     * 
     * @type {string}
     * @memberof CountryRegion
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryRegion
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryRegion
     */
    regionName?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryRegion
     */
    regionType?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryRegion
     */
    timezone?: string;
}
/**
 * 
 * @export
 * @interface CountyDomain
 */
export interface CountyDomain {
    /**
     * 
     * @type {number}
     * @memberof CountyDomain
     */
    countyId?: number;
    /**
     * 
     * @type {string}
     * @memberof CountyDomain
     */
    countyName?: string;
    /**
     * 
     * @type {string}
     * @memberof CountyDomain
     */
    stateCode?: CountyDomainStateCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CountyDomainStateCodeEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CourtCoverageCountyRecord
 */
export interface CourtCoverageCountyRecord {
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageCountyRecord
     */
    countyId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtCoverageCountyRecord
     */
    countyName?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageCountyRecord
     */
    numActiveLawfirms?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageCountyRecord
     */
    numCourts?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageCountyRecord
     */
    numCourtsWithCoverage?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageCountyRecord
     */
    numCourtsWithoutCoverage?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageCountyRecord
     */
    numUnserviceableRequests?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageCountyRecord
     */
    percentCourtCoverage?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtCoverageCountyRecord
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface CourtCoverageRecord
 */
export interface CourtCoverageRecord {
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageRecord
     */
    countyId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtCoverageRecord
     */
    countyName?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageRecord
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtCoverageRecord
     */
    courtName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CourtCoverageRecord
     */
    isVacationMode?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageRecord
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtCoverageRecord
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageRecord
     */
    lawfirmPriority?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageRecord
     */
    lawyerFee?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageRecord
     */
    otrTargetFee?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtCoverageRecord
     */
    regionCode?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageRecord
     */
    unserviceableRequests?: number;
}
/**
 * 
 * @export
 * @interface CourtCoverageStateRecord
 */
export interface CourtCoverageStateRecord {
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageStateRecord
     */
    numActiveLawfirms?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageStateRecord
     */
    numCounties?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageStateRecord
     */
    numCourts?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageStateRecord
     */
    numCourtsWithCoverage?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageStateRecord
     */
    numCourtsWithoutCoverage?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageStateRecord
     */
    numUnserviceableRequests?: number;
    /**
     * 
     * @type {number}
     * @memberof CourtCoverageStateRecord
     */
    percentCourtCoverage?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtCoverageStateRecord
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface CourtDomain
 */
export interface CourtDomain {
    /**
     * 
     * @type {AddressDomain}
     * @memberof CourtDomain
     */
    address?: AddressDomain;
    /**
     * 
     * @type {string}
     * @memberof CourtDomain
     */
    county?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomain
     */
    countyId?: number;
    /**
     * 
     * @type {CountyDomain}
     * @memberof CourtDomain
     */
    countyObj?: CountyDomain;
    /**
     * 
     * @type {string}
     * @memberof CourtDomain
     */
    courtCode?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomain
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtDomain
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtDomain
     */
    courtNameAdditional?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtDomain
     */
    courtType?: CourtDomainCourtTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CourtDomain
     */
    lookupCaseInfoLink?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomain
     */
    otrTargetFee?: number;
    /**
     * 
     * @type {TimeZone}
     * @memberof CourtDomain
     */
    timeZone?: TimeZone;
    /**
     * 
     * @type {number}
     * @memberof CourtDomain
     */
    unserviceableRequests?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtDomain
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CourtDomainCourtTypeEnum {
    CIRCUIT = 'CIRCUIT',
    COUNTYCLERK = 'COUNTY_CLERK',
    DISTRICT = 'DISTRICT',
    JUVENILE = 'JUVENILE',
    MUNICIPAL = 'MUNICIPAL',
    PROBATION = 'PROBATION',
    SUPERIOR = 'SUPERIOR',
    VIOLATIONSBUREAU = 'VIOLATIONS_BUREAU'
}

/**
 * 
 * @export
 * @interface CourtDomainReq
 */
export interface CourtDomainReq {
    /**
     * 
     * @type {AddressDomainReq}
     * @memberof CourtDomainReq
     */
    address?: AddressDomainReq;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainReq
     */
    county?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainReq
     */
    countyId?: number;
    /**
     * 
     * @type {CountyDomain}
     * @memberof CourtDomainReq
     */
    countyObj?: CountyDomain;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainReq
     */
    courtCode?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainReq
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainReq
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainReq
     */
    courtNameAdditional?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainReq
     */
    courtType?: CourtDomainReqCourtTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainReq
     */
    lookupCaseInfoLink?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainReq
     */
    otrTargetFee?: number;
    /**
     * 
     * @type {TimeZoneReq}
     * @memberof CourtDomainReq
     */
    timeZone?: TimeZoneReq;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainReq
     */
    unserviceableRequests?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainReq
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CourtDomainReqCourtTypeEnum {
    CIRCUIT = 'CIRCUIT',
    COUNTYCLERK = 'COUNTY_CLERK',
    DISTRICT = 'DISTRICT',
    JUVENILE = 'JUVENILE',
    MUNICIPAL = 'MUNICIPAL',
    PROBATION = 'PROBATION',
    SUPERIOR = 'SUPERIOR',
    VIOLATIONSBUREAU = 'VIOLATIONS_BUREAU'
}

/**
 * 
 * @export
 * @interface CourtDomainRes
 */
export interface CourtDomainRes {
    /**
     * 
     * @type {AddressDomainRes}
     * @memberof CourtDomainRes
     */
    address?: AddressDomainRes;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainRes
     */
    county?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainRes
     */
    countyId?: number;
    /**
     * 
     * @type {CountyDomain}
     * @memberof CourtDomainRes
     */
    countyObj?: CountyDomain;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainRes
     */
    courtCode?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainRes
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainRes
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainRes
     */
    courtNameAdditional?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainRes
     */
    courtType?: CourtDomainResCourtTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainRes
     */
    lookupCaseInfoLink?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainRes
     */
    otrTargetFee?: number;
    /**
     * 
     * @type {TimeZoneRes}
     * @memberof CourtDomainRes
     */
    timeZone?: TimeZoneRes;
    /**
     * 
     * @type {number}
     * @memberof CourtDomainRes
     */
    unserviceableRequests?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtDomainRes
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CourtDomainResCourtTypeEnum {
    CIRCUIT = 'CIRCUIT',
    COUNTYCLERK = 'COUNTY_CLERK',
    DISTRICT = 'DISTRICT',
    JUVENILE = 'JUVENILE',
    MUNICIPAL = 'MUNICIPAL',
    PROBATION = 'PROBATION',
    SUPERIOR = 'SUPERIOR',
    VIOLATIONSBUREAU = 'VIOLATIONS_BUREAU'
}

/**
 * 
 * @export
 * @interface CourtInputRequest
 */
export interface CourtInputRequest {
    /**
     * 
     * @type {number}
     * @memberof CourtInputRequest
     */
    courtId?: number;
}
/**
 * 
 * @export
 * @interface CourtResponseModel
 */
export interface CourtResponseModel {
    /**
     * 
     * @type {AddressDomainRes}
     * @memberof CourtResponseModel
     */
    address?: AddressDomainRes;
    /**
     * 
     * @type {CountyDomain}
     * @memberof CourtResponseModel
     */
    countyObj?: CountyDomain;
    /**
     * 
     * @type {string}
     * @memberof CourtResponseModel
     */
    courtCode?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtResponseModel
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtResponseModel
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtResponseModel
     */
    courtNameAdditional?: string;
    /**
     * 
     * @type {string}
     * @memberof CourtResponseModel
     */
    courtType?: CourtResponseModelCourtTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CourtResponseModel
     */
    lookupCaseInfoLink?: string;
    /**
     * 
     * @type {number}
     * @memberof CourtResponseModel
     */
    otrTargetFee?: number;
    /**
     * 
     * @type {string}
     * @memberof CourtResponseModel
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CourtResponseModelCourtTypeEnum {
    CIRCUIT = 'CIRCUIT',
    COUNTYCLERK = 'COUNTY_CLERK',
    DISTRICT = 'DISTRICT',
    JUVENILE = 'JUVENILE',
    MUNICIPAL = 'MUNICIPAL',
    PROBATION = 'PROBATION',
    SUPERIOR = 'SUPERIOR',
    VIOLATIONSBUREAU = 'VIOLATIONS_BUREAU'
}

/**
 * 
 * @export
 * @interface CoverageToRemove
 */
export interface CoverageToRemove {
    /**
     * 
     * @type {number}
     * @memberof CoverageToRemove
     */
    courtId?: number;
    /**
     * 
     * @type {number}
     * @memberof CoverageToRemove
     */
    violationId?: number;
}
/**
 * 
 * @export
 * @interface CreateBillingSubscriptionItemModel
 */
export interface CreateBillingSubscriptionItemModel {
    /**
     * 
     * @type {number}
     * @memberof CreateBillingSubscriptionItemModel
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionItemModel
     */
    billingScheme?: CreateBillingSubscriptionItemModelBillingSchemeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionItemModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionItemModel
     */
    interval?: CreateBillingSubscriptionItemModelIntervalEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateBillingSubscriptionItemModel
     */
    intervalCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionItemModel
     */
    priceDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionItemModel
     */
    productId?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateBillingSubscriptionItemModel
     */
    quantity?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionItemModel
     */
    tiersMode?: CreateBillingSubscriptionItemModelTiersModeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionItemModel
     */
    usageType?: CreateBillingSubscriptionItemModelUsageTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateBillingSubscriptionItemModelBillingSchemeEnum {
    PERUNIT = 'PER_UNIT',
    TIERED = 'TIERED',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateBillingSubscriptionItemModelIntervalEnum {
    DAILY = 'DAILY',
    MONTHLY = 'MONTHLY',
    QUARTERLY = 'QUARTERLY',
    WEEKLY = 'WEEKLY',
    YEARLY = 'YEARLY'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateBillingSubscriptionItemModelTiersModeEnum {
    GRADUATED = 'GRADUATED',
    VOLUME = 'VOLUME'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateBillingSubscriptionItemModelUsageTypeEnum {
    LICENSED = 'LICENSED',
    METERED = 'METERED'
}

/**
 * 
 * @export
 * @interface CreateBillingSubscriptionRequest
 */
export interface CreateBillingSubscriptionRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateBillingSubscriptionRequest
     */
    priceIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionRequest
     */
    productId?: string;
}
/**
 * 
 * @export
 * @interface CreateBillingSubscriptionResponse
 */
export interface CreateBillingSubscriptionResponse {
    /**
     * 
     * @type {Array<CreateBillingSubscriptionItemModel>}
     * @memberof CreateBillingSubscriptionResponse
     */
    items?: Array<CreateBillingSubscriptionItemModel>;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionResponse
     */
    startAt?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionResponse
     */
    status?: CreateBillingSubscriptionResponseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateBillingSubscriptionResponse
     */
    subscriptionId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateBillingSubscriptionResponseStatusEnum {
    ACTIVE = 'ACTIVE',
    CANCELED = 'CANCELED',
    INCOMPLETE = 'INCOMPLETE',
    INCOMPLETEEXPIRED = 'INCOMPLETE_EXPIRED',
    INTRIALPERIOD = 'IN_TRIAL_PERIOD',
    PASTDUE = 'PAST_DUE',
    UNKNOWN = 'UNKNOWN',
    UNPAID = 'UNPAID'
}

/**
 * 
 * @export
 * @interface CreateBranchLinkRequest
 */
export interface CreateBranchLinkRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBranchLinkRequest
     */
    afterClickUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBranchLinkRequest
     */
    campaign?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBranchLinkRequest
     */
    channel?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CreateBranchLinkRequest
     */
    data?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof CreateBranchLinkRequest
     */
    feature?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBranchLinkRequest
     */
    linkAlias?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBranchLinkRequest
     */
    stage?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateBranchLinkRequest
     */
    tags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CreateBranchLinkRequest
     */
    type?: number;
}
/**
 * 
 * @export
 * @interface CreateCitationRequest
 */
export interface CreateCitationRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCitationRequest
     */
    citationState?: CreateCitationRequestCitationStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateCitationRequest
     */
    clientType?: CreateCitationRequestClientTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateCitationRequest
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCitationRequest
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCitationRequest
     */
    imageContentType?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCitationRequest
     */
    rawImageData?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateCitationRequestCitationStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateCitationRequestClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface CreateCitationResponse
 */
export interface CreateCitationResponse {
    /**
     * 
     * @type {CitationDomain}
     * @memberof CreateCitationResponse
     */
    citation?: CitationDomain;
}
/**
 * 
 * @export
 * @interface CreateConnectAccountLinkRequest
 */
export interface CreateConnectAccountLinkRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateConnectAccountLinkRequest
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateConnectAccountLinkRequest
     */
    linkType?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateConnectAccountLinkRequest
     */
    stripeAccountId?: string;
}
/**
 * 
 * @export
 * @interface CreateConnectAccountLinkResponse
 */
export interface CreateConnectAccountLinkResponse {
    /**
     * 
     * @type {StripeAccountLinkDomain}
     * @memberof CreateConnectAccountLinkResponse
     */
    accountLink?: StripeAccountLinkDomain;
}
/**
 * 
 * @export
 * @interface CreateLawfirmModel
 */
export interface CreateLawfirmModel {
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    aboutUsBlurb?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateLawfirmModel
     */
    caseAssignmentPriority?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    coverPhotoUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateLawfirmModel
     */
    createdBy?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    establishedDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateLawfirmModel
     */
    establishedYear?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateLawfirmModel
     */
    isTestLawfirm?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    lawfirmPaymentModel?: CreateLawfirmModelLawfirmPaymentModelEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    lawfirmState?: CreateLawfirmModelLawfirmStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    membershipStartDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    otrNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    primaryEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    primaryPhoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    tagLine?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLawfirmModel
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateLawfirmModelLawfirmPaymentModelEnum {
    DESTINATIONACCOUNT = 'DESTINATION_ACCOUNT',
    SEPARATECHARGE = 'SEPARATE_CHARGE',
    TRANSFERDEDUCTION = 'TRANSFER_DEDUCTION'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateLawfirmModelLawfirmStateEnum {
    ACCOUNTCLOSED = 'ACCOUNT_CLOSED',
    DUPLICATE = 'DUPLICATE',
    ESTABLISHED = 'ESTABLISHED',
    FUTURELEAD = 'FUTURE_LEAD',
    INTRIAL = 'IN_TRIAL',
    LAWFIRMINTERESTED = 'LAWFIRM_INTERESTED',
    LAWFIRMLEAD = 'LAWFIRM_LEAD',
    LAWFIRMNOTINTERESTED = 'LAWFIRM_NOT_INTERESTED',
    NOTINTERESTEDFEESPLITTINGETHICS = 'NOT_INTERESTED_FEE_SPLITTING_ETHICS',
    NOTINTERESTEDREFUNDETHICS = 'NOT_INTERESTED_REFUND_ETHICS',
    ONBOARDING = 'ONBOARDING',
    TEMPORARILYTURNEDOFF = 'TEMPORARILY_TURNED_OFF',
    TERMINATEDFRAUD = 'TERMINATED_FRAUD',
    TERMINATEDPOORSERVICE = 'TERMINATED_POOR_SERVICE',
    TERMINATEDPOORSUCCESS = 'TERMINATED_POOR_SUCCESS',
    UNDERREVIEW = 'UNDER_REVIEW'
}

/**
 * 
 * @export
 * @interface CreateNewLawfirmRequest
 */
export interface CreateNewLawfirmRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateNewLawfirmRequest
     */
    defaultTrafficFeeInCents?: number;
    /**
     * 
     * @type {CreateLawfirmModel}
     * @memberof CreateNewLawfirmRequest
     */
    lawfirm?: CreateLawfirmModel;
    /**
     * 
     * @type {number}
     * @memberof CreateNewLawfirmRequest
     */
    priority?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateNewLawfirmRequest
     */
    referralRate?: number;
    /**
     * 
     * @type {Array<CountryRegion>}
     * @memberof CreateNewLawfirmRequest
     */
    supportedRegions?: Array<CountryRegion>;
}
/**
 * 
 * @export
 * @interface CreateNoteInput
 */
export interface CreateNoteInput {
    /**
     * 
     * @type {string}
     * @memberof CreateNoteInput
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateNoteInput
     */
    noteType?: CreateNoteInputNoteTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateNoteInput
     */
    referenceId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateNoteInputNoteTypeEnum {
    PHONELEAD = 'PHONE_LEAD'
}

/**
 * 
 * @export
 * @interface CreateNoteRequest
 */
export interface CreateNoteRequest {
    /**
     * 
     * @type {CreateNoteInput}
     * @memberof CreateNoteRequest
     */
    note?: CreateNoteInput;
}
/**
 * 
 * @export
 * @interface CreateNoteResponse
 */
export interface CreateNoteResponse {
    /**
     * 
     * @type {NoteDomain}
     * @memberof CreateNoteResponse
     */
    note?: NoteDomain;
}
/**
 * 
 * @export
 * @interface CreateReferralCodeRequest
 */
export interface CreateReferralCodeRequest {
    /**
     * 
     * @type {boolean}
     * @memberof CreateReferralCodeRequest
     */
    discountOwnerOTR?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateReferralCodeRequest
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateReferralCodeRequest
     */
    refereeCreditType?: CreateReferralCodeRequestRefereeCreditTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateReferralCodeRequest
     */
    refereeCreditValue?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateReferralCodeRequest
     */
    referralCodeOverride?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateReferralCodeRequest
     */
    referralCountLimit?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateReferralCodeRequest
     */
    referrerCreditType?: CreateReferralCodeRequestReferrerCreditTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateReferralCodeRequest
     */
    referrerCreditValue?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateReferralCodeRequest
     */
    referrerUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateReferralCodeRequest
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateReferralCodeRequestRefereeCreditTypeEnum {
    CENTSVALUE = 'CENTS_VALUE',
    NOCREDIT = 'NO_CREDIT',
    PERCENTAGEDISCOUNT = 'PERCENTAGE_DISCOUNT'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateReferralCodeRequestReferrerCreditTypeEnum {
    CENTSVALUE = 'CENTS_VALUE',
    NOCREDIT = 'NO_CREDIT',
    PERCENTAGEDISCOUNT = 'PERCENTAGE_DISCOUNT'
}

/**
 * 
 * @export
 * @interface CreateReferralCodeResponse
 */
export interface CreateReferralCodeResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateReferralCodeResponse
     */
    referralCode?: string;
}
/**
 * 
 * @export
 * @interface CreateReferralSourceForCitation
 */
export interface CreateReferralSourceForCitation {
    /**
     * 
     * @type {object}
     * @memberof CreateReferralSourceForCitation
     */
    referralSourceData?: object;
}
/**
 * 
 * @export
 * @interface CreateStripeConnectAccountRequest
 */
export interface CreateStripeConnectAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateStripeConnectAccountRequest
     */
    accountType?: CreateStripeConnectAccountRequestAccountTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateStripeConnectAccountRequest
     */
    lawfirmId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateStripeConnectAccountRequestAccountTypeEnum {
    EXPRESS = 'EXPRESS',
    STANDARD = 'STANDARD'
}

/**
 * 
 * @export
 * @interface CreateStripeConnectAccountResponse
 */
export interface CreateStripeConnectAccountResponse {
    /**
     * 
     * @type {StripeConnectedAccountDomain}
     * @memberof CreateStripeConnectAccountResponse
     */
    account?: StripeConnectedAccountDomain;
    /**
     * 
     * @type {StripeAccountLinkDomain}
     * @memberof CreateStripeConnectAccountResponse
     */
    accountLink?: StripeAccountLinkDomain;
}
/**
 * 
 * @export
 * @interface CursorModel
 */
export interface CursorModel {
    /**
     * 
     * @type {string}
     * @memberof CursorModel
     */
    nextPageToken?: string;
    /**
     * 
     * @type {string}
     * @memberof CursorModel
     */
    previousPageToken?: string;
}
/**
 * 
 * @export
 * @interface CustomerLead
 */
export interface CustomerLead {
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    caseDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    channel?: CustomerLeadChannelEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    emailAddress: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerLead
     */
    fineInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    firstName: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerLead
     */
    hasCourtDate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    licenseType?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    state?: CustomerLeadStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    violation?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerLead
     */
    zipCode?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CustomerLeadChannelEnum {
    DMVCOM = 'DMV_COM',
    DMVORG = 'DMV_ORG',
    EDUCATEDDRIVER = 'EDUCATED_DRIVER',
    NOLO = 'NOLO',
    PHOTOENFORCED = 'PHOTO_ENFORCED',
    RIDESHAREGUY = 'RIDE_SHARE_GUY',
    RIDESHARINGDRIVER = 'RIDE_SHARING_DRIVER',
    UNKNOWN = 'UNKNOWN',
    WTL = 'WTL'
}
/**
    * @export
    * @enum {string}
    */
export enum CustomerLeadStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface CustomerOverduePayment
 */
export interface CustomerOverduePayment {
    /**
     * 
     * @type {string}
     * @memberof CustomerOverduePayment
     */
    bookingConfirmedDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOverduePayment
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOverduePayment
     */
    casePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOverduePayment
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOverduePayment
     */
    dueDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerOverduePayment
     */
    overdueAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerOverduePayment
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface CustomerReview
 */
export interface CustomerReview {
    /**
     * 
     * @type {Array<ReviewCommentModel>}
     * @memberof CustomerReview
     */
    comments?: Array<ReviewCommentModel>;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    copy?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerReview
     */
    featured?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomerReview
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    loggedInUserVote?: CustomerReviewLoggedInUserVoteEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    nameSetting?: CustomerReviewNameSettingEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {ReviewRatingModel}
     * @memberof CustomerReview
     */
    ratingModel?: ReviewRatingModel;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    recommendationType?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    resolutionName?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    reviewDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    source?: CustomerReviewSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    starRating?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    stateAbbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    tagLine?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerReview
     */
    ticketLocation?: string;
    /**
     * 
     * @type {ReviewVoteAggregateModel}
     * @memberof CustomerReview
     */
    voteModel?: ReviewVoteAggregateModel;
}

/**
    * @export
    * @enum {string}
    */
export enum CustomerReviewLoggedInUserVoteEnum {
    HELPFUL = 'HELPFUL',
    UNHELPFUL = 'UNHELPFUL'
}
/**
    * @export
    * @enum {string}
    */
export enum CustomerReviewNameSettingEnum {
    ANONYMOUS = 'ANONYMOUS',
    FIRSTNAMELASTINITIAL = 'FIRST_NAME_LAST_INITIAL',
    FULLNAME = 'FULL_NAME'
}
/**
    * @export
    * @enum {string}
    */
export enum CustomerReviewSourceEnum {
    ANDROID = 'ANDROID',
    APPLE = 'APPLE',
    FACEBOOK = 'FACEBOOK',
    GOOGLEBUSINESS = 'GOOGLE_BUSINESS',
    OTR = 'OTR',
    REVIEWSIO = 'REVIEWS_IO'
}

/**
 * 
 * @export
 * @interface DashboardAddressModel
 */
export interface DashboardAddressModel {
    /**
     * 
     * @type {string}
     * @memberof DashboardAddressModel
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardAddressModel
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardAddressModel
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardAddressModel
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardAddressModel
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface DashboardCaseModel
 */
export interface DashboardCaseModel {
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    bookingConfirmedDate?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    caseId?: string;
    /**
     * 
     * @type {DashboardCitationModel}
     * @memberof DashboardCaseModel
     */
    citation?: DashboardCitationModel;
    /**
     * 
     * @type {DashboardCourtModel}
     * @memberof DashboardCaseModel
     */
    court?: DashboardCourtModel;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardCaseModel
     */
    hasLeftLawyerReview?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    lawfirmProfilePictureUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof DashboardCaseModel
     */
    legalFeeInCents?: number;
    /**
     * 
     * @type {DashboardStatusModel}
     * @memberof DashboardCaseModel
     */
    status?: DashboardStatusModel;
    /**
     * 
     * @type {number}
     * @memberof DashboardCaseModel
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface DashboardCitationModel
 */
export interface DashboardCitationModel {
    /**
     * 
     * @type {string}
     * @memberof DashboardCitationModel
     */
    cdlStatus?: DashboardCitationModelCdlStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof DashboardCitationModel
     */
    citationId?: number;
    /**
     * 
     * @type {PureDate}
     * @memberof DashboardCitationModel
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {string}
     * @memberof DashboardCitationModel
     */
    creationDateUtc?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardCitationModel
     */
    dismissedFromContactList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardCitationModel
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DashboardCitationModel
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardCitationModel
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof DashboardCitationModel
     */
    violationCount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum DashboardCitationModelCdlStatusEnum {
    CDLINCOMMERCIALVEHICLE = 'CDL_IN_COMMERCIAL_VEHICLE',
    CDLINPERSONALVEHICLE = 'CDL_IN_PERSONAL_VEHICLE',
    NOCDL = 'NO_CDL'
}

/**
 * 
 * @export
 * @interface DashboardCourtModel
 */
export interface DashboardCourtModel {
    /**
     * 
     * @type {DashboardAddressModel}
     * @memberof DashboardCourtModel
     */
    address?: DashboardAddressModel;
    /**
     * 
     * @type {string}
     * @memberof DashboardCourtModel
     */
    courtName?: string;
}
/**
 * 
 * @export
 * @interface DashboardStatusModel
 */
export interface DashboardStatusModel {
    /**
     * 
     * @type {string}
     * @memberof DashboardStatusModel
     */
    caseStatus?: DashboardStatusModelCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof DashboardStatusModel
     */
    clientFriendlyDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardStatusModel
     */
    clientFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardStatusModel
     */
    statusCategory?: DashboardStatusModelStatusCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DashboardStatusModelCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum DashboardStatusModelStatusCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface DefaultClassModel
 */
export interface DefaultClassModel {
    /**
     * 
     * @type {string}
     * @memberof DefaultClassModel
     */
    classification?: DefaultClassModelClassificationEnum;
    /**
     * 
     * @type {string}
     * @memberof DefaultClassModel
     */
    regionCode?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DefaultClassModelClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface DeleteCitationResponse
 */
export interface DeleteCitationResponse {
    /**
     * 
     * @type {CitationDomain}
     * @memberof DeleteCitationResponse
     */
    citation?: CitationDomain;
}
/**
 * 
 * @export
 * @interface DeleteLawyerLicenseRequest
 */
export interface DeleteLawyerLicenseRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteLawyerLicenseRequest
     */
    licenseIds?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteNotificationByPagesRequest
 */
export interface DeleteNotificationByPagesRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DeleteNotificationByPagesRequest
     */
    pageTypes?: Array<DeleteNotificationByPagesRequestPageTypesEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum DeleteNotificationByPagesRequestPageTypesEnum {
    CASEACTION = 'CASE_ACTION',
    CASEMESSAGES = 'CASE_MESSAGES',
    CASESTATUS = 'CASE_STATUS',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    NEWTICKET = 'NEW_TICKET',
    PROFILE = 'PROFILE'
}

/**
 * 
 * @export
 * @interface DeleteNotificationEventRequest
 */
export interface DeleteNotificationEventRequest {
    /**
     * 
     * @type {number}
     * @memberof DeleteNotificationEventRequest
     */
    notificationId?: number;
    /**
     * 
     * @type {string}
     * @memberof DeleteNotificationEventRequest
     */
    pageType?: DeleteNotificationEventRequestPageTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DeleteNotificationEventRequestPageTypeEnum {
    CASEACTION = 'CASE_ACTION',
    CASEMESSAGES = 'CASE_MESSAGES',
    CASESTATUS = 'CASE_STATUS',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    NEWTICKET = 'NEW_TICKET',
    PROFILE = 'PROFILE'
}

/**
 * 
 * @export
 * @interface DirectMailContact
 */
export interface DirectMailContact {
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    backTemplateUrlSent?: string;
    /**
     * 
     * @type {number}
     * @memberof DirectMailContact
     */
    costInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    estimatedDeliveryDate?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    frontTemplateUrlSent?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    lobReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    mailDimensions?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    mailTemplateName?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    mailType?: DirectMailContactMailTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    processedForDeliveryDate?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailContact
     */
    trackingStatus?: DirectMailContactTrackingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DirectMailContactMailTypeEnum {
    CHECK = 'CHECK',
    LETTER = 'LETTER',
    POSTCARD = 'POST_CARD'
}
/**
    * @export
    * @enum {string}
    */
export enum DirectMailContactTrackingStatusEnum {
    CREATED = 'CREATED',
    INLOCALAREA = 'IN_LOCAL_AREA',
    INTRANSIT = 'IN_TRANSIT',
    PROCESSEDFORDELIVERY = 'PROCESSED_FOR_DELIVERY',
    RETURNEDTOSENDER = 'RETURNED_TO_SENDER',
    REROUTED = 'RE_ROUTED'
}

/**
 * 
 * @export
 * @interface DirectMailContactResponse
 */
export interface DirectMailContactResponse {
    /**
     * 
     * @type {Array<DirectMailContact>}
     * @memberof DirectMailContactResponse
     */
    sentMail?: Array<DirectMailContact>;
}
/**
 * 
 * @export
 * @interface DirectMailGetRequest
 */
export interface DirectMailGetRequest {
    /**
     * 
     * @type {AddressDomain}
     * @memberof DirectMailGetRequest
     */
    toAddress?: AddressDomain;
    /**
     * 
     * @type {string}
     * @memberof DirectMailGetRequest
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface DirectMailSendRequest
 */
export interface DirectMailSendRequest {
    /**
     * 
     * @type {string}
     * @memberof DirectMailSendRequest
     */
    mailTemplateType?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailSendRequest
     */
    reconcileId?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailSendRequest
     */
    reconcileType?: DirectMailSendRequestReconcileTypeEnum;
    /**
     * 
     * @type {AddressDomain}
     * @memberof DirectMailSendRequest
     */
    toAddress?: AddressDomain;
}

/**
    * @export
    * @enum {string}
    */
export enum DirectMailSendRequestReconcileTypeEnum {
    OTRCITATIONID = 'OTR_CITATION_ID',
    OTRLAWFIRMID = 'OTR_LAWFIRM_ID',
    TICKETREFERENCEID = 'TICKET_REFERENCE_ID'
}

/**
 * 
 * @export
 * @interface DirectMailTemplate
 */
export interface DirectMailTemplate {
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplate
     */
    mailDimensions?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplate
     */
    mailTemplateBackUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplate
     */
    mailTemplateFrontUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof DirectMailTemplate
     */
    mailTemplateId?: number;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplate
     */
    mailTemplateName?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplate
     */
    mailType?: DirectMailTemplateMailTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DirectMailTemplateMailTypeEnum {
    CHECK = 'CHECK',
    LETTER = 'LETTER',
    POSTCARD = 'POST_CARD'
}

/**
 * 
 * @export
 * @interface DirectMailTemplateResponse
 */
export interface DirectMailTemplateResponse {
    /**
     * 
     * @type {Array<DirectMailTemplate>}
     * @memberof DirectMailTemplateResponse
     */
    templates?: Array<DirectMailTemplate>;
}
/**
 * 
 * @export
 * @interface DirectMailTemplateToAdd
 */
export interface DirectMailTemplateToAdd {
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplateToAdd
     */
    fileNamePrefix?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplateToAdd
     */
    mailDimensions?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplateToAdd
     */
    mailType?: DirectMailTemplateToAddMailTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplateToAdd
     */
    templateBackHtml?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplateToAdd
     */
    templateFrontHtml?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectMailTemplateToAdd
     */
    templateName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DirectMailTemplateToAddMailTypeEnum {
    CHECK = 'CHECK',
    LETTER = 'LETTER',
    POSTCARD = 'POST_CARD'
}

/**
 * 
 * @export
 * @interface DismissCitationsFromContactListRequest
 */
export interface DismissCitationsFromContactListRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DismissCitationsFromContactListRequest
     */
    citationIdList?: Array<number>;
}
/**
 * 
 * @export
 * @interface DismissPhoneLeadRequest
 */
export interface DismissPhoneLeadRequest {
    /**
     * 
     * @type {string}
     * @memberof DismissPhoneLeadRequest
     */
    entityType?: DismissPhoneLeadRequestEntityTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DismissPhoneLeadRequest
     */
    referenceIdList?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum DismissPhoneLeadRequestEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}

/**
 * 
 * @export
 * @interface DocumentDecisionRequest
 */
export interface DocumentDecisionRequest {
    /**
     * 
     * @type {boolean}
     * @memberof DocumentDecisionRequest
     */
    acknowledged?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocumentDecisionRequest
     */
    caseId?: string;
}
/**
 * 
 * @export
 * @interface DripRemoveRequest
 */
export interface DripRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof DripRemoveRequest
     */
    dripAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof DripRemoveRequest
     */
    dripAction?: DripRemoveRequestDripActionEnum;
    /**
     * 
     * @type {string}
     * @memberof DripRemoveRequest
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof DripRemoveRequest
     */
    ticketIssueId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DripRemoveRequestDripActionEnum {
    DELETE = 'DELETE',
    UNSUBSCRIBE = 'UNSUBSCRIBE'
}

/**
 * 
 * @export
 * @interface DripWebhookData
 */
export interface DripWebhookData {
    /**
     * 
     * @type {string}
     * @memberof DripWebhookData
     */
    account_id?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DripWebhookData
     */
    properties?: { [key: string]: string; };
    /**
     * 
     * @type {Subscriber}
     * @memberof DripWebhookData
     */
    subscriber?: Subscriber;
}
/**
 * 
 * @export
 * @interface DripWebhookEvent
 */
export interface DripWebhookEvent {
    /**
     * 
     * @type {DripWebhookData}
     * @memberof DripWebhookEvent
     */
    data?: DripWebhookData;
    /**
     * 
     * @type {string}
     * @memberof DripWebhookEvent
     */
    event?: string;
    /**
     * 
     * @type {string}
     * @memberof DripWebhookEvent
     */
    occurred_at?: string;
}
/**
 * 
 * @export
 * @interface Duration
 */
export interface Duration {
    /**
     * 
     * @type {number}
     * @memberof Duration
     */
    nano?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Duration
     */
    negative?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Duration
     */
    seconds?: number;
    /**
     * 
     * @type {Array<TemporalUnit>}
     * @memberof Duration
     */
    units?: Array<TemporalUnit>;
    /**
     * 
     * @type {boolean}
     * @memberof Duration
     */
    zero?: boolean;
}
/**
 * 
 * @export
 * @interface EditConversationMessageRequest
 */
export interface EditConversationMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof EditConversationMessageRequest
     */
    messageBody?: string;
}
/**
 * 
 * @export
 * @interface EnableViolationModel
 */
export interface EnableViolationModel {
    /**
     * 
     * @type {string}
     * @memberof EnableViolationModel
     */
    violationClass?: EnableViolationModelViolationClassEnum;
    /**
     * 
     * @type {number}
     * @memberof EnableViolationModel
     */
    violationId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EnableViolationModelViolationClassEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface EnableViolationResponseModel
 */
export interface EnableViolationResponseModel {
    /**
     * 
     * @type {number}
     * @memberof EnableViolationResponseModel
     */
    courtId?: number;
}
/**
 * 
 * @export
 * @interface EnableViolationsForLawfirmRequest
 */
export interface EnableViolationsForLawfirmRequest {
    /**
     * 
     * @type {Array<EnableViolationModel>}
     * @memberof EnableViolationsForLawfirmRequest
     */
    models?: Array<EnableViolationModel>;
}
/**
 * 
 * @export
 * @interface EnableViolationsForLawfirmResponse
 */
export interface EnableViolationsForLawfirmResponse {
    /**
     * 
     * @type {Array<EnableViolationResponseModel>}
     * @memberof EnableViolationsForLawfirmResponse
     */
    models?: Array<EnableViolationResponseModel>;
}
/**
 * 
 * @export
 * @interface EstimateInsuranceSavingsRequest
 */
export interface EstimateInsuranceSavingsRequest {
    /**
     * 
     * @type {number}
     * @memberof EstimateInsuranceSavingsRequest
     */
    monthlyInsurancePremiumInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof EstimateInsuranceSavingsRequest
     */
    state?: EstimateInsuranceSavingsRequestStateEnum;
    /**
     * 
     * @type {number}
     * @memberof EstimateInsuranceSavingsRequest
     */
    ticketFineInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof EstimateInsuranceSavingsRequest
     */
    trafficViolationTypeId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EstimateInsuranceSavingsRequestStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface EstimateInsuranceSavingsResponse
 */
export interface EstimateInsuranceSavingsResponse {
    /**
     * 
     * @type {number}
     * @memberof EstimateInsuranceSavingsResponse
     */
    monthlyExtraInsuranceCostInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof EstimateInsuranceSavingsResponse
     */
    totalCostOfTicketInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof EstimateInsuranceSavingsResponse
     */
    totalExtraInsuranceCostInCents?: number;
}
/**
 * 
 * @export
 * @interface FeedbackDomain
 */
export interface FeedbackDomain {
    /**
     * 
     * @type {string}
     * @memberof FeedbackDomain
     */
    appVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackDomain
     */
    body?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackDomain
     */
    device?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackDomain
     */
    subject?: string;
}
/**
 * 
 * @export
 * @interface FinancialTransaction
 */
export interface FinancialTransaction {
    /**
     * 
     * @type {number}
     * @memberof FinancialTransaction
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    caseId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FinancialTransaction
     */
    isOverdue?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FinancialTransaction
     */
    otrAmount?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof FinancialTransaction
     */
    runAtDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof FinancialTransaction
     */
    stripeAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    taskStatus?: FinancialTransactionTaskStatusEnum;
    /**
     * 
     * @type {TimestampRes}
     * @memberof FinancialTransaction
     */
    transactionDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    transactionMethod?: FinancialTransactionTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    transactionReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    transactionType?: FinancialTransactionTransactionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    userFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    userLastName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FinancialTransactionTaskStatusEnum {
    CANCELLED = 'CANCELLED',
    COMPLETE = 'COMPLETE',
    ERROR = 'ERROR',
    INPROGRESS = 'IN_PROGRESS',
    NOOPERATION = 'NO_OPERATION',
    QUEUED = 'QUEUED'
}
/**
    * @export
    * @enum {string}
    */
export enum FinancialTransactionTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}
/**
    * @export
    * @enum {string}
    */
export enum FinancialTransactionTransactionTypeEnum {
    FEE = 'FEE',
    FEEREFUND = 'FEE_REFUND',
    TRANSFER = 'TRANSFER',
    TRANSFERREVERSAL = 'TRANSFER_REVERSAL'
}

/**
 * 
 * @export
 * @interface FindChargeDisputesResponse
 */
export interface FindChargeDisputesResponse {
    /**
     * 
     * @type {Array<StripeDisputeDomain>}
     * @memberof FindChargeDisputesResponse
     */
    disputes?: Array<StripeDisputeDomain>;
}
/**
 * 
 * @export
 * @interface FindCourtsWithNoCoverageResponse
 */
export interface FindCourtsWithNoCoverageResponse {
    /**
     * 
     * @type {Array<CourtDomainRes>}
     * @memberof FindCourtsWithNoCoverageResponse
     */
    courtsWithNoCoverage?: Array<CourtDomainRes>;
    /**
     * 
     * @type {number}
     * @memberof FindCourtsWithNoCoverageResponse
     */
    numRecords?: number;
}
/**
 * 
 * @export
 * @interface FindDisputesRequest
 */
export interface FindDisputesRequest {
    /**
     * 
     * @type {string}
     * @memberof FindDisputesRequest
     */
    disputeStatus?: string;
    /**
     * 
     * @type {number}
     * @memberof FindDisputesRequest
     */
    maxResults?: number;
}
/**
 * 
 * @export
 * @interface FindMatchingUser
 */
export interface FindMatchingUser {
    /**
     * 
     * @type {UserBookingsDomain}
     * @memberof FindMatchingUser
     */
    bookings?: UserBookingsDomain;
    /**
     * 
     * @type {Timestamp}
     * @memberof FindMatchingUser
     */
    creationDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUser
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUser
     */
    firstname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindMatchingUser
     */
    isEmailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FindMatchingUser
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FindMatchingUser
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUser
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUser
     */
    loginProvider?: FindMatchingUserLoginProviderEnum;
    /**
     * 
     * @type {Array<UserRoleDomain>}
     * @memberof FindMatchingUser
     */
    roles?: Array<UserRoleDomain>;
    /**
     * 
     * @type {boolean}
     * @memberof FindMatchingUser
     */
    unsubscribed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FindMatchingUser
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum FindMatchingUserLoginProviderEnum {
    APPLE = 'APPLE',
    EMAIL = 'EMAIL',
    FACEBOOK = 'FACEBOOK',
    GOOGLE = 'GOOGLE',
    PHONE = 'PHONE',
    TWITTER = 'TWITTER'
}

/**
 * 
 * @export
 * @interface FindMatchingUsersRequest
 */
export interface FindMatchingUsersRequest {
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUsersRequest
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUsersRequest
     */
    firstName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindMatchingUsersRequest
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUsersRequest
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof FindMatchingUsersRequest
     */
    phoneNumber?: string;
}
/**
 * 
 * @export
 * @interface FindMatchingUsersResponse
 */
export interface FindMatchingUsersResponse {
    /**
     * 
     * @type {Array<FindMatchingUser>}
     * @memberof FindMatchingUsersResponse
     */
    users?: Array<FindMatchingUser>;
}
/**
 * 
 * @export
 * @interface FindsCourtsResponse
 */
export interface FindsCourtsResponse {
    /**
     * 
     * @type {Array<GetCourtsInnerResponse>}
     * @memberof FindsCourtsResponse
     */
    courts?: Array<GetCourtsInnerResponse>;
    /**
     * 
     * @type {number}
     * @memberof FindsCourtsResponse
     */
    numRecords?: number;
}
/**
 * 
 * @export
 * @interface FreshDeskConversation
 */
export interface FreshDeskConversation {
    /**
     * 
     * @type {string}
     * @memberof FreshDeskConversation
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskConversation
     */
    from_email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskConversation
     */
    incoming?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskConversation
     */
    _private?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskConversation
     */
    ticket_id?: number;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskConversation
     */
    user_id?: number;
}
/**
 * 
 * @export
 * @interface FreshDeskRequester
 */
export interface FreshDeskRequester {
    /**
     * 
     * @type {string}
     * @memberof FreshDeskRequester
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskRequester
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface FreshDeskTicket
 */
export interface FreshDeskTicket {
    /**
     * 
     * @type {Array<FreshdeskAttachment>}
     * @memberof FreshDeskTicket
     */
    attachments?: Array<FreshdeskAttachment>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicket
     */
    cc_emails?: Array<string>;
    /**
     * 
     * @type {Array<FreshDeskConversation>}
     * @memberof FreshDeskTicket
     */
    conversation?: Array<FreshDeskConversation>;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    created_at?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof FreshDeskTicket
     */
    custom_fields?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicket
     */
    deleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    description_text?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    due_by?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    fr_due_by?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicket
     */
    fr_escalated?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicket
     */
    fwd_emails?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    group_id?: number;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicket
     */
    is_escalated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    phone?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    priority?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    priorityType?: FreshDeskTicketPriorityTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    product_id?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicket
     */
    reply_cc_emails?: Array<string>;
    /**
     * 
     * @type {FreshDeskRequester}
     * @memberof FreshDeskTicket
     */
    requester?: FreshDeskRequester;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    requesterAgentName?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    requester_id?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    responderAgentName?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    responder_id?: number;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    source?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicket
     */
    spam?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicket
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    statusType?: FreshDeskTicketStatusTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    subject?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicket
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicket
     */
    to_emails?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    unique_external_id?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicket
     */
    updated_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FreshDeskTicketPriorityTypeEnum {
    HIGH = 'HIGH',
    LOW = 'LOW',
    MEDIUM = 'MEDIUM',
    UNKNOWN = 'UNKNOWN',
    URGENT = 'URGENT'
}
/**
    * @export
    * @enum {string}
    */
export enum FreshDeskTicketStatusTypeEnum {
    CLOSED = 'CLOSED',
    OPEN = 'OPEN',
    PENDING = 'PENDING',
    PENDINGONEWEEK = 'PENDING_ONE_WEEK',
    PENDINGTWODAYS = 'PENDING_TWO_DAYS',
    QUEUEDFORAUTOMATION = 'QUEUED_FOR_AUTOMATION',
    RESOLVED = 'RESOLVED',
    UNKNOWN = 'UNKNOWN',
    WAITINGONATTORNEY = 'WAITING_ON_ATTORNEY',
    WAITINGONCUSTOMER = 'WAITING_ON_CUSTOMER',
    WAITINGONOTR = 'WAITING_ON_OTR',
    WAITINGONTHIRDPARTY = 'WAITING_ON_THIRD_PARTY'
}

/**
 * 
 * @export
 * @interface FreshDeskTicketReq
 */
export interface FreshDeskTicketReq {
    /**
     * 
     * @type {Array<FreshdeskAttachmentReq>}
     * @memberof FreshDeskTicketReq
     */
    attachments?: Array<FreshdeskAttachmentReq>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketReq
     */
    cc_emails?: Array<string>;
    /**
     * 
     * @type {Array<FreshDeskConversation>}
     * @memberof FreshDeskTicketReq
     */
    conversation?: Array<FreshDeskConversation>;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    created_at?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof FreshDeskTicketReq
     */
    custom_fields?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketReq
     */
    deleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    description_text?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    due_by?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    fr_due_by?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketReq
     */
    fr_escalated?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketReq
     */
    fwd_emails?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    group_id?: number;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketReq
     */
    incoming?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketReq
     */
    is_escalated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    phone?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    priority?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    priorityType?: FreshDeskTicketReqPriorityTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    product_id?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketReq
     */
    reply_cc_emails?: Array<string>;
    /**
     * 
     * @type {FreshDeskRequester}
     * @memberof FreshDeskTicketReq
     */
    requester?: FreshDeskRequester;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    requesterAgentName?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    requester_id?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    responderAgentName?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    responder_id?: number;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    source?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketReq
     */
    spam?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketReq
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    statusType?: FreshDeskTicketReqStatusTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    subject?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketReq
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketReq
     */
    to_emails?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    unique_external_id?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketReq
     */
    updated_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FreshDeskTicketReqPriorityTypeEnum {
    HIGH = 'HIGH',
    LOW = 'LOW',
    MEDIUM = 'MEDIUM',
    UNKNOWN = 'UNKNOWN',
    URGENT = 'URGENT'
}
/**
    * @export
    * @enum {string}
    */
export enum FreshDeskTicketReqStatusTypeEnum {
    CLOSED = 'CLOSED',
    OPEN = 'OPEN',
    PENDING = 'PENDING',
    PENDINGONEWEEK = 'PENDING_ONE_WEEK',
    PENDINGTWODAYS = 'PENDING_TWO_DAYS',
    QUEUEDFORAUTOMATION = 'QUEUED_FOR_AUTOMATION',
    RESOLVED = 'RESOLVED',
    UNKNOWN = 'UNKNOWN',
    WAITINGONATTORNEY = 'WAITING_ON_ATTORNEY',
    WAITINGONCUSTOMER = 'WAITING_ON_CUSTOMER',
    WAITINGONOTR = 'WAITING_ON_OTR',
    WAITINGONTHIRDPARTY = 'WAITING_ON_THIRD_PARTY'
}

/**
 * 
 * @export
 * @interface FreshDeskTicketRes
 */
export interface FreshDeskTicketRes {
    /**
     * 
     * @type {Array<FreshdeskAttachmentRes>}
     * @memberof FreshDeskTicketRes
     */
    attachments?: Array<FreshdeskAttachmentRes>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketRes
     */
    cc_emails?: Array<string>;
    /**
     * 
     * @type {Array<FreshDeskConversation>}
     * @memberof FreshDeskTicketRes
     */
    conversation?: Array<FreshDeskConversation>;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    created_at?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof FreshDeskTicketRes
     */
    custom_fields?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketRes
     */
    deleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    description_text?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    due_by?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    fr_due_by?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketRes
     */
    fr_escalated?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketRes
     */
    fwd_emails?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    group_id?: number;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketRes
     */
    is_escalated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    phone?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    priority?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    priorityType?: FreshDeskTicketResPriorityTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    product_id?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketRes
     */
    reply_cc_emails?: Array<string>;
    /**
     * 
     * @type {FreshDeskRequester}
     * @memberof FreshDeskTicketRes
     */
    requester?: FreshDeskRequester;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    requesterAgentName?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    requester_id?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    responderAgentName?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    responder_id?: number;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    source?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FreshDeskTicketRes
     */
    spam?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FreshDeskTicketRes
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    statusType?: FreshDeskTicketResStatusTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    subject?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketRes
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FreshDeskTicketRes
     */
    to_emails?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    unique_external_id?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshDeskTicketRes
     */
    updated_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FreshDeskTicketResPriorityTypeEnum {
    HIGH = 'HIGH',
    LOW = 'LOW',
    MEDIUM = 'MEDIUM',
    UNKNOWN = 'UNKNOWN',
    URGENT = 'URGENT'
}
/**
    * @export
    * @enum {string}
    */
export enum FreshDeskTicketResStatusTypeEnum {
    CLOSED = 'CLOSED',
    OPEN = 'OPEN',
    PENDING = 'PENDING',
    PENDINGONEWEEK = 'PENDING_ONE_WEEK',
    PENDINGTWODAYS = 'PENDING_TWO_DAYS',
    QUEUEDFORAUTOMATION = 'QUEUED_FOR_AUTOMATION',
    RESOLVED = 'RESOLVED',
    UNKNOWN = 'UNKNOWN',
    WAITINGONATTORNEY = 'WAITING_ON_ATTORNEY',
    WAITINGONCUSTOMER = 'WAITING_ON_CUSTOMER',
    WAITINGONOTR = 'WAITING_ON_OTR',
    WAITINGONTHIRDPARTY = 'WAITING_ON_THIRD_PARTY'
}

/**
 * 
 * @export
 * @interface FreshdeskAttachment
 */
export interface FreshdeskAttachment {
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachment
     */
    attachment_url?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachment
     */
    content_type?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof FreshdeskAttachment
     */
    created_at?: Timestamp;
    /**
     * 
     * @type {number}
     * @memberof FreshdeskAttachment
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachment
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshdeskAttachment
     */
    size?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof FreshdeskAttachment
     */
    updated_at?: Timestamp;
}
/**
 * 
 * @export
 * @interface FreshdeskAttachmentReq
 */
export interface FreshdeskAttachmentReq {
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachmentReq
     */
    attachment_url?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachmentReq
     */
    content_type?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof FreshdeskAttachmentReq
     */
    created_at?: TimestampReq;
    /**
     * 
     * @type {number}
     * @memberof FreshdeskAttachmentReq
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachmentReq
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshdeskAttachmentReq
     */
    size?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof FreshdeskAttachmentReq
     */
    updated_at?: TimestampReq;
}
/**
 * 
 * @export
 * @interface FreshdeskAttachmentRes
 */
export interface FreshdeskAttachmentRes {
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachmentRes
     */
    attachment_url?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachmentRes
     */
    content_type?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof FreshdeskAttachmentRes
     */
    created_at?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof FreshdeskAttachmentRes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskAttachmentRes
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshdeskAttachmentRes
     */
    size?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof FreshdeskAttachmentRes
     */
    updated_at?: TimestampRes;
}
/**
 * 
 * @export
 * @interface FreshdeskTicketReferenceDomain
 */
export interface FreshdeskTicketReferenceDomain {
    /**
     * 
     * @type {number}
     * @memberof FreshdeskTicketReferenceDomain
     */
    freshdeskTicketId?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskTicketReferenceDomain
     */
    referenceEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskTicketReferenceDomain
     */
    referenceEntityType?: FreshdeskTicketReferenceDomainReferenceEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskTicketReferenceDomain
     */
    ticketType?: FreshdeskTicketReferenceDomainTicketTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FreshdeskTicketReferenceDomainReferenceEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum FreshdeskTicketReferenceDomainTicketTypeEnum {
    CARDPROBLEM = 'CARD_PROBLEM',
    POSTBOOKINGPAYMENTFAILURE = 'POST_BOOKING_PAYMENT_FAILURE',
    PREBOOKINGPAYMENTFAILURE = 'PRE_BOOKING_PAYMENT_FAILURE'
}

/**
 * 
 * @export
 * @interface FreshdeskWebhookRequest
 */
export interface FreshdeskWebhookRequest {
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    agentEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    mobile?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    requesterEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    requesterFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    subject?: string;
    /**
     * 
     * @type {number}
     * @memberof FreshdeskWebhookRequest
     */
    ticketId?: number;
    /**
     * 
     * @type {string}
     * @memberof FreshdeskWebhookRequest
     */
    ticketType?: string;
}
/**
 * 
 * @export
 * @interface FuturePayment
 */
export interface FuturePayment {
    /**
     * 
     * @type {number}
     * @memberof FuturePayment
     */
    amountDueInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof FuturePayment
     */
    dueDate?: string;
    /**
     * 
     * @type {string}
     * @memberof FuturePayment
     */
    paymentStatus?: FuturePaymentPaymentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof FuturePayment
     */
    updatedDueDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FuturePaymentPaymentStatusEnum {
    AUTHORIZED = 'AUTHORIZED',
    CANCELLED = 'CANCELLED',
    ERROR = 'ERROR',
    EXPIRED = 'EXPIRED',
    PAID = 'PAID',
    PENDINGLAWFIRMACCEPTANCE = 'PENDING_LAWFIRM_ACCEPTANCE',
    REFUNDED = 'REFUNDED',
    SCHEDULED = 'SCHEDULED',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface GenerateTemplateRequest
 */
export interface GenerateTemplateRequest {
    /**
     * 
     * @type {string}
     * @memberof GenerateTemplateRequest
     */
    caseId?: string;
    /**
     * 
     * @type {number}
     * @memberof GenerateTemplateRequest
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof GenerateTemplateRequest
     */
    citationViolation?: string;
    /**
     * 
     * @type {string}
     * @memberof GenerateTemplateRequest
     */
    emailTemplateId?: GenerateTemplateRequestEmailTemplateIdEnum;
    /**
     * 
     * @type {number}
     * @memberof GenerateTemplateRequest
     */
    recipientUserId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum GenerateTemplateRequestEmailTemplateIdEnum {
    AFTERNOONHELLO2 = 'AFTERNOON_HELLO_2',
    ATTICUSATTORNEYCONTACT1 = 'ATTICUS_ATTORNEY_CONTACT_1',
    CAMERATICKETNMV = 'CAMERA_TICKET_NMV',
    CASECANCELLEDBYUSER = 'CASE_CANCELLED_BY_USER',
    CASECANCELLEDDUPLICATE = 'CASE_CANCELLED_DUPLICATE',
    CASECANCELLEDNMV = 'CASE_CANCELLED_NMV',
    CASECANCELLEDNONPAYMENT = 'CASE_CANCELLED_NON_PAYMENT',
    CASECANCELLEDNOLAWFIRM = 'CASE_CANCELLED_NO_LAWFIRM',
    CASECANCELLEDOVERDUE = 'CASE_CANCELLED_OVERDUE',
    CASECANCELLEDTOOSHORTNOTICE = 'CASE_CANCELLED_TOO_SHORT_NOTICE',
    CASUALFIRSTV1 = 'CASUAL_FIRST_V1',
    CASUALSECONDV1 = 'CASUAL_SECOND_V1',
    FRIDAYINTRO = 'FRIDAY_INTRO',
    INVALIDIMAGEUPLOAD1 = 'INVALID_IMAGE_UPLOAD_1',
    LAWFIRMCONTACT10V1 = 'LAWFIRM_CONTACT_10_V1',
    LAWFIRMCONTACT1V1 = 'LAWFIRM_CONTACT_1_V1',
    LAWFIRMCONTACT2V1 = 'LAWFIRM_CONTACT_2_V1',
    LAWFIRMCONTACT3V1 = 'LAWFIRM_CONTACT_3_V1',
    LAWFIRMCONTACT4V1 = 'LAWFIRM_CONTACT_4_V1',
    LAWFIRMCONTACT5V1 = 'LAWFIRM_CONTACT_5_V1',
    LAWFIRMCONTACT6V1 = 'LAWFIRM_CONTACT_6_V1',
    LAWFIRMCONTACT7V1 = 'LAWFIRM_CONTACT_7_V1',
    LAWFIRMCONTACT8V1 = 'LAWFIRM_CONTACT_8_V1',
    LAWFIRMCONTACT9V1 = 'LAWFIRM_CONTACT_9_V1',
    LAWYERPOSTCOURTREMINDER = 'LAWYER_POST_COURT_REMINDER',
    NOCOVERAGEAVAILABLE = 'NO_COVERAGE_AVAILABLE',
    NOCOVERAGEAVAILABLEMISSINGCOURT = 'NO_COVERAGE_AVAILABLE_MISSING_COURT',
    PARKINGTICKET = 'PARKING_TICKET',
    POSTWIN = 'POST_WIN',
    POSTWINLASTASK = 'POST_WIN_LAST_ASK',
    POSTWINV2 = 'POST_WIN_V2',
    SUNDAYAFTERNOONHELLO = 'SUNDAY_AFTERNOON_HELLO',
    TICKETDUEWA = 'TICKET_DUE_WA',
    TICKETEVALWITHCITATION = 'TICKET_EVAL_WITH_CITATION',
    TICKETEVALWITHCITATION2NDFOLLOWUP = 'TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP',
    TICKETEVALWITHCITATIONCLOSEOUT = 'TICKET_EVAL_WITH_CITATION_CLOSE_OUT'
}

/**
 * 
 * @export
 * @interface GenericAdminListRequest
 */
export interface GenericAdminListRequest {
    /**
     * 
     * @type {number}
     * @memberof GenericAdminListRequest
     */
    trailingDays?: number;
}
/**
 * 
 * @export
 * @interface GeoRatesRequest
 */
export interface GeoRatesRequest {
    /**
     * 
     * @type {string}
     * @memberof GeoRatesRequest
     */
    cdlStatus?: GeoRatesRequestCdlStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof GeoRatesRequest
     */
    courtDate?: string;
    /**
     * 
     * @type {string}
     * @memberof GeoRatesRequest
     */
    courtId?: string;
    /**
     * 
     * @type {number}
     * @memberof GeoRatesRequest
     */
    violationCount?: number;
    /**
     * 
     * @type {Array<ViolationInputRequest>}
     * @memberof GeoRatesRequest
     */
    violations?: Array<ViolationInputRequest>;
}

/**
    * @export
    * @enum {string}
    */
export enum GeoRatesRequestCdlStatusEnum {
    CDLINCOMMERCIALVEHICLE = 'CDL_IN_COMMERCIAL_VEHICLE',
    CDLINPERSONALVEHICLE = 'CDL_IN_PERSONAL_VEHICLE',
    NOCDL = 'NO_CDL'
}

/**
 * 
 * @export
 * @interface GetActivityFeedResponse
 */
export interface GetActivityFeedResponse {
    /**
     * 
     * @type {Array<ActivityFeedModel>}
     * @memberof GetActivityFeedResponse
     */
    activity?: Array<ActivityFeedModel>;
    /**
     * 
     * @type {CursorModel}
     * @memberof GetActivityFeedResponse
     */
    cursor?: CursorModel;
}
/**
 * 
 * @export
 * @interface GetAddressInnerResponse
 */
export interface GetAddressInnerResponse {
    /**
     * 
     * @type {string}
     * @memberof GetAddressInnerResponse
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAddressInnerResponse
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAddressInnerResponse
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAddressInnerResponse
     */
    countyName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAddressInnerResponse
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAddressInnerResponse
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAddressInnerResponse
     */
    timeZoneName?: string;
}
/**
 * 
 * @export
 * @interface GetAppConfigResponse
 */
export interface GetAppConfigResponse {
    /**
     * 
     * @type {string}
     * @memberof GetAppConfigResponse
     */
    androidAppVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAppConfigResponse
     */
    iosAppVersion?: string;
}
/**
 * 
 * @export
 * @interface GetAppearanceAttorneysResponse
 */
export interface GetAppearanceAttorneysResponse {
    /**
     * 
     * @type {Array<AppearanceAttorneyDomain>}
     * @memberof GetAppearanceAttorneysResponse
     */
    attorneys?: Array<AppearanceAttorneyDomain>;
}
/**
 * 
 * @export
 * @interface GetAvailablePaymentPlansResponse
 */
export interface GetAvailablePaymentPlansResponse {
    /**
     * 
     * @type {Array<AvailablePaymentPlan>}
     * @memberof GetAvailablePaymentPlansResponse
     */
    plans?: Array<AvailablePaymentPlan>;
}
/**
 * 
 * @export
 * @interface GetBookingsRequest
 */
export interface GetBookingsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetBookingsRequest
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBookingsRequest
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof GetBookingsRequest
     */
    timeZoneId?: string;
}
/**
 * 
 * @export
 * @interface GetBookingsResponse
 */
export interface GetBookingsResponse {
    /**
     * 
     * @type {Array<Booking>}
     * @memberof GetBookingsResponse
     */
    bookings?: Array<Booking>;
    /**
     * 
     * @type {Array<LawfirmBookingSummary>}
     * @memberof GetBookingsResponse
     */
    bookingsByLawfirm?: Array<LawfirmBookingSummary>;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetBookingsResponse
     */
    bookingsByStatus?: { [key: string]: number; };
    /**
     * 
     * @type {Array<BookingCancelation>}
     * @memberof GetBookingsResponse
     */
    cancelations?: Array<BookingCancelation>;
    /**
     * 
     * @type {CaseBookingsStats}
     * @memberof GetBookingsResponse
     */
    stats?: CaseBookingsStats;
}
/**
 * 
 * @export
 * @interface GetCaseActionResponse
 */
export interface GetCaseActionResponse {
    /**
     * 
     * @type {Array<CaseActionDomainRes>}
     * @memberof GetCaseActionResponse
     */
    actions?: Array<CaseActionDomainRes>;
}
/**
 * 
 * @export
 * @interface GetCaseActionTimelineResponse
 */
export interface GetCaseActionTimelineResponse {
    /**
     * 
     * @type {Array<CaseActionDomainRes>}
     * @memberof GetCaseActionTimelineResponse
     */
    actionsNotTaken?: Array<CaseActionDomainRes>;
    /**
     * 
     * @type {Array<CaseActionDomainRes>}
     * @memberof GetCaseActionTimelineResponse
     */
    actionsTaken?: Array<CaseActionDomainRes>;
}
/**
 * 
 * @export
 * @interface GetCaseActionTypesResponse
 */
export interface GetCaseActionTypesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetCaseActionTypesResponse
     */
    caseActionTypes?: Array<GetCaseActionTypesResponseCaseActionTypesEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum GetCaseActionTypesResponseCaseActionTypesEnum {
    CITATIONDATAEXTRACTED = 'CITATION_DATA_EXTRACTED',
    COURTDATEREMOVED = 'COURT_DATE_REMOVED',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    DISCOVERYRECEIVED = 'DISCOVERY_RECEIVED',
    DISCOVERYREQUESTED = 'DISCOVERY_REQUESTED',
    FAILEDPAYMENTATTEMPT = 'FAILED_PAYMENT_ATTEMPT',
    NOTICEOFAPPEARANCEFILED = 'NOTICE_OF_APPEARANCE_FILED',
    OTHER = 'OTHER',
    REVIEWEDBYLAWFIRM = 'REVIEWED_BY_LAWFIRM',
    TICKETMAILEDTOCOURT = 'TICKET_MAILED_TO_COURT'
}

/**
 * 
 * @export
 * @interface GetCaseCostsAttorneyResponse
 */
export interface GetCaseCostsAttorneyResponse {
    /**
     * 
     * @type {Array<FuturePayment>}
     * @memberof GetCaseCostsAttorneyResponse
     */
    futurePayments?: Array<FuturePayment>;
    /**
     * 
     * @type {number}
     * @memberof GetCaseCostsAttorneyResponse
     */
    lawfirmAssumedCost?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCaseCostsAttorneyResponse
     */
    lawfirmEarningsForCase?: number;
    /**
     * 
     * @type {Array<LineItem>}
     * @memberof GetCaseCostsAttorneyResponse
     */
    lineItems?: Array<LineItem>;
    /**
     * 
     * @type {number}
     * @memberof GetCaseCostsAttorneyResponse
     */
    otrCommissionChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCaseCostsAttorneyResponse
     */
    paymentProcessingFeeChargedToLawfirm?: number;
}
/**
 * 
 * @export
 * @interface GetCaseDocumentResponse
 */
export interface GetCaseDocumentResponse {
    /**
     * 
     * @type {Array<LawfirmCaseDocument>}
     * @memberof GetCaseDocumentResponse
     */
    documents?: Array<LawfirmCaseDocument>;
}
/**
 * 
 * @export
 * @interface GetCaseFromCitationResponse
 */
export interface GetCaseFromCitationResponse {
    /**
     * 
     * @type {CaseDomain}
     * @memberof GetCaseFromCitationResponse
     */
    theCase?: CaseDomain;
}
/**
 * 
 * @export
 * @interface GetCaseMessagesResponse
 */
export interface GetCaseMessagesResponse {
    /**
     * 
     * @type {Array<CaseMessageDomain>}
     * @memberof GetCaseMessagesResponse
     */
    messages?: Array<CaseMessageDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetCaseMessagesResponse
     */
    totalRecords?: number;
}
/**
 * 
 * @export
 * @interface GetCaseNotesResponse
 */
export interface GetCaseNotesResponse {
    /**
     * 
     * @type {CaseNotesDomain}
     * @memberof GetCaseNotesResponse
     */
    caseNotes?: CaseNotesDomain;
}
/**
 * 
 * @export
 * @interface GetCasePaymentsResponse
 */
export interface GetCasePaymentsResponse {
    /**
     * 
     * @type {Array<CasePaymentDomain>}
     * @memberof GetCasePaymentsResponse
     */
    payments?: Array<CasePaymentDomain>;
}
/**
 * 
 * @export
 * @interface GetCaseResolutionStatusesResponse
 */
export interface GetCaseResolutionStatusesResponse {
    /**
     * 
     * @type {Array<CaseStatusDomain>}
     * @memberof GetCaseResolutionStatusesResponse
     */
    statuses?: Array<CaseStatusDomain>;
}
/**
 * 
 * @export
 * @interface GetCaseResponse
 */
export interface GetCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCaseResponse
     */
    chanceOfSuccess?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCaseResponse
     */
    projectedInsuranceCostInCents?: number;
    /**
     * 
     * @type {CaseDomain}
     * @memberof GetCaseResponse
     */
    theCase?: CaseDomain;
}
/**
 * 
 * @export
 * @interface GetCasesWithCoverageObtainedResponse
 */
export interface GetCasesWithCoverageObtainedResponse {
    /**
     * 
     * @type {Array<CaseWithCoverageObtained>}
     * @memberof GetCasesWithCoverageObtainedResponse
     */
    cases?: Array<CaseWithCoverageObtained>;
}
/**
 * 
 * @export
 * @interface GetCasesWithMissingLawfirmPayoutsResponse
 */
export interface GetCasesWithMissingLawfirmPayoutsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCasesWithMissingLawfirmPayoutsResponse
     */
    resultCount?: number;
    /**
     * 
     * @type {Array<MissingLawfirmPayoutResult>}
     * @memberof GetCasesWithMissingLawfirmPayoutsResponse
     */
    results?: Array<MissingLawfirmPayoutResult>;
}
/**
 * 
 * @export
 * @interface GetCasesWithOverduePaymentsResponse
 */
export interface GetCasesWithOverduePaymentsResponse {
    /**
     * 
     * @type {Array<MissingPaymentDomain>}
     * @memberof GetCasesWithOverduePaymentsResponse
     */
    missingPayments?: Array<MissingPaymentDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetCasesWithOverduePaymentsResponse
     */
    resultCount?: number;
}
/**
 * 
 * @export
 * @interface GetCitationPhoneLeadsRequest
 */
export interface GetCitationPhoneLeadsRequest {
    /**
     * 
     * @type {number}
     * @memberof GetCitationPhoneLeadsRequest
     */
    trailingDays?: number;
}
/**
 * 
 * @export
 * @interface GetCitationPhoneLeadsResponse
 */
export interface GetCitationPhoneLeadsResponse {
    /**
     * 
     * @type {Array<ClientLeadDomain>}
     * @memberof GetCitationPhoneLeadsResponse
     */
    callList?: Array<ClientLeadDomain>;
}
/**
 * 
 * @export
 * @interface GetCitationResponse
 */
export interface GetCitationResponse {
    /**
     * 
     * @type {CitationDomain}
     * @memberof GetCitationResponse
     */
    citation?: CitationDomain;
}
/**
 * 
 * @export
 * @interface GetCitationsResponse
 */
export interface GetCitationsResponse {
    /**
     * 
     * @type {Array<CitationDomain>}
     * @memberof GetCitationsResponse
     */
    citations?: Array<CitationDomain>;
}
/**
 * 
 * @export
 * @interface GetCitationsWithMissingFieldsRequest
 */
export interface GetCitationsWithMissingFieldsRequest {
    /**
     * 
     * @type {number}
     * @memberof GetCitationsWithMissingFieldsRequest
     */
    numberOfDays?: number;
}
/**
 * 
 * @export
 * @interface GetCitationsWithMissingFieldsResponse
 */
export interface GetCitationsWithMissingFieldsResponse {
    /**
     * 
     * @type {Array<CitationWithMissingFields>}
     * @memberof GetCitationsWithMissingFieldsResponse
     */
    citations?: Array<CitationWithMissingFields>;
}
/**
 * 
 * @export
 * @interface GetClientCasesResponse
 */
export interface GetClientCasesResponse {
    /**
     * 
     * @type {Array<CaseDomain>}
     * @memberof GetClientCasesResponse
     */
    cases?: Array<CaseDomain>;
    /**
     * 
     * @type {Array<CitationDomain>}
     * @memberof GetClientCasesResponse
     */
    citations?: Array<CitationDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetClientCasesResponse
     */
    numBookings?: number;
    /**
     * 
     * @type {number}
     * @memberof GetClientCasesResponse
     */
    numCases?: number;
    /**
     * 
     * @type {number}
     * @memberof GetClientCasesResponse
     */
    numCitationUploads?: number;
}
/**
 * 
 * @export
 * @interface GetClientConfirmedUnpaidCasesResponse
 */
export interface GetClientConfirmedUnpaidCasesResponse {
    /**
     * 
     * @type {Array<ClientConfirmedUnpaidCase>}
     * @memberof GetClientConfirmedUnpaidCasesResponse
     */
    cases?: Array<ClientConfirmedUnpaidCase>;
    /**
     * 
     * @type {number}
     * @memberof GetClientConfirmedUnpaidCasesResponse
     */
    resultCount?: number;
}
/**
 * 
 * @export
 * @interface GetCompetitionResponseModel
 */
export interface GetCompetitionResponseModel {
    /**
     * 
     * @type {number}
     * @memberof GetCompetitionResponseModel
     */
    competitiveFeeMax?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCompetitionResponseModel
     */
    competitiveFeeMin?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetCompetitionResponseModel
     */
    isCompetitive?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetCompetitionResponseModel
     */
    lowestFee?: number;
}
/**
 * 
 * @export
 * @interface GetCountOfMatchingUsersRequest
 */
export interface GetCountOfMatchingUsersRequest {
    /**
     * 
     * @type {string}
     * @memberof GetCountOfMatchingUsersRequest
     */
    emailAddress?: string;
}
/**
 * 
 * @export
 * @interface GetCountOfMatchingUsersResponse
 */
export interface GetCountOfMatchingUsersResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCountOfMatchingUsersResponse
     */
    numMatchingUsers?: number;
}
/**
 * 
 * @export
 * @interface GetCountiesResponse
 */
export interface GetCountiesResponse {
    /**
     * 
     * @type {Array<CountyDomain>}
     * @memberof GetCountiesResponse
     */
    counties?: Array<CountyDomain>;
}
/**
 * 
 * @export
 * @interface GetCountryListResponse
 */
export interface GetCountryListResponse {
    /**
     * 
     * @type {Array<CountryDomain>}
     * @memberof GetCountryListResponse
     */
    countryList?: Array<CountryDomain>;
}
/**
 * 
 * @export
 * @interface GetCountryRegionsResponse
 */
export interface GetCountryRegionsResponse {
    /**
     * 
     * @type {Array<CountryRegion>}
     * @memberof GetCountryRegionsResponse
     */
    regions?: Array<CountryRegion>;
}
/**
 * 
 * @export
 * @interface GetCourtCoverageForCountyReportResponse
 */
export interface GetCourtCoverageForCountyReportResponse {
    /**
     * 
     * @type {Array<CourtCoverageRecord>}
     * @memberof GetCourtCoverageForCountyReportResponse
     */
    records?: Array<CourtCoverageRecord>;
}
/**
 * 
 * @export
 * @interface GetCourtCoverageForStateReportResponse
 */
export interface GetCourtCoverageForStateReportResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCourtCoverageForStateReportResponse
     */
    numCounties?: number;
    /**
     * 
     * @type {Array<CourtCoverageCountyRecord>}
     * @memberof GetCourtCoverageForStateReportResponse
     */
    records?: Array<CourtCoverageCountyRecord>;
}
/**
 * 
 * @export
 * @interface GetCourtCoverageReportResponse
 */
export interface GetCourtCoverageReportResponse {
    /**
     * 
     * @type {Array<CourtCoverageStateRecord>}
     * @memberof GetCourtCoverageReportResponse
     */
    stateRecords?: Array<CourtCoverageStateRecord>;
}
/**
 * 
 * @export
 * @interface GetCourtResponse
 */
export interface GetCourtResponse {
    /**
     * 
     * @type {CourtResponseModel}
     * @memberof GetCourtResponse
     */
    court?: CourtResponseModel;
}
/**
 * 
 * @export
 * @interface GetCourtsByQueryResponse
 */
export interface GetCourtsByQueryResponse {
    /**
     * 
     * @type {Array<CourtDomainRes>}
     * @memberof GetCourtsByQueryResponse
     */
    courts?: Array<CourtDomainRes>;
    /**
     * 
     * @type {number}
     * @memberof GetCourtsByQueryResponse
     */
    numRecords?: number;
}
/**
 * 
 * @export
 * @interface GetCourtsInnerResponse
 */
export interface GetCourtsInnerResponse {
    /**
     * 
     * @type {GetAddressInnerResponse}
     * @memberof GetCourtsInnerResponse
     */
    address?: GetAddressInnerResponse;
    /**
     * 
     * @type {string}
     * @memberof GetCourtsInnerResponse
     */
    courtCode?: string;
    /**
     * 
     * @type {number}
     * @memberof GetCourtsInnerResponse
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof GetCourtsInnerResponse
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCourtsInnerResponse
     */
    courtNameAdditional?: string;
}
/**
 * 
 * @export
 * @interface GetCurrentUserResponse
 */
export interface GetCurrentUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetCurrentUserResponse
     */
    isUserAuthenticated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetCurrentUserResponse
     */
    isUserLoggedIn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetCurrentUserResponse
     */
    isUserRememberMeAuthenticated?: boolean;
    /**
     * 
     * @type {UserDomain}
     * @memberof GetCurrentUserResponse
     */
    user?: UserDomain;
}
/**
 * 
 * @export
 * @interface GetDeclinedCasesRequest
 */
export interface GetDeclinedCasesRequest {
    /**
     * 
     * @type {boolean}
     * @memberof GetDeclinedCasesRequest
     */
    loadFreshdeskTicketDetails?: boolean;
}
/**
 * 
 * @export
 * @interface GetDeclinedCasesResponse
 */
export interface GetDeclinedCasesResponse {
    /**
     * 
     * @type {Array<CaseDomain>}
     * @memberof GetDeclinedCasesResponse
     */
    declinedCases?: Array<CaseDomain>;
}
/**
 * 
 * @export
 * @interface GetDocumentsRequest
 */
export interface GetDocumentsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetDocumentsRequest
     */
    caseId?: string;
}
/**
 * 
 * @export
 * @interface GetEmailTemplateResponse
 */
export interface GetEmailTemplateResponse {
    /**
     * 
     * @type {string}
     * @memberof GetEmailTemplateResponse
     */
    templateName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetEmailTemplateResponse
     */
    templateText?: string;
}
/**
 * 
 * @export
 * @interface GetHouseHoldMateModel
 */
export interface GetHouseHoldMateModel {
    /**
     * 
     * @type {string}
     * @memberof GetHouseHoldMateModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHouseHoldMateModel
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHouseHoldMateModel
     */
    inviteStatus?: GetHouseHoldMateModelInviteStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof GetHouseHoldMateModel
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof GetHouseHoldMateModel
     */
    relationshipType?: GetHouseHoldMateModelRelationshipTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof GetHouseHoldMateModel
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum GetHouseHoldMateModelInviteStatusEnum {
    CANCELLED = 'CANCELLED',
    PENDING = 'PENDING',
    VERIFIED = 'VERIFIED'
}
/**
    * @export
    * @enum {string}
    */
export enum GetHouseHoldMateModelRelationshipTypeEnum {
    SELF = 'SELF',
    SIBLING = 'SIBLING',
    SPOUSE = 'SPOUSE',
    TEENAGER = 'TEENAGER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface GetHouseholdMatesResponse
 */
export interface GetHouseholdMatesResponse {
    /**
     * 
     * @type {Array<GetHouseHoldMateModel>}
     * @memberof GetHouseholdMatesResponse
     */
    mates?: Array<GetHouseHoldMateModel>;
}
/**
 * 
 * @export
 * @interface GetInvalidCasesWithStripeChargeResponse
 */
export interface GetInvalidCasesWithStripeChargeResponse {
    /**
     * 
     * @type {Array<CaseDomain>}
     * @memberof GetInvalidCasesWithStripeChargeResponse
     */
    cases?: Array<CaseDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmAddressesResponse
 */
export interface GetLawfirmAddressesResponse {
    /**
     * 
     * @type {Array<AddressDomain>}
     * @memberof GetLawfirmAddressesResponse
     */
    addresses?: Array<AddressDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmCaseStatsResponse
 */
export interface GetLawfirmCaseStatsResponse {
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof GetLawfirmCaseStatsResponse
     */
    caseCountByStatusMap?: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmCaseStatsResponse
     */
    numBookedCases?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmCaseStatsResponse
     */
    numResolvedCases?: number;
}
/**
 * 
 * @export
 * @interface GetLawfirmCasesResponse
 */
export interface GetLawfirmCasesResponse {
    /**
     * 
     * @type {Array<CaseDomain>}
     * @memberof GetLawfirmCasesResponse
     */
    cases?: Array<CaseDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmCoverageReportResponse
 */
export interface GetLawfirmCoverageReportResponse {
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmCoverageReportResponse
     */
    numRecords?: number;
    /**
     * 
     * @type {Array<LawfirmCoverageRecord>}
     * @memberof GetLawfirmCoverageReportResponse
     */
    records?: Array<LawfirmCoverageRecord>;
}
/**
 * 
 * @export
 * @interface GetLawfirmCoverageResponse
 */
export interface GetLawfirmCoverageResponse {
    /**
     * 
     * @type {Array<LawfirmCourtCoverageDomain>}
     * @memberof GetLawfirmCoverageResponse
     */
    coverageList?: Array<LawfirmCourtCoverageDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmFeeCoverageModel
 */
export interface GetLawfirmFeeCoverageModel {
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmFeeCoverageModel
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmFeeCoverageModel
     */
    county?: string;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFeeCoverageModel
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmFeeCoverageModel
     */
    courtName?: string;
    /**
     * 
     * @type {Array<GetLawfirmFeeModel>}
     * @memberof GetLawfirmFeeCoverageModel
     */
    fees?: Array<GetLawfirmFeeModel>;
    /**
     * 
     * @type {boolean}
     * @memberof GetLawfirmFeeCoverageModel
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmFeeCoverageModel
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface GetLawfirmFeeCoverageResponse
 */
export interface GetLawfirmFeeCoverageResponse {
    /**
     * 
     * @type {Array<GetLawfirmFeeCoverageModel>}
     * @memberof GetLawfirmFeeCoverageResponse
     */
    coverage?: Array<GetLawfirmFeeCoverageModel>;
}
/**
 * 
 * @export
 * @interface GetLawfirmFeeModel
 */
export interface GetLawfirmFeeModel {
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFeeModel
     */
    accountFee?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmFeeModel
     */
    classification?: GetLawfirmFeeModelClassificationEnum;
    /**
     * 
     * @type {GetCompetitionResponseModel}
     * @memberof GetLawfirmFeeModel
     */
    competition?: GetCompetitionResponseModel;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFeeModel
     */
    courtFee?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFeeModel
     */
    courtId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetLawfirmFeeModel
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFeeModel
     */
    lawfirmFee?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmFeeModel
     */
    refundEligibility?: GetLawfirmFeeModelRefundEligibilityEnum;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFeeModel
     */
    violationId?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmFeeModel
     */
    violationName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmFeeModelClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmFeeModelRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface GetLawfirmFeesResponse
 */
export interface GetLawfirmFeesResponse {
    /**
     * 
     * @type {Array<LawfirmFeeDomain>}
     * @memberof GetLawfirmFeesResponse
     */
    fees?: Array<LawfirmFeeDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmFinancialTransactionsResponse
 */
export interface GetLawfirmFinancialTransactionsResponse {
    /**
     * 
     * @type {Array<FinancialTransaction>}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    futureTransactions?: Array<FinancialTransaction>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numFeeRefunds?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numFees?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numFutureFees?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numFuturePayouts?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numFutureTransactions?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numPayouts?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numReversals?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    numTransactions?: number;
    /**
     * 
     * @type {Array<FinancialTransaction>}
     * @memberof GetLawfirmFinancialTransactionsResponse
     */
    transactions?: Array<FinancialTransaction>;
}
/**
 * 
 * @export
 * @interface GetLawfirmInboxMessagesResponse
 */
export interface GetLawfirmInboxMessagesResponse {
    /**
     * 
     * @type {Array<LawfirmInboxMessageDomain>}
     * @memberof GetLawfirmInboxMessagesResponse
     */
    messages?: Array<LawfirmInboxMessageDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmInboxMessagesResponse
     */
    numMessages?: number;
}
/**
 * 
 * @export
 * @interface GetLawfirmJobTitleResponse
 */
export interface GetLawfirmJobTitleResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetLawfirmJobTitleResponse
     */
    jobTitles?: Array<GetLawfirmJobTitleResponseJobTitlesEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmJobTitleResponseJobTitlesEnum {
    ACCOUNTANT = 'ACCOUNTANT',
    ATTORNEY = 'ATTORNEY',
    ATTORNEYASSOCIATE = 'ATTORNEY_ASSOCIATE',
    ATTORNEYCOUNSEL = 'ATTORNEY_COUNSEL',
    ATTORNEYMANAGINGPARTNER = 'ATTORNEY_MANAGING_PARTNER',
    ATTORNEYPARTNER = 'ATTORNEY_PARTNER',
    ATTORNEYSTAFF = 'ATTORNEY_STAFF',
    CUSTOMERSERVICEREP = 'CUSTOMER_SERVICE_REP',
    LEGALASSISTANT = 'LEGAL_ASSISTANT',
    LEGALINTERN = 'LEGAL_INTERN',
    LEGALSECRETARY = 'LEGAL_SECRETARY',
    OTHER = 'OTHER',
    PARALEGAL = 'PARALEGAL'
}

/**
 * 
 * @export
 * @interface GetLawfirmLawyersResponse
 */
export interface GetLawfirmLawyersResponse {
    /**
     * 
     * @type {Array<LawyerModel>}
     * @memberof GetLawfirmLawyersResponse
     */
    lawyers?: Array<LawyerModel>;
}
/**
 * 
 * @export
 * @interface GetLawfirmLeadsRequest
 */
export interface GetLawfirmLeadsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmLeadsRequest
     */
    orderBy?: string;
}
/**
 * 
 * @export
 * @interface GetLawfirmLeadsResponse
 */
export interface GetLawfirmLeadsResponse {
    /**
     * 
     * @type {Array<LawfirmLeadDomain>}
     * @memberof GetLawfirmLeadsResponse
     */
    lawfirmLeads?: Array<LawfirmLeadDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmLeadsResponse
     */
    numRecords?: number;
}
/**
 * 
 * @export
 * @interface GetLawfirmModel
 */
export interface GetLawfirmModel {
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    aboutUsBlurb?: string;
    /**
     * 
     * @type {AddressDomain}
     * @memberof GetLawfirmModel
     */
    address?: AddressDomain;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmModel
     */
    caseAssignmentPriority?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    coverPhotoUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmModel
     */
    createdBy?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    establishedDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmModel
     */
    establishedYear?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetLawfirmModel
     */
    isTestLawfirm?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmModel
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    lawfirmPaymentModel?: GetLawfirmModelLawfirmPaymentModelEnum;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    lawfirmState?: GetLawfirmModelLawfirmStateEnum;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    membershipStartDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    otrNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    primaryEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    primaryPhoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {Array<LawfirmRedirectModel>}
     * @memberof GetLawfirmModel
     */
    redirects?: Array<LawfirmRedirectModel>;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    seoUrl?: string;
    /**
     * 
     * @type {LawfirmSettingsDomainRes}
     * @memberof GetLawfirmModel
     */
    settings?: LawfirmSettingsDomainRes;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetLawfirmModel
     */
    supportedStates?: Array<GetLawfirmModelSupportedStatesEnum>;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    tagLine?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmModel
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmModelLawfirmPaymentModelEnum {
    DESTINATIONACCOUNT = 'DESTINATION_ACCOUNT',
    SEPARATECHARGE = 'SEPARATE_CHARGE',
    TRANSFERDEDUCTION = 'TRANSFER_DEDUCTION'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmModelLawfirmStateEnum {
    ACCOUNTCLOSED = 'ACCOUNT_CLOSED',
    DUPLICATE = 'DUPLICATE',
    ESTABLISHED = 'ESTABLISHED',
    FUTURELEAD = 'FUTURE_LEAD',
    INTRIAL = 'IN_TRIAL',
    LAWFIRMINTERESTED = 'LAWFIRM_INTERESTED',
    LAWFIRMLEAD = 'LAWFIRM_LEAD',
    LAWFIRMNOTINTERESTED = 'LAWFIRM_NOT_INTERESTED',
    NOTINTERESTEDFEESPLITTINGETHICS = 'NOT_INTERESTED_FEE_SPLITTING_ETHICS',
    NOTINTERESTEDREFUNDETHICS = 'NOT_INTERESTED_REFUND_ETHICS',
    ONBOARDING = 'ONBOARDING',
    TEMPORARILYTURNEDOFF = 'TEMPORARILY_TURNED_OFF',
    TERMINATEDFRAUD = 'TERMINATED_FRAUD',
    TERMINATEDPOORSERVICE = 'TERMINATED_POOR_SERVICE',
    TERMINATEDPOORSUCCESS = 'TERMINATED_POOR_SUCCESS',
    UNDERREVIEW = 'UNDER_REVIEW'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmModelSupportedStatesEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface GetLawfirmPaymentMethodsResponse
 */
export interface GetLawfirmPaymentMethodsResponse {
    /**
     * 
     * @type {Array<StripePaymentSourceDomain>}
     * @memberof GetLawfirmPaymentMethodsResponse
     */
    paymentMethods?: Array<StripePaymentSourceDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmPaymentMethodsResponse
     */
    totalRecords?: number;
}
/**
 * 
 * @export
 * @interface GetLawfirmPayoutReversalsResponse
 */
export interface GetLawfirmPayoutReversalsResponse {
    /**
     * 
     * @type {Array<LawfirmPayoutDomain>}
     * @memberof GetLawfirmPayoutReversalsResponse
     */
    reversals?: Array<LawfirmPayoutDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmPayoutsResponse
 */
export interface GetLawfirmPayoutsResponse {
    /**
     * 
     * @type {Array<LawfirmPayoutDomain>}
     * @memberof GetLawfirmPayoutsResponse
     */
    payouts?: Array<LawfirmPayoutDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmResponse
 */
export interface GetLawfirmResponse {
    /**
     * 
     * @type {GetLawfirmModel}
     * @memberof GetLawfirmResponse
     */
    lawfirm?: GetLawfirmModel;
}
/**
 * 
 * @export
 * @interface GetLawfirmSettingsResponse
 */
export interface GetLawfirmSettingsResponse {
    /**
     * 
     * @type {LawfirmSettingsDomainRes}
     * @memberof GetLawfirmSettingsResponse
     */
    settings?: LawfirmSettingsDomainRes;
}
/**
 * 
 * @export
 * @interface GetLawfirmSummaryCaseRequest
 */
export interface GetLawfirmSummaryCaseRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetLawfirmSummaryCaseRequest
     */
    caseStatusCategories?: Array<GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetLawfirmSummaryCaseRequest
     */
    caseStatuses?: Array<GetLawfirmSummaryCaseRequestCaseStatusesEnum>;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmSummaryCaseRequest
     */
    countyFilter?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmSummaryCaseRequest
     */
    courtFilter?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetLawfirmSummaryCaseRequest
     */
    excludedCaseStatuses?: Array<GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof GetLawfirmSummaryCaseRequest
     */
    order?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof GetLawfirmSummaryCaseRequest
     */
    searchValue?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmSummaryCaseRequestCaseStatusesEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface GetLawfirmSummaryCasesResponse
 */
export interface GetLawfirmSummaryCasesResponse {
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmSummaryCasesResponse
     */
    activeCasesCount?: number;
    /**
     * 
     * @type {Array<CaseSummaryDomain>}
     * @memberof GetLawfirmSummaryCasesResponse
     */
    cases?: Array<CaseSummaryDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmSummaryCasesResponse
     */
    numMatchingCases?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmSummaryCasesResponse
     */
    pendingCasesCount?: number;
}
/**
 * 
 * @export
 * @interface GetLawfirmSupportedStatesResponse
 */
export interface GetLawfirmSupportedStatesResponse {
    /**
     * 
     * @type {Array<USStateDomain>}
     * @memberof GetLawfirmSupportedStatesResponse
     */
    states?: Array<USStateDomain>;
}
/**
 * 
 * @export
 * @interface GetLawfirmTransactionsForCaseResponse
 */
export interface GetLawfirmTransactionsForCaseResponse {
    /**
     * 
     * @type {Array<FinancialTransaction>}
     * @memberof GetLawfirmTransactionsForCaseResponse
     */
    futureTransactions?: Array<FinancialTransaction>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmTransactionsForCaseResponse
     */
    lawfirmAssumedCost?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmTransactionsForCaseResponse
     */
    lawfirmEarningsForCase?: number;
    /**
     * 
     * @type {Array<LineItem>}
     * @memberof GetLawfirmTransactionsForCaseResponse
     */
    lineItems?: Array<LineItem>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmTransactionsForCaseResponse
     */
    otrMarketingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmTransactionsForCaseResponse
     */
    paymentProcessingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {Array<FinancialTransaction>}
     * @memberof GetLawfirmTransactionsForCaseResponse
     */
    transactions?: Array<FinancialTransaction>;
}
/**
 * 
 * @export
 * @interface GetLawfirmsResponse
 */
export interface GetLawfirmsResponse {
    /**
     * 
     * @type {Array<GetLawfirmModel>}
     * @memberof GetLawfirmsResponse
     */
    lawfirms?: Array<GetLawfirmModel>;
    /**
     * 
     * @type {number}
     * @memberof GetLawfirmsResponse
     */
    numRecords?: number;
}
/**
 * 
 * @export
 * @interface GetLineItemTypesResponse
 */
export interface GetLineItemTypesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetLineItemTypesResponse
     */
    lineItemTypes?: Array<GetLineItemTypesResponseLineItemTypesEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum GetLineItemTypesResponseLineItemTypesEnum {
    ACCIDENTFEE = 'ACCIDENT_FEE',
    BASELEGALFEE = 'BASE_LEGAL_FEE',
    BONDFEE = 'BOND_FEE',
    BOOKINGFEE = 'BOOKING_FEE',
    CDLFEE = 'CDL_FEE',
    DISPUTEFEE = 'DISPUTE_FEE',
    FINEPAYMENT = 'FINE_PAYMENT',
    FTAFEE = 'FTA_FEE',
    LATEFEE = 'LATE_FEE',
    MBGREFUND = 'MBG_REFUND',
    MVSFEE = 'MVS_FEE',
    OTHER = 'OTHER',
    OTRCREDIT = 'OTR_CREDIT',
    PAYMENTPLANSERVICEFEE = 'PAYMENT_PLAN_SERVICE_FEE',
    WARRANTFEE = 'WARRANT_FEE'
}

/**
 * 
 * @export
 * @interface GetLineItemsResponse
 */
export interface GetLineItemsResponse {
    /**
     * 
     * @type {Array<CaseLineItemDomainRes>}
     * @memberof GetLineItemsResponse
     */
    lineItems?: Array<CaseLineItemDomainRes>;
    /**
     * 
     * @type {CaseLineItemsSummary}
     * @memberof GetLineItemsResponse
     */
    lineItemsSummary?: CaseLineItemsSummary;
}
/**
 * 
 * @export
 * @interface GetListOfCitationsWithMissingCourtResponse
 */
export interface GetListOfCitationsWithMissingCourtResponse {
    /**
     * 
     * @type {Array<CitationWithMissingCourt>}
     * @memberof GetListOfCitationsWithMissingCourtResponse
     */
    citations?: Array<CitationWithMissingCourt>;
}
/**
 * 
 * @export
 * @interface GetLocationResponse
 */
export interface GetLocationResponse {
    /**
     * 
     * @type {string}
     * @memberof GetLocationResponse
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLocationResponse
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLocationResponse
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLocationResponse
     */
    subRegion?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetLocationResponse
     */
    subscriptionBillingEnabled?: boolean;
}
/**
 * 
 * @export
 * @interface GetLostCasesWithTransferNotReversedRequest
 */
export interface GetLostCasesWithTransferNotReversedRequest {
    /**
     * 
     * @type {TimestampReq}
     * @memberof GetLostCasesWithTransferNotReversedRequest
     */
    fromDate?: TimestampReq;
    /**
     * 
     * @type {number}
     * @memberof GetLostCasesWithTransferNotReversedRequest
     */
    maxRecords?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof GetLostCasesWithTransferNotReversedRequest
     */
    toDate?: TimestampReq;
}
/**
 * 
 * @export
 * @interface GetLostCasesWithTransferNotReversedResponse
 */
export interface GetLostCasesWithTransferNotReversedResponse {
    /**
     * 
     * @type {Array<LostCaseWithTransferNotReversed>}
     * @memberof GetLostCasesWithTransferNotReversedResponse
     */
    cases?: Array<LostCaseWithTransferNotReversed>;
}
/**
 * 
 * @export
 * @interface GetNoViolationCitationsResponse
 */
export interface GetNoViolationCitationsResponse {
    /**
     * 
     * @type {Array<NoViolationCitation>}
     * @memberof GetNoViolationCitationsResponse
     */
    citations?: Array<NoViolationCitation>;
}
/**
 * 
 * @export
 * @interface GetOutgoingContactsResponse
 */
export interface GetOutgoingContactsResponse {
    /**
     * 
     * @type {Array<OutgoingContactDomain>}
     * @memberof GetOutgoingContactsResponse
     */
    contacts?: Array<OutgoingContactDomain>;
}
/**
 * 
 * @export
 * @interface GetOverduePaymentsResponse
 */
export interface GetOverduePaymentsResponse {
    /**
     * 
     * @type {number}
     * @memberof GetOverduePaymentsResponse
     */
    overdueBalanceInCents?: number;
    /**
     * 
     * @type {Array<CustomerOverduePayment>}
     * @memberof GetOverduePaymentsResponse
     */
    overduePayments?: Array<CustomerOverduePayment>;
}
/**
 * 
 * @export
 * @interface GetPaymentMethodsForUserResponse
 */
export interface GetPaymentMethodsForUserResponse {
    /**
     * 
     * @type {Array<StripePaymentSourceDomain>}
     * @memberof GetPaymentMethodsForUserResponse
     */
    paymentMethods?: Array<StripePaymentSourceDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetPaymentMethodsForUserResponse
     */
    totalRecords?: number;
}
/**
 * 
 * @export
 * @interface GetPaymentModelTypesResponse
 */
export interface GetPaymentModelTypesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetPaymentModelTypesResponse
     */
    models?: Array<GetPaymentModelTypesResponseModelsEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum GetPaymentModelTypesResponseModelsEnum {
    DESTINATIONACCOUNT = 'DESTINATION_ACCOUNT',
    SEPARATECHARGE = 'SEPARATE_CHARGE',
    TRANSFERDEDUCTION = 'TRANSFER_DEDUCTION'
}

/**
 * 
 * @export
 * @interface GetPenaltyType
 */
export interface GetPenaltyType {
    /**
     * 
     * @type {string}
     * @memberof GetPenaltyType
     */
    type?: GetPenaltyTypeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof GetPenaltyType
     */
    typeId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum GetPenaltyTypeTypeEnum {
    DEMERITPOINTS = 'DEMERIT_POINTS',
    INCARCERATIONMAXDAYS = 'INCARCERATION_MAX_DAYS',
    INCARCERATIONMINDAYS = 'INCARCERATION_MIN_DAYS',
    INSURANCEPOINTS = 'INSURANCE_POINTS',
    INSURANCERATEINCREASE = 'INSURANCE_RATE_INCREASE',
    LICENSEREVOCATIONMAXDAYS = 'LICENSE_REVOCATION_MAX_DAYS',
    LICENSEREVOCATIONMINDAYS = 'LICENSE_REVOCATION_MIN_DAYS',
    LICENSESUSPENSIONMAXDAYS = 'LICENSE_SUSPENSION_MAX_DAYS',
    LICENSESUSPENSIONMINDAYS = 'LICENSE_SUSPENSION_MIN_DAYS',
    MANDATORYCOURTAPPEARANCE = 'MANDATORY_COURT_APPEARANCE',
    MANDATORYCOURTAPPEARANCEWITHATTORNEY = 'MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY',
    MAXBAILAMOUNT = 'MAX_BAIL_AMOUNT',
    MINBAILAMOUNT = 'MIN_BAIL_AMOUNT',
    PROBATIONINDAYS = 'PROBATION_IN_DAYS',
    TOTALBAILAMOUNT = 'TOTAL_BAIL_AMOUNT'
}

/**
 * 
 * @export
 * @interface GetPenaltyTypesResponse
 */
export interface GetPenaltyTypesResponse {
    /**
     * 
     * @type {Array<GetPenaltyType>}
     * @memberof GetPenaltyTypesResponse
     */
    penaltyTypes?: Array<GetPenaltyType>;
}
/**
 * 
 * @export
 * @interface GetPendingCasesResponse
 */
export interface GetPendingCasesResponse {
    /**
     * 
     * @type {Array<CaseDomain>}
     * @memberof GetPendingCasesResponse
     */
    pendingCases?: Array<CaseDomain>;
}
/**
 * 
 * @export
 * @interface GetPendingTicketReviewsRequest
 */
export interface GetPendingTicketReviewsRequest {
    /**
     * 
     * @type {TimestampReq}
     * @memberof GetPendingTicketReviewsRequest
     */
    fromDate?: TimestampReq;
    /**
     * 
     * @type {number}
     * @memberof GetPendingTicketReviewsRequest
     */
    maxRecords?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof GetPendingTicketReviewsRequest
     */
    toDate?: TimestampReq;
}
/**
 * 
 * @export
 * @interface GetPendingTicketReviewsResponse
 */
export interface GetPendingTicketReviewsResponse {
    /**
     * 
     * @type {Array<TicketReviewRequest>}
     * @memberof GetPendingTicketReviewsResponse
     */
    requests?: Array<TicketReviewRequest>;
}
/**
 * 
 * @export
 * @interface GetPotentialCustomersRequest
 */
export interface GetPotentialCustomersRequest {
    /**
     * 
     * @type {string}
     * @memberof GetPotentialCustomersRequest
     */
    endDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetPotentialCustomersRequest
     */
    includeDismissedCitations?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetPotentialCustomersRequest
     */
    orderBy?: string;
    /**
     * 
     * @type {string}
     * @memberof GetPotentialCustomersRequest
     */
    startDate?: string;
}
/**
 * 
 * @export
 * @interface GetPotentialCustomersResponse
 */
export interface GetPotentialCustomersResponse {
    /**
     * 
     * @type {number}
     * @memberof GetPotentialCustomersResponse
     */
    numRecords?: number;
    /**
     * 
     * @type {Array<PotentialCustomerDomain>}
     * @memberof GetPotentialCustomersResponse
     */
    potentialCustomers?: Array<PotentialCustomerDomain>;
}
/**
 * 
 * @export
 * @interface GetRedirectUrlResponse
 */
export interface GetRedirectUrlResponse {
    /**
     * 
     * @type {number}
     * @memberof GetRedirectUrlResponse
     */
    httpCode?: number;
    /**
     * 
     * @type {string}
     * @memberof GetRedirectUrlResponse
     */
    landingPageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof GetRedirectUrlResponse
     */
    redirectUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof GetRedirectUrlResponse
     */
    startDateUtc?: string;
}
/**
 * 
 * @export
 * @interface GetReferralCodeResponse
 */
export interface GetReferralCodeResponse {
    /**
     * 
     * @type {string}
     * @memberof GetReferralCodeResponse
     */
    endDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetReferralCodeResponse
     */
    isCodeActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetReferralCodeResponse
     */
    isCodeApproved?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GetReferralCodeResponse
     */
    numberOfReferrals?: number;
    /**
     * 
     * @type {string}
     * @memberof GetReferralCodeResponse
     */
    ownerEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof GetReferralCodeResponse
     */
    ownerType?: GetReferralCodeResponseOwnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GetReferralCodeResponse
     */
    refereeCreditType?: GetReferralCodeResponseRefereeCreditTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof GetReferralCodeResponse
     */
    refereeCreditValue?: number;
    /**
     * 
     * @type {string}
     * @memberof GetReferralCodeResponse
     */
    referralCode?: string;
    /**
     * 
     * @type {number}
     * @memberof GetReferralCodeResponse
     */
    referralCountLimit?: number;
    /**
     * 
     * @type {string}
     * @memberof GetReferralCodeResponse
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GetReferralCodeResponseOwnerTypeEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum GetReferralCodeResponseRefereeCreditTypeEnum {
    CENTSVALUE = 'CENTS_VALUE',
    NOCREDIT = 'NO_CREDIT',
    PERCENTAGEDISCOUNT = 'PERCENTAGE_DISCOUNT'
}

/**
 * 
 * @export
 * @interface GetReferralCodesResponse
 */
export interface GetReferralCodesResponse {
    /**
     * 
     * @type {Array<GetReferralCodeResponse>}
     * @memberof GetReferralCodesResponse
     */
    referralCodes?: Array<GetReferralCodeResponse>;
}
/**
 * 
 * @export
 * @interface GetReferralsHistoryResponse
 */
export interface GetReferralsHistoryResponse {
    /**
     * 
     * @type {Array<ReferralResponse>}
     * @memberof GetReferralsHistoryResponse
     */
    referrals?: Array<ReferralResponse>;
}
/**
 * 
 * @export
 * @interface GetRegionsWithViolationsResponse
 */
export interface GetRegionsWithViolationsResponse {
    /**
     * 
     * @type {Array<AvailableRegion>}
     * @memberof GetRegionsWithViolationsResponse
     */
    regions?: Array<AvailableRegion>;
}
/**
 * 
 * @export
 * @interface GetStripeChargeResponse
 */
export interface GetStripeChargeResponse {
    /**
     * 
     * @type {StripeChargeDomain}
     * @memberof GetStripeChargeResponse
     */
    stripeCharge?: StripeChargeDomain;
}
/**
 * 
 * @export
 * @interface GetStripeChargesResponse
 */
export interface GetStripeChargesResponse {
    /**
     * 
     * @type {Array<StripeChargeDomain>}
     * @memberof GetStripeChargesResponse
     */
    stripeCharges?: Array<StripeChargeDomain>;
}
/**
 * 
 * @export
 * @interface GetStripeConnectedAccountsResponse
 */
export interface GetStripeConnectedAccountsResponse {
    /**
     * 
     * @type {Array<StripeConnectedAccountDomain>}
     * @memberof GetStripeConnectedAccountsResponse
     */
    stripeConnectedAccounts?: Array<StripeConnectedAccountDomain>;
}
/**
 * 
 * @export
 * @interface GetSupportTicketsResponse
 */
export interface GetSupportTicketsResponse {
    /**
     * 
     * @type {Array<FreshDeskTicket>}
     * @memberof GetSupportTicketsResponse
     */
    supportTickets?: Array<FreshDeskTicket>;
}
/**
 * 
 * @export
 * @interface GetTicketReviewResponse
 */
export interface GetTicketReviewResponse {
    /**
     * 
     * @type {TicketReviewRequestRes}
     * @memberof GetTicketReviewResponse
     */
    ticketReview?: TicketReviewRequestRes;
}
/**
 * 
 * @export
 * @interface GetTrafficViolationModel
 */
export interface GetTrafficViolationModel {
    /**
     * 
     * @type {string}
     * @memberof GetTrafficViolationModel
     */
    classDescription?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetTrafficViolationModel
     */
    criminal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetTrafficViolationModel
     */
    enabledForCustomers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetTrafficViolationModel
     */
    enabledForLawfirms?: boolean;
    /**
     * 
     * @type {Array<PenaltyModel>}
     * @memberof GetTrafficViolationModel
     */
    penalties?: Array<PenaltyModel>;
    /**
     * 
     * @type {string}
     * @memberof GetTrafficViolationModel
     */
    trafficViolationDesc?: string;
    /**
     * 
     * @type {number}
     * @memberof GetTrafficViolationModel
     */
    trafficViolationTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof GetTrafficViolationModel
     */
    userFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTrafficViolationModel
     */
    userFriendlyShortForm?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTrafficViolationModel
     */
    violationClassification?: GetTrafficViolationModelViolationClassificationEnum;
    /**
     * 
     * @type {string}
     * @memberof GetTrafficViolationModel
     */
    violationCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetTrafficViolationModel
     */
    wobblerToCriminal?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum GetTrafficViolationModelViolationClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface GetTrafficViolationTypesResponse
 */
export interface GetTrafficViolationTypesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetTrafficViolationTypesResponse
     */
    exclusionPatterns?: Array<string>;
    /**
     * 
     * @type {Array<GetTrafficViolationModel>}
     * @memberof GetTrafficViolationTypesResponse
     */
    violationTypes?: Array<GetTrafficViolationModel>;
}
/**
 * 
 * @export
 * @interface GetUserAddressesResponse
 */
export interface GetUserAddressesResponse {
    /**
     * 
     * @type {Array<AddressDomain>}
     * @memberof GetUserAddressesResponse
     */
    addresses?: Array<AddressDomain>;
}
/**
 * 
 * @export
 * @interface GetUserCasesResponse
 */
export interface GetUserCasesResponse {
    /**
     * 
     * @type {Array<CaseDomain>}
     * @memberof GetUserCasesResponse
     */
    cases?: Array<CaseDomain>;
    /**
     * 
     * @type {Array<CitationDomain>}
     * @memberof GetUserCasesResponse
     */
    citations?: Array<CitationDomain>;
    /**
     * 
     * @type {number}
     * @memberof GetUserCasesResponse
     */
    numBookings?: number;
    /**
     * 
     * @type {number}
     * @memberof GetUserCasesResponse
     */
    numCitationUploads?: number;
}
/**
 * 
 * @export
 * @interface GetUserDetailsResponse
 */
export interface GetUserDetailsResponse {
    /**
     * 
     * @type {string}
     * @memberof GetUserDetailsResponse
     */
    mergeReportJson?: string;
    /**
     * 
     * @type {UserDomain}
     * @memberof GetUserDetailsResponse
     */
    user?: UserDomain;
}
/**
 * 
 * @export
 * @interface GetUserRefLinksResponse
 */
export interface GetUserRefLinksResponse {
    /**
     * 
     * @type {Array<UserRefLinkDomain>}
     * @memberof GetUserRefLinksResponse
     */
    refLinks?: Array<UserRefLinkDomain>;
}
/**
 * 
 * @export
 * @interface GetUserReferralSourceTypesResponse
 */
export interface GetUserReferralSourceTypesResponse {
    /**
     * 
     * @type {Array<UserReferralSourceTypeModel>}
     * @memberof GetUserReferralSourceTypesResponse
     */
    sources?: Array<UserReferralSourceTypeModel>;
}
/**
 * 
 * @export
 * @interface GetUserRegistrationsRequest
 */
export interface GetUserRegistrationsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetUserRegistrationsRequest
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserRegistrationsRequest
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserRegistrationsRequest
     */
    timeZoneId?: string;
}
/**
 * 
 * @export
 * @interface GetUserRegistrationsResponse
 */
export interface GetUserRegistrationsResponse {
    /**
     * 
     * @type {UserRegistrationStats}
     * @memberof GetUserRegistrationsResponse
     */
    stats?: UserRegistrationStats;
    /**
     * 
     * @type {Array<UserDomain>}
     * @memberof GetUserRegistrationsResponse
     */
    userRegistrations?: Array<UserDomain>;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 
     * @type {UserDomain}
     * @memberof GetUserResponse
     */
    user?: UserDomain;
}
/**
 * 
 * @export
 * @interface GetUserStripeAccountResponse
 */
export interface GetUserStripeAccountResponse {
    /**
     * 
     * @type {StripeCustomerAccountDomain}
     * @memberof GetUserStripeAccountResponse
     */
    stripeAccount?: StripeCustomerAccountDomain;
}
/**
 * 
 * @export
 * @interface GraphRequest
 */
export interface GraphRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GraphRequest
     */
    caseStatues?: Array<GraphRequestCaseStatuesEnum>;
    /**
     * 
     * @type {string}
     * @memberof GraphRequest
     */
    endDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GraphRequest
     */
    includeDismissedContacts?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GraphRequest
     */
    includeOutgoingContacts?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GraphRequest
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GraphRequestCaseStatuesEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface HandleOrphanedStripeChargeRequest
 */
export interface HandleOrphanedStripeChargeRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof HandleOrphanedStripeChargeRequest
     */
    stripeChargeIds?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof HandleOrphanedStripeChargeRequest
     */
    throwExceptionOnFailure?: boolean;
}
/**
 * 
 * @export
 * @interface HandleOrphanedStripeChargeResponse
 */
export interface HandleOrphanedStripeChargeResponse {
    /**
     * 
     * @type {number}
     * @memberof HandleOrphanedStripeChargeResponse
     */
    numFailures?: number;
    /**
     * 
     * @type {number}
     * @memberof HandleOrphanedStripeChargeResponse
     */
    numSuccesses?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof HandleOrphanedStripeChargeResponse
     */
    results?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface InitiateCaseAndChargeCustomerRequest
 */
export interface InitiateCaseAndChargeCustomerRequest {
    /**
     * 
     * @type {string}
     * @memberof InitiateCaseAndChargeCustomerRequest
     */
    cardId?: string;
    /**
     * 
     * @type {string}
     * @memberof InitiateCaseAndChargeCustomerRequest
     */
    paymentPlanType?: InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum {
    ALLUPFRONT = 'ALL_UPFRONT',
    THREEPAYMENTSHALFFIRST = 'THREE_PAYMENTS_HALF_FIRST',
    TWOPAYMENTSMONTHLY = 'TWO_PAYMENTS_MONTHLY'
}

/**
 * 
 * @export
 * @interface InitiateCaseAndChargeCustomerResponse
 */
export interface InitiateCaseAndChargeCustomerResponse {
    /**
     * 
     * @type {number}
     * @memberof InitiateCaseAndChargeCustomerResponse
     */
    otre?: number;
    /**
     * 
     * @type {number}
     * @memberof InitiateCaseAndChargeCustomerResponse
     */
    rs?: number;
}
/**
 * 
 * @export
 * @interface InsertCaseLineItemResponse
 */
export interface InsertCaseLineItemResponse {
    /**
     * 
     * @type {string}
     * @memberof InsertCaseLineItemResponse
     */
    lineItemId?: string;
}
/**
 * 
 * @export
 * @interface InsertInvoiceLineItemRequest
 */
export interface InsertInvoiceLineItemRequest {
    /**
     * 
     * @type {LineItemRequest}
     * @memberof InsertInvoiceLineItemRequest
     */
    lineItem?: LineItemRequest;
}
/**
 * 
 * @export
 * @interface InviteHouseholdMateRequest
 */
export interface InviteHouseholdMateRequest {
    /**
     * 
     * @type {string}
     * @memberof InviteHouseholdMateRequest
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof InviteHouseholdMateRequest
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof InviteHouseholdMateRequest
     */
    relationshipType?: InviteHouseholdMateRequestRelationshipTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InviteHouseholdMateRequestRelationshipTypeEnum {
    SELF = 'SELF',
    SIBLING = 'SIBLING',
    SPOUSE = 'SPOUSE',
    TEENAGER = 'TEENAGER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface IsRefundEligibleResponse
 */
export interface IsRefundEligibleResponse {
    /**
     * 
     * @type {string}
     * @memberof IsRefundEligibleResponse
     */
    refundEligibilityType?: IsRefundEligibleResponseRefundEligibilityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof IsRefundEligibleResponse
     */
    uiReasonMsg?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum IsRefundEligibleResponseRefundEligibilityTypeEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface IsUserLoggedInResponse
 */
export interface IsUserLoggedInResponse {
    /**
     * 
     * @type {boolean}
     * @memberof IsUserLoggedInResponse
     */
    isUserLoggedIn?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IsUserLoggedInResponse
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface LawfirmAuditEventModel
 */
export interface LawfirmAuditEventModel {
    /**
     * 
     * @type {string}
     * @memberof LawfirmAuditEventModel
     */
    authorName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmAuditEventModel
     */
    clientType?: LawfirmAuditEventModelClientTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmAuditEventModel
     */
    event?: LawfirmAuditEventModelEventEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmAuditEventModel
     */
    eventDate?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmAuditEventModel
     */
    eventId?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmAuditEventModel
     */
    lawfirmEventId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmAuditEventModel
     */
    newValue?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmAuditEventModel
     */
    oldValue?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmAuditEventModel
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmAuditEventModelClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmAuditEventModelEventEnum {
    CASEBOOKING = 'CASE_BOOKING',
    CASEMATCH = 'CASE_MATCH',
    CITATIONUPLOAD = 'CITATION_UPLOAD',
    LAWFIRMACCOUNTPRIORITY = 'LAWFIRM_ACCOUNT_PRIORITY',
    LAWFIRMACCOUNTSTATUS = 'LAWFIRM_ACCOUNT_STATUS',
    LAWFIRMDAILYCAPACITY = 'LAWFIRM_DAILY_CAPACITY',
    LAWFIRMTOTALCAPACITY = 'LAWFIRM_TOTAL_CAPACITY',
    SAVEVACATIONMODEENDDATE = 'SAVE_VACATION_MODE_END_DATE',
    SAVEVACATIONMODEREASON = 'SAVE_VACATION_MODE_REASON',
    VACATIONMODETOGGLE = 'VACATION_MODE_TOGGLE'
}

/**
 * 
 * @export
 * @interface LawfirmBookingSummary
 */
export interface LawfirmBookingSummary {
    /**
     * 
     * @type {number}
     * @memberof LawfirmBookingSummary
     */
    bookingsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmBookingSummary
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmBookingSummary
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmBookingSummary
     */
    lawfirmTransactions?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmBookingSummary
     */
    otrPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmBookingSummary
     */
    otrRevenue?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmBookingSummary
     */
    state?: LawfirmBookingSummaryStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmBookingSummaryStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface LawfirmCaseDocument
 */
export interface LawfirmCaseDocument {
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDocument
     */
    caseDocId?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDocument
     */
    clientDocRequirement?: LawfirmCaseDocumentClientDocRequirementEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDocument
     */
    docDate?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDocument
     */
    docType?: LawfirmCaseDocumentDocTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDocument
     */
    docUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmCaseDocument
     */
    hasClientAgreed?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDocumentClientDocRequirementEnum {
    ACK = 'ACK',
    NONE = 'NONE',
    NOTARY = 'NOTARY',
    SIGNATURE = 'SIGNATURE'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDocumentDocTypeEnum {
    ENGAGEMENTLETTER = 'ENGAGEMENT_LETTER',
    OTHERDOCUMENT = 'OTHER_DOCUMENT',
    OTHERIMAGE = 'OTHER_IMAGE'
}

/**
 * 
 * @export
 * @interface LawfirmCaseDomain
 */
export interface LawfirmCaseDomain {
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomain
     */
    caseDecisionStatus?: LawfirmCaseDomainCaseDecisionStatusEnum;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof LawfirmCaseDomain
     */
    clientDeclineTicket?: FreshDeskTicket;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomain
     */
    declineReason?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCaseDomain
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof LawfirmCaseDomain
     */
    lawfirmDecisionDateUtc?: Timestamp;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof LawfirmCaseDomain
     */
    lawfirmDeclineTicket?: FreshDeskTicket;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCaseDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomain
     */
    lawfirmPrimaryEmail?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof LawfirmCaseDomain
     */
    lawfirmReceiptDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomain
     */
    obfuscatedPictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomain
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomain
     */
    refundOwner?: LawfirmCaseDomainRefundOwnerEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDomainCaseDecisionStatusEnum {
    ACCEPTED = 'ACCEPTED',
    CREATED = 'CREATED',
    DECLINED = 'DECLINED',
    EXPIRED = 'EXPIRED',
    PENDING = 'PENDING',
    REMATCHED = 'REMATCHED',
    REMATCHEDREFERRAL = 'REMATCHED_REFERRAL'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDomainRefundOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    NONE = 'NONE',
    OTR = 'OTR'
}

/**
 * 
 * @export
 * @interface LawfirmCaseDomainReq
 */
export interface LawfirmCaseDomainReq {
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainReq
     */
    caseDecisionStatus?: LawfirmCaseDomainReqCaseDecisionStatusEnum;
    /**
     * 
     * @type {FreshDeskTicketReq}
     * @memberof LawfirmCaseDomainReq
     */
    clientDeclineTicket?: FreshDeskTicketReq;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainReq
     */
    declineReason?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCaseDomainReq
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof LawfirmCaseDomainReq
     */
    lawfirmDecisionDateUtc?: TimestampReq;
    /**
     * 
     * @type {FreshDeskTicketReq}
     * @memberof LawfirmCaseDomainReq
     */
    lawfirmDeclineTicket?: FreshDeskTicketReq;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCaseDomainReq
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainReq
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainReq
     */
    lawfirmPrimaryEmail?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof LawfirmCaseDomainReq
     */
    lawfirmReceiptDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainReq
     */
    obfuscatedPictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainReq
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainReq
     */
    refundOwner?: LawfirmCaseDomainReqRefundOwnerEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDomainReqCaseDecisionStatusEnum {
    ACCEPTED = 'ACCEPTED',
    CREATED = 'CREATED',
    DECLINED = 'DECLINED',
    EXPIRED = 'EXPIRED',
    PENDING = 'PENDING',
    REMATCHED = 'REMATCHED',
    REMATCHEDREFERRAL = 'REMATCHED_REFERRAL'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDomainReqRefundOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    NONE = 'NONE',
    OTR = 'OTR'
}

/**
 * 
 * @export
 * @interface LawfirmCaseDomainRes
 */
export interface LawfirmCaseDomainRes {
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainRes
     */
    caseDecisionStatus?: LawfirmCaseDomainResCaseDecisionStatusEnum;
    /**
     * 
     * @type {FreshDeskTicketRes}
     * @memberof LawfirmCaseDomainRes
     */
    clientDeclineTicket?: FreshDeskTicketRes;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainRes
     */
    declineReason?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCaseDomainRes
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof LawfirmCaseDomainRes
     */
    lawfirmDecisionDateUtc?: TimestampRes;
    /**
     * 
     * @type {FreshDeskTicketRes}
     * @memberof LawfirmCaseDomainRes
     */
    lawfirmDeclineTicket?: FreshDeskTicketRes;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCaseDomainRes
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainRes
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainRes
     */
    lawfirmPrimaryEmail?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof LawfirmCaseDomainRes
     */
    lawfirmReceiptDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainRes
     */
    obfuscatedPictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainRes
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCaseDomainRes
     */
    refundOwner?: LawfirmCaseDomainResRefundOwnerEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDomainResCaseDecisionStatusEnum {
    ACCEPTED = 'ACCEPTED',
    CREATED = 'CREATED',
    DECLINED = 'DECLINED',
    EXPIRED = 'EXPIRED',
    PENDING = 'PENDING',
    REMATCHED = 'REMATCHED',
    REMATCHEDREFERRAL = 'REMATCHED_REFERRAL'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmCaseDomainResRefundOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    NONE = 'NONE',
    OTR = 'OTR'
}

/**
 * 
 * @export
 * @interface LawfirmCourtCoverageDomain
 */
export interface LawfirmCourtCoverageDomain {
    /**
     * 
     * @type {string}
     * @memberof LawfirmCourtCoverageDomain
     */
    city?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    competitiveFeeMax?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    competitiveFeeMin?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCourtCoverageDomain
     */
    county?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCourtCoverageDomain
     */
    courtName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmCourtCoverageDomain
     */
    isCompetitive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmCourtCoverageDomain
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmCourtCoverageDomain
     */
    isRefundOffered?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    lawfirmFee?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    lowestFee?: number;
    /**
     * 
     * @type {CountryRegion}
     * @memberof LawfirmCourtCoverageDomain
     */
    region?: CountryRegion;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCourtCoverageDomain
     */
    state?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    xtCompetitiveFee?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    xtCompetitiveFeeMax?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCourtCoverageDomain
     */
    xtCompetitiveFeeMin?: number;
}
/**
 * 
 * @export
 * @interface LawfirmCoverageRecord
 */
export interface LawfirmCoverageRecord {
    /**
     * 
     * @type {number}
     * @memberof LawfirmCoverageRecord
     */
    caseAssignmentPriority?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCoverageRecord
     */
    countyId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCoverageRecord
     */
    countyName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmCoverageRecord
     */
    isVacationMode?: boolean;
    /**
     * 
     * @type {Timestamp}
     * @memberof LawfirmCoverageRecord
     */
    latestCaseAssignmentDateUtc?: Timestamp;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCoverageRecord
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCoverageRecord
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCoverageRecord
     */
    maxCaseCapacity?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCoverageRecord
     */
    numActiveCases?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmCoverageRecord
     */
    numCourtsCovered?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmCoverageRecord
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface LawfirmDocument
 */
export interface LawfirmDocument {
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocument
     */
    clientDocRequirement?: LawfirmDocumentClientDocRequirementEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocument
     */
    docDate?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocument
     */
    docExt?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocument
     */
    docId?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocument
     */
    docType?: LawfirmDocumentDocTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocument
     */
    docUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmDocumentClientDocRequirementEnum {
    ACK = 'ACK',
    NONE = 'NONE',
    NOTARY = 'NOTARY',
    SIGNATURE = 'SIGNATURE'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmDocumentDocTypeEnum {
    ENGAGEMENTLETTER = 'ENGAGEMENT_LETTER',
    OTHERDOCUMENT = 'OTHER_DOCUMENT',
    OTHERIMAGE = 'OTHER_IMAGE'
}

/**
 * 
 * @export
 * @interface LawfirmDocumentResponse
 */
export interface LawfirmDocumentResponse {
    /**
     * 
     * @type {Array<LawfirmDocument>}
     * @memberof LawfirmDocumentResponse
     */
    documents?: Array<LawfirmDocument>;
}
/**
 * 
 * @export
 * @interface LawfirmDocumentTemplate
 */
export interface LawfirmDocumentTemplate {
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocumentTemplate
     */
    clientDocRequirement?: LawfirmDocumentTemplateClientDocRequirementEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocumentTemplate
     */
    docDate?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocumentTemplate
     */
    docExt?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocumentTemplate
     */
    docType?: LawfirmDocumentTemplateDocTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmDocumentTemplate
     */
    textProvidedByLawfirm?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmDocumentTemplateClientDocRequirementEnum {
    ACK = 'ACK',
    NONE = 'NONE',
    NOTARY = 'NOTARY',
    SIGNATURE = 'SIGNATURE'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmDocumentTemplateDocTypeEnum {
    ENGAGEMENTLETTER = 'ENGAGEMENT_LETTER',
    OTHERDOCUMENT = 'OTHER_DOCUMENT',
    OTHERIMAGE = 'OTHER_IMAGE'
}

/**
 * 
 * @export
 * @interface LawfirmDocumentTemplateResponse
 */
export interface LawfirmDocumentTemplateResponse {
    /**
     * 
     * @type {Array<LawfirmDocumentTemplate>}
     * @memberof LawfirmDocumentTemplateResponse
     */
    documents?: Array<LawfirmDocumentTemplate>;
}
/**
 * 
 * @export
 * @interface LawfirmFeeDomain
 */
export interface LawfirmFeeDomain {
    /**
     * 
     * @type {number}
     * @memberof LawfirmFeeDomain
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    dueDate?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmFeeDomain
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    lawfirmFeeId?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmFeeDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    note?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmFeeDomain
     */
    otrAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmFeeDomain
     */
    processingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmFeeDomain
     */
    processingFeeCharged?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    sourceCasePaymentId?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmFeeDomain
     */
    stripeAmount?: number;
    /**
     * 
     * @type {StripeApplicationFeeDomain}
     * @memberof LawfirmFeeDomain
     */
    stripeApplicationFee?: StripeApplicationFeeDomain;
    /**
     * 
     * @type {StripePaymentDomain}
     * @memberof LawfirmFeeDomain
     */
    stripePayment?: StripePaymentDomain;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    transactionDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    transactionMethod?: LawfirmFeeDomainTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    transactionReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmFeeDomain
     */
    updatedDueDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmFeeDomainTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface LawfirmInboxMessageDomain
 */
export interface LawfirmInboxMessageDomain {
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    caseStatus?: LawfirmInboxMessageDomainCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    caseStatusCategory?: LawfirmInboxMessageDomainCaseStatusCategoryEnum;
    /**
     * 
     * @type {PureDate}
     * @memberof LawfirmInboxMessageDomain
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {TimestampRes}
     * @memberof LawfirmInboxMessageDomain
     */
    citationIssueDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    clientFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    clientLastName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    courtName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    lawfirmCaseDecisionStatus?: LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    messageBody?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof LawfirmInboxMessageDomain
     */
    messageSentDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof LawfirmInboxMessageDomain
     */
    profilePictureUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmInboxMessageDomainCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmInboxMessageDomainCaseStatusCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum {
    ACCEPTED = 'ACCEPTED',
    CREATED = 'CREATED',
    DECLINED = 'DECLINED',
    EXPIRED = 'EXPIRED',
    PENDING = 'PENDING',
    REMATCHED = 'REMATCHED',
    REMATCHEDREFERRAL = 'REMATCHED_REFERRAL'
}

/**
 * 
 * @export
 * @interface LawfirmLeadDomain
 */
export interface LawfirmLeadDomain {
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmLeadDomain
     */
    isLawyerEmailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmLeadDomain
     */
    isLawyerEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmLeadDomain
     */
    isTestLawfirm?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmLeadDomain
     */
    isTestLawyer?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmLeadDomain
     */
    isVacationMode?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawfirmAddressState?: LawfirmLeadDomainLawfirmAddressStateEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawfirmCity?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmLeadDomain
     */
    lawfirmCreatedByUserId?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmLeadDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawfirmPostalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawfirmState?: LawfirmLeadDomainLawfirmStateEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawyerEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawyerFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    lawyerLastName?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmLeadDomain
     */
    lawyerUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    leadOwnerFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmLeadDomain
     */
    leadOwnerLastName?: string;
    /**
     * 
     * @type {Array<OutgoingContactDomain>}
     * @memberof LawfirmLeadDomain
     */
    outgoingContacts?: Array<OutgoingContactDomain>;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmLeadDomainLawfirmAddressStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmLeadDomainLawfirmStateEnum {
    ACCOUNTCLOSED = 'ACCOUNT_CLOSED',
    DUPLICATE = 'DUPLICATE',
    ESTABLISHED = 'ESTABLISHED',
    FUTURELEAD = 'FUTURE_LEAD',
    INTRIAL = 'IN_TRIAL',
    LAWFIRMINTERESTED = 'LAWFIRM_INTERESTED',
    LAWFIRMLEAD = 'LAWFIRM_LEAD',
    LAWFIRMNOTINTERESTED = 'LAWFIRM_NOT_INTERESTED',
    NOTINTERESTEDFEESPLITTINGETHICS = 'NOT_INTERESTED_FEE_SPLITTING_ETHICS',
    NOTINTERESTEDREFUNDETHICS = 'NOT_INTERESTED_REFUND_ETHICS',
    ONBOARDING = 'ONBOARDING',
    TEMPORARILYTURNEDOFF = 'TEMPORARILY_TURNED_OFF',
    TERMINATEDFRAUD = 'TERMINATED_FRAUD',
    TERMINATEDPOORSERVICE = 'TERMINATED_POOR_SERVICE',
    TERMINATEDPOORSUCCESS = 'TERMINATED_POOR_SUCCESS',
    UNDERREVIEW = 'UNDER_REVIEW'
}

/**
 * 
 * @export
 * @interface LawfirmPayoutDomain
 */
export interface LawfirmPayoutDomain {
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    dueDate?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmPayoutId?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    processingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    processingFeeCharged?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    sourceCasePaymentId?: string;
    /**
     * 
     * @type {StripeTransferDomain}
     * @memberof LawfirmPayoutDomain
     */
    stripeTransfer?: StripeTransferDomain;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    transactionDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    transactionMethod?: LawfirmPayoutDomainTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    transactionReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    updatedDueDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmPayoutDomainTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface LawfirmPictureRequest
 */
export interface LawfirmPictureRequest {
    /**
     * 
     * @type {string}
     * @memberof LawfirmPictureRequest
     */
    coverPhotoBase64ImageData?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPictureRequest
     */
    profileBase64ImageData?: string;
}
/**
 * 
 * @export
 * @interface LawfirmRatesResponse
 */
export interface LawfirmRatesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmRatesResponse
     */
    acceptsPaymentPlans?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LawfirmRatesResponse
     */
    capacityLeft?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmRatesResponse
     */
    chosenLawfirm?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LawfirmRatesResponse
     */
    feeLevel?: LawfirmRatesResponseFeeLevelEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmRatesResponse
     */
    handlesAccidents?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmRatesResponse
     */
    handlesPastDue?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LawfirmRatesResponse
     */
    ineligibleMatchReasons?: Array<LawfirmRatesResponseIneligibleMatchReasonsEnum>;
    /**
     * 
     * @type {number}
     * @memberof LawfirmRatesResponse
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmRatesResponse
     */
    lawfirmName?: string;
    /**
     * 
     * @type {Array<LineItem>}
     * @memberof LawfirmRatesResponse
     */
    lineItems?: Array<LineItem>;
    /**
     * 
     * @type {string}
     * @memberof LawfirmRatesResponse
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmRatesResponse
     */
    primaryEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmRatesResponse
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmRatesResponse
     */
    rank?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmRatesResponse
     */
    refundEligible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LawfirmRatesResponse
     */
    successRate?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmRatesResponse
     */
    totalLegalFee?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmRatesResponse
     */
    vacationModeOn?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmRatesResponseFeeLevelEnum {
    ACCOUNTCLASSFEE = 'ACCOUNT_CLASS_FEE',
    ACCOUNTVIOLATIONFEE = 'ACCOUNT_VIOLATION_FEE',
    COURTFEE = 'COURT_FEE',
    COURTVIOLATIONFEE = 'COURT_VIOLATION_FEE'
}
/**
    * @export
    * @enum {string}
    */
export enum LawfirmRatesResponseIneligibleMatchReasonsEnum {
    DAILYCAPACITYBREACHED = 'DAILY_CAPACITY_BREACHED',
    ONVACATION = 'ON_VACATION',
    OUTOFCAPACITY = 'OUT_OF_CAPACITY',
    OUTPRICED = 'OUT_PRICED',
    OUTRANKED = 'OUT_RANKED'
}

/**
 * 
 * @export
 * @interface LawfirmRedirectModel
 */
export interface LawfirmRedirectModel {
    /**
     * 
     * @type {string}
     * @memberof LawfirmRedirectModel
     */
    landingPageType?: LawfirmRedirectModelLandingPageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmRedirectModel
     */
    landingPageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmRedirectModel
     */
    redirectUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmRedirectModelLandingPageTypeEnum {
    DEBUG = 'DEBUG',
    SEO = 'SEO',
    VANITY = 'VANITY'
}

/**
 * 
 * @export
 * @interface LawfirmSettingsDomainReq
 */
export interface LawfirmSettingsDomainReq {
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainReq
     */
    acceptsAccidents?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainReq
     */
    acceptsPastDue?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainReq
     */
    acceptsPaymentPlans?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainReq
     */
    defaultTrafficTicketFee?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainReq
     */
    isVacationMode?: boolean;
    /**
     * 
     * @type {TimestampReq}
     * @memberof LawfirmSettingsDomainReq
     */
    latestCaseAssignmentDateUtc?: TimestampReq;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainReq
     */
    maxCaseCapacity?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainReq
     */
    maxCaseCapacityPerDay?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainReq
     */
    mvsRecipient?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainReq
     */
    referralFee?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainReq
     */
    referralFeeType?: LawfirmSettingsDomainReqReferralFeeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainReq
     */
    vacationModeEndDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainReq
     */
    vacationModeReason?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmSettingsDomainReqReferralFeeTypeEnum {
    FLATFEEINCENTS = 'FLAT_FEE_IN_CENTS',
    PERCENT = 'PERCENT'
}

/**
 * 
 * @export
 * @interface LawfirmSettingsDomainRes
 */
export interface LawfirmSettingsDomainRes {
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainRes
     */
    acceptsAccidents?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainRes
     */
    acceptsPastDue?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainRes
     */
    acceptsPaymentPlans?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainRes
     */
    defaultTrafficTicketFee?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmSettingsDomainRes
     */
    isVacationMode?: boolean;
    /**
     * 
     * @type {TimestampRes}
     * @memberof LawfirmSettingsDomainRes
     */
    latestCaseAssignmentDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainRes
     */
    maxCaseCapacity?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainRes
     */
    maxCaseCapacityPerDay?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainRes
     */
    mvsRecipient?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmSettingsDomainRes
     */
    referralFee?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainRes
     */
    referralFeeType?: LawfirmSettingsDomainResReferralFeeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainRes
     */
    vacationModeEndDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmSettingsDomainRes
     */
    vacationModeReason?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmSettingsDomainResReferralFeeTypeEnum {
    FLATFEEINCENTS = 'FLAT_FEE_IN_CENTS',
    PERCENT = 'PERCENT'
}

/**
 * 
 * @export
 * @interface LawfirmStorefrontModel
 */
export interface LawfirmStorefrontModel {
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    aboutUsBlurb?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmStorefrontModel
     */
    activeCaseCount?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmStorefrontModel
     */
    averageRating?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    coverPhotoUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmStorefrontModel
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    lawfirmState?: LawfirmStorefrontModelLawfirmStateEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmStorefrontModel
     */
    resolvedCaseCount?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmStorefrontModel
     */
    reviewCount?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    reviewToDisplay?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    reviewerName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    seoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    tagLine?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmStorefrontModel
     */
    vacationModeOn?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LawfirmStorefrontModel
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LawfirmStorefrontModelLawfirmStateEnum {
    ACCOUNTCLOSED = 'ACCOUNT_CLOSED',
    DUPLICATE = 'DUPLICATE',
    ESTABLISHED = 'ESTABLISHED',
    FUTURELEAD = 'FUTURE_LEAD',
    INTRIAL = 'IN_TRIAL',
    LAWFIRMINTERESTED = 'LAWFIRM_INTERESTED',
    LAWFIRMLEAD = 'LAWFIRM_LEAD',
    LAWFIRMNOTINTERESTED = 'LAWFIRM_NOT_INTERESTED',
    NOTINTERESTEDFEESPLITTINGETHICS = 'NOT_INTERESTED_FEE_SPLITTING_ETHICS',
    NOTINTERESTEDREFUNDETHICS = 'NOT_INTERESTED_REFUND_ETHICS',
    ONBOARDING = 'ONBOARDING',
    TEMPORARILYTURNEDOFF = 'TEMPORARILY_TURNED_OFF',
    TERMINATEDFRAUD = 'TERMINATED_FRAUD',
    TERMINATEDPOORSERVICE = 'TERMINATED_POOR_SERVICE',
    TERMINATEDPOORSUCCESS = 'TERMINATED_POOR_SUCCESS',
    UNDERREVIEW = 'UNDER_REVIEW'
}

/**
 * 
 * @export
 * @interface LawfirmVacationRequest
 */
export interface LawfirmVacationRequest {
    /**
     * 
     * @type {number}
     * @memberof LawfirmVacationRequest
     */
    localTimezoneOffsetInHours?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmVacationRequest
     */
    vacationEndDateUtc?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LawfirmVacationRequest
     */
    vacationModeEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LawfirmVacationRequest
     */
    vacationReason?: string;
}
/**
 * 
 * @export
 * @interface LawfirmsRatesResponse
 */
export interface LawfirmsRatesResponse {
    /**
     * 
     * @type {Array<LawfirmRatesResponse>}
     * @memberof LawfirmsRatesResponse
     */
    rates?: Array<LawfirmRatesResponse>;
}
/**
 * 
 * @export
 * @interface LawyerLicenseModel
 */
export interface LawyerLicenseModel {
    /**
     * 
     * @type {string}
     * @memberof LawyerLicenseModel
     */
    barLicenseIssueDate?: string;
    /**
     * 
     * @type {number}
     * @memberof LawyerLicenseModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LawyerLicenseModel
     */
    licenseType?: LawyerLicenseModelLicenseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LawyerLicenseModel
     */
    regionCode?: LawyerLicenseModelRegionCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LawyerLicenseModelLicenseTypeEnum {
    BAR = 'BAR'
}
/**
    * @export
    * @enum {string}
    */
export enum LawyerLicenseModelRegionCodeEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface LawyerModel
 */
export interface LawyerModel {
    /**
     * 
     * @type {TimestampRes}
     * @memberof LawyerModel
     */
    creationDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    firstname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LawyerModel
     */
    isEmailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawyerModel
     */
    isLawfirmAccessGranted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LawyerModel
     */
    isUserAccountEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    jobTitle?: LawyerModelJobTitleEnum;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    lawSchool?: string;
    /**
     * 
     * @type {number}
     * @memberof LawyerModel
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    licensedDateUtc?: string;
    /**
     * 
     * @type {Array<LawyerLicenseModel>}
     * @memberof LawyerModel
     */
    licenses?: Array<LawyerLicenseModel>;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    otherJobTitle?: string;
    /**
     * 
     * @type {Array<PhoneNumberDomain>}
     * @memberof LawyerModel
     */
    phoneNumbers?: Array<PhoneNumberDomain>;
    /**
     * 
     * @type {string}
     * @memberof LawyerModel
     */
    profilePicture?: string;
    /**
     * 
     * @type {number}
     * @memberof LawyerModel
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum LawyerModelJobTitleEnum {
    ACCOUNTANT = 'ACCOUNTANT',
    ATTORNEY = 'ATTORNEY',
    ATTORNEYASSOCIATE = 'ATTORNEY_ASSOCIATE',
    ATTORNEYCOUNSEL = 'ATTORNEY_COUNSEL',
    ATTORNEYMANAGINGPARTNER = 'ATTORNEY_MANAGING_PARTNER',
    ATTORNEYPARTNER = 'ATTORNEY_PARTNER',
    ATTORNEYSTAFF = 'ATTORNEY_STAFF',
    CUSTOMERSERVICEREP = 'CUSTOMER_SERVICE_REP',
    LEGALASSISTANT = 'LEGAL_ASSISTANT',
    LEGALINTERN = 'LEGAL_INTERN',
    LEGALSECRETARY = 'LEGAL_SECRETARY',
    OTHER = 'OTHER',
    PARALEGAL = 'PARALEGAL'
}

/**
 * 
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    additionalDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof LineItem
     */
    feeAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    lineItem?: LineItemLineItemEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LineItemLineItemEnum {
    ACCIDENTFEE = 'ACCIDENT_FEE',
    BASELEGALFEE = 'BASE_LEGAL_FEE',
    BONDFEE = 'BOND_FEE',
    BOOKINGFEE = 'BOOKING_FEE',
    CDLFEE = 'CDL_FEE',
    DISPUTEFEE = 'DISPUTE_FEE',
    FINEPAYMENT = 'FINE_PAYMENT',
    FTAFEE = 'FTA_FEE',
    LATEFEE = 'LATE_FEE',
    MBGREFUND = 'MBG_REFUND',
    MVSFEE = 'MVS_FEE',
    OTHER = 'OTHER',
    OTRCREDIT = 'OTR_CREDIT',
    PAYMENTPLANSERVICEFEE = 'PAYMENT_PLAN_SERVICE_FEE',
    WARRANTFEE = 'WARRANT_FEE'
}

/**
 * 
 * @export
 * @interface LineItemModel
 */
export interface LineItemModel {
    /**
     * 
     * @type {string}
     * @memberof LineItemModel
     */
    additionalDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof LineItemModel
     */
    feeAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof LineItemModel
     */
    feeDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItemModel
     */
    lineItemOwner?: LineItemModelLineItemOwnerEnum;
    /**
     * 
     * @type {string}
     * @memberof LineItemModel
     */
    lineItemType?: LineItemModelLineItemTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LineItemModelLineItemOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum LineItemModelLineItemTypeEnum {
    ACCIDENTFEE = 'ACCIDENT_FEE',
    BASELEGALFEE = 'BASE_LEGAL_FEE',
    BONDFEE = 'BOND_FEE',
    BOOKINGFEE = 'BOOKING_FEE',
    CDLFEE = 'CDL_FEE',
    DISPUTEFEE = 'DISPUTE_FEE',
    FINEPAYMENT = 'FINE_PAYMENT',
    FTAFEE = 'FTA_FEE',
    LATEFEE = 'LATE_FEE',
    MBGREFUND = 'MBG_REFUND',
    MVSFEE = 'MVS_FEE',
    OTHER = 'OTHER',
    OTRCREDIT = 'OTR_CREDIT',
    PAYMENTPLANSERVICEFEE = 'PAYMENT_PLAN_SERVICE_FEE',
    WARRANTFEE = 'WARRANT_FEE'
}

/**
 * 
 * @export
 * @interface LineItemRequest
 */
export interface LineItemRequest {
    /**
     * 
     * @type {string}
     * @memberof LineItemRequest
     */
    additionalDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItemRequest
     */
    chargeDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof LineItemRequest
     */
    feeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof LineItemRequest
     */
    lawfirmReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof LineItemRequest
     */
    lineItemOwner?: LineItemRequestLineItemOwnerEnum;
    /**
     * 
     * @type {string}
     * @memberof LineItemRequest
     */
    lineItemType?: LineItemRequestLineItemTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof LineItemRequest
     */
    otrMarketingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {number}
     * @memberof LineItemRequest
     */
    otrReferralCodeAdjustmentInCents?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum LineItemRequestLineItemOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum LineItemRequestLineItemTypeEnum {
    ACCIDENTFEE = 'ACCIDENT_FEE',
    BASELEGALFEE = 'BASE_LEGAL_FEE',
    BONDFEE = 'BOND_FEE',
    BOOKINGFEE = 'BOOKING_FEE',
    CDLFEE = 'CDL_FEE',
    DISPUTEFEE = 'DISPUTE_FEE',
    FINEPAYMENT = 'FINE_PAYMENT',
    FTAFEE = 'FTA_FEE',
    LATEFEE = 'LATE_FEE',
    MBGREFUND = 'MBG_REFUND',
    MVSFEE = 'MVS_FEE',
    OTHER = 'OTHER',
    OTRCREDIT = 'OTR_CREDIT',
    PAYMENTPLANSERVICEFEE = 'PAYMENT_PLAN_SERVICE_FEE',
    WARRANTFEE = 'WARRANT_FEE'
}

/**
 * 
 * @export
 * @interface ListBillingProductsResponse
 */
export interface ListBillingProductsResponse {
    /**
     * 
     * @type {Array<BillingProductModel>}
     * @memberof ListBillingProductsResponse
     */
    products?: Array<BillingProductModel>;
}
/**
 * 
 * @export
 * @interface ListBillingSubscriptionsResponse
 */
export interface ListBillingSubscriptionsResponse {
    /**
     * 
     * @type {Array<BillingSubscriptionModel>}
     * @memberof ListBillingSubscriptionsResponse
     */
    subscriptions?: Array<BillingSubscriptionModel>;
}
/**
 * 
 * @export
 * @interface ListContactTimelineResponse
 */
export interface ListContactTimelineResponse {
    /**
     * 
     * @type {Array<ContactTimelineResponse>}
     * @memberof ListContactTimelineResponse
     */
    contacts?: Array<ContactTimelineResponse>;
}
/**
 * 
 * @export
 * @interface ListCostItemsForCustomerResponse
 */
export interface ListCostItemsForCustomerResponse {
    /**
     * 
     * @type {number}
     * @memberof ListCostItemsForCustomerResponse
     */
    clientBaseCostInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof ListCostItemsForCustomerResponse
     */
    clientTotalCostInCents?: number;
    /**
     * 
     * @type {Array<CasePaymentModel>}
     * @memberof ListCostItemsForCustomerResponse
     */
    futurePayments?: Array<CasePaymentModel>;
    /**
     * 
     * @type {Array<LineItemModel>}
     * @memberof ListCostItemsForCustomerResponse
     */
    lineItems?: Array<LineItemModel>;
    /**
     * 
     * @type {number}
     * @memberof ListCostItemsForCustomerResponse
     */
    totalRefCodeAdjustmentInCents?: number;
}
/**
 * 
 * @export
 * @interface ListDashboardCasesResponse
 */
export interface ListDashboardCasesResponse {
    /**
     * 
     * @type {Array<DashboardCaseModel>}
     * @memberof ListDashboardCasesResponse
     */
    cases?: Array<DashboardCaseModel>;
    /**
     * 
     * @type {string}
     * @memberof ListDashboardCasesResponse
     */
    previousPageToken?: string;
}
/**
 * 
 * @export
 * @interface ListEligibleStatusResponse
 */
export interface ListEligibleStatusResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ListEligibleStatusResponse
     */
    statuses?: Array<ListEligibleStatusResponseStatusesEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum ListEligibleStatusResponseStatusesEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface ListLawfirmAuditEventsByCursorResponse
 */
export interface ListLawfirmAuditEventsByCursorResponse {
    /**
     * 
     * @type {CursorModel}
     * @memberof ListLawfirmAuditEventsByCursorResponse
     */
    cursorModel?: CursorModel;
    /**
     * 
     * @type {Array<LawfirmAuditEventModel>}
     * @memberof ListLawfirmAuditEventsByCursorResponse
     */
    models?: Array<LawfirmAuditEventModel>;
    /**
     * 
     * @type {number}
     * @memberof ListLawfirmAuditEventsByCursorResponse
     */
    totalRecords?: number;
}
/**
 * 
 * @export
 * @interface ListLawfirmStorefrontsResponse
 */
export interface ListLawfirmStorefrontsResponse {
    /**
     * 
     * @type {Array<LawfirmStorefrontModel>}
     * @memberof ListLawfirmStorefrontsResponse
     */
    storefronts?: Array<LawfirmStorefrontModel>;
    /**
     * 
     * @type {number}
     * @memberof ListLawfirmStorefrontsResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof ListLawfirmStorefrontsResponse
     */
    totalRecords?: number;
}
/**
 * 
 * @export
 * @interface ListLawfirmSurchargeModel
 */
export interface ListLawfirmSurchargeModel {
    /**
     * 
     * @type {string}
     * @memberof ListLawfirmSurchargeModel
     */
    feature?: ListLawfirmSurchargeModelFeatureEnum;
    /**
     * 
     * @type {string}
     * @memberof ListLawfirmSurchargeModel
     */
    feeType?: ListLawfirmSurchargeModelFeeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ListLawfirmSurchargeModel
     */
    feeValue?: string;
    /**
     * 
     * @type {number}
     * @memberof ListLawfirmSurchargeModel
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ListLawfirmSurchargeModel
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ListLawfirmSurchargeModel
     */
    refundEligibility?: ListLawfirmSurchargeModelRefundEligibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ListLawfirmSurchargeModelFeatureEnum {
    BLACKBOX = 'BLACK_BOX',
    STATEPAGE = 'STATE_PAGE',
    STOREFRONT = 'STOREFRONT'
}
/**
    * @export
    * @enum {string}
    */
export enum ListLawfirmSurchargeModelFeeTypeEnum {
    FLATFEEINCENTS = 'FLAT_FEE_IN_CENTS',
    FORMULA = 'FORMULA',
    PERCENT = 'PERCENT'
}
/**
    * @export
    * @enum {string}
    */
export enum ListLawfirmSurchargeModelRefundEligibilityEnum {
    DEFAULT = 'DEFAULT',
    NONREFUNDABLE = 'NON_REFUNDABLE',
    SURCHARGEONLY = 'SURCHARGE_ONLY'
}

/**
 * 
 * @export
 * @interface ListLawfirmSurchargeTypeModel
 */
export interface ListLawfirmSurchargeTypeModel {
    /**
     * 
     * @type {Array<ListLawfirmSurchargeModel>}
     * @memberof ListLawfirmSurchargeTypeModel
     */
    fees?: Array<ListLawfirmSurchargeModel>;
    /**
     * 
     * @type {string}
     * @memberof ListLawfirmSurchargeTypeModel
     */
    type?: ListLawfirmSurchargeTypeModelTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ListLawfirmSurchargeTypeModelTypeEnum {
    CDL = 'CDL',
    FAILURETOAPPEAR = 'FAILURE_TO_APPEAR',
    LATE = 'LATE',
    MULTIPLEVIOLATIONS = 'MULTIPLE_VIOLATIONS',
    OUTOFSTATE = 'OUT_OF_STATE',
    SHORTNOTICE = 'SHORT_NOTICE',
    WARRANT = 'WARRANT'
}

/**
 * 
 * @export
 * @interface ListLawfirmSurchargesResponse
 */
export interface ListLawfirmSurchargesResponse {
    /**
     * 
     * @type {Array<ListLawfirmSurchargeTypeModel>}
     * @memberof ListLawfirmSurchargesResponse
     */
    surcharges?: Array<ListLawfirmSurchargeTypeModel>;
}
/**
 * 
 * @export
 * @interface ListReferralsResponse
 */
export interface ListReferralsResponse {
    /**
     * 
     * @type {AggregateReferralCredit}
     * @memberof ListReferralsResponse
     */
    aggregates?: AggregateReferralCredit;
    /**
     * 
     * @type {Array<ReferralResponseByUser>}
     * @memberof ListReferralsResponse
     */
    referralsPerUser?: Array<ReferralResponseByUser>;
}
/**
 * 
 * @export
 * @interface ListReviewsResponse
 */
export interface ListReviewsResponse {
    /**
     * 
     * @type {AggregateRatingMetrics}
     * @memberof ListReviewsResponse
     */
    aggregates?: AggregateRatingMetrics;
    /**
     * 
     * @type {CursorModel}
     * @memberof ListReviewsResponse
     */
    cursorModel?: CursorModel;
    /**
     * 
     * @type {Array<CustomerReview>}
     * @memberof ListReviewsResponse
     */
    reviews?: Array<CustomerReview>;
}
/**
 * 
 * @export
 * @interface ListSubscriptionInvoicesResponse
 */
export interface ListSubscriptionInvoicesResponse {
    /**
     * 
     * @type {Array<BillingInvoiceModel>}
     * @memberof ListSubscriptionInvoicesResponse
     */
    invoices?: Array<BillingInvoiceModel>;
}
/**
 * 
 * @export
 * @interface ListViolationClassificationResponse
 */
export interface ListViolationClassificationResponse {
    /**
     * 
     * @type {Array<ViolationClassificationModel>}
     * @memberof ListViolationClassificationResponse
     */
    models?: Array<ViolationClassificationModel>;
}
/**
 * 
 * @export
 * @interface LobEvent
 */
export interface LobEvent {
    /**
     * 
     * @type {boolean}
     * @memberof LobEvent
     */
    enabled_for_test?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LobEvent
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LobEvent
     */
    resource?: string;
}
/**
 * 
 * @export
 * @interface LobEventRequest
 */
export interface LobEventRequest {
    /**
     * 
     * @type {string}
     * @memberof LobEventRequest
     */
    date_created?: string;
    /**
     * 
     * @type {LobEvent}
     * @memberof LobEventRequest
     */
    event_type?: LobEvent;
    /**
     * 
     * @type {string}
     * @memberof LobEventRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LobEventRequest
     */
    reference_id?: string;
}
/**
 * 
 * @export
 * @interface LobMailingAddress
 */
export interface LobMailingAddress {
    /**
     * 
     * @type {string}
     * @memberof LobMailingAddress
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof LobMailingAddress
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LobMailingAddress
     */
    line1?: string;
    /**
     * 
     * @type {string}
     * @memberof LobMailingAddress
     */
    line2?: string;
    /**
     * 
     * @type {string}
     * @memberof LobMailingAddress
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LobMailingAddress
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface LocalTime
 */
export interface LocalTime {
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    hour?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    minute?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    nano?: number;
    /**
     * 
     * @type {number}
     * @memberof LocalTime
     */
    second?: number;
}
/**
 * 
 * @export
 * @interface LostCaseWithTransferNotReversed
 */
export interface LostCaseWithTransferNotReversed {
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    actualCustomerCost?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    amountRefunded?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    applicationFeeRefundAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof LostCaseWithTransferNotReversed
     */
    caseId?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof LostCaseWithTransferNotReversed
     */
    caseResolutionDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof LostCaseWithTransferNotReversed
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof LostCaseWithTransferNotReversed
     */
    lastName?: string;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    lawfirmGrossRevenue?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LostCaseWithTransferNotReversed
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    originalApplicationFee?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    originalCustomerCost?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    originalTransferAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    otrIncome?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    platformFee?: number;
    /**
     * 
     * @type {string}
     * @memberof LostCaseWithTransferNotReversed
     */
    refundOwner?: LostCaseWithTransferNotReversedRefundOwnerEnum;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    stripeFee?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    transferAmountRefunded?: number;
    /**
     * 
     * @type {number}
     * @memberof LostCaseWithTransferNotReversed
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum LostCaseWithTransferNotReversedRefundOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    NONE = 'NONE',
    OTR = 'OTR'
}

/**
 * 
 * @export
 * @interface MarkCaseAsResolvedRequest
 */
export interface MarkCaseAsResolvedRequest {
    /**
     * 
     * @type {number}
     * @memberof MarkCaseAsResolvedRequest
     */
    adjustedFineAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof MarkCaseAsResolvedRequest
     */
    adjustedPointCount?: number;
    /**
     * 
     * @type {number}
     * @memberof MarkCaseAsResolvedRequest
     */
    originalPointCount?: number;
    /**
     * 
     * @type {string}
     * @memberof MarkCaseAsResolvedRequest
     */
    resolutionStatus?: MarkCaseAsResolvedRequestResolutionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MarkCaseAsResolvedRequest
     */
    resolutionSummary?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MarkCaseAsResolvedRequestResolutionStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface MarkCaseAsResolvedResponse
 */
export interface MarkCaseAsResolvedResponse {
    /**
     * 
     * @type {string}
     * @memberof MarkCaseAsResolvedResponse
     */
    caseStatus?: MarkCaseAsResolvedResponseCaseStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof MarkCaseAsResolvedResponse
     */
    isDeprecated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MarkCaseAsResolvedResponse
     */
    lawfirmFriendlyDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof MarkCaseAsResolvedResponse
     */
    lawfirmFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof MarkCaseAsResolvedResponse
     */
    statusCategory?: MarkCaseAsResolvedResponseStatusCategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof MarkCaseAsResolvedResponse
     */
    statusId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum MarkCaseAsResolvedResponseCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum MarkCaseAsResolvedResponseStatusCategoryEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface MatchCaseResponse
 */
export interface MatchCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof MatchCaseResponse
     */
    chanceOfSuccess?: number;
    /**
     * 
     * @type {number}
     * @memberof MatchCaseResponse
     */
    projectedInsuranceCostInCents?: number;
    /**
     * 
     * @type {MatchInnerCaseResponse}
     * @memberof MatchCaseResponse
     */
    theCase?: MatchInnerCaseResponse;
}
/**
 * 
 * @export
 * @interface MatchCitationResponse
 */
export interface MatchCitationResponse {
    /**
     * 
     * @type {AddressDomain}
     * @memberof MatchCitationResponse
     */
    address?: AddressDomain;
    /**
     * 
     * @type {number}
     * @memberof MatchCitationResponse
     */
    citationId?: number;
    /**
     * 
     * @type {PureDate}
     * @memberof MatchCitationResponse
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {Timestamp}
     * @memberof MatchCitationResponse
     */
    citationIssueDateUTC?: Timestamp;
    /**
     * 
     * @type {CourtDomain}
     * @memberof MatchCitationResponse
     */
    court?: CourtDomain;
    /**
     * 
     * @type {number}
     * @memberof MatchCitationResponse
     */
    fineAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MatchCitationResponse
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MatchCitationResponse
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MatchCitationResponse
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MatchCitationResponse
     */
    ticketNumber?: string;
    /**
     * 
     * @type {Array<ViolationResponse>}
     * @memberof MatchCitationResponse
     */
    violations?: Array<ViolationResponse>;
}
/**
 * 
 * @export
 * @interface MatchInnerCaseResponse
 */
export interface MatchInnerCaseResponse {
    /**
     * 
     * @type {string}
     * @memberof MatchInnerCaseResponse
     */
    caseId?: string;
    /**
     * 
     * @type {MatchCitationResponse}
     * @memberof MatchInnerCaseResponse
     */
    citation?: MatchCitationResponse;
    /**
     * 
     * @type {MatchLawfirmCaseResponse}
     * @memberof MatchInnerCaseResponse
     */
    lawfirmCaseDecision?: MatchLawfirmCaseResponse;
    /**
     * 
     * @type {boolean}
     * @memberof MatchInnerCaseResponse
     */
    lawfirmCodeApplied?: boolean;
    /**
     * 
     * @type {Array<CaseViolationPenalty>}
     * @memberof MatchInnerCaseResponse
     */
    maxPenalties?: Array<CaseViolationPenalty>;
    /**
     * 
     * @type {string}
     * @memberof MatchInnerCaseResponse
     */
    referralCodeOwner?: MatchInnerCaseResponseReferralCodeOwnerEnum;
    /**
     * 
     * @type {string}
     * @memberof MatchInnerCaseResponse
     */
    refundEligibility?: MatchInnerCaseResponseRefundEligibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof MatchInnerCaseResponse
     */
    uiReasonMsg?: string;
    /**
     * 
     * @type {number}
     * @memberof MatchInnerCaseResponse
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum MatchInnerCaseResponseReferralCodeOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum MatchInnerCaseResponseRefundEligibilityEnum {
    FULLREFUND = 'FULL_REFUND',
    NOREFUND = 'NO_REFUND',
    PARTIALREFUND = 'PARTIAL_REFUND'
}

/**
 * 
 * @export
 * @interface MatchLawfirmCaseResponse
 */
export interface MatchLawfirmCaseResponse {
    /**
     * 
     * @type {number}
     * @memberof MatchLawfirmCaseResponse
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof MatchLawfirmCaseResponse
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof MatchLawfirmCaseResponse
     */
    obfuscatedPictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MatchLawfirmCaseResponse
     */
    profilePictureUrl?: string;
}
/**
 * 
 * @export
 * @interface MergeStatusReport
 */
export interface MergeStatusReport {
    /**
     * 
     * @type {Array<MergeTableChange>}
     * @memberof MergeStatusReport
     */
    otherChanges?: Array<MergeTableChange>;
    /**
     * 
     * @type {Array<MergeTableRecord>}
     * @memberof MergeStatusReport
     */
    tableMerges?: Array<MergeTableRecord>;
}
/**
 * 
 * @export
 * @interface MergeTableChange
 */
export interface MergeTableChange {
    /**
     * 
     * @type {string}
     * @memberof MergeTableChange
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface MergeTableRecord
 */
export interface MergeTableRecord {
    /**
     * 
     * @type {string}
     * @memberof MergeTableRecord
     */
    tableName?: string;
    /**
     * 
     * @type {number}
     * @memberof MergeTableRecord
     */
    updateRowCount?: number;
}
/**
 * 
 * @export
 * @interface MergeTicketResponse
 */
export interface MergeTicketResponse {
    /**
     * 
     * @type {boolean}
     * @memberof MergeTicketResponse
     */
    isSuccess?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MergeTicketResponse
     */
    log?: string;
    /**
     * 
     * @type {string}
     * @memberof MergeTicketResponse
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface MergeUserRequest
 */
export interface MergeUserRequest {
    /**
     * 
     * @type {string}
     * @memberof MergeUserRequest
     */
    formerUserId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MergeUserRequest
     */
    rollback?: boolean;
}
/**
 * 
 * @export
 * @interface MergeUserResponse
 */
export interface MergeUserResponse {
    /**
     * 
     * @type {MergeStatusReport}
     * @memberof MergeUserResponse
     */
    report?: MergeStatusReport;
}
/**
 * 
 * @export
 * @interface MessageInputModel
 */
export interface MessageInputModel {
    /**
     * 
     * @type {string}
     * @memberof MessageInputModel
     */
    author?: MessageInputModelAuthorEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageInputModel
     */
    encodedMediaData?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInputModel
     */
    mediaType?: MessageInputModelMediaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageInputModel
     */
    messageBody?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MessageInputModelAuthorEnum {
    ADMIN = 'ADMIN',
    DEFENDANT = 'DEFENDANT',
    LAWYER = 'LAWYER',
    PARTNER = 'PARTNER',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum MessageInputModelMediaTypeEnum {
    IMAGE = 'IMAGE',
    PDF = 'PDF'
}

/**
 * 
 * @export
 * @interface MissingLawfirmPayoutResult
 */
export interface MissingLawfirmPayoutResult {
    /**
     * 
     * @type {string}
     * @memberof MissingLawfirmPayoutResult
     */
    bookingConfirmedDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof MissingLawfirmPayoutResult
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof MissingLawfirmPayoutResult
     */
    caseStatus?: MissingLawfirmPayoutResultCaseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MissingLawfirmPayoutResult
     */
    lawfirmDecisionDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof MissingLawfirmPayoutResult
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof MissingLawfirmPayoutResult
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof MissingLawfirmPayoutResult
     */
    numTransfers?: number;
    /**
     * 
     * @type {number}
     * @memberof MissingLawfirmPayoutResult
     */
    outstandingTransferAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof MissingLawfirmPayoutResult
     */
    state?: MissingLawfirmPayoutResultStateEnum;
    /**
     * 
     * @type {number}
     * @memberof MissingLawfirmPayoutResult
     */
    transferredAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof MissingLawfirmPayoutResult
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof MissingLawfirmPayoutResult
     */
    userName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MissingLawfirmPayoutResultCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum MissingLawfirmPayoutResultStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface MissingPaymentDomain
 */
export interface MissingPaymentDomain {
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    bookingConfirmedDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    caseStatus?: MissingPaymentDomainCaseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    caseSubtotal?: number;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    chargeAttempts?: number;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    disputedAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    dueLater?: number;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    lastAttemptDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    lawfirmDecisionDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    mostRecentChargeError?: string;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    mostRecentDueDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    overdue?: number;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    totalPaid?: number;
    /**
     * 
     * @type {number}
     * @memberof MissingPaymentDomain
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof MissingPaymentDomain
     */
    userName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MissingPaymentDomainCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface NewUser
 */
export interface NewUser {
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    firstname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewUser
     */
    isEmailConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    loginProvider?: NewUserLoginProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    password?: string;
    /**
     * 
     * @type {Array<PhoneNumberDomain>}
     * @memberof NewUser
     */
    phoneNumbers?: Array<PhoneNumberDomain>;
}

/**
    * @export
    * @enum {string}
    */
export enum NewUserLoginProviderEnum {
    APPLE = 'APPLE',
    EMAIL = 'EMAIL',
    FACEBOOK = 'FACEBOOK',
    GOOGLE = 'GOOGLE',
    PHONE = 'PHONE',
    TWITTER = 'TWITTER'
}

/**
 * 
 * @export
 * @interface NewUserResponse
 */
export interface NewUserResponse {
    /**
     * 
     * @type {string}
     * @memberof NewUserResponse
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUserResponse
     */
    firstname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewUserResponse
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NewUserResponse
     */
    lastname?: string;
    /**
     * 
     * @type {number}
     * @memberof NewUserResponse
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface NoLawyerAvailableRequest
 */
export interface NoLawyerAvailableRequest {
    /**
     * 
     * @type {string}
     * @memberof NoLawyerAvailableRequest
     */
    offerPrice?: string;
    /**
     * 
     * @type {string}
     * @memberof NoLawyerAvailableRequest
     */
    phoneNumber?: string;
}
/**
 * 
 * @export
 * @interface NoViolationCitation
 */
export interface NoViolationCitation {
    /**
     * 
     * @type {string}
     * @memberof NoViolationCitation
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof NoViolationCitation
     */
    caseStatus?: NoViolationCitationCaseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof NoViolationCitation
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof NoViolationCitation
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof NoViolationCitation
     */
    unsignedImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof NoViolationCitation
     */
    uploadDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof NoViolationCitation
     */
    userId?: number;
    /**
     * 
     * @type {Array<ViolationInput>}
     * @memberof NoViolationCitation
     */
    violations?: Array<ViolationInput>;
}

/**
    * @export
    * @enum {string}
    */
export enum NoViolationCitationCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}

/**
 * 
 * @export
 * @interface NoteAuthor
 */
export interface NoteAuthor {
    /**
     * 
     * @type {string}
     * @memberof NoteAuthor
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteAuthor
     */
    lastName?: string;
    /**
     * 
     * @type {number}
     * @memberof NoteAuthor
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface NoteDomain
 */
export interface NoteDomain {
    /**
     * 
     * @type {NoteAuthor}
     * @memberof NoteDomain
     */
    author?: NoteAuthor;
    /**
     * 
     * @type {Timestamp}
     * @memberof NoteDomain
     */
    deletedDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof NoteDomain
     */
    note?: string;
    /**
     * 
     * @type {number}
     * @memberof NoteDomain
     */
    noteId?: number;
    /**
     * 
     * @type {string}
     * @memberof NoteDomain
     */
    noteType?: NoteDomainNoteTypeEnum;
    /**
     * 
     * @type {Timestamp}
     * @memberof NoteDomain
     */
    postedDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof NoteDomain
     */
    referenceId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NoteDomainNoteTypeEnum {
    PHONELEAD = 'PHONE_LEAD'
}

/**
 * 
 * @export
 * @interface NotificationEvent
 */
export interface NotificationEvent {
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    eventDate?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationEvent
     */
    notificationId?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    referenceId?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationEvent
     */
    unreadCount?: number;
}
/**
 * 
 * @export
 * @interface NotificationEvents
 */
export interface NotificationEvents {
    /**
     * 
     * @type {{ [key: string]: Array<NotificationEvent>; }}
     * @memberof NotificationEvents
     */
    events?: { [key: string]: Array<NotificationEvent>; };
    /**
     * 
     * @type {number}
     * @memberof NotificationEvents
     */
    totalUnreadCount?: number;
}
/**
 * 
 * @export
 * @interface OutgoingContactDomain
 */
export interface OutgoingContactDomain {
    /**
     * 
     * @type {string}
     * @memberof OutgoingContactDomain
     */
    actionType?: string;
    /**
     * 
     * @type {string}
     * @memberof OutgoingContactDomain
     */
    caseId?: string;
    /**
     * 
     * @type {number}
     * @memberof OutgoingContactDomain
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof OutgoingContactDomain
     */
    contactSentDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof OutgoingContactDomain
     */
    emailTemplateId?: number;
    /**
     * 
     * @type {string}
     * @memberof OutgoingContactDomain
     */
    emailTemplateName?: string;
    /**
     * 
     * @type {number}
     * @memberof OutgoingContactDomain
     */
    outgoingContactId?: number;
    /**
     * 
     * @type {string}
     * @memberof OutgoingContactDomain
     */
    recipientEmailAddress?: string;
    /**
     * 
     * @type {number}
     * @memberof OutgoingContactDomain
     */
    recipientUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof OutgoingContactDomain
     */
    senderFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof OutgoingContactDomain
     */
    senderLastName?: string;
    /**
     * 
     * @type {number}
     * @memberof OutgoingContactDomain
     */
    senderUserId?: number;
}
/**
 * 
 * @export
 * @interface Penalty
 */
export interface Penalty {
    /**
     * 
     * @type {string}
     * @memberof Penalty
     */
    additionalTip?: string;
    /**
     * 
     * @type {string}
     * @memberof Penalty
     */
    penaltyFriendlyDescription?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Penalty
     */
    penaltyMerged?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Penalty
     */
    penaltyType?: PenaltyPenaltyTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Penalty
     */
    penaltyTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof Penalty
     */
    penaltyValue?: string;
    /**
     * 
     * @type {string}
     * @memberof Penalty
     */
    vectorImageUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PenaltyPenaltyTypeEnum {
    DEMERITPOINTS = 'DEMERIT_POINTS',
    INCARCERATIONMAXDAYS = 'INCARCERATION_MAX_DAYS',
    INCARCERATIONMINDAYS = 'INCARCERATION_MIN_DAYS',
    INSURANCEPOINTS = 'INSURANCE_POINTS',
    INSURANCERATEINCREASE = 'INSURANCE_RATE_INCREASE',
    LICENSEREVOCATIONMAXDAYS = 'LICENSE_REVOCATION_MAX_DAYS',
    LICENSEREVOCATIONMINDAYS = 'LICENSE_REVOCATION_MIN_DAYS',
    LICENSESUSPENSIONMAXDAYS = 'LICENSE_SUSPENSION_MAX_DAYS',
    LICENSESUSPENSIONMINDAYS = 'LICENSE_SUSPENSION_MIN_DAYS',
    MANDATORYCOURTAPPEARANCE = 'MANDATORY_COURT_APPEARANCE',
    MANDATORYCOURTAPPEARANCEWITHATTORNEY = 'MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY',
    MAXBAILAMOUNT = 'MAX_BAIL_AMOUNT',
    MINBAILAMOUNT = 'MIN_BAIL_AMOUNT',
    PROBATIONINDAYS = 'PROBATION_IN_DAYS',
    TOTALBAILAMOUNT = 'TOTAL_BAIL_AMOUNT'
}

/**
 * 
 * @export
 * @interface PenaltyModel
 */
export interface PenaltyModel {
    /**
     * 
     * @type {string}
     * @memberof PenaltyModel
     */
    additionalTip?: string;
    /**
     * 
     * @type {string}
     * @memberof PenaltyModel
     */
    penaltyDataType?: string;
    /**
     * 
     * @type {string}
     * @memberof PenaltyModel
     */
    penaltyFriendlyDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof PenaltyModel
     */
    penaltyType?: PenaltyModelPenaltyTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof PenaltyModel
     */
    penaltyTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof PenaltyModel
     */
    penaltyValue?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PenaltyModelPenaltyTypeEnum {
    DEMERITPOINTS = 'DEMERIT_POINTS',
    INCARCERATIONMAXDAYS = 'INCARCERATION_MAX_DAYS',
    INCARCERATIONMINDAYS = 'INCARCERATION_MIN_DAYS',
    INSURANCEPOINTS = 'INSURANCE_POINTS',
    INSURANCERATEINCREASE = 'INSURANCE_RATE_INCREASE',
    LICENSEREVOCATIONMAXDAYS = 'LICENSE_REVOCATION_MAX_DAYS',
    LICENSEREVOCATIONMINDAYS = 'LICENSE_REVOCATION_MIN_DAYS',
    LICENSESUSPENSIONMAXDAYS = 'LICENSE_SUSPENSION_MAX_DAYS',
    LICENSESUSPENSIONMINDAYS = 'LICENSE_SUSPENSION_MIN_DAYS',
    MANDATORYCOURTAPPEARANCE = 'MANDATORY_COURT_APPEARANCE',
    MANDATORYCOURTAPPEARANCEWITHATTORNEY = 'MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY',
    MAXBAILAMOUNT = 'MAX_BAIL_AMOUNT',
    MINBAILAMOUNT = 'MIN_BAIL_AMOUNT',
    PROBATIONINDAYS = 'PROBATION_IN_DAYS',
    TOTALBAILAMOUNT = 'TOTAL_BAIL_AMOUNT'
}

/**
 * 
 * @export
 * @interface PenaltyRequest
 */
export interface PenaltyRequest {
    /**
     * 
     * @type {number}
     * @memberof PenaltyRequest
     */
    penaltyTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof PenaltyRequest
     */
    penaltyValue?: string;
}
/**
 * 
 * @export
 * @interface PersistTicketEvaluationRequest
 */
export interface PersistTicketEvaluationRequest {
    /**
     * 
     * @type {number}
     * @memberof PersistTicketEvaluationRequest
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof PersistTicketEvaluationRequest
     */
    citationState?: string;
    /**
     * 
     * @type {string}
     * @memberof PersistTicketEvaluationRequest
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof PersistTicketEvaluationRequest
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PersistTicketEvaluationRequest
     */
    source?: PersistTicketEvaluationRequestSourceEnum;
    /**
     * 
     * @type {TimestampReq}
     * @memberof PersistTicketEvaluationRequest
     */
    submissionDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof PersistTicketEvaluationRequest
     */
    visitorName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PersistTicketEvaluationRequestSourceEnum {
    OTREXITPOPUP = 'OTR_EXIT_POPUP',
    QUARANTINELANDINGPAGE = 'QUARANTINE_LANDING_PAGE',
    TICKETREVIEWPAGE = 'TICKET_REVIEW_PAGE'
}

/**
 * 
 * @export
 * @interface PhoneNumberDomain
 */
export interface PhoneNumberDomain {
    /**
     * 
     * @type {Timestamp}
     * @memberof PhoneNumberDomain
     */
    creationDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomain
     */
    entityType?: PhoneNumberDomainEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomain
     */
    extension?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof PhoneNumberDomain
     */
    lastUpdatedDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomain
     */
    phoneNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberDomain
     */
    phoneNumberId?: number;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberDomain
     */
    referenceId?: number;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomain
     */
    type?: PhoneNumberDomainTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PhoneNumberDomainEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum PhoneNumberDomainTypeEnum {
    HOME = 'HOME',
    MOBILE = 'MOBILE',
    NOTSPECIFIED = 'NOT_SPECIFIED',
    OFFICE = 'OFFICE'
}

/**
 * 
 * @export
 * @interface PhoneNumberDomainReq
 */
export interface PhoneNumberDomainReq {
    /**
     * 
     * @type {TimestampReq}
     * @memberof PhoneNumberDomainReq
     */
    creationDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainReq
     */
    entityType?: PhoneNumberDomainReqEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainReq
     */
    extension?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof PhoneNumberDomainReq
     */
    lastUpdatedDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainReq
     */
    phoneNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberDomainReq
     */
    phoneNumberId?: number;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberDomainReq
     */
    referenceId?: number;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainReq
     */
    type?: PhoneNumberDomainReqTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PhoneNumberDomainReqEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum PhoneNumberDomainReqTypeEnum {
    HOME = 'HOME',
    MOBILE = 'MOBILE',
    NOTSPECIFIED = 'NOT_SPECIFIED',
    OFFICE = 'OFFICE'
}

/**
 * 
 * @export
 * @interface PhoneNumberDomainRes
 */
export interface PhoneNumberDomainRes {
    /**
     * 
     * @type {TimestampRes}
     * @memberof PhoneNumberDomainRes
     */
    creationDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainRes
     */
    entityType?: PhoneNumberDomainResEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainRes
     */
    extension?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof PhoneNumberDomainRes
     */
    lastUpdatedDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainRes
     */
    phoneNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberDomainRes
     */
    phoneNumberId?: number;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumberDomainRes
     */
    referenceId?: number;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumberDomainRes
     */
    type?: PhoneNumberDomainResTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PhoneNumberDomainResEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum PhoneNumberDomainResTypeEnum {
    HOME = 'HOME',
    MOBILE = 'MOBILE',
    NOTSPECIFIED = 'NOT_SPECIFIED',
    OFFICE = 'OFFICE'
}

/**
 * 
 * @export
 * @interface PostCourtCoverageRequest
 */
export interface PostCourtCoverageRequest {
    /**
     * 
     * @type {Array<AddCourtCoverageRequest>}
     * @memberof PostCourtCoverageRequest
     */
    courts?: Array<AddCourtCoverageRequest>;
}
/**
 * 
 * @export
 * @interface PostFeedbackRequest
 */
export interface PostFeedbackRequest {
    /**
     * 
     * @type {FeedbackDomain}
     * @memberof PostFeedbackRequest
     */
    feedback?: FeedbackDomain;
}
/**
 * 
 * @export
 * @interface PotentialCustomerDomain
 */
export interface PotentialCustomerDomain {
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    caseStatus?: PotentialCustomerDomainCaseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PotentialCustomerDomain
     */
    caseStatusId?: number;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    caseStatusName?: string;
    /**
     * 
     * @type {number}
     * @memberof PotentialCustomerDomain
     */
    citationId?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof PotentialCustomerDomain
     */
    citationIssueDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    citationState?: PotentialCustomerDomainCitationStateEnum;
    /**
     * 
     * @type {TimestampRes}
     * @memberof PotentialCustomerDomain
     */
    citationSubmitDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    clientFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    clientLastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    courtCity?: string;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    courtCounty?: string;
    /**
     * 
     * @type {number}
     * @memberof PotentialCustomerDomain
     */
    courtId?: number;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    courtName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PotentialCustomerDomain
     */
    hasDuplicateSubmission?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PotentialCustomerDomain
     */
    isCitationDismissedFromContactList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PotentialCustomerDomain
     */
    isUnwantedDuplicate?: boolean;
    /**
     * 
     * @type {TimestampRes}
     * @memberof PotentialCustomerDomain
     */
    lastBookingDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof PotentialCustomerDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof PotentialCustomerDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {Array<OutgoingContactDomain>}
     * @memberof PotentialCustomerDomain
     */
    outgoingContacts?: Array<OutgoingContactDomain>;
    /**
     * 
     * @type {number}
     * @memberof PotentialCustomerDomain
     */
    ticketsFought?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof PotentialCustomerDomain
     */
    userCreationDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof PotentialCustomerDomain
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PotentialCustomerDomainCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum PotentialCustomerDomainCitationStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}

/**
 * 
 * @export
 * @interface PreviewDocumentRequest
 */
export interface PreviewDocumentRequest {
    /**
     * 
     * @type {string}
     * @memberof PreviewDocumentRequest
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof PreviewDocumentRequest
     */
    legalFee?: string;
    /**
     * 
     * @type {string}
     * @memberof PreviewDocumentRequest
     */
    textProvidedByLawfirm?: string;
}
/**
 * 
 * @export
 * @interface PriceMatchRequest
 */
export interface PriceMatchRequest {
    /**
     * 
     * @type {string}
     * @memberof PriceMatchRequest
     */
    attorneyContactInfo?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchRequest
     */
    attorneyName?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchRequest
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchRequest
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchRequest
     */
    details?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchRequest
     */
    priceToMatch?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchRequest
     */
    website?: string;
}
/**
 * 
 * @export
 * @interface PriceMatchResponse
 */
export interface PriceMatchResponse {
    /**
     * 
     * @type {string}
     * @memberof PriceMatchResponse
     */
    matchedLawfirm?: string;
    /**
     * 
     * @type {number}
     * @memberof PriceMatchResponse
     */
    matchedPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchResponse
     */
    priceMatchStatus?: PriceMatchResponsePriceMatchStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PriceMatchResponse
     */
    referralCode?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PriceMatchResponsePriceMatchStatusEnum {
    COMPLETE = 'COMPLETE',
    PENDING = 'PENDING',
    REJECTED = 'REJECTED'
}

/**
 * 
 * @export
 * @interface PublishReferralContactsResponse
 */
export interface PublishReferralContactsResponse {
    /**
     * 
     * @type {Array<ReferralContactStatus>}
     * @memberof PublishReferralContactsResponse
     */
    contacts?: Array<ReferralContactStatus>;
}
/**
 * 
 * @export
 * @interface PublishReferralRequest
 */
export interface PublishReferralRequest {
    /**
     * 
     * @type {Array<ReferralContact>}
     * @memberof PublishReferralRequest
     */
    contacts?: Array<ReferralContact>;
    /**
     * 
     * @type {boolean}
     * @memberof PublishReferralRequest
     */
    dryRun?: boolean;
}
/**
 * 
 * @export
 * @interface PureDate
 */
export interface PureDate {
    /**
     * 
     * @type {string}
     * @memberof PureDate
     */
    date?: string;
}
/**
 * 
 * @export
 * @interface PushNotificationRegistrationRequest
 */
export interface PushNotificationRegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof PushNotificationRegistrationRequest
     */
    deviceToken?: string;
    /**
     * 
     * @type {string}
     * @memberof PushNotificationRegistrationRequest
     */
    platformType?: PushNotificationRegistrationRequestPlatformTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PushNotificationRegistrationRequestPlatformTypeEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS',
    WEBAPP = 'WEBAPP'
}

/**
 * 
 * @export
 * @interface PushNotificationRequest
 */
export interface PushNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof PushNotificationRequest
     */
    messageBody?: string;
    /**
     * 
     * @type {string}
     * @memberof PushNotificationRequest
     */
    pageType?: PushNotificationRequestPageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PushNotificationRequest
     */
    platformType?: PushNotificationRequestPlatformTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PushNotificationRequestPageTypeEnum {
    CASEACTION = 'CASE_ACTION',
    CASEMESSAGES = 'CASE_MESSAGES',
    CASESTATUS = 'CASE_STATUS',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    NEWTICKET = 'NEW_TICKET',
    PROFILE = 'PROFILE'
}
/**
    * @export
    * @enum {string}
    */
export enum PushNotificationRequestPlatformTypeEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS',
    WEBAPP = 'WEBAPP'
}

/**
 * 
 * @export
 * @interface PutDocumentRequest
 */
export interface PutDocumentRequest {
    /**
     * 
     * @type {string}
     * @memberof PutDocumentRequest
     */
    clientDocReq?: PutDocumentRequestClientDocReqEnum;
    /**
     * 
     * @type {string}
     * @memberof PutDocumentRequest
     */
    docType?: PutDocumentRequestDocTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PutDocumentRequest
     */
    textProvidedByLawfirm?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PutDocumentRequestClientDocReqEnum {
    ACK = 'ACK',
    NONE = 'NONE',
    NOTARY = 'NOTARY',
    SIGNATURE = 'SIGNATURE'
}
/**
    * @export
    * @enum {string}
    */
export enum PutDocumentRequestDocTypeEnum {
    ENGAGEMENTLETTER = 'ENGAGEMENT_LETTER',
    OTHERDOCUMENT = 'OTHER_DOCUMENT',
    OTHERIMAGE = 'OTHER_IMAGE'
}

/**
 * 
 * @export
 * @interface ReferralContact
 */
export interface ReferralContact {
    /**
     * 
     * @type {string}
     * @memberof ReferralContact
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof ReferralContact
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof ReferralContact
     */
    lastName?: string;
}
/**
 * 
 * @export
 * @interface ReferralContactStatus
 */
export interface ReferralContactStatus {
    /**
     * 
     * @type {string}
     * @memberof ReferralContactStatus
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof ReferralContactStatus
     */
    errorType?: ReferralContactStatusErrorTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ReferralContactStatus
     */
    successful?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ReferralContactStatusErrorTypeEnum {
    EMAILALREADYEXISTS = 'EMAIL_ALREADY_EXISTS',
    EMAILNOTSENT = 'EMAIL_NOT_SENT',
    INVALIDEMAIL = 'INVALID_EMAIL'
}

/**
 * 
 * @export
 * @interface ReferralResponse
 */
export interface ReferralResponse {
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    caseId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReferralResponse
     */
    caseResolved?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralCreditStatus?: ReferralResponseReferralCreditStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralCreditType?: ReferralResponseReferralCreditTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ReferralResponse
     */
    referralCreditValue?: number;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralEvent?: ReferralResponseReferralEventEnum;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralExpirationDate?: string;
    /**
     * 
     * @type {number}
     * @memberof ReferralResponse
     */
    referralId?: number;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralPaymentStatus?: ReferralResponseReferralPaymentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ReferralResponse
     */
    referralSourceType?: ReferralResponseReferralSourceTypeEnum;
    /**
     * 
     * @type {UserDetails}
     * @memberof ReferralResponse
     */
    referredUser?: UserDetails;
}

/**
    * @export
    * @enum {string}
    */
export enum ReferralResponseReferralCreditStatusEnum {
    APPLIED = 'APPLIED',
    CASECANCELLED = 'CASE_CANCELLED',
    CONFIRMED = 'CONFIRMED',
    NOTIFIED = 'NOTIFIED',
    SAVED = 'SAVED',
    SUPERSEDED = 'SUPERSEDED'
}
/**
    * @export
    * @enum {string}
    */
export enum ReferralResponseReferralCreditTypeEnum {
    CENTSVALUE = 'CENTS_VALUE',
    NOCREDIT = 'NO_CREDIT',
    PERCENTAGEDISCOUNT = 'PERCENTAGE_DISCOUNT'
}
/**
    * @export
    * @enum {string}
    */
export enum ReferralResponseReferralEventEnum {
    CASEBOOKING = 'CASE_BOOKING',
    CASEMATCH = 'CASE_MATCH',
    INVITE = 'INVITE',
    REGISTRATION = 'REGISTRATION'
}
/**
    * @export
    * @enum {string}
    */
export enum ReferralResponseReferralPaymentStatusEnum {
    ERROR = 'ERROR',
    NONE = 'NONE',
    PAIDOUT = 'PAID_OUT',
    PENDINGACCOUNTVERIFICATION = 'PENDING_ACCOUNT_VERIFICATION',
    PENDINGCASERESOLUTION = 'PENDING_CASE_RESOLUTION'
}
/**
    * @export
    * @enum {string}
    */
export enum ReferralResponseReferralSourceTypeEnum {
    BILLBOARDS = 'BILLBOARDS',
    CHECKOUTCODE = 'CHECKOUT_CODE',
    DMVCOM = 'DMV_COM',
    DMVORG = 'DMV_ORG',
    DWA = 'DWA',
    FACEBOOK = 'FACEBOOK',
    FRIENDORFAMILY = 'FRIEND_OR_FAMILY',
    GOOGLESEARCH = 'GOOGLE_SEARCH',
    INFLUENCERAFFILIATE = 'INFLUENCER_AFFILIATE',
    KICKBACKAPP = 'KICKBACK_APP',
    OTHER = 'OTHER',
    RADIO = 'RADIO',
    REDDIT = 'REDDIT',
    THESMOKINGTIRE = 'THE_SMOKING_TIRE',
    UNKNOWN = 'UNKNOWN',
    VINWIKI = 'VINWIKI',
    YOUTUBEAD = 'YOUTUBE_AD'
}

/**
 * 
 * @export
 * @interface ReferralResponseByUser
 */
export interface ReferralResponseByUser {
    /**
     * 
     * @type {string}
     * @memberof ReferralResponseByUser
     */
    latestCreditStatus?: ReferralResponseByUserLatestCreditStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ReferralResponseByUser
     */
    refereeUserId?: number;
    /**
     * 
     * @type {Array<ReferralResponse>}
     * @memberof ReferralResponseByUser
     */
    referrals?: Array<ReferralResponse>;
}

/**
    * @export
    * @enum {string}
    */
export enum ReferralResponseByUserLatestCreditStatusEnum {
    APPLIED = 'APPLIED',
    CASECANCELLED = 'CASE_CANCELLED',
    CONFIRMED = 'CONFIRMED',
    NOTIFIED = 'NOTIFIED',
    SAVED = 'SAVED',
    SUPERSEDED = 'SUPERSEDED'
}

/**
 * 
 * @export
 * @interface RefundCasePaymentRequest
 */
export interface RefundCasePaymentRequest {
    /**
     * 
     * @type {number}
     * @memberof RefundCasePaymentRequest
     */
    refundAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof RefundCasePaymentRequest
     */
    refundNote?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RefundCasePaymentRequest
     */
    refundOTRFees?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RefundCasePaymentRequest
     */
    refundReasonType?: RefundCasePaymentRequestRefundReasonTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof RefundCasePaymentRequest
     */
    reverseLawfirmPayout?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum RefundCasePaymentRequestRefundReasonTypeEnum {
    CANCELATION = 'CANCELATION',
    CLIENTDISPUTEDCHARGE = 'CLIENT_DISPUTED_CHARGE',
    DUPLICATECASE = 'DUPLICATE_CASE',
    LOSTCASE = 'LOST_CASE',
    OTHER = 'OTHER'
}

/**
 * 
 * @export
 * @interface RefundLawfirmFeeRequest
 */
export interface RefundLawfirmFeeRequest {
    /**
     * 
     * @type {number}
     * @memberof RefundLawfirmFeeRequest
     */
    otrRefundAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RefundLawfirmFeeRequest
     */
    overrideRefundOwner?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RefundLawfirmFeeRequest
     */
    refundAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof RefundLawfirmFeeRequest
     */
    refundNote?: string;
    /**
     * 
     * @type {string}
     * @memberof RefundLawfirmFeeRequest
     */
    refundReason?: RefundLawfirmFeeRequestRefundReasonEnum;
    /**
     * 
     * @type {number}
     * @memberof RefundLawfirmFeeRequest
     */
    stripeRefundAmount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum RefundLawfirmFeeRequestRefundReasonEnum {
    CANCELATION = 'CANCELATION',
    CLIENTDISPUTEDCHARGE = 'CLIENT_DISPUTED_CHARGE',
    DUPLICATECASE = 'DUPLICATE_CASE',
    LOSTCASE = 'LOST_CASE',
    OTHER = 'OTHER'
}

/**
 * 
 * @export
 * @interface RegisterNewUserRequest
 */
export interface RegisterNewUserRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterNewUserRequest
     */
    clientType?: RegisterNewUserRequestClientTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RegisterNewUserRequest
     */
    fingerPrintId?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterNewUserRequest
     */
    httpReferrer?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterNewUserRequest
     */
    isAutoLogin?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegisterNewUserRequest
     */
    otherNote?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterNewUserRequest
     */
    referralCode?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RegisterNewUserRequest
     */
    referralSourceData?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof RegisterNewUserRequest
     */
    roleType?: RegisterNewUserRequestRoleTypeEnum;
    /**
     * 
     * @type {NewUser}
     * @memberof RegisterNewUserRequest
     */
    user?: NewUser;
    /**
     * 
     * @type {number}
     * @memberof RegisterNewUserRequest
     */
    userReferralSourceTypeId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum RegisterNewUserRequestClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum RegisterNewUserRequestRoleTypeEnum {
    ADMIN = 'ADMIN',
    DEFENDANT = 'DEFENDANT',
    LAWYER = 'LAWYER',
    PARTNER = 'PARTNER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface RegisterNewUserResponse
 */
export interface RegisterNewUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof RegisterNewUserResponse
     */
    newAccount?: boolean;
    /**
     * 
     * @type {NewUserResponse}
     * @memberof RegisterNewUserResponse
     */
    user?: NewUserResponse;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterNewUserResponse
     */
    userLoggedIn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterNewUserResponse
     */
    userRememberMeAuthenticated?: boolean;
}
/**
 * 
 * @export
 * @interface RemoveCoverageRequest
 */
export interface RemoveCoverageRequest {
    /**
     * 
     * @type {Array<CoverageToRemove>}
     * @memberof RemoveCoverageRequest
     */
    coverage?: Array<CoverageToRemove>;
}
/**
 * 
 * @export
 * @interface RemoveLawfirmSurchargeRequest
 */
export interface RemoveLawfirmSurchargeRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof RemoveLawfirmSurchargeRequest
     */
    surchargeIds?: Array<number>;
}
/**
 * 
 * @export
 * @interface ReplyToReviewRequest
 */
export interface ReplyToReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof ReplyToReviewRequest
     */
    copy?: string;
    /**
     * 
     * @type {number}
     * @memberof ReplyToReviewRequest
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface ReplyToTicketRequest
 */
export interface ReplyToTicketRequest {
    /**
     * 
     * @type {string}
     * @memberof ReplyToTicketRequest
     */
    htmlReply?: string;
    /**
     * 
     * @type {string}
     * @memberof ReplyToTicketRequest
     */
    newTicketStatus?: ReplyToTicketRequestNewTicketStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReplyToTicketRequestNewTicketStatusEnum {
    CLOSED = 'CLOSED',
    OPEN = 'OPEN',
    PENDING = 'PENDING',
    PENDINGONEWEEK = 'PENDING_ONE_WEEK',
    PENDINGTWODAYS = 'PENDING_TWO_DAYS',
    QUEUEDFORAUTOMATION = 'QUEUED_FOR_AUTOMATION',
    RESOLVED = 'RESOLVED',
    UNKNOWN = 'UNKNOWN',
    WAITINGONATTORNEY = 'WAITING_ON_ATTORNEY',
    WAITINGONCUSTOMER = 'WAITING_ON_CUSTOMER',
    WAITINGONOTR = 'WAITING_ON_OTR',
    WAITINGONTHIRDPARTY = 'WAITING_ON_THIRD_PARTY'
}

/**
 * 
 * @export
 * @interface RescheduleTaskRequest
 */
export interface RescheduleTaskRequest {
    /**
     * 
     * @type {string}
     * @memberof RescheduleTaskRequest
     */
    runAtDateUtc?: string;
}
/**
 * 
 * @export
 * @interface ResetFeeForLawfirmModel
 */
export interface ResetFeeForLawfirmModel {
    /**
     * 
     * @type {number}
     * @memberof ResetFeeForLawfirmModel
     */
    courtId?: number;
}
/**
 * 
 * @export
 * @interface ResetFeesForLawfirmRequest
 */
export interface ResetFeesForLawfirmRequest {
    /**
     * 
     * @type {Array<ResetViolationModel>}
     * @memberof ResetFeesForLawfirmRequest
     */
    models?: Array<ResetViolationModel>;
}
/**
 * 
 * @export
 * @interface ResetFeesForLawfirmResponse
 */
export interface ResetFeesForLawfirmResponse {
    /**
     * 
     * @type {Array<ResetFeeForLawfirmModel>}
     * @memberof ResetFeesForLawfirmResponse
     */
    models?: Array<ResetFeeForLawfirmModel>;
}
/**
 * 
 * @export
 * @interface ResetUserPasswordRequest
 */
export interface ResetUserPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetUserPasswordRequest
     */
    newPasswordPlainText?: string;
    /**
     * 
     * @type {number}
     * @memberof ResetUserPasswordRequest
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface ResetViolationModel
 */
export interface ResetViolationModel {
    /**
     * 
     * @type {string}
     * @memberof ResetViolationModel
     */
    violationClass?: ResetViolationModelViolationClassEnum;
    /**
     * 
     * @type {number}
     * @memberof ResetViolationModel
     */
    violationId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ResetViolationModelViolationClassEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface Results
 */
export interface Results {
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof Results
     */
    resultSet?: Array<{ [key: string]: object; }>;
}
/**
 * 
 * @export
 * @interface ReverseLawfirmPayoutRequest
 */
export interface ReverseLawfirmPayoutRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ReverseLawfirmPayoutRequest
     */
    overrideRefundOwner?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReverseLawfirmPayoutRequest
     */
    reversalAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof ReverseLawfirmPayoutRequest
     */
    reversalNote?: string;
    /**
     * 
     * @type {string}
     * @memberof ReverseLawfirmPayoutRequest
     */
    reversalReason?: ReverseLawfirmPayoutRequestReversalReasonEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReverseLawfirmPayoutRequestReversalReasonEnum {
    CANCELATION = 'CANCELATION',
    CLIENTDISPUTEDCHARGE = 'CLIENT_DISPUTED_CHARGE',
    DUPLICATECASE = 'DUPLICATE_CASE',
    LOSTCASE = 'LOST_CASE',
    OTHER = 'OTHER'
}

/**
 * 
 * @export
 * @interface ReviewCommentModel
 */
export interface ReviewCommentModel {
    /**
     * 
     * @type {string}
     * @memberof ReviewCommentModel
     */
    authorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewCommentModel
     */
    commentDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewCommentModel
     */
    copy?: string;
    /**
     * 
     * @type {number}
     * @memberof ReviewCommentModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewCommentModel
     */
    profilePictureUrl?: string;
}
/**
 * 
 * @export
 * @interface ReviewRatingModel
 */
export interface ReviewRatingModel {
    /**
     * 
     * @type {number}
     * @memberof ReviewRatingModel
     */
    communicationRating?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewRatingModel
     */
    outcomeRating?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewRatingModel
     */
    overallRating?: number;
}
/**
 * 
 * @export
 * @interface ReviewVoteAggregateModel
 */
export interface ReviewVoteAggregateModel {
    /**
     * 
     * @type {number}
     * @memberof ReviewVoteAggregateModel
     */
    helpfulCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewVoteAggregateModel
     */
    notHelpfulCount?: number;
}
/**
 * 
 * @export
 * @interface SNSNotificationRequest
 */
export interface SNSNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof SNSNotificationRequest
     */
    Message?: string;
    /**
     * 
     * @type {string}
     * @memberof SNSNotificationRequest
     */
    SubscribeURL?: string;
    /**
     * 
     * @type {string}
     * @memberof SNSNotificationRequest
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof SNSNotificationRequest
     */
    UnsubscribeURL?: string;
}
/**
 * 
 * @export
 * @interface SSLCertificateResponse
 */
export interface SSLCertificateResponse {
    /**
     * 
     * @type {string}
     * @memberof SSLCertificateResponse
     */
    rawPublicCert?: string;
}
/**
 * 
 * @export
 * @interface SaveCaseNotesRequest
 */
export interface SaveCaseNotesRequest {
    /**
     * 
     * @type {CaseNotesDomain}
     * @memberof SaveCaseNotesRequest
     */
    caseNotes?: CaseNotesDomain;
}
/**
 * 
 * @export
 * @interface SaveLawfirmSurchargeModel
 */
export interface SaveLawfirmSurchargeModel {
    /**
     * 
     * @type {string}
     * @memberof SaveLawfirmSurchargeModel
     */
    featureType?: SaveLawfirmSurchargeModelFeatureTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SaveLawfirmSurchargeModel
     */
    feeType?: SaveLawfirmSurchargeModelFeeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SaveLawfirmSurchargeModel
     */
    feeValue?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SaveLawfirmSurchargeModel
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SaveLawfirmSurchargeModel
     */
    refundEligibility?: SaveLawfirmSurchargeModelRefundEligibilityEnum;
    /**
     * 
     * @type {number}
     * @memberof SaveLawfirmSurchargeModel
     */
    surchargeId?: number;
    /**
     * 
     * @type {string}
     * @memberof SaveLawfirmSurchargeModel
     */
    surchargeType?: SaveLawfirmSurchargeModelSurchargeTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SaveLawfirmSurchargeModelFeatureTypeEnum {
    BLACKBOX = 'BLACK_BOX',
    STATEPAGE = 'STATE_PAGE',
    STOREFRONT = 'STOREFRONT'
}
/**
    * @export
    * @enum {string}
    */
export enum SaveLawfirmSurchargeModelFeeTypeEnum {
    FLATFEEINCENTS = 'FLAT_FEE_IN_CENTS',
    FORMULA = 'FORMULA',
    PERCENT = 'PERCENT'
}
/**
    * @export
    * @enum {string}
    */
export enum SaveLawfirmSurchargeModelRefundEligibilityEnum {
    DEFAULT = 'DEFAULT',
    NONREFUNDABLE = 'NON_REFUNDABLE',
    SURCHARGEONLY = 'SURCHARGE_ONLY'
}
/**
    * @export
    * @enum {string}
    */
export enum SaveLawfirmSurchargeModelSurchargeTypeEnum {
    CDL = 'CDL',
    FAILURETOAPPEAR = 'FAILURE_TO_APPEAR',
    LATE = 'LATE',
    MULTIPLEVIOLATIONS = 'MULTIPLE_VIOLATIONS',
    OUTOFSTATE = 'OUT_OF_STATE',
    SHORTNOTICE = 'SHORT_NOTICE',
    WARRANT = 'WARRANT'
}

/**
 * 
 * @export
 * @interface SaveLawfirmSurchargesRequest
 */
export interface SaveLawfirmSurchargesRequest {
    /**
     * 
     * @type {Array<SaveLawfirmSurchargeModel>}
     * @memberof SaveLawfirmSurchargesRequest
     */
    surcharges?: Array<SaveLawfirmSurchargeModel>;
}
/**
 * 
 * @export
 * @interface SaveLawyerLeadRequest
 */
export interface SaveLawyerLeadRequest {
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    leadProvidedSource?: SaveLawyerLeadRequestLeadProvidedSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLeadRequest
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SaveLawyerLeadRequestLeadProvidedSourceEnum {
    DIRECTMAIL = 'DIRECT_MAIL',
    EMAILAD = 'EMAIL_AD',
    GOOGLEAD = 'GOOGLE_AD',
    NMA = 'NMA',
    OTHER = 'OTHER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface SaveLawyerLicenseModel
 */
export interface SaveLawyerLicenseModel {
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLicenseModel
     */
    barLicenseIssueDate?: string;
    /**
     * 
     * @type {number}
     * @memberof SaveLawyerLicenseModel
     */
    lawyerLicenseId?: number;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLicenseModel
     */
    regionCode?: SaveLawyerLicenseModelRegionCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerLicenseModel
     */
    type?: SaveLawyerLicenseModelTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SaveLawyerLicenseModelRegionCodeEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}
/**
    * @export
    * @enum {string}
    */
export enum SaveLawyerLicenseModelTypeEnum {
    BAR = 'BAR'
}

/**
 * 
 * @export
 * @interface SaveLawyerLicensesRequest
 */
export interface SaveLawyerLicensesRequest {
    /**
     * 
     * @type {Array<SaveLawyerLicenseModel>}
     * @memberof SaveLawyerLicensesRequest
     */
    licenses?: Array<SaveLawyerLicenseModel>;
}
/**
 * 
 * @export
 * @interface SaveLawyerRequest
 */
export interface SaveLawyerRequest {
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerRequest
     */
    jobTitle?: SaveLawyerRequestJobTitleEnum;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerRequest
     */
    lawSchool?: string;
    /**
     * 
     * @type {number}
     * @memberof SaveLawyerRequest
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerRequest
     */
    licensedDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SaveLawyerRequest
     */
    otherJobTitle?: string;
    /**
     * 
     * @type {number}
     * @memberof SaveLawyerRequest
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SaveLawyerRequestJobTitleEnum {
    ACCOUNTANT = 'ACCOUNTANT',
    ATTORNEY = 'ATTORNEY',
    ATTORNEYASSOCIATE = 'ATTORNEY_ASSOCIATE',
    ATTORNEYCOUNSEL = 'ATTORNEY_COUNSEL',
    ATTORNEYMANAGINGPARTNER = 'ATTORNEY_MANAGING_PARTNER',
    ATTORNEYPARTNER = 'ATTORNEY_PARTNER',
    ATTORNEYSTAFF = 'ATTORNEY_STAFF',
    CUSTOMERSERVICEREP = 'CUSTOMER_SERVICE_REP',
    LEGALASSISTANT = 'LEGAL_ASSISTANT',
    LEGALINTERN = 'LEGAL_INTERN',
    LEGALSECRETARY = 'LEGAL_SECRETARY',
    OTHER = 'OTHER',
    PARALEGAL = 'PARALEGAL'
}

/**
 * 
 * @export
 * @interface ScheduleNewPaymentRequest
 */
export interface ScheduleNewPaymentRequest {
    /**
     * 
     * @type {number}
     * @memberof ScheduleNewPaymentRequest
     */
    baseFeeInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleNewPaymentRequest
     */
    chargeRunAtDate?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleNewPaymentRequest
     */
    lawfirmReferralCodeAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleNewPaymentRequest
     */
    otrMarketingFee?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleNewPaymentRequest
     */
    otrReferralCodeAdjustment?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleNewPaymentRequest
     */
    recipient?: ScheduleNewPaymentRequestRecipientEnum;
    /**
     * 
     * @type {string}
     * @memberof ScheduleNewPaymentRequest
     */
    transactionMethod?: ScheduleNewPaymentRequestTransactionMethodEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ScheduleNewPaymentRequestRecipientEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum ScheduleNewPaymentRequestTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface ScheduledTaskGetResponse
 */
export interface ScheduledTaskGetResponse {
    /**
     * 
     * @type {Array<ScheduledTaskResponse>}
     * @memberof ScheduledTaskGetResponse
     */
    tasks?: Array<ScheduledTaskResponse>;
}
/**
 * 
 * @export
 * @interface ScheduledTaskResponse
 */
export interface ScheduledTaskResponse {
    /**
     * 
     * @type {string}
     * @memberof ScheduledTaskResponse
     */
    completionDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTaskResponse
     */
    errorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTaskResponse
     */
    runAtDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTaskResponse
     */
    taskId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTaskResponse
     */
    taskReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTaskResponse
     */
    taskStatus?: ScheduledTaskResponseTaskStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ScheduledTaskResponse
     */
    taskType?: ScheduledTaskResponseTaskTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ScheduledTaskResponseTaskStatusEnum {
    CANCELLED = 'CANCELLED',
    COMPLETE = 'COMPLETE',
    ERROR = 'ERROR',
    INPROGRESS = 'IN_PROGRESS',
    NOOPERATION = 'NO_OPERATION',
    QUEUED = 'QUEUED'
}
/**
    * @export
    * @enum {string}
    */
export enum ScheduledTaskResponseTaskTypeEnum {
    EMAILFOLLOWUPTASK = 'EMAIL_FOLLOW_UP_TASK',
    PAYINSTALLMENTTASK = 'PAY_INSTALLMENT_TASK',
    PDFTOIMAGETASK = 'PDF_TO_IMAGE_TASK',
    TICKETREVIEWTASK = 'TICKET_REVIEW_TASK',
    VALIDATESUBSCRIPTIONTASK = 'VALIDATE_SUBSCRIPTION_TASK'
}

/**
 * 
 * @export
 * @interface SendConsolidatedEmailToUser
 */
export interface SendConsolidatedEmailToUser {
    /**
     * 
     * @type {boolean}
     * @memberof SendConsolidatedEmailToUser
     */
    bypassDedupe?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof SendConsolidatedEmailToUser
     */
    citationIds?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof SendConsolidatedEmailToUser
     */
    emailTemplateId?: SendConsolidatedEmailToUserEmailTemplateIdEnum;
    /**
     * 
     * @type {string}
     * @memberof SendConsolidatedEmailToUser
     */
    fromEmailAddress?: string;
    /**
     * 
     * @type {number}
     * @memberof SendConsolidatedEmailToUser
     */
    userIdToContact?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SendConsolidatedEmailToUserEmailTemplateIdEnum {
    AFTERNOONHELLO2 = 'AFTERNOON_HELLO_2',
    ATTICUSATTORNEYCONTACT1 = 'ATTICUS_ATTORNEY_CONTACT_1',
    CAMERATICKETNMV = 'CAMERA_TICKET_NMV',
    CASECANCELLEDBYUSER = 'CASE_CANCELLED_BY_USER',
    CASECANCELLEDDUPLICATE = 'CASE_CANCELLED_DUPLICATE',
    CASECANCELLEDNMV = 'CASE_CANCELLED_NMV',
    CASECANCELLEDNONPAYMENT = 'CASE_CANCELLED_NON_PAYMENT',
    CASECANCELLEDNOLAWFIRM = 'CASE_CANCELLED_NO_LAWFIRM',
    CASECANCELLEDOVERDUE = 'CASE_CANCELLED_OVERDUE',
    CASECANCELLEDTOOSHORTNOTICE = 'CASE_CANCELLED_TOO_SHORT_NOTICE',
    CASUALFIRSTV1 = 'CASUAL_FIRST_V1',
    CASUALSECONDV1 = 'CASUAL_SECOND_V1',
    FRIDAYINTRO = 'FRIDAY_INTRO',
    INVALIDIMAGEUPLOAD1 = 'INVALID_IMAGE_UPLOAD_1',
    LAWFIRMCONTACT10V1 = 'LAWFIRM_CONTACT_10_V1',
    LAWFIRMCONTACT1V1 = 'LAWFIRM_CONTACT_1_V1',
    LAWFIRMCONTACT2V1 = 'LAWFIRM_CONTACT_2_V1',
    LAWFIRMCONTACT3V1 = 'LAWFIRM_CONTACT_3_V1',
    LAWFIRMCONTACT4V1 = 'LAWFIRM_CONTACT_4_V1',
    LAWFIRMCONTACT5V1 = 'LAWFIRM_CONTACT_5_V1',
    LAWFIRMCONTACT6V1 = 'LAWFIRM_CONTACT_6_V1',
    LAWFIRMCONTACT7V1 = 'LAWFIRM_CONTACT_7_V1',
    LAWFIRMCONTACT8V1 = 'LAWFIRM_CONTACT_8_V1',
    LAWFIRMCONTACT9V1 = 'LAWFIRM_CONTACT_9_V1',
    LAWYERPOSTCOURTREMINDER = 'LAWYER_POST_COURT_REMINDER',
    NOCOVERAGEAVAILABLE = 'NO_COVERAGE_AVAILABLE',
    NOCOVERAGEAVAILABLEMISSINGCOURT = 'NO_COVERAGE_AVAILABLE_MISSING_COURT',
    PARKINGTICKET = 'PARKING_TICKET',
    POSTWIN = 'POST_WIN',
    POSTWINLASTASK = 'POST_WIN_LAST_ASK',
    POSTWINV2 = 'POST_WIN_V2',
    SUNDAYAFTERNOONHELLO = 'SUNDAY_AFTERNOON_HELLO',
    TICKETDUEWA = 'TICKET_DUE_WA',
    TICKETEVALWITHCITATION = 'TICKET_EVAL_WITH_CITATION',
    TICKETEVALWITHCITATION2NDFOLLOWUP = 'TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP',
    TICKETEVALWITHCITATIONCLOSEOUT = 'TICKET_EVAL_WITH_CITATION_CLOSE_OUT'
}

/**
 * 
 * @export
 * @interface SendDirectCheckResponse
 */
export interface SendDirectCheckResponse {
    /**
     * 
     * @type {string}
     * @memberof SendDirectCheckResponse
     */
    carrier?: string;
    /**
     * 
     * @type {number}
     * @memberof SendDirectCheckResponse
     */
    checkAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof SendDirectCheckResponse
     */
    estimatedDeliveryDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SendDirectCheckResponse
     */
    externalCheckId?: string;
    /**
     * 
     * @type {string}
     * @memberof SendDirectCheckResponse
     */
    sendDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SendDirectCheckResponse
     */
    trackingNumber?: string;
}
/**
 * 
 * @export
 * @interface SendDirectMailResponse
 */
export interface SendDirectMailResponse {
    /**
     * 
     * @type {DirectMailContact}
     * @memberof SendDirectMailResponse
     */
    sentMail?: DirectMailContact;
}
/**
 * 
 * @export
 * @interface SendDirectReferralCheckRequest
 */
export interface SendDirectReferralCheckRequest {
    /**
     * 
     * @type {LobMailingAddress}
     * @memberof SendDirectReferralCheckRequest
     */
    address?: LobMailingAddress;
    /**
     * 
     * @type {string}
     * @memberof SendDirectReferralCheckRequest
     */
    fullNameOverride?: string;
}
/**
 * 
 * @export
 * @interface SendEmailToUserRequest
 */
export interface SendEmailToUserRequest {
    /**
     * 
     * @type {string}
     * @memberof SendEmailToUserRequest
     */
    actionType?: string;
    /**
     * 
     * @type {number}
     * @memberof SendEmailToUserRequest
     */
    agentId?: number;
    /**
     * 
     * @type {number}
     * @memberof SendEmailToUserRequest
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof SendEmailToUserRequest
     */
    emailTemplateId?: SendEmailToUserRequestEmailTemplateIdEnum;
    /**
     * 
     * @type {string}
     * @memberof SendEmailToUserRequest
     */
    fromEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof SendEmailToUserRequest
     */
    reviewPlatform?: SendEmailToUserRequestReviewPlatformEnum;
    /**
     * 
     * @type {number}
     * @memberof SendEmailToUserRequest
     */
    userIdToContact?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SendEmailToUserRequestEmailTemplateIdEnum {
    AFTERNOONHELLO2 = 'AFTERNOON_HELLO_2',
    ATTICUSATTORNEYCONTACT1 = 'ATTICUS_ATTORNEY_CONTACT_1',
    CAMERATICKETNMV = 'CAMERA_TICKET_NMV',
    CASECANCELLEDBYUSER = 'CASE_CANCELLED_BY_USER',
    CASECANCELLEDDUPLICATE = 'CASE_CANCELLED_DUPLICATE',
    CASECANCELLEDNMV = 'CASE_CANCELLED_NMV',
    CASECANCELLEDNONPAYMENT = 'CASE_CANCELLED_NON_PAYMENT',
    CASECANCELLEDNOLAWFIRM = 'CASE_CANCELLED_NO_LAWFIRM',
    CASECANCELLEDOVERDUE = 'CASE_CANCELLED_OVERDUE',
    CASECANCELLEDTOOSHORTNOTICE = 'CASE_CANCELLED_TOO_SHORT_NOTICE',
    CASUALFIRSTV1 = 'CASUAL_FIRST_V1',
    CASUALSECONDV1 = 'CASUAL_SECOND_V1',
    FRIDAYINTRO = 'FRIDAY_INTRO',
    INVALIDIMAGEUPLOAD1 = 'INVALID_IMAGE_UPLOAD_1',
    LAWFIRMCONTACT10V1 = 'LAWFIRM_CONTACT_10_V1',
    LAWFIRMCONTACT1V1 = 'LAWFIRM_CONTACT_1_V1',
    LAWFIRMCONTACT2V1 = 'LAWFIRM_CONTACT_2_V1',
    LAWFIRMCONTACT3V1 = 'LAWFIRM_CONTACT_3_V1',
    LAWFIRMCONTACT4V1 = 'LAWFIRM_CONTACT_4_V1',
    LAWFIRMCONTACT5V1 = 'LAWFIRM_CONTACT_5_V1',
    LAWFIRMCONTACT6V1 = 'LAWFIRM_CONTACT_6_V1',
    LAWFIRMCONTACT7V1 = 'LAWFIRM_CONTACT_7_V1',
    LAWFIRMCONTACT8V1 = 'LAWFIRM_CONTACT_8_V1',
    LAWFIRMCONTACT9V1 = 'LAWFIRM_CONTACT_9_V1',
    LAWYERPOSTCOURTREMINDER = 'LAWYER_POST_COURT_REMINDER',
    NOCOVERAGEAVAILABLE = 'NO_COVERAGE_AVAILABLE',
    NOCOVERAGEAVAILABLEMISSINGCOURT = 'NO_COVERAGE_AVAILABLE_MISSING_COURT',
    PARKINGTICKET = 'PARKING_TICKET',
    POSTWIN = 'POST_WIN',
    POSTWINLASTASK = 'POST_WIN_LAST_ASK',
    POSTWINV2 = 'POST_WIN_V2',
    SUNDAYAFTERNOONHELLO = 'SUNDAY_AFTERNOON_HELLO',
    TICKETDUEWA = 'TICKET_DUE_WA',
    TICKETEVALWITHCITATION = 'TICKET_EVAL_WITH_CITATION',
    TICKETEVALWITHCITATION2NDFOLLOWUP = 'TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP',
    TICKETEVALWITHCITATIONCLOSEOUT = 'TICKET_EVAL_WITH_CITATION_CLOSE_OUT'
}
/**
    * @export
    * @enum {string}
    */
export enum SendEmailToUserRequestReviewPlatformEnum {
    FACEBOOK = 'FACEBOOK',
    GOOGLEMYBUSINESS = 'GOOGLE_MY_BUSINESS',
    GOOGLEPLAYSTORE = 'GOOGLE_PLAY_STORE',
    HIGHYA = 'HIGHYA',
    IOSAPPSTORE = 'IOS_APP_STORE',
    REVIEWSIO = 'REVIEWS_IO'
}

/**
 * 
 * @export
 * @interface SendEmailToUsersRequest
 */
export interface SendEmailToUsersRequest {
    /**
     * 
     * @type {string}
     * @memberof SendEmailToUsersRequest
     */
    actionType?: string;
    /**
     * 
     * @type {string}
     * @memberof SendEmailToUsersRequest
     */
    emailTemplateId?: SendEmailToUsersRequestEmailTemplateIdEnum;
    /**
     * 
     * @type {string}
     * @memberof SendEmailToUsersRequest
     */
    fromEmailAddress?: string;
    /**
     * 
     * @type {Array<UserToContact>}
     * @memberof SendEmailToUsersRequest
     */
    usersToContact?: Array<UserToContact>;
}

/**
    * @export
    * @enum {string}
    */
export enum SendEmailToUsersRequestEmailTemplateIdEnum {
    AFTERNOONHELLO2 = 'AFTERNOON_HELLO_2',
    ATTICUSATTORNEYCONTACT1 = 'ATTICUS_ATTORNEY_CONTACT_1',
    CAMERATICKETNMV = 'CAMERA_TICKET_NMV',
    CASECANCELLEDBYUSER = 'CASE_CANCELLED_BY_USER',
    CASECANCELLEDDUPLICATE = 'CASE_CANCELLED_DUPLICATE',
    CASECANCELLEDNMV = 'CASE_CANCELLED_NMV',
    CASECANCELLEDNONPAYMENT = 'CASE_CANCELLED_NON_PAYMENT',
    CASECANCELLEDNOLAWFIRM = 'CASE_CANCELLED_NO_LAWFIRM',
    CASECANCELLEDOVERDUE = 'CASE_CANCELLED_OVERDUE',
    CASECANCELLEDTOOSHORTNOTICE = 'CASE_CANCELLED_TOO_SHORT_NOTICE',
    CASUALFIRSTV1 = 'CASUAL_FIRST_V1',
    CASUALSECONDV1 = 'CASUAL_SECOND_V1',
    FRIDAYINTRO = 'FRIDAY_INTRO',
    INVALIDIMAGEUPLOAD1 = 'INVALID_IMAGE_UPLOAD_1',
    LAWFIRMCONTACT10V1 = 'LAWFIRM_CONTACT_10_V1',
    LAWFIRMCONTACT1V1 = 'LAWFIRM_CONTACT_1_V1',
    LAWFIRMCONTACT2V1 = 'LAWFIRM_CONTACT_2_V1',
    LAWFIRMCONTACT3V1 = 'LAWFIRM_CONTACT_3_V1',
    LAWFIRMCONTACT4V1 = 'LAWFIRM_CONTACT_4_V1',
    LAWFIRMCONTACT5V1 = 'LAWFIRM_CONTACT_5_V1',
    LAWFIRMCONTACT6V1 = 'LAWFIRM_CONTACT_6_V1',
    LAWFIRMCONTACT7V1 = 'LAWFIRM_CONTACT_7_V1',
    LAWFIRMCONTACT8V1 = 'LAWFIRM_CONTACT_8_V1',
    LAWFIRMCONTACT9V1 = 'LAWFIRM_CONTACT_9_V1',
    LAWYERPOSTCOURTREMINDER = 'LAWYER_POST_COURT_REMINDER',
    NOCOVERAGEAVAILABLE = 'NO_COVERAGE_AVAILABLE',
    NOCOVERAGEAVAILABLEMISSINGCOURT = 'NO_COVERAGE_AVAILABLE_MISSING_COURT',
    PARKINGTICKET = 'PARKING_TICKET',
    POSTWIN = 'POST_WIN',
    POSTWINLASTASK = 'POST_WIN_LAST_ASK',
    POSTWINV2 = 'POST_WIN_V2',
    SUNDAYAFTERNOONHELLO = 'SUNDAY_AFTERNOON_HELLO',
    TICKETDUEWA = 'TICKET_DUE_WA',
    TICKETEVALWITHCITATION = 'TICKET_EVAL_WITH_CITATION',
    TICKETEVALWITHCITATION2NDFOLLOWUP = 'TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP',
    TICKETEVALWITHCITATIONCLOSEOUT = 'TICKET_EVAL_WITH_CITATION_CLOSE_OUT'
}

/**
 * 
 * @export
 * @interface SendPayoutToLawfirmRequest
 */
export interface SendPayoutToLawfirmRequest {
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    dueDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof SendPayoutToLawfirmRequest
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof SendPayoutToLawfirmRequest
     */
    payoutAmountInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    sourceCasePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    sourceStripeChargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    transactionDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    transactionMethod?: SendPayoutToLawfirmRequestTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    transactionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPayoutToLawfirmRequest
     */
    transferGroup?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SendPayoutToLawfirmRequestTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface SendPayoutToLawfirmResponse
 */
export interface SendPayoutToLawfirmResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SendPayoutToLawfirmResponse
     */
    isSuccess?: boolean;
}
/**
 * 
 * @export
 * @interface SetCourtDateForCaseRequest
 */
export interface SetCourtDateForCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof SetCourtDateForCaseRequest
     */
    courtDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SetCourtDateForCaseRequest
     */
    sendNotificationEmailToClient?: boolean;
}
/**
 * 
 * @export
 * @interface SetLawfirmCaseDecisionRequest
 */
export interface SetLawfirmCaseDecisionRequest {
    /**
     * 
     * @type {string}
     * @memberof SetLawfirmCaseDecisionRequest
     */
    caseDecisionStatus?: SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof SetLawfirmCaseDecisionRequest
     */
    reason?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum {
    ACCEPTED = 'ACCEPTED',
    CREATED = 'CREATED',
    DECLINED = 'DECLINED',
    EXPIRED = 'EXPIRED',
    PENDING = 'PENDING',
    REMATCHED = 'REMATCHED',
    REMATCHEDREFERRAL = 'REMATCHED_REFERRAL'
}

/**
 * 
 * @export
 * @interface SetReferralSourceRequest
 */
export interface SetReferralSourceRequest {
    /**
     * 
     * @type {string}
     * @memberof SetReferralSourceRequest
     */
    clientType?: SetReferralSourceRequestClientTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof SetReferralSourceRequest
     */
    isFromAdvertisement?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SetReferralSourceRequest
     */
    otherNote?: string;
    /**
     * 
     * @type {string}
     * @memberof SetReferralSourceRequest
     */
    referralCode?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SetReferralSourceRequest
     */
    referralSourceData?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof SetReferralSourceRequest
     */
    referrerEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof SetReferralSourceRequest
     */
    referrerName?: string;
    /**
     * 
     * @type {number}
     * @memberof SetReferralSourceRequest
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof SetReferralSourceRequest
     */
    userReferralSourceTypeId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SetReferralSourceRequestClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface SignRecordingUrlRequest
 */
export interface SignRecordingUrlRequest {
    /**
     * 
     * @type {string}
     * @memberof SignRecordingUrlRequest
     */
    unsignedRecordingUrl?: string;
}
/**
 * 
 * @export
 * @interface SignRecordingUrlResponse
 */
export interface SignRecordingUrlResponse {
    /**
     * 
     * @type {string}
     * @memberof SignRecordingUrlResponse
     */
    presignedUrl?: string;
}
/**
 * 
 * @export
 * @interface SimpleCredentialsResponse
 */
export interface SimpleCredentialsResponse {
    /**
     * 
     * @type {string}
     * @memberof SimpleCredentialsResponse
     */
    accessKeyId?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleCredentialsResponse
     */
    secretKey?: string;
}
/**
 * 
 * @export
 * @interface SocialLoginRequest
 */
export interface SocialLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof SocialLoginRequest
     */
    clientType?: SocialLoginRequestClientTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SocialLoginRequest
     */
    fingerPrintId?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLoginRequest
     */
    httpReferrer?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLoginRequest
     */
    otherNote?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLoginRequest
     */
    referralCode?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SocialLoginRequest
     */
    referralSourceData?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof SocialLoginRequest
     */
    userAccessToken?: string;
    /**
     * 
     * @type {number}
     * @memberof SocialLoginRequest
     */
    userReferralSourceTypeId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SocialLoginRequestClientTypeEnum {
    ANDROID = 'ANDROID',
    DESKTOPWEBAPP = 'DESKTOP_WEBAPP',
    DMVGO = 'DMV_GO',
    DMVORG = 'DMV_ORG',
    FRESHDESK = 'FRESH_DESK',
    IOS = 'IOS',
    MOBILEWEBAPP = 'MOBILE_WEBAPP',
    OTRADMINCONSOLE = 'OTR_ADMIN_CONSOLE',
    OTRADMINCONSOLEDEVO = 'OTR_ADMIN_CONSOLE_DEVO',
    OTRADMINCONSOLELOCALHOST = 'OTR_ADMIN_CONSOLE_LOCALHOST',
    OTREXPLORER = 'OTR_EXPLORER',
    OTRLAWFIRMPORTAL = 'OTR_LAWFIRM_PORTAL',
    OTRLAWFIRMPORTALDEVO = 'OTR_LAWFIRM_PORTAL_DEVO',
    OTRLAWFIRMPORTALLOCALHOST = 'OTR_LAWFIRM_PORTAL_LOCALHOST',
    OTRWEBSITE = 'OTR_WEBSITE',
    OTRWEBSITEDEVO = 'OTR_WEBSITE_DEVO',
    OTRWEBSITELOCALHOST = 'OTR_WEBSITE_LOCALHOST',
    OTRWIDGET = 'OTR_WIDGET',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface SocialLoginResponse
 */
export interface SocialLoginResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SocialLoginResponse
     */
    newAccount?: boolean;
    /**
     * 
     * @type {SocialLoginUser}
     * @memberof SocialLoginResponse
     */
    user?: SocialLoginUser;
    /**
     * 
     * @type {boolean}
     * @memberof SocialLoginResponse
     */
    userLoggedIn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SocialLoginResponse
     */
    userRememberMeAuthenticated?: boolean;
}
/**
 * 
 * @export
 * @interface SocialLoginUser
 */
export interface SocialLoginUser {
    /**
     * 
     * @type {string}
     * @memberof SocialLoginUser
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLoginUser
     */
    firstname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SocialLoginUser
     */
    isEmailPrivate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SocialLoginUser
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SocialLoginUser
     */
    lastname?: string;
    /**
     * 
     * @type {number}
     * @memberof SocialLoginUser
     */
    paidCaseCount?: number;
    /**
     * 
     * @type {Array<SocialPhoneNumber>}
     * @memberof SocialLoginUser
     */
    phoneNumbers?: Array<SocialPhoneNumber>;
    /**
     * 
     * @type {Array<UserRoleDomain>}
     * @memberof SocialLoginUser
     */
    roles?: Array<UserRoleDomain>;
    /**
     * 
     * @type {number}
     * @memberof SocialLoginUser
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface SocialPhoneNumber
 */
export interface SocialPhoneNumber {
    /**
     * 
     * @type {Timestamp}
     * @memberof SocialPhoneNumber
     */
    creationDateUtc?: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof SocialPhoneNumber
     */
    lastUpdatedDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof SocialPhoneNumber
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialPhoneNumber
     */
    type?: SocialPhoneNumberTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SocialPhoneNumberTypeEnum {
    HOME = 'HOME',
    MOBILE = 'MOBILE',
    NOTSPECIFIED = 'NOT_SPECIFIED',
    OFFICE = 'OFFICE'
}

/**
 * 
 * @export
 * @interface SqlResponse
 */
export interface SqlResponse {
    /**
     * 
     * @type {Results}
     * @memberof SqlResponse
     */
    results?: Results;
}
/**
 * 
 * @export
 * @interface StripeAccountLinkDomain
 */
export interface StripeAccountLinkDomain {
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeAccountLinkDomain
     */
    created?: TimestampRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeAccountLinkDomain
     */
    expiresAt?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof StripeAccountLinkDomain
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface StripeApplicationFeeDomain
 */
export interface StripeApplicationFeeDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeApplicationFeeDomain
     */
    amountRefunded?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeApplicationFeeDomain
     */
    applicationFeeDateUtc?: TimestampRes;
    /**
     * 
     * @type {Array<StripeApplicationFeeRefundDomain>}
     * @memberof StripeApplicationFeeDomain
     */
    applicationFeeRefunds?: Array<StripeApplicationFeeRefundDomain>;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {number}
     * @memberof StripeApplicationFeeDomain
     */
    feeAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StripeApplicationFeeDomain
     */
    isFullyRefunded?: boolean;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeApplicationFeeDomain
     */
    lastVerifiedDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof StripeApplicationFeeDomain
     */
    refundCount?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeDomain
     */
    stripeApplicationFeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeDomain
     */
    stripeChargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeDomain
     */
    stripeDestinationAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeDomain
     */
    stripePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeDomain
     */
    stripePlatformAccountId?: string;
}
/**
 * 
 * @export
 * @interface StripeApplicationFeeRefundDomain
 */
export interface StripeApplicationFeeRefundDomain {
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeRefundDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeApplicationFeeRefundDomain
     */
    dateUtc?: TimestampRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeApplicationFeeRefundDomain
     */
    lastVerifiedDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof StripeApplicationFeeRefundDomain
     */
    refundAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeRefundDomain
     */
    stripeApplicationFeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeRefundDomain
     */
    stripeApplicationFeeRefundId?: string;
}
/**
 * 
 * @export
 * @interface StripeApplicationFeeRefundSyncResults
 */
export interface StripeApplicationFeeRefundSyncResults {
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripeApplicationFeeRefundSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeRefundSyncResults
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeRefundSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface StripeApplicationFeeSyncResults
 */
export interface StripeApplicationFeeSyncResults {
    /**
     * 
     * @type {Array<StripeApplicationFeeRefundSyncResults>}
     * @memberof StripeApplicationFeeSyncResults
     */
    feeRefunds?: Array<StripeApplicationFeeRefundSyncResults>;
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripeApplicationFeeSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeSyncResults
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeApplicationFeeSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface StripeCardDomain
 */
export interface StripeCardDomain {
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    addressLine1Check?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    addressZip?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    addressZipCheck?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    brand?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    cardId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    country?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeCardDomain
     */
    creationDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    cvcCheck?: string;
    /**
     * 
     * @type {number}
     * @memberof StripeCardDomain
     */
    expMonth?: number;
    /**
     * 
     * @type {number}
     * @memberof StripeCardDomain
     */
    expYear?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StripeCardDomain
     */
    isDefault?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeCardDomain
     */
    isExpired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    last4?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCardDomain
     */
    ownerFullName?: string;
}
/**
 * 
 * @export
 * @interface StripeChargeDomain
 */
export interface StripeChargeDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeChargeDomain
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof StripeChargeDomain
     */
    amountRefunded?: number;
    /**
     * 
     * @type {StripeApplicationFeeDomain}
     * @memberof StripeChargeDomain
     */
    applicationFee?: StripeApplicationFeeDomain;
    /**
     * 
     * @type {number}
     * @memberof StripeChargeDomain
     */
    applicationFeeAmount?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeChargeDomain
     */
    captureDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    destinationAccountId?: string;
    /**
     * 
     * @type {number}
     * @memberof StripeChargeDomain
     */
    destinationLawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    destinationLawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    disputeId?: string;
    /**
     * 
     * @type {Array<StripeDisputeDomain>}
     * @memberof StripeChargeDomain
     */
    disputes?: Array<StripeDisputeDomain>;
    /**
     * 
     * @type {boolean}
     * @memberof StripeChargeDomain
     */
    isExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeChargeDomain
     */
    isFullyRefunded?: boolean;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeChargeDomain
     */
    lastVerifiedDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    paymentSourceId?: string;
    /**
     * 
     * @type {number}
     * @memberof StripeChargeDomain
     */
    processingFee?: number;
    /**
     * 
     * @type {number}
     * @memberof StripeChargeDomain
     */
    refundCount?: number;
    /**
     * 
     * @type {number}
     * @memberof StripeChargeDomain
     */
    refundedProcessingFee?: number;
    /**
     * 
     * @type {Array<StripeRefundDomain>}
     * @memberof StripeChargeDomain
     */
    refunds?: Array<StripeRefundDomain>;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    stripeChargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    stripeCustomerId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeDomain
     */
    stripePlatformAccountId?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeChargeDomain
     */
    transactionDateUtc?: Timestamp;
    /**
     * 
     * @type {Array<StripeTransferDomain>}
     * @memberof StripeChargeDomain
     */
    transfers?: Array<StripeTransferDomain>;
}
/**
 * 
 * @export
 * @interface StripeChargeSyncResults
 */
export interface StripeChargeSyncResults {
    /**
     * 
     * @type {Array<StripeApplicationFeeSyncResults>}
     * @memberof StripeChargeSyncResults
     */
    applicationFees?: Array<StripeApplicationFeeSyncResults>;
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripeChargeSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeSyncResults
     */
    id?: string;
    /**
     * 
     * @type {Array<StripeRefundSyncResults>}
     * @memberof StripeChargeSyncResults
     */
    refunds?: Array<StripeRefundSyncResults>;
    /**
     * 
     * @type {Array<StripeTransferSyncResults>}
     * @memberof StripeChargeSyncResults
     */
    transfers?: Array<StripeTransferSyncResults>;
    /**
     * 
     * @type {string}
     * @memberof StripeChargeSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface StripeConnectedAccountDomain
 */
export interface StripeConnectedAccountDomain {
    /**
     * 
     * @type {string}
     * @memberof StripeConnectedAccountDomain
     */
    accountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeConnectedAccountDomain
     */
    accountType?: StripeConnectedAccountDomainAccountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StripeConnectedAccountDomain
     */
    businessName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StripeConnectedAccountDomain
     */
    chargesEnabled?: boolean;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeConnectedAccountDomain
     */
    connectedDateUtc?: TimestampRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeConnectedAccountDomain
     */
    creationDateUtc?: TimestampRes;
    /**
     * 
     * @type {boolean}
     * @memberof StripeConnectedAccountDomain
     */
    detailsSubmitted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StripeConnectedAccountDomain
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StripeConnectedAccountDomain
     */
    isDeprecated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeConnectedAccountDomain
     */
    payoutsEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StripeConnectedAccountDomain
     */
    stripePlatformAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeConnectedAccountDomain
     */
    stripePlatformName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StripeConnectedAccountDomainAccountTypeEnum {
    EXPRESS = 'EXPRESS',
    STANDARD = 'STANDARD'
}

/**
 * 
 * @export
 * @interface StripeCustomerAccountDomain
 */
export interface StripeCustomerAccountDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeCustomerAccountDomain
     */
    entityId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomerAccountDomain
     */
    entityType?: StripeCustomerAccountDomainEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomerAccountDomain
     */
    stripeCustomerAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomerAccountDomain
     */
    stripePlatformAccountId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StripeCustomerAccountDomainEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}

/**
 * 
 * @export
 * @interface StripeDisputeDomain
 */
export interface StripeDisputeDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    amountDisputed?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    cardBrand?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    cardFunding?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    caseStatus?: StripeDisputeDomainCaseStatusEnum;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof StripeDisputeDomain
     */
    clientTicket?: FreshDeskTicket;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    clientTicketId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeDisputeDomain
     */
    disputeDateUtc?: Timestamp;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    disputeFee?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeDisputeDomain
     */
    evidenceSubmittedDateUtc?: Timestamp;
    /**
     * 
     * @type {boolean}
     * @memberof StripeDisputeDomain
     */
    isAccountEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeDisputeDomain
     */
    isTransferReversed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof StripeDisputeDomain
     */
    lawfirmTicket?: FreshDeskTicket;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    lawfirmTicketId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    paymentRecipient?: StripeDisputeDomainPaymentRecipientEnum;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    reason?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeDisputeDomain
     */
    responseDueByDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    stripeChargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    stripeCustomerId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    stripeDisputeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    userFullName?: string;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum StripeDisputeDomainCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum StripeDisputeDomainPaymentRecipientEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}

/**
 * 
 * @export
 * @interface StripeFieldVerification
 */
export interface StripeFieldVerification {
    /**
     * 
     * @type {string}
     * @memberof StripeFieldVerification
     */
    dbValue?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeFieldVerification
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeFieldVerification
     */
    stripeValue?: string;
}
/**
 * 
 * @export
 * @interface StripePaymentDomain
 */
export interface StripePaymentDomain {
    /**
     * 
     * @type {number}
     * @memberof StripePaymentDomain
     */
    amountRefunded?: number;
    /**
     * 
     * @type {number}
     * @memberof StripePaymentDomain
     */
    createdByUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StripePaymentDomain
     */
    isFullyRefunded?: boolean;
    /**
     * 
     * @type {number}
     * @memberof StripePaymentDomain
     */
    paymentAmount?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripePaymentDomain
     */
    paymentDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof StripePaymentDomain
     */
    processingFee?: number;
    /**
     * 
     * @type {number}
     * @memberof StripePaymentDomain
     */
    refundCount?: number;
    /**
     * 
     * @type {Array<StripePaymentRefundDomain>}
     * @memberof StripePaymentDomain
     */
    refunds?: Array<StripePaymentRefundDomain>;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentDomain
     */
    sourceAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentDomain
     */
    sourceTransfer?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentDomain
     */
    stripeApplicationId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentDomain
     */
    stripePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentDomain
     */
    stripePlatformAccountId?: string;
}
/**
 * 
 * @export
 * @interface StripePaymentRefundDomain
 */
export interface StripePaymentRefundDomain {
    /**
     * 
     * @type {number}
     * @memberof StripePaymentRefundDomain
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundDomain
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundDomain
     */
    stripePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundDomain
     */
    stripePaymentRefundId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundDomain
     */
    stripePlatformAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundDomain
     */
    stripeSourceTransferReversalId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundDomain
     */
    stripeTransferReversalId?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripePaymentRefundDomain
     */
    transactionDateUtc?: TimestampRes;
}
/**
 * 
 * @export
 * @interface StripePaymentRefundSyncResults
 */
export interface StripePaymentRefundSyncResults {
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripePaymentRefundSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundSyncResults
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentRefundSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface StripePaymentSourceDomain
 */
export interface StripePaymentSourceDomain {
    /**
     * 
     * @type {string}
     * @memberof StripePaymentSourceDomain
     */
    country?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripePaymentSourceDomain
     */
    creationDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentSourceDomain
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StripePaymentSourceDomain
     */
    isDefault?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentSourceDomain
     */
    last4?: string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentSourceDomain
     */
    object?: string;
}
/**
 * 
 * @export
 * @interface StripePaymentSyncResults
 */
export interface StripePaymentSyncResults {
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripePaymentSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentSyncResults
     */
    id?: string;
    /**
     * 
     * @type {Array<StripePaymentRefundSyncResults>}
     * @memberof StripePaymentSyncResults
     */
    paymentRefunds?: Array<StripePaymentRefundSyncResults>;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface StripeRefundDomain
 */
export interface StripeRefundDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeRefundDomain
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeRefundDomain
     */
    lastVerifiedDateUtc?: Timestamp;
    /**
     * 
     * @type {number}
     * @memberof StripeRefundDomain
     */
    processingFee?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundDomain
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundDomain
     */
    refundStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundDomain
     */
    stripeChargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundDomain
     */
    stripePlatformAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundDomain
     */
    stripeRefundId?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeRefundDomain
     */
    transactionDateUtc?: Timestamp;
}
/**
 * 
 * @export
 * @interface StripeRefundSyncResults
 */
export interface StripeRefundSyncResults {
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripeRefundSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundSyncResults
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeRefundSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface StripeReversalSyncResults
 */
export interface StripeReversalSyncResults {
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripeReversalSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripeReversalSyncResults
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeReversalSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface StripeTransferDomain
 */
export interface StripeTransferDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeTransferDomain
     */
    amountReversed?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StripeTransferDomain
     */
    isFullyReversed?: boolean;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeTransferDomain
     */
    lastVerifiedDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof StripeTransferDomain
     */
    reversalCount?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferDomain
     */
    stripeChargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferDomain
     */
    stripeDestinationAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferDomain
     */
    stripePaymentId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferDomain
     */
    stripePlatformAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferDomain
     */
    stripeTransferGroupId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferDomain
     */
    stripeTransferId?: string;
    /**
     * 
     * @type {number}
     * @memberof StripeTransferDomain
     */
    transferAmount?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeTransferDomain
     */
    transferDateUtc?: TimestampRes;
    /**
     * 
     * @type {Array<StripeTransferReversalDomain>}
     * @memberof StripeTransferDomain
     */
    transferReversals?: Array<StripeTransferReversalDomain>;
}
/**
 * 
 * @export
 * @interface StripeTransferReversalDomain
 */
export interface StripeTransferReversalDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeTransferReversalDomain
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferReversalDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferReversalDomain
     */
    destinationPaymentRefund?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeTransferReversalDomain
     */
    lastVerifiedDateUtc?: TimestampRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof StripeTransferReversalDomain
     */
    reversalDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferReversalDomain
     */
    stripePlatformAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferReversalDomain
     */
    stripeRefundId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferReversalDomain
     */
    stripeTransferId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferReversalDomain
     */
    stripeTransferReversalId?: string;
}
/**
 * 
 * @export
 * @interface StripeTransferSyncResults
 */
export interface StripeTransferSyncResults {
    /**
     * 
     * @type {Array<StripeFieldVerification>}
     * @memberof StripeTransferSyncResults
     */
    fields?: Array<StripeFieldVerification>;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferSyncResults
     */
    id?: string;
    /**
     * 
     * @type {Array<StripeReversalSyncResults>}
     * @memberof StripeTransferSyncResults
     */
    reversals?: Array<StripeReversalSyncResults>;
    /**
     * 
     * @type {string}
     * @memberof StripeTransferSyncResults
     */
    verificationMessage?: string;
}
/**
 * 
 * @export
 * @interface SubscribeRequest
 */
export interface SubscribeRequest {
    /**
     * 
     * @type {SubscriberDomain}
     * @memberof SubscribeRequest
     */
    subscriber?: SubscriberDomain;
}
/**
 * 
 * @export
 * @interface Subscriber
 */
export interface Subscriber {
    /**
     * 
     * @type {string}
     * @memberof Subscriber
     */
    created_at?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Subscriber
     */
    custom_fields?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof Subscriber
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscriber
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Subscriber
     */
    prospect?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Subscriber
     */
    status?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Subscriber
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Subscriber
     */
    time_zone?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscriber
     */
    user_id?: string;
    /**
     * 
     * @type {number}
     * @memberof Subscriber
     */
    utc_offset?: number;
}
/**
 * 
 * @export
 * @interface SubscriberDomain
 */
export interface SubscriberDomain {
    /**
     * 
     * @type {string}
     * @memberof SubscriberDomain
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDomain
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDomain
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDomain
     */
    roleType?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriberDomain
     */
    subscriptionType?: SubscriberDomainSubscriptionTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SubscriberDomainSubscriptionTypeEnum {
    WEBBROCHURELAUNCHNOTIFICATION = 'WEB_BROCHURE_LAUNCH_NOTIFICATION'
}

/**
 * 
 * @export
 * @interface SyncStripeChargesRequest
 */
export interface SyncStripeChargesRequest {
    /**
     * 
     * @type {boolean}
     * @memberof SyncStripeChargesRequest
     */
    isDryRun?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SyncStripeChargesRequest
     */
    numChargesToVerify?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SyncStripeChargesRequest
     */
    stripeChargeIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface SyncStripeChargesResponse
 */
export interface SyncStripeChargesResponse {
    /**
     * 
     * @type {{ [key: string]: StripeChargeSyncResults; }}
     * @memberof SyncStripeChargesResponse
     */
    output?: { [key: string]: StripeChargeSyncResults; };
}
/**
 * 
 * @export
 * @interface SyncStripeDisputeResponse
 */
export interface SyncStripeDisputeResponse {
    /**
     * 
     * @type {StripeDisputeDomain}
     * @memberof SyncStripeDisputeResponse
     */
    dispute?: StripeDisputeDomain;
}
/**
 * 
 * @export
 * @interface SyncStripePaymentsRequest
 */
export interface SyncStripePaymentsRequest {
    /**
     * 
     * @type {boolean}
     * @memberof SyncStripePaymentsRequest
     */
    isDryRun?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SyncStripePaymentsRequest
     */
    numPaymentsToVerify?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SyncStripePaymentsRequest
     */
    stripePaymentIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface SyncStripePaymentsResponse
 */
export interface SyncStripePaymentsResponse {
    /**
     * 
     * @type {{ [key: string]: StripePaymentSyncResults; }}
     * @memberof SyncStripePaymentsResponse
     */
    output?: { [key: string]: StripePaymentSyncResults; };
}
/**
 * 
 * @export
 * @interface SyncStripeRefundsRequest
 */
export interface SyncStripeRefundsRequest {
    /**
     * 
     * @type {boolean}
     * @memberof SyncStripeRefundsRequest
     */
    isDryRun?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof SyncStripeRefundsRequest
     */
    stripeRefundIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface SyncStripeTransfersRequest
 */
export interface SyncStripeTransfersRequest {
    /**
     * 
     * @type {boolean}
     * @memberof SyncStripeTransfersRequest
     */
    isDryRun?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SyncStripeTransfersRequest
     */
    numTransfersToVerify?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SyncStripeTransfersRequest
     */
    stripeTransferIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface SyncStripeTransfersResponse
 */
export interface SyncStripeTransfersResponse {
    /**
     * 
     * @type {{ [key: string]: StripeTransferSyncResults; }}
     * @memberof SyncStripeTransfersResponse
     */
    output?: { [key: string]: StripeTransferSyncResults; };
}
/**
 * 
 * @export
 * @interface TemporalUnit
 */
export interface TemporalUnit {
    /**
     * 
     * @type {boolean}
     * @memberof TemporalUnit
     */
    dateBased?: boolean;
    /**
     * 
     * @type {Duration}
     * @memberof TemporalUnit
     */
    duration?: Duration;
    /**
     * 
     * @type {boolean}
     * @memberof TemporalUnit
     */
    durationEstimated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TemporalUnit
     */
    timeBased?: boolean;
}
/**
 * 
 * @export
 * @interface TicketLeadDomain
 */
export interface TicketLeadDomain {
    /**
     * 
     * @type {string}
     * @memberof TicketLeadDomain
     */
    caseId?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof TicketLeadDomain
     */
    citationCreationDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof TicketLeadDomain
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketLeadDomain
     */
    classification?: TicketLeadDomainClassificationEnum;
    /**
     * 
     * @type {string}
     * @memberof TicketLeadDomain
     */
    courtName?: string;
    /**
     * 
     * @type {Array<NoteDomain>}
     * @memberof TicketLeadDomain
     */
    notes?: Array<NoteDomain>;
    /**
     * 
     * @type {CountryRegion}
     * @memberof TicketLeadDomain
     */
    region?: CountryRegion;
    /**
     * 
     * @type {string}
     * @memberof TicketLeadDomain
     */
    ticketImageUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TicketLeadDomainClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface TicketReviewRequest
 */
export interface TicketReviewRequest {
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequest
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequest
     */
    citationState?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequest
     */
    emailAddress?: string;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof TicketReviewRequest
     */
    freshDeskTicket?: FreshDeskTicket;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequest
     */
    freshdeskTicketId?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof TicketReviewRequest
     */
    lastBookingDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequest
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequest
     */
    source?: TicketReviewRequestSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequest
     */
    status?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof TicketReviewRequest
     */
    submissionDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequest
     */
    ticketEvaluationRequestId?: number;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequest
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequest
     */
    violation?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequest
     */
    visitorName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TicketReviewRequestSourceEnum {
    OTREXITPOPUP = 'OTR_EXIT_POPUP',
    QUARANTINELANDINGPAGE = 'QUARANTINE_LANDING_PAGE',
    TICKETREVIEWPAGE = 'TICKET_REVIEW_PAGE'
}

/**
 * 
 * @export
 * @interface TicketReviewRequestReq
 */
export interface TicketReviewRequestReq {
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestReq
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestReq
     */
    citationState?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestReq
     */
    emailAddress?: string;
    /**
     * 
     * @type {FreshDeskTicketReq}
     * @memberof TicketReviewRequestReq
     */
    freshDeskTicket?: FreshDeskTicketReq;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestReq
     */
    freshdeskTicketId?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof TicketReviewRequestReq
     */
    lastBookingDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestReq
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestReq
     */
    source?: TicketReviewRequestReqSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestReq
     */
    status?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof TicketReviewRequestReq
     */
    submissionDateUtc?: TimestampReq;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestReq
     */
    ticketEvaluationRequestId?: number;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestReq
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestReq
     */
    violation?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestReq
     */
    visitorName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TicketReviewRequestReqSourceEnum {
    OTREXITPOPUP = 'OTR_EXIT_POPUP',
    QUARANTINELANDINGPAGE = 'QUARANTINE_LANDING_PAGE',
    TICKETREVIEWPAGE = 'TICKET_REVIEW_PAGE'
}

/**
 * 
 * @export
 * @interface TicketReviewRequestRes
 */
export interface TicketReviewRequestRes {
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestRes
     */
    citationId?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestRes
     */
    citationState?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestRes
     */
    emailAddress?: string;
    /**
     * 
     * @type {FreshDeskTicketRes}
     * @memberof TicketReviewRequestRes
     */
    freshDeskTicket?: FreshDeskTicketRes;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestRes
     */
    freshdeskTicketId?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof TicketReviewRequestRes
     */
    lastBookingDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestRes
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestRes
     */
    source?: TicketReviewRequestResSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestRes
     */
    status?: string;
    /**
     * 
     * @type {TimestampRes}
     * @memberof TicketReviewRequestRes
     */
    submissionDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestRes
     */
    ticketEvaluationRequestId?: number;
    /**
     * 
     * @type {number}
     * @memberof TicketReviewRequestRes
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestRes
     */
    violation?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketReviewRequestRes
     */
    visitorName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TicketReviewRequestResSourceEnum {
    OTREXITPOPUP = 'OTR_EXIT_POPUP',
    QUARANTINELANDINGPAGE = 'QUARANTINE_LANDING_PAGE',
    TICKETREVIEWPAGE = 'TICKET_REVIEW_PAGE'
}

/**
 * 
 * @export
 * @interface TimeZone
 */
export interface TimeZone {
    /**
     * 
     * @type {string}
     * @memberof TimeZone
     */
    displayName?: string;
    /**
     * 
     * @type {number}
     * @memberof TimeZone
     */
    dstsavings?: number;
    /**
     * 
     * @type {string}
     * @memberof TimeZone
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof TimeZone
     */
    rawOffset?: number;
}
/**
 * 
 * @export
 * @interface TimeZoneReq
 */
export interface TimeZoneReq {
    /**
     * 
     * @type {string}
     * @memberof TimeZoneReq
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof TimeZoneReq
     */
    rawOffset?: number;
}
/**
 * 
 * @export
 * @interface TimeZoneRes
 */
export interface TimeZoneRes {
    /**
     * 
     * @type {string}
     * @memberof TimeZoneRes
     */
    displayName?: string;
    /**
     * 
     * @type {number}
     * @memberof TimeZoneRes
     */
    dstsavings?: number;
    /**
     * 
     * @type {string}
     * @memberof TimeZoneRes
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof TimeZoneRes
     */
    rawOffset?: number;
}
/**
 * 
 * @export
 * @interface Timestamp
 */
export interface Timestamp {
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    date?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    day?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    hours?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    minutes?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    month?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    nanos?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    time?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    timezoneOffset?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    year?: number;
}
/**
 * 
 * @export
 * @interface TimestampReq
 */
export interface TimestampReq {
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    date?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    hours?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    minutes?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    month?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    nanos?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    time?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampReq
     */
    year?: number;
}
/**
 * 
 * @export
 * @interface TimestampRes
 */
export interface TimestampRes {
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    date?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    day?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    hours?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    minutes?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    month?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    nanos?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    time?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    timezoneOffset?: number;
    /**
     * 
     * @type {number}
     * @memberof TimestampRes
     */
    year?: number;
}
/**
 * 
 * @export
 * @interface TrafficViolationInputRequest
 */
export interface TrafficViolationInputRequest {
    /**
     * 
     * @type {number}
     * @memberof TrafficViolationInputRequest
     */
    violationId?: number;
}
/**
 * 
 * @export
 * @interface TrafficViolationTypeDomain
 */
export interface TrafficViolationTypeDomain {
    /**
     * 
     * @type {number}
     * @memberof TrafficViolationTypeDomain
     */
    insuranceIncreasePercent?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TrafficViolationTypeDomain
     */
    isMovingViolation?: boolean;
    /**
     * 
     * @type {Array<PenaltyModel>}
     * @memberof TrafficViolationTypeDomain
     */
    penalties?: Array<PenaltyModel>;
    /**
     * 
     * @type {string}
     * @memberof TrafficViolationTypeDomain
     */
    trafficViolationDesc?: string;
    /**
     * 
     * @type {number}
     * @memberof TrafficViolationTypeDomain
     */
    trafficViolationTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof TrafficViolationTypeDomain
     */
    userFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof TrafficViolationTypeDomain
     */
    userFriendlyShortForm?: string;
    /**
     * 
     * @type {string}
     * @memberof TrafficViolationTypeDomain
     */
    violationClassification?: TrafficViolationTypeDomainViolationClassificationEnum;
    /**
     * 
     * @type {string}
     * @memberof TrafficViolationTypeDomain
     */
    violationCode?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TrafficViolationTypeDomainViolationClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface TransferCaseRequest
 */
export interface TransferCaseRequest {
    /**
     * 
     * @type {boolean}
     * @memberof TransferCaseRequest
     */
    forceTransfer?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransferCaseRequest
     */
    ignoreCapturedCharges?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TransferCaseRequest
     */
    receivingLawfirmId?: number;
}
/**
 * 
 * @export
 * @interface USStateDomain
 */
export interface USStateDomain {
    /**
     * 
     * @type {string}
     * @memberof USStateDomain
     */
    stateCode?: string;
    /**
     * 
     * @type {string}
     * @memberof USStateDomain
     */
    stateName?: string;
}
/**
 * 
 * @export
 * @interface UpdateAddress
 */
export interface UpdateAddress {
    /**
     * 
     * @type {string}
     * @memberof UpdateAddress
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAddress
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAddress
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAddress
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAddress
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAddress
     */
    regionCode?: string;
}
/**
 * 
 * @export
 * @interface UpdateCaseDeclineTicketsRequest
 */
export interface UpdateCaseDeclineTicketsRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateCaseDeclineTicketsRequest
     */
    clientDeclineTicketId?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCaseDeclineTicketsRequest
     */
    lawfirmDeclineTicketId?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCaseDeclineTicketsRequest
     */
    lawfirmId?: number;
}
/**
 * 
 * @export
 * @interface UpdateCasePaymentRequest
 */
export interface UpdateCasePaymentRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateCasePaymentRequest
     */
    baseFeeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCasePaymentRequest
     */
    lawfirmReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCasePaymentRequest
     */
    otrMarketingFeeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCasePaymentRequest
     */
    otrReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateCasePaymentRequest
     */
    paymentProcessingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCasePaymentRequest
     */
    recipient?: UpdateCasePaymentRequestRecipientEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateCasePaymentRequest
     */
    transactionMethod?: UpdateCasePaymentRequestTransactionMethodEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateCasePaymentRequestRecipientEnum {
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateCasePaymentRequestTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface UpdateCitationAddressRequest
 */
export interface UpdateCitationAddressRequest {
    /**
     * 
     * @type {AddressDomainReq}
     * @memberof UpdateCitationAddressRequest
     */
    address?: AddressDomainReq;
}
/**
 * 
 * @export
 * @interface UpdateCitationPictureRequest
 */
export interface UpdateCitationPictureRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCitationPictureRequest
     */
    base64ImageData?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCitationPictureRequest
     */
    clientEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCitationPictureRequest
     */
    imageContentType?: string;
}
/**
 * 
 * @export
 * @interface UpdateCitationRequest
 */
export interface UpdateCitationRequest {
    /**
     * 
     * @type {CitationInputRequest}
     * @memberof UpdateCitationRequest
     */
    citation?: CitationInputRequest;
}
/**
 * 
 * @export
 * @interface UpdateCourtRequest
 */
export interface UpdateCourtRequest {
    /**
     * 
     * @type {CourtDomainReq}
     * @memberof UpdateCourtRequest
     */
    court?: CourtDomainReq;
}
/**
 * 
 * @export
 * @interface UpdateDisputeRequest
 */
export interface UpdateDisputeRequest {
    /**
     * 
     * @type {StripeDisputeDomain}
     * @memberof UpdateDisputeRequest
     */
    dispute?: StripeDisputeDomain;
}
/**
 * 
 * @export
 * @interface UpdateInvoiceLineItemRequest
 */
export interface UpdateInvoiceLineItemRequest {
    /**
     * 
     * @type {CaseLineItemDomainReq}
     * @memberof UpdateInvoiceLineItemRequest
     */
    lineItem?: CaseLineItemDomainReq;
}
/**
 * 
 * @export
 * @interface UpdateLawfirmFeeRequest
 */
export interface UpdateLawfirmFeeRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmFeeRequest
     */
    note?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmFeeRequest
     */
    otrFeeAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmFeeRequest
     */
    processingFeeAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmFeeRequest
     */
    sourceCasePaymentId?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmFeeRequest
     */
    totalFeeAmount?: number;
    /**
     * 
     * @type {TimestampReq}
     * @memberof UpdateLawfirmFeeRequest
     */
    transactionDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmFeeRequest
     */
    transactionMethod?: UpdateLawfirmFeeRequestTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmFeeRequest
     */
    transactionReferenceId?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof UpdateLawfirmFeeRequest
     */
    updatedDueDateUtc?: TimestampReq;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateLawfirmFeeRequestTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface UpdateLawfirmFeeResponse
 */
export interface UpdateLawfirmFeeResponse {
    /**
     * 
     * @type {LawfirmFeeDomain}
     * @memberof UpdateLawfirmFeeResponse
     */
    lawfirmFee?: LawfirmFeeDomain;
}
/**
 * 
 * @export
 * @interface UpdateLawfirmModel
 */
export interface UpdateLawfirmModel {
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    aboutUsBlurb?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmModel
     */
    caseAssignmentPriority?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    coverPhotoUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmModel
     */
    createdBy?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    establishedDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmModel
     */
    establishedYear?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateLawfirmModel
     */
    isTestLawfirm?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmModel
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    lawfirmPaymentModel?: UpdateLawfirmModelLawfirmPaymentModelEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    lawfirmState?: UpdateLawfirmModelLawfirmStateEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    membershipStartDateUtc?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    otrNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    primaryEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    primaryPhoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    profilePictureUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    tagLine?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmModel
     */
    website?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateLawfirmModelLawfirmPaymentModelEnum {
    DESTINATIONACCOUNT = 'DESTINATION_ACCOUNT',
    SEPARATECHARGE = 'SEPARATE_CHARGE',
    TRANSFERDEDUCTION = 'TRANSFER_DEDUCTION'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateLawfirmModelLawfirmStateEnum {
    ACCOUNTCLOSED = 'ACCOUNT_CLOSED',
    DUPLICATE = 'DUPLICATE',
    ESTABLISHED = 'ESTABLISHED',
    FUTURELEAD = 'FUTURE_LEAD',
    INTRIAL = 'IN_TRIAL',
    LAWFIRMINTERESTED = 'LAWFIRM_INTERESTED',
    LAWFIRMLEAD = 'LAWFIRM_LEAD',
    LAWFIRMNOTINTERESTED = 'LAWFIRM_NOT_INTERESTED',
    NOTINTERESTEDFEESPLITTINGETHICS = 'NOT_INTERESTED_FEE_SPLITTING_ETHICS',
    NOTINTERESTEDREFUNDETHICS = 'NOT_INTERESTED_REFUND_ETHICS',
    ONBOARDING = 'ONBOARDING',
    TEMPORARILYTURNEDOFF = 'TEMPORARILY_TURNED_OFF',
    TERMINATEDFRAUD = 'TERMINATED_FRAUD',
    TERMINATEDPOORSERVICE = 'TERMINATED_POOR_SERVICE',
    TERMINATEDPOORSUCCESS = 'TERMINATED_POOR_SUCCESS',
    UNDERREVIEW = 'UNDER_REVIEW'
}

/**
 * 
 * @export
 * @interface UpdateLawfirmPaymentModelRequest
 */
export interface UpdateLawfirmPaymentModelRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmPaymentModelRequest
     */
    paymentModel?: UpdateLawfirmPaymentModelRequestPaymentModelEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateLawfirmPaymentModelRequestPaymentModelEnum {
    DESTINATIONACCOUNT = 'DESTINATION_ACCOUNT',
    SEPARATECHARGE = 'SEPARATE_CHARGE',
    TRANSFERDEDUCTION = 'TRANSFER_DEDUCTION'
}

/**
 * 
 * @export
 * @interface UpdateLawfirmPayoutRequest
 */
export interface UpdateLawfirmPayoutRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateLawfirmPayoutRequest
     */
    payoutAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmPayoutRequest
     */
    sourceCasePaymentId?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof UpdateLawfirmPayoutRequest
     */
    transactionDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmPayoutRequest
     */
    transactionMethod?: UpdateLawfirmPayoutRequestTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateLawfirmPayoutRequest
     */
    transactionReferenceId?: string;
    /**
     * 
     * @type {TimestampReq}
     * @memberof UpdateLawfirmPayoutRequest
     */
    updatedDueDateUtc?: TimestampReq;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateLawfirmPayoutRequestTransactionMethodEnum {
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    ZELLE = 'ZELLE'
}

/**
 * 
 * @export
 * @interface UpdateLawfirmPayoutResponse
 */
export interface UpdateLawfirmPayoutResponse {
    /**
     * 
     * @type {LawfirmPayoutDomain}
     * @memberof UpdateLawfirmPayoutResponse
     */
    lawfirmPayout?: LawfirmPayoutDomain;
}
/**
 * 
 * @export
 * @interface UpdateLawfirmRequest
 */
export interface UpdateLawfirmRequest {
    /**
     * 
     * @type {UpdateLawfirmModel}
     * @memberof UpdateLawfirmRequest
     */
    lawfirm?: UpdateLawfirmModel;
}
/**
 * 
 * @export
 * @interface UpdateLawfirmSettingsRequest
 */
export interface UpdateLawfirmSettingsRequest {
    /**
     * 
     * @type {LawfirmSettingsDomainReq}
     * @memberof UpdateLawfirmSettingsRequest
     */
    settings?: LawfirmSettingsDomainReq;
}
/**
 * 
 * @export
 * @interface UpdateNoteInput
 */
export interface UpdateNoteInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateNoteInput
     */
    note?: string;
}
/**
 * 
 * @export
 * @interface UpdateNoteRequest
 */
export interface UpdateNoteRequest {
    /**
     * 
     * @type {UpdateNoteInput}
     * @memberof UpdateNoteRequest
     */
    note?: UpdateNoteInput;
}
/**
 * 
 * @export
 * @interface UpdateNoteResponse
 */
export interface UpdateNoteResponse {
    /**
     * 
     * @type {NoteDomain}
     * @memberof UpdateNoteResponse
     */
    note?: NoteDomain;
}
/**
 * 
 * @export
 * @interface UpdatePaymentDueDateRequest
 */
export interface UpdatePaymentDueDateRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDueDateRequest
     */
    paymentDueDate?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDueDateRequest
     */
    timeZoneId?: string;
}
/**
 * 
 * @export
 * @interface UpdatePhoneNumber
 */
export interface UpdatePhoneNumber {
    /**
     * 
     * @type {string}
     * @memberof UpdatePhoneNumber
     */
    entityType?: UpdatePhoneNumberEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdatePhoneNumber
     */
    extension?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePhoneNumber
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePhoneNumber
     */
    type?: UpdatePhoneNumberTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdatePhoneNumberEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdatePhoneNumberTypeEnum {
    HOME = 'HOME',
    MOBILE = 'MOBILE',
    NOTSPECIFIED = 'NOT_SPECIFIED',
    OFFICE = 'OFFICE'
}

/**
 * 
 * @export
 * @interface UpdateProfilePictureRequest
 */
export interface UpdateProfilePictureRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfilePictureRequest
     */
    base64ImageData?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfilePictureRequest
     */
    contentType?: string;
}
/**
 * 
 * @export
 * @interface UpdateRefundEligibilityForCaseRequest
 */
export interface UpdateRefundEligibilityForCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRefundEligibilityForCaseRequest
     */
    refundOwner?: UpdateRefundEligibilityForCaseRequestRefundOwnerEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateRefundEligibilityForCaseRequestRefundOwnerEnum {
    LAWFIRM = 'LAWFIRM',
    NONE = 'NONE',
    OTR = 'OTR'
}

/**
 * 
 * @export
 * @interface UpdateReplyForCustomerReview
 */
export interface UpdateReplyForCustomerReview {
    /**
     * 
     * @type {string}
     * @memberof UpdateReplyForCustomerReview
     */
    copy?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateReplyForCustomerReview
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface UpdateUserDetailsResponse
 */
export interface UpdateUserDetailsResponse {
    /**
     * 
     * @type {UserDomain}
     * @memberof UpdateUserDetailsResponse
     */
    user?: UserDomain;
}
/**
 * 
 * @export
 * @interface UpdateUserModel
 */
export interface UpdateUserModel {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    dob?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    gender?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserModel
     */
    hasLeftReview?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserModel
     */
    isEmailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserModel
     */
    isLawfirmAccessGranted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserModel
     */
    isPaymentPlansAllowed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserModel
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserModel
     */
    isUnsubscribed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserModel
     */
    isUserAccountEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    loginProvider?: UpdateUserModelLoginProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    privacyMode?: UpdateUserModelPrivacyModeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    profilePicture?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    signUpCode?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserModel
     */
    signUpCodeUseCount?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserModel
     */
    userAlias?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateUserModelLoginProviderEnum {
    APPLE = 'APPLE',
    EMAIL = 'EMAIL',
    FACEBOOK = 'FACEBOOK',
    GOOGLE = 'GOOGLE',
    PHONE = 'PHONE',
    TWITTER = 'TWITTER'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateUserModelPrivacyModeEnum {
    FRIENDS = 'FRIENDS',
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    SEMIPUBLIC = 'SEMI_PUBLIC'
}

/**
 * 
 * @export
 * @interface UpdateUserPhoneNumberRequest
 */
export interface UpdateUserPhoneNumberRequest {
    /**
     * 
     * @type {UpdatePhoneNumber}
     * @memberof UpdateUserPhoneNumberRequest
     */
    phoneNumber?: UpdatePhoneNumber;
}
/**
 * 
 * @export
 * @interface UpdateUserProfileRequest
 */
export interface UpdateUserProfileRequest {
    /**
     * 
     * @type {UpdateUserModel}
     * @memberof UpdateUserProfileRequest
     */
    user?: UpdateUserModel;
}
/**
 * 
 * @export
 * @interface UpdateUserRolesRequest
 */
export interface UpdateUserRolesRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateUserRolesRequest
     */
    roles?: Array<UpdateUserRolesRequestRolesEnum>;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserRolesRequest
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateUserRolesRequestRolesEnum {
    ADMIN = 'ADMIN',
    DEFENDANT = 'DEFENDANT',
    LAWYER = 'LAWYER',
    PARTNER = 'PARTNER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface UpdateViolationRequest
 */
export interface UpdateViolationRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateViolationRequest
     */
    classification?: UpdateViolationRequestClassificationEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateViolationRequest
     */
    isEnabledForCustomers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateViolationRequest
     */
    isEnabledForLawfirms?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateViolationRequest
     */
    userFriendlyName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateViolationRequest
     */
    userFriendlyShortForm?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateViolationRequest
     */
    violationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateViolationRequest
     */
    violationDescription?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateViolationRequestClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface UpsertAddressRequest
 */
export interface UpsertAddressRequest {
    /**
     * 
     * @type {UpdateAddress}
     * @memberof UpsertAddressRequest
     */
    address?: UpdateAddress;
}
/**
 * 
 * @export
 * @interface UserAccountModel
 */
export interface UserAccountModel {
    /**
     * 
     * @type {string}
     * @memberof UserAccountModel
     */
    accountCreationDateUtc?: string;
    /**
     * 
     * @type {number}
     * @memberof UserAccountModel
     */
    formerUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserAccountModel
     */
    loginProvider?: UserAccountModelLoginProviderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserAccountModel
     */
    merged?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserAccountModel
     */
    primary?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserAccountModel
     */
    userHandle?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UserAccountModelLoginProviderEnum {
    APPLE = 'APPLE',
    EMAIL = 'EMAIL',
    FACEBOOK = 'FACEBOOK',
    GOOGLE = 'GOOGLE',
    PHONE = 'PHONE',
    TWITTER = 'TWITTER'
}

/**
 * 
 * @export
 * @interface UserBookingsDomain
 */
export interface UserBookingsDomain {
    /**
     * 
     * @type {number}
     * @memberof UserBookingsDomain
     */
    numBookings?: number;
    /**
     * 
     * @type {number}
     * @memberof UserBookingsDomain
     */
    numCancellations?: number;
}
/**
 * 
 * @export
 * @interface UserDetails
 */
export interface UserDetails {
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    lastName?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDetails
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface UserDomain
 */
export interface UserDomain {
    /**
     * 
     * @type {Array<UserAccountModel>}
     * @memberof UserDomain
     */
    accounts?: Array<UserAccountModel>;
    /**
     * 
     * @type {AddressDomain}
     * @memberof UserDomain
     */
    address?: AddressDomain;
    /**
     * 
     * @type {Timestamp}
     * @memberof UserDomain
     */
    creationDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    dob?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomain
     */
    eligibleForAppReview?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    gender?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomain
     */
    hasLeftReview?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomain
     */
    isEmailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomain
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomain
     */
    isPaymentPlansAllowed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomain
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomain
     */
    isUnsubscribed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    lawyerJobTitle?: UserDomainLawyerJobTitleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    loginProvider?: UserDomainLoginProviderEnum;
    /**
     * 
     * @type {number}
     * @memberof UserDomain
     */
    numBookingCancelations?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDomain
     */
    paidCaseCount?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    passwordEncrypted?: string;
    /**
     * 
     * @type {Array<PhoneNumberDomain>}
     * @memberof UserDomain
     */
    phoneNumbers?: Array<PhoneNumberDomain>;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    privacyMode?: UserDomainPrivacyModeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    profilePicture?: string;
    /**
     * 
     * @type {Array<UserRoleDomain>}
     * @memberof UserDomain
     */
    roles?: Array<UserRoleDomain>;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    signUpCode?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDomain
     */
    signUpCodeUseCount?: number;
    /**
     * 
     * @type {Array<UserSubscriptionPlanModel>}
     * @memberof UserDomain
     */
    subscriptionPlans?: Array<UserSubscriptionPlanModel>;
    /**
     * 
     * @type {string}
     * @memberof UserDomain
     */
    userAlias?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDomain
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UserDomainLawyerJobTitleEnum {
    ACCOUNTANT = 'ACCOUNTANT',
    ATTORNEY = 'ATTORNEY',
    ATTORNEYASSOCIATE = 'ATTORNEY_ASSOCIATE',
    ATTORNEYCOUNSEL = 'ATTORNEY_COUNSEL',
    ATTORNEYMANAGINGPARTNER = 'ATTORNEY_MANAGING_PARTNER',
    ATTORNEYPARTNER = 'ATTORNEY_PARTNER',
    ATTORNEYSTAFF = 'ATTORNEY_STAFF',
    CUSTOMERSERVICEREP = 'CUSTOMER_SERVICE_REP',
    LEGALASSISTANT = 'LEGAL_ASSISTANT',
    LEGALINTERN = 'LEGAL_INTERN',
    LEGALSECRETARY = 'LEGAL_SECRETARY',
    OTHER = 'OTHER',
    PARALEGAL = 'PARALEGAL'
}
/**
    * @export
    * @enum {string}
    */
export enum UserDomainLoginProviderEnum {
    APPLE = 'APPLE',
    EMAIL = 'EMAIL',
    FACEBOOK = 'FACEBOOK',
    GOOGLE = 'GOOGLE',
    PHONE = 'PHONE',
    TWITTER = 'TWITTER'
}
/**
    * @export
    * @enum {string}
    */
export enum UserDomainPrivacyModeEnum {
    FRIENDS = 'FRIENDS',
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    SEMIPUBLIC = 'SEMI_PUBLIC'
}

/**
 * 
 * @export
 * @interface UserDomainReq
 */
export interface UserDomainReq {
    /**
     * 
     * @type {Array<UserAccountModel>}
     * @memberof UserDomainReq
     */
    accounts?: Array<UserAccountModel>;
    /**
     * 
     * @type {AddressDomainReq}
     * @memberof UserDomainReq
     */
    address?: AddressDomainReq;
    /**
     * 
     * @type {TimestampReq}
     * @memberof UserDomainReq
     */
    creationDateUtc?: TimestampReq;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    dob?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainReq
     */
    eligibleForAppReview?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    gender?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainReq
     */
    hasLeftReview?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainReq
     */
    isEmailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainReq
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainReq
     */
    isPaymentPlansAllowed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainReq
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainReq
     */
    isUnsubscribed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    lawyerJobTitle?: UserDomainReqLawyerJobTitleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    loginProvider?: UserDomainReqLoginProviderEnum;
    /**
     * 
     * @type {number}
     * @memberof UserDomainReq
     */
    numBookingCancelations?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDomainReq
     */
    paidCaseCount?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    passwordEncrypted?: string;
    /**
     * 
     * @type {Array<PhoneNumberDomainReq>}
     * @memberof UserDomainReq
     */
    phoneNumbers?: Array<PhoneNumberDomainReq>;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    privacyMode?: UserDomainReqPrivacyModeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    profilePicture?: string;
    /**
     * 
     * @type {Array<UserRoleDomain>}
     * @memberof UserDomainReq
     */
    roles?: Array<UserRoleDomain>;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    signUpCode?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDomainReq
     */
    signUpCodeUseCount?: number;
    /**
     * 
     * @type {Array<UserSubscriptionPlanModelReq>}
     * @memberof UserDomainReq
     */
    subscriptionPlans?: Array<UserSubscriptionPlanModelReq>;
    /**
     * 
     * @type {string}
     * @memberof UserDomainReq
     */
    userAlias?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDomainReq
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UserDomainReqLawyerJobTitleEnum {
    ACCOUNTANT = 'ACCOUNTANT',
    ATTORNEY = 'ATTORNEY',
    ATTORNEYASSOCIATE = 'ATTORNEY_ASSOCIATE',
    ATTORNEYCOUNSEL = 'ATTORNEY_COUNSEL',
    ATTORNEYMANAGINGPARTNER = 'ATTORNEY_MANAGING_PARTNER',
    ATTORNEYPARTNER = 'ATTORNEY_PARTNER',
    ATTORNEYSTAFF = 'ATTORNEY_STAFF',
    CUSTOMERSERVICEREP = 'CUSTOMER_SERVICE_REP',
    LEGALASSISTANT = 'LEGAL_ASSISTANT',
    LEGALINTERN = 'LEGAL_INTERN',
    LEGALSECRETARY = 'LEGAL_SECRETARY',
    OTHER = 'OTHER',
    PARALEGAL = 'PARALEGAL'
}
/**
    * @export
    * @enum {string}
    */
export enum UserDomainReqLoginProviderEnum {
    APPLE = 'APPLE',
    EMAIL = 'EMAIL',
    FACEBOOK = 'FACEBOOK',
    GOOGLE = 'GOOGLE',
    PHONE = 'PHONE',
    TWITTER = 'TWITTER'
}
/**
    * @export
    * @enum {string}
    */
export enum UserDomainReqPrivacyModeEnum {
    FRIENDS = 'FRIENDS',
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    SEMIPUBLIC = 'SEMI_PUBLIC'
}

/**
 * 
 * @export
 * @interface UserDomainRes
 */
export interface UserDomainRes {
    /**
     * 
     * @type {Array<UserAccountModel>}
     * @memberof UserDomainRes
     */
    accounts?: Array<UserAccountModel>;
    /**
     * 
     * @type {AddressDomainRes}
     * @memberof UserDomainRes
     */
    address?: AddressDomainRes;
    /**
     * 
     * @type {TimestampRes}
     * @memberof UserDomainRes
     */
    creationDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    dob?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainRes
     */
    eligibleForAppReview?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    gender?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainRes
     */
    hasLeftReview?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainRes
     */
    isEmailConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainRes
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainRes
     */
    isPaymentPlansAllowed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainRes
     */
    isTestUser?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDomainRes
     */
    isUnsubscribed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    lawyerJobTitle?: UserDomainResLawyerJobTitleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    loginProvider?: UserDomainResLoginProviderEnum;
    /**
     * 
     * @type {number}
     * @memberof UserDomainRes
     */
    numBookingCancelations?: number;
    /**
     * 
     * @type {number}
     * @memberof UserDomainRes
     */
    paidCaseCount?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    passwordEncrypted?: string;
    /**
     * 
     * @type {Array<PhoneNumberDomainRes>}
     * @memberof UserDomainRes
     */
    phoneNumbers?: Array<PhoneNumberDomainRes>;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    privacyMode?: UserDomainResPrivacyModeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    profilePicture?: string;
    /**
     * 
     * @type {Array<UserRoleDomain>}
     * @memberof UserDomainRes
     */
    roles?: Array<UserRoleDomain>;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    signUpCode?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDomainRes
     */
    signUpCodeUseCount?: number;
    /**
     * 
     * @type {Array<UserSubscriptionPlanModelRes>}
     * @memberof UserDomainRes
     */
    subscriptionPlans?: Array<UserSubscriptionPlanModelRes>;
    /**
     * 
     * @type {string}
     * @memberof UserDomainRes
     */
    userAlias?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDomainRes
     */
    userId?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UserDomainResLawyerJobTitleEnum {
    ACCOUNTANT = 'ACCOUNTANT',
    ATTORNEY = 'ATTORNEY',
    ATTORNEYASSOCIATE = 'ATTORNEY_ASSOCIATE',
    ATTORNEYCOUNSEL = 'ATTORNEY_COUNSEL',
    ATTORNEYMANAGINGPARTNER = 'ATTORNEY_MANAGING_PARTNER',
    ATTORNEYPARTNER = 'ATTORNEY_PARTNER',
    ATTORNEYSTAFF = 'ATTORNEY_STAFF',
    CUSTOMERSERVICEREP = 'CUSTOMER_SERVICE_REP',
    LEGALASSISTANT = 'LEGAL_ASSISTANT',
    LEGALINTERN = 'LEGAL_INTERN',
    LEGALSECRETARY = 'LEGAL_SECRETARY',
    OTHER = 'OTHER',
    PARALEGAL = 'PARALEGAL'
}
/**
    * @export
    * @enum {string}
    */
export enum UserDomainResLoginProviderEnum {
    APPLE = 'APPLE',
    EMAIL = 'EMAIL',
    FACEBOOK = 'FACEBOOK',
    GOOGLE = 'GOOGLE',
    PHONE = 'PHONE',
    TWITTER = 'TWITTER'
}
/**
    * @export
    * @enum {string}
    */
export enum UserDomainResPrivacyModeEnum {
    FRIENDS = 'FRIENDS',
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    SEMIPUBLIC = 'SEMI_PUBLIC'
}

/**
 * 
 * @export
 * @interface UserRefLinkDomain
 */
export interface UserRefLinkDomain {
    /**
     * 
     * @type {string}
     * @memberof UserRefLinkDomain
     */
    refLink?: string;
    /**
     * 
     * @type {number}
     * @memberof UserRefLinkDomain
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof UserRefLinkDomain
     */
    userRefLinkId?: number;
}
/**
 * 
 * @export
 * @interface UserReferralSourceTypeModel
 */
export interface UserReferralSourceTypeModel {
    /**
     * 
     * @type {Array<UserReferralSourceTypeModel>}
     * @memberof UserReferralSourceTypeModel
     */
    children?: Array<UserReferralSourceTypeModel>;
    /**
     * 
     * @type {string}
     * @memberof UserReferralSourceTypeModel
     */
    imageUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserReferralSourceTypeModel
     */
    isDisplayed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserReferralSourceTypeModel
     */
    sourceDesc?: string;
    /**
     * 
     * @type {string}
     * @memberof UserReferralSourceTypeModel
     */
    sourceName?: string;
    /**
     * 
     * @type {number}
     * @memberof UserReferralSourceTypeModel
     */
    sourceTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserReferralSourceTypeModel
     */
    uiDisplayText?: string;
}
/**
 * 
 * @export
 * @interface UserRegistrationStats
 */
export interface UserRegistrationStats {
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof UserRegistrationStats
     */
    clientTypes?: { [key: string]: number; };
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationStats
     */
    endDate?: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof UserRegistrationStats
     */
    loginProviders?: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof UserRegistrationStats
     */
    numRegistrations?: number;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationStats
     */
    startDate?: string;
    /**
     * 
     * @type {ZoneId}
     * @memberof UserRegistrationStats
     */
    zoneId?: ZoneId;
}
/**
 * 
 * @export
 * @interface UserRoleDomain
 */
export interface UserRoleDomain {
    /**
     * 
     * @type {string}
     * @memberof UserRoleDomain
     */
    roleType?: UserRoleDomainRoleTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserRoleDomainRoleTypeEnum {
    ADMIN = 'ADMIN',
    DEFENDANT = 'DEFENDANT',
    LAWYER = 'LAWYER',
    PARTNER = 'PARTNER',
    UNKNOWN = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface UserSubscriptionPlanModel
 */
export interface UserSubscriptionPlanModel {
    /**
     * 
     * @type {string}
     * @memberof UserSubscriptionPlanModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSubscriptionPlanModel
     */
    subscriptionStatus?: UserSubscriptionPlanModelSubscriptionStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserSubscriptionPlanModelSubscriptionStatusEnum {
    ACTIVE = 'ACTIVE',
    CANCELED = 'CANCELED',
    INCOMPLETE = 'INCOMPLETE',
    INCOMPLETEEXPIRED = 'INCOMPLETE_EXPIRED',
    INTRIALPERIOD = 'IN_TRIAL_PERIOD',
    PASTDUE = 'PAST_DUE',
    UNKNOWN = 'UNKNOWN',
    UNPAID = 'UNPAID'
}

/**
 * 
 * @export
 * @interface UserSubscriptionPlanModelReq
 */
export interface UserSubscriptionPlanModelReq {
    /**
     * 
     * @type {string}
     * @memberof UserSubscriptionPlanModelReq
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSubscriptionPlanModelReq
     */
    subscriptionStatus?: UserSubscriptionPlanModelReqSubscriptionStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserSubscriptionPlanModelReqSubscriptionStatusEnum {
    ACTIVE = 'ACTIVE',
    CANCELED = 'CANCELED',
    INCOMPLETE = 'INCOMPLETE',
    INCOMPLETEEXPIRED = 'INCOMPLETE_EXPIRED',
    INTRIALPERIOD = 'IN_TRIAL_PERIOD',
    PASTDUE = 'PAST_DUE',
    UNKNOWN = 'UNKNOWN',
    UNPAID = 'UNPAID'
}

/**
 * 
 * @export
 * @interface UserSubscriptionPlanModelRes
 */
export interface UserSubscriptionPlanModelRes {
    /**
     * 
     * @type {string}
     * @memberof UserSubscriptionPlanModelRes
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSubscriptionPlanModelRes
     */
    subscriptionStatus?: UserSubscriptionPlanModelResSubscriptionStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserSubscriptionPlanModelResSubscriptionStatusEnum {
    ACTIVE = 'ACTIVE',
    CANCELED = 'CANCELED',
    INCOMPLETE = 'INCOMPLETE',
    INCOMPLETEEXPIRED = 'INCOMPLETE_EXPIRED',
    INTRIALPERIOD = 'IN_TRIAL_PERIOD',
    PASTDUE = 'PAST_DUE',
    UNKNOWN = 'UNKNOWN',
    UNPAID = 'UNPAID'
}

/**
 * 
 * @export
 * @interface UserToContact
 */
export interface UserToContact {
    /**
     * 
     * @type {number}
     * @memberof UserToContact
     */
    citationId?: number;
    /**
     * 
     * @type {number}
     * @memberof UserToContact
     */
    userIdToContact?: number;
}
/**
 * 
 * @export
 * @interface ValidateDirectMailRequest
 */
export interface ValidateDirectMailRequest {
    /**
     * 
     * @type {string}
     * @memberof ValidateDirectMailRequest
     */
    mailTemplateType?: string;
    /**
     * 
     * @type {AddressDomain}
     * @memberof ValidateDirectMailRequest
     */
    toAddress?: AddressDomain;
}
/**
 * 
 * @export
 * @interface ValidateDirectMailResponse
 */
export interface ValidateDirectMailResponse {
    /**
     * 
     * @type {string}
     * @memberof ValidateDirectMailResponse
     */
    otrError?: ValidateDirectMailResponseOtrErrorEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ValidateDirectMailResponseOtrErrorEnum {
    ACCESSDENIED = 'ACCESS_DENIED',
    ACCOUNTDISABLED = 'ACCOUNT_DISABLED',
    ARAGNOTCAPTURED = 'ARAG_NOT_CAPTURED',
    AUTHENTICATIONCREDENTIALSNOTFOUND = 'AUTHENTICATION_CREDENTIALS_NOT_FOUND',
    AUTHENTICATIONFAILED = 'AUTHENTICATION_FAILED',
    AUTHENTICATIONSERVICEFAILURE = 'AUTHENTICATION_SERVICE_FAILURE',
    AUTHORIZATIONSERVICEFAILURE = 'AUTHORIZATION_SERVICE_FAILURE',
    AUTHORIZEDCHARGESONCASE = 'AUTHORIZED_CHARGES_ON_CASE',
    BADCREDENTIALS = 'BAD_CREDENTIALS',
    CANCELLATIONWINDOWCLOSED = 'CANCELLATION_WINDOW_CLOSED',
    CASEALREADYEXISTS = 'CASE_ALREADY_EXISTS',
    CASEALREADYPAID = 'CASE_ALREADY_PAID',
    CASEALREADYRESOLVED = 'CASE_ALREADY_RESOLVED',
    CASEIDCOLLISION = 'CASE_ID_COLLISION',
    CASEISCANCELLED = 'CASE_IS_CANCELLED',
    CASEMATCHFAILED = 'CASE_MATCH_FAILED',
    CASENOTACCEPTEDBYLAWFIRM = 'CASE_NOT_ACCEPTED_BY_LAWFIRM',
    CASENOTCONFIRMED = 'CASE_NOT_CONFIRMED',
    CASEPAYMENTASSOCIATEDWITHMULTIPLELAWFIRMFEES = 'CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_FEES',
    CASEPAYMENTASSOCIATEDWITHMULTIPLELAWFIRMPAYOUTS = 'CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_PAYOUTS',
    CASEPAYMENTHASSTRIPECHARGE = 'CASE_PAYMENT_HAS_STRIPE_CHARGE',
    CASESTATUSNOTALLOWED = 'CASE_STATUS_NOT_ALLOWED',
    CASEUSERMISMATCH = 'CASE_USER_MISMATCH',
    CCWILLEXPIREBEFOREPAYMENTPLAN = 'CC_WILL_EXPIRE_BEFORE_PAYMENT_PLAN',
    CHARGEALREADYCAPTURED = 'CHARGE_ALREADY_CAPTURED',
    CHARGEEXPIRED = 'CHARGE_EXPIRED',
    CHARGENOTALLOWED = 'CHARGE_NOT_ALLOWED',
    CHARGENOTCAPTURED = 'CHARGE_NOT_CAPTURED',
    CHARGENOLONGERAUTHORIZED = 'CHARGE_NO_LONGER_AUTHORIZED',
    CHARGEREFUNDED = 'CHARGE_REFUNDED',
    CITATIONALREADYDELETED = 'CITATION_ALREADY_DELETED',
    CITATIONDOESNOTMATCHUSER = 'CITATION_DOES_NOT_MATCH_USER',
    CITATIONNOTOWNEDBYUSER = 'CITATION_NOT_OWNED_BY_USER',
    CODEALREADYEXISTSFORDRIVER = 'CODE_ALREADY_EXISTS_FOR_DRIVER',
    CODEBENEFITTYPENOTSUPPORTED = 'CODE_BENEFIT_TYPE_NOT_SUPPORTED',
    CODEDOESNOTEXIST = 'CODE_DOES_NOT_EXIST',
    CODEEXCEEDEDMAXUSAGE = 'CODE_EXCEEDED_MAX_USAGE',
    CODEHASEXPIRED = 'CODE_HAS_EXPIRED',
    CODEISALREADYTAKEN = 'CODE_IS_ALREADY_TAKEN',
    CODEISNOTACTIVE = 'CODE_IS_NOT_ACTIVE',
    CODENOTALLOWEDDUETOCREDIT = 'CODE_NOT_ALLOWED_DUE_TO_CREDIT',
    CODENOTSUPPORTEDBYLAWFIRM = 'CODE_NOT_SUPPORTED_BY_LAWFIRM',
    CODENOTYETAPPROVED = 'CODE_NOT_YET_APPROVED',
    CODEREFERRERBENEFITSNOTAUTHORIZED = 'CODE_REFERRER_BENEFITS_NOT_AUTHORIZED',
    COMMENTALREADYEXISTS = 'COMMENT_ALREADY_EXISTS',
    COURTMISSINGADDRESS = 'COURT_MISSING_ADDRESS',
    COURTNOTINSUPPORTEDREGION = 'COURT_NOT_IN_SUPPORTED_REGION',
    COURTNOTSUPPORTEDBYLAWFIRM = 'COURT_NOT_SUPPORTED_BY_LAWFIRM',
    CURRENTPASSWORDINCORRECT = 'CURRENT_PASSWORD_INCORRECT',
    DATABASERECORDLOCKED = 'DATABASE_RECORD_LOCKED',
    DATAACCESSERROR = 'DATA_ACCESS_ERROR',
    DIRECTMAILRECONCILATIONIDNOTEXIST = 'DIRECT_MAIL_RECONCILATION_ID_NOT_EXIST',
    DIRECTMAILSENTALREADY = 'DIRECT_MAIL_SENT_ALREADY',
    DIRECTMAILTEMPLATEDUPLICATEDETECTED = 'DIRECT_MAIL_TEMPLATE_DUPLICATE_DETECTED',
    DIRECTMAILTEMPLATENOTEXIST = 'DIRECT_MAIL_TEMPLATE_NOT_EXIST',
    DRIPDEPENDENCYFAILURE = 'DRIP_DEPENDENCY_FAILURE',
    DUPLICATECOURT = 'DUPLICATE_COURT',
    DUPLICATEEMAIL = 'DUPLICATE_EMAIL',
    DUPLICATEENTRY = 'DUPLICATE_ENTRY',
    DUPLICATELANDINGPAGEURL = 'DUPLICATE_LANDING_PAGE_URL',
    DUPLICATEMESSAGEATTEMPT = 'DUPLICATE_MESSAGE_ATTEMPT',
    EMAILADDRESSALREADYSUBSCRIBED = 'EMAIL_ADDRESS_ALREADY_SUBSCRIBED',
    EMAILADDRESSBLACKLISTED = 'EMAIL_ADDRESS_BLACKLISTED',
    EMAILALREADYINUSE = 'EMAIL_ALREADY_IN_USE',
    EMAILALREADYSENT = 'EMAIL_ALREADY_SENT',
    EMAILNOTCONFIRMED = 'EMAIL_NOT_CONFIRMED',
    EMAILNOTSENT = 'EMAIL_NOT_SENT',
    EXPECTEDNULLINPUT = 'EXPECTED_NULL_INPUT',
    EXPECTEDROLEMISSING = 'EXPECTED_ROLE_MISSING',
    FAILEDTOREVERSETRANSFER = 'FAILED_TO_REVERSE_TRANSFER',
    FRESHDESKTICKETNOTFOUND = 'FRESHDESK_TICKET_NOT_FOUND',
    FRESHDESKUNEXPECTEDNUMBEROFRESULTS = 'FRESHDESK_UNEXPECTED_NUMBER_OF_RESULTS',
    IMAGENOTCOMPRESSEDPROPERLY = 'IMAGE_NOT_COMPRESSED_PROPERLY',
    INCORRECTDIMENSIONS = 'INCORRECT_DIMENSIONS',
    INCORRECTENCODING = 'INCORRECT_ENCODING',
    INELIGIBLESTATUSFORTRANSFER = 'INELIGIBLE_STATUS_FOR_TRANSFER',
    INVALIDADDRESSID = 'INVALID_ADDRESS_ID',
    INVALIDAMOUNT = 'INVALID_AMOUNT',
    INVALIDAPITOKEN = 'INVALID_API_TOKEN',
    INVALIDAPIUSAGE = 'INVALID_API_USAGE',
    INVALIDCASEACTIONID = 'INVALID_CASE_ACTION_ID',
    INVALIDCASEID = 'INVALID_CASE_ID',
    INVALIDCASEPAYMENTID = 'INVALID_CASE_PAYMENT_ID',
    INVALIDCITATIONID = 'INVALID_CITATION_ID',
    INVALIDCOURTID = 'INVALID_COURT_ID',
    INVALIDDATE = 'INVALID_DATE',
    INVALIDDISPUTEID = 'INVALID_DISPUTE_ID',
    INVALIDDOCUMENTID = 'INVALID_DOCUMENT_ID',
    INVALIDEMAILADDRESS = 'INVALID_EMAIL_ADDRESS',
    INVALIDEMAILTEMPLATE = 'INVALID_EMAIL_TEMPLATE',
    INVALIDENDDATE = 'INVALID_END_DATE',
    INVALIDENUMVALUE = 'INVALID_ENUM_VALUE',
    INVALIDFEEPERCENTAGE = 'INVALID_FEE_PERCENTAGE',
    INVALIDFIRSTNAME = 'INVALID_FIRST_NAME',
    INVALIDINTERNETADDRESS = 'INVALID_INTERNET_ADDRESS',
    INVALIDINVITATIONTOKEN = 'INVALID_INVITATION_TOKEN',
    INVALIDINVOICELINEITEMID = 'INVALID_INVOICE_LINE_ITEM_ID',
    INVALIDLASTNAME = 'INVALID_LAST_NAME',
    INVALIDLAWFIRM = 'INVALID_LAWFIRM',
    INVALIDLAWYERID = 'INVALID_LAWYER_ID',
    INVALIDLINEITEM = 'INVALID_LINE_ITEM',
    INVALIDMESSAGEID = 'INVALID_MESSAGE_ID',
    INVALIDPAGINATIONTOKEN = 'INVALID_PAGINATION_TOKEN',
    INVALIDPARAMETERVALUE = 'INVALID_PARAMETER_VALUE',
    INVALIDPASSWORD = 'INVALID_PASSWORD',
    INVALIDPASSWORDRESETTOKEN = 'INVALID_PASSWORD_RESET_TOKEN',
    INVALIDPUSHTOKEN = 'INVALID_PUSH_TOKEN',
    INVALIDRECIPIENTLIST = 'INVALID_RECIPIENT_LIST',
    INVALIDREQUEST = 'INVALID_REQUEST',
    INVALIDREQUESTBODY = 'INVALID_REQUEST_BODY',
    INVALIDRESOLUTIONSTATUS = 'INVALID_RESOLUTION_STATUS',
    INVALIDREVIEWCOPY = 'INVALID_REVIEW_COPY',
    INVALIDROLETYPE = 'INVALID_ROLE_TYPE',
    INVALIDSTATE = 'INVALID_STATE',
    INVALIDSTRIPEACCOUNT = 'INVALID_STRIPE_ACCOUNT',
    INVALIDSTRIPECHARGEID = 'INVALID_STRIPE_CHARGE_ID',
    INVALIDSTRIPEREQUEST = 'INVALID_STRIPE_REQUEST',
    INVALIDSTRIPETRANSACTIONID = 'INVALID_STRIPE_TRANSACTION_ID',
    INVALIDSUBSCRIPTIONTYPE = 'INVALID_SUBSCRIPTION_TYPE',
    INVALIDTASKID = 'INVALID_TASK_ID',
    INVALIDTICKETID = 'INVALID_TICKET_ID',
    INVALIDTICKETREVIEWID = 'INVALID_TICKET_REVIEW_ID',
    INVALIDTRAFFICVIOLATION = 'INVALID_TRAFFIC_VIOLATION',
    INVALIDUSERID = 'INVALID_USER_ID',
    INVALIDUSERNAME = 'INVALID_USER_NAME',
    INVITATIONALREADYSENT = 'INVITATION_ALREADY_SENT',
    INVITATIONALREADYVERIFIED = 'INVITATION_ALREADY_VERIFIED',
    INVITATIONCANCELLED = 'INVITATION_CANCELLED',
    INVITATIONHASEXPIRED = 'INVITATION_HAS_EXPIRED',
    INVITATIONRECIPIENTNOACCOUNT = 'INVITATION_RECIPIENT_NO_ACCOUNT',
    IOERROR = 'IO_ERROR',
    LAWFIRMCASECAPACITYREACHED = 'LAWFIRM_CASE_CAPACITY_REACHED',
    LAWFIRMCASENOTACTIVE = 'LAWFIRM_CASE_NOT_ACTIVE',
    LAWFIRMDOESNOTHANDLEACCIDENTS = 'LAWFIRM_DOES_NOT_HANDLE_ACCIDENTS',
    LAWFIRMDOESNOTHANDLEPASTDUE = 'LAWFIRM_DOES_NOT_HANDLE_PAST_DUE',
    LAWFIRMFEEHASSTRIPEREFERENCE = 'LAWFIRM_FEE_HAS_STRIPE_REFERENCE',
    LAWFIRMMISSINGACCOUNTFEE = 'LAWFIRM_MISSING_ACCOUNT_FEE',
    LAWFIRMNOTELIGIBLE = 'LAWFIRM_NOT_ELIGIBLE',
    LAWFIRMONVACATIONMODE = 'LAWFIRM_ON_VACATION_MODE',
    LAWFIRMPAYOUTHASSTRIPEREFERENCE = 'LAWFIRM_PAYOUT_HAS_STRIPE_REFERENCE',
    LAWFIRMNEEDSADDRESS = 'LAW_FIRM_NEEDS_ADDRESS',
    LINEITEMMISSINGRECIPIENT = 'LINE_ITEM_MISSING_RECIPIENT',
    LINKSNOTALLOWED = 'LINKS_NOT_ALLOWED',
    LOBADDRESSCREATIONFAILURE = 'LOB_ADDRESS_CREATION_FAILURE',
    LOBADDRESSVALIDATIONFAILURE = 'LOB_ADDRESS_VALIDATION_FAILURE',
    LOBCANCELCHECKDELIVERYFAILURE = 'LOB_CANCEL_CHECK_DELIVERY_FAILURE',
    LOBCANCELMAILDELIVERYFAILURE = 'LOB_CANCEL_MAIL_DELIVERY_FAILURE',
    LOBCHECKMAILDELIVERYFAILURE = 'LOB_CHECK_MAIL_DELIVERY_FAILURE',
    LOBPOSTCARDCREATIONFAILURE = 'LOB_POSTCARD_CREATION_FAILURE',
    MEDIATYPEINCORRECT = 'MEDIA_TYPE_INCORRECT',
    MERGEROLLBACKNOTALLOWED = 'MERGE_ROLLBACK_NOT_ALLOWED',
    MISSINGACTIONTYPE = 'MISSING_ACTION_TYPE',
    MISSINGADJUSTEDFINEAMOUNT = 'MISSING_ADJUSTED_FINE_AMOUNT',
    MISSINGCASE = 'MISSING_CASE',
    MISSINGCITATIONID = 'MISSING_CITATION_ID',
    MISSINGCOURTID = 'MISSING_COURT_ID',
    MISSINGEMAILADDRESS = 'MISSING_EMAIL_ADDRESS',
    MISSINGFEEDBACKCONTENT = 'MISSING_FEEDBACK_CONTENT',
    MISSINGFIRSTNAME = 'MISSING_FIRSTNAME',
    MISSINGIMAGEURL = 'MISSING_IMAGE_URL',
    MISSINGLASTNAME = 'MISSING_LASTNAME',
    MISSINGLAWFIRMID = 'MISSING_LAWFIRM_ID',
    MISSINGLAWYERID = 'MISSING_LAWYER_ID',
    MISSINGMEDIADATA = 'MISSING_MEDIA_DATA',
    MISSINGNUMVIOLATIONS = 'MISSING_NUM_VIOLATIONS',
    MISSINGPARAMETER = 'MISSING_PARAMETER',
    MISSINGPASSWORD = 'MISSING_PASSWORD',
    MISSINGRECIPIENTEMAIL = 'MISSING_RECIPIENT_EMAIL',
    MISSINGREQUESTBODY = 'MISSING_REQUEST_BODY',
    MISSINGRESOLUTIONSTATUS = 'MISSING_RESOLUTION_STATUS',
    MISSINGSENDEREMAIL = 'MISSING_SENDER_EMAIL',
    MISSINGSENDERPHONENUMBER = 'MISSING_SENDER_PHONE_NUMBER',
    MISSINGSEOURL = 'MISSING_SEO_URL',
    MISSINGSTRIPETOKEN = 'MISSING_STRIPE_TOKEN',
    MISSINGSUBSCRIBER = 'MISSING_SUBSCRIBER',
    MISSINGTICKETISSUEDATE = 'MISSING_TICKET_ISSUE_DATE',
    MISSINGUSERNAME = 'MISSING_USER_NAME',
    MULTIPLELAWFIRMFEES = 'MULTIPLE_LAWFIRM_FEES',
    MULTIPLELAWFIRMPAYOUTS = 'MULTIPLE_LAWFIRM_PAYOUTS',
    MULTIPLEREFUNDSONCHARGE = 'MULTIPLE_REFUNDS_ON_CHARGE',
    MULTIPLESTRIPECUSTOMERACCOUNTSFOUND = 'MULTIPLE_STRIPE_CUSTOMER_ACCOUNTS_FOUND',
    MULTIPLESTRIPETRANSFERSFOUND = 'MULTIPLE_STRIPE_TRANSFERS_FOUND',
    MUSTBEPOSITIVE = 'MUST_BE_POSITIVE',
    NOTIFICATIONERROR = 'NOTIFICATION_ERROR',
    NOTIFICATIONINCORRECTROLE = 'NOTIFICATION_INCORRECT_ROLE',
    NOTIFICATIONTOOLONG = 'NOTIFICATION_TOO_LONG',
    NOTIFICATIONTOSELF = 'NOTIFICATION_TO_SELF',
    NOTAUTHENTICATED = 'NOT_AUTHENTICATED',
    NOACCOUNTWITHEMAIL = 'NO_ACCOUNT_WITH_EMAIL',
    NOCASEOWNER = 'NO_CASE_OWNER',
    NOCHARGESONCASE = 'NO_CHARGES_ON_CASE',
    NOINSURANCE = 'NO_INSURANCE',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    NOSTRIPEACCOUNT = 'NO_STRIPE_ACCOUNT',
    OWNERCASEMESSAGEMISMATCH = 'OWNER_CASE_MESSAGE_MISMATCH',
    PAYMENTPLANSDENIED = 'PAYMENT_PLANS_DENIED',
    PAYMENTPLANLEGALFEEHASCENTS = 'PAYMENT_PLAN_LEGAL_FEE_HAS_CENTS',
    PAYMENTPLANNOTSUPPORTEDWITHPREPAIDCARD = 'PAYMENT_PLAN_NOT_SUPPORTED_WITH_PREPAID_CARD',
    PDFPASSWORDPROTECTED = 'PDF_PASSWORD_PROTECTED',
    PLAIDERROR = 'PLAID_ERROR',
    QBOBILLCREATIONFAILURE = 'QBO_BILL_CREATION_FAILURE',
    QBOVENDORCREATIONFAILURE = 'QBO_VENDOR_CREATION_FAILURE',
    REFERRALSNOTALLOWEDTOBEREDEEMED = 'REFERRALS_NOT_ALLOWED_TO_BE_REDEEMED',
    REFUNDNOTALLOWED = 'REFUND_NOT_ALLOWED',
    REFUNDNOTELIGIBLE = 'REFUND_NOT_ELIGIBLE',
    REFUNDNOTELIGIBLECRIMINAL = 'REFUND_NOT_ELIGIBLE_CRIMINAL',
    RESETTOKENEXPIRED = 'RESET_TOKEN_EXPIRED',
    RESOURCENOTFOUND = 'RESOURCE_NOT_FOUND',
    REVIEWALREADYEXISTS = 'REVIEW_ALREADY_EXISTS',
    ROLENOTSUPPORTED = 'ROLE_NOT_SUPPORTED',
    S3CLIENTFAILED = 'S3_CLIENT_FAILED',
    S3SERVERFAILED = 'S3_SERVER_FAILED',
    SAMEUSERCANNOTBEMERGED = 'SAME_USER_CANNOT_BE_MERGED',
    SEOURLALREADYEXISTS = 'SEO_URL_ALREADY_EXISTS',
    SIMILARCOURT = 'SIMILAR_COURT',
    SOCIALPROFILEMISSINGEMAIL = 'SOCIAL_PROFILE_MISSING_EMAIL',
    STATENOTSUPPORTED = 'STATE_NOT_SUPPORTED',
    STRIPEAPICONNECTIONEXCEPTION = 'STRIPE_API_CONNECTION_EXCEPTION',
    STRIPEAPIEXCEPTION = 'STRIPE_API_EXCEPTION',
    STRIPEAPPLICATIONFEEALREADYREFUNDED = 'STRIPE_APPLICATION_FEE_ALREADY_REFUNDED',
    STRIPEAPPLICATIONFEENOTFOUND = 'STRIPE_APPLICATION_FEE_NOT_FOUND',
    STRIPEAUTHENTICATIONEXCEPTION = 'STRIPE_AUTHENTICATION_EXCEPTION',
    STRIPECARDEXCEPTION = 'STRIPE_CARD_EXCEPTION',
    STRIPECONNECTACCOUNTNOTFOUND = 'STRIPE_CONNECT_ACCOUNT_NOT_FOUND',
    STRIPEERROR = 'STRIPE_ERROR',
    STRIPEFAILEDCHARGE = 'STRIPE_FAILED_CHARGE',
    STRIPEOAUTHCONNECTFAILED = 'STRIPE_OAUTH_CONNECT_FAILED',
    STRIPEOBJECTMISSINGMETADATA = 'STRIPE_OBJECT_MISSING_METADATA',
    STRIPERESOURCENOTFOUND = 'STRIPE_RESOURCE_NOT_FOUND',
    STRIPETRANSFEREXISTS = 'STRIPE_TRANSFER_EXISTS',
    STRIPETRANSFERNOTFOUND = 'STRIPE_TRANSFER_NOT_FOUND',
    SUBSCRIPTIONNOTOWNEDBYUSER = 'SUBSCRIPTION_NOT_OWNED_BY_USER',
    TEMPLATENOTSUPPORTED = 'TEMPLATE_NOT_SUPPORTED',
    TRANSFERALREADYREVERSED = 'TRANSFER_ALREADY_REVERSED',
    TRANSFERIDDOESNTMATCHCHARGE = 'TRANSFER_ID_DOESNT_MATCH_CHARGE',
    TRANSFERNOTSAFE = 'TRANSFER_NOT_SAFE',
    TRANSFERREVERSALNOTALLOWED = 'TRANSFER_REVERSAL_NOT_ALLOWED',
    TRANSFERTOSAMELAWFIRM = 'TRANSFER_TO_SAME_LAWFIRM',
    UNAUTHORIZED = 'UNAUTHORIZED',
    UNEXPECTEDCASESTATUS = 'UNEXPECTED_CASE_STATUS',
    UNEXPECTEDNULLINPUT = 'UNEXPECTED_NULL_INPUT',
    UNEXPECTEDNUMBEROFCHARGES = 'UNEXPECTED_NUMBER_OF_CHARGES',
    UNKNOWN = 'UNKNOWN',
    URLENTITYMISMATCH = 'URL_ENTITY_MISMATCH',
    USERALREADYHASSECONDARYACCOUNT = 'USER_ALREADY_HAS_SECONDARY_ACCOUNT',
    USERALREADYLOGGEDIN = 'USER_ALREADY_LOGGED_IN',
    USERALREADYMERGED = 'USER_ALREADY_MERGED',
    USERCANTUSEOWNCODE = 'USER_CANT_USE_OWN_CODE',
    USERDOESNOTMATCHCITATION = 'USER_DOES_NOT_MATCH_CITATION',
    USERISNOTTHEOWNER = 'USER_IS_NOT_THE_OWNER',
    USERNOTFOUND = 'USER_NOT_FOUND',
    VERIFICATIONLINKNOTVALID = 'VERIFICATION_LINK_NOT_VALID'
}

/**
 * 
 * @export
 * @interface ValidateUserEmailResponse
 */
export interface ValidateUserEmailResponse {
    /**
     * 
     * @type {string}
     * @memberof ValidateUserEmailResponse
     */
    invalidEmailReason?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ValidateUserEmailResponse
     */
    isEmailAvailable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ValidateUserEmailResponse
     */
    isEmailValid?: boolean;
}
/**
 * 
 * @export
 * @interface VerifyMailingAddressRequest
 */
export interface VerifyMailingAddressRequest {
    /**
     * 
     * @type {LobMailingAddress}
     * @memberof VerifyMailingAddressRequest
     */
    address?: LobMailingAddress;
}
/**
 * 
 * @export
 * @interface VerifyMailingAddressResponse
 */
export interface VerifyMailingAddressResponse {
    /**
     * 
     * @type {LobMailingAddress}
     * @memberof VerifyMailingAddressResponse
     */
    addressToUse?: LobMailingAddress;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyMailingAddressResponse
     */
    deliverable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifyMailingAddressResponse
     */
    deliverableMessage?: string;
}
/**
 * 
 * @export
 * @interface VerifyPasswordResetTokenResponse
 */
export interface VerifyPasswordResetTokenResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPasswordResetTokenResponse
     */
    isTokenValid?: boolean;
    /**
     * 
     * @type {number}
     * @memberof VerifyPasswordResetTokenResponse
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface VerifyUserAccountResponse
 */
export interface VerifyUserAccountResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyUserAccountResponse
     */
    emailAlreadyConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyUserAccountResponse
     */
    emailConfirmed?: boolean;
}
/**
 * 
 * @export
 * @interface ViolationClassificationModel
 */
export interface ViolationClassificationModel {
    /**
     * 
     * @type {string}
     * @memberof ViolationClassificationModel
     */
    classification?: ViolationClassificationModelClassificationEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ViolationClassificationModel
     */
    criminal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ViolationClassificationModel
     */
    pureCriminal?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ViolationClassificationModelClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface ViolationInput
 */
export interface ViolationInput {
    /**
     * 
     * @type {string}
     * @memberof ViolationInput
     */
    violationDescription?: string;
}
/**
 * 
 * @export
 * @interface ViolationInputRequest
 */
export interface ViolationInputRequest {
    /**
     * 
     * @type {number}
     * @memberof ViolationInputRequest
     */
    violationId?: number;
}
/**
 * 
 * @export
 * @interface ViolationPenaltyResponse
 */
export interface ViolationPenaltyResponse {
    /**
     * 
     * @type {Array<Penalty>}
     * @memberof ViolationPenaltyResponse
     */
    penalties?: Array<Penalty>;
    /**
     * 
     * @type {string}
     * @memberof ViolationPenaltyResponse
     */
    violationId?: string;
}
/**
 * 
 * @export
 * @interface ViolationResponse
 */
export interface ViolationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ViolationResponse
     */
    criminal?: boolean;
    /**
     * 
     * @type {Array<CaseViolationPenalty>}
     * @memberof ViolationResponse
     */
    penalties?: Array<CaseViolationPenalty>;
    /**
     * 
     * @type {string}
     * @memberof ViolationResponse
     */
    trafficViolationDesc?: string;
    /**
     * 
     * @type {number}
     * @memberof ViolationResponse
     */
    trafficViolationTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof ViolationResponse
     */
    violationClassification?: ViolationResponseViolationClassificationEnum;
    /**
     * 
     * @type {string}
     * @memberof ViolationResponse
     */
    violationCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ViolationResponse
     */
    wobblerToCriminal?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ViolationResponseViolationClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}

/**
 * 
 * @export
 * @interface ZoneId
 */
export interface ZoneId {
    /**
     * 
     * @type {string}
     * @memberof ZoneId
     */
    id?: string;
    /**
     * 
     * @type {ZoneRules}
     * @memberof ZoneId
     */
    rules?: ZoneRules;
}
/**
 * 
 * @export
 * @interface ZoneOffset
 */
export interface ZoneOffset {
    /**
     * 
     * @type {string}
     * @memberof ZoneOffset
     */
    id?: string;
    /**
     * 
     * @type {ZoneRules}
     * @memberof ZoneOffset
     */
    rules?: ZoneRules;
    /**
     * 
     * @type {number}
     * @memberof ZoneOffset
     */
    totalSeconds?: number;
}
/**
 * 
 * @export
 * @interface ZoneOffsetTransition
 */
export interface ZoneOffsetTransition {
    /**
     * 
     * @type {string}
     * @memberof ZoneOffsetTransition
     */
    dateTimeAfter?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneOffsetTransition
     */
    dateTimeBefore?: string;
    /**
     * 
     * @type {Duration}
     * @memberof ZoneOffsetTransition
     */
    duration?: Duration;
    /**
     * 
     * @type {boolean}
     * @memberof ZoneOffsetTransition
     */
    gap?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ZoneOffsetTransition
     */
    instant?: string;
    /**
     * 
     * @type {ZoneOffset}
     * @memberof ZoneOffsetTransition
     */
    offsetAfter?: ZoneOffset;
    /**
     * 
     * @type {ZoneOffset}
     * @memberof ZoneOffsetTransition
     */
    offsetBefore?: ZoneOffset;
    /**
     * 
     * @type {boolean}
     * @memberof ZoneOffsetTransition
     */
    overlap?: boolean;
}
/**
 * 
 * @export
 * @interface ZoneOffsetTransitionRule
 */
export interface ZoneOffsetTransitionRule {
    /**
     * 
     * @type {number}
     * @memberof ZoneOffsetTransitionRule
     */
    dayOfMonthIndicator?: number;
    /**
     * 
     * @type {string}
     * @memberof ZoneOffsetTransitionRule
     */
    dayOfWeek?: ZoneOffsetTransitionRuleDayOfWeekEnum;
    /**
     * 
     * @type {LocalTime}
     * @memberof ZoneOffsetTransitionRule
     */
    localTime?: LocalTime;
    /**
     * 
     * @type {boolean}
     * @memberof ZoneOffsetTransitionRule
     */
    midnightEndOfDay?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ZoneOffsetTransitionRule
     */
    month?: ZoneOffsetTransitionRuleMonthEnum;
    /**
     * 
     * @type {ZoneOffset}
     * @memberof ZoneOffsetTransitionRule
     */
    offsetAfter?: ZoneOffset;
    /**
     * 
     * @type {ZoneOffset}
     * @memberof ZoneOffsetTransitionRule
     */
    offsetBefore?: ZoneOffset;
    /**
     * 
     * @type {ZoneOffset}
     * @memberof ZoneOffsetTransitionRule
     */
    standardOffset?: ZoneOffset;
    /**
     * 
     * @type {string}
     * @memberof ZoneOffsetTransitionRule
     */
    timeDefinition?: ZoneOffsetTransitionRuleTimeDefinitionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ZoneOffsetTransitionRuleDayOfWeekEnum {
    FRIDAY = 'FRIDAY',
    MONDAY = 'MONDAY',
    SATURDAY = 'SATURDAY',
    SUNDAY = 'SUNDAY',
    THURSDAY = 'THURSDAY',
    TUESDAY = 'TUESDAY',
    WEDNESDAY = 'WEDNESDAY'
}
/**
    * @export
    * @enum {string}
    */
export enum ZoneOffsetTransitionRuleMonthEnum {
    APRIL = 'APRIL',
    AUGUST = 'AUGUST',
    DECEMBER = 'DECEMBER',
    FEBRUARY = 'FEBRUARY',
    JANUARY = 'JANUARY',
    JULY = 'JULY',
    JUNE = 'JUNE',
    MARCH = 'MARCH',
    MAY = 'MAY',
    NOVEMBER = 'NOVEMBER',
    OCTOBER = 'OCTOBER',
    SEPTEMBER = 'SEPTEMBER'
}
/**
    * @export
    * @enum {string}
    */
export enum ZoneOffsetTransitionRuleTimeDefinitionEnum {
    STANDARD = 'STANDARD',
    UTC = 'UTC',
    WALL = 'WALL'
}

/**
 * 
 * @export
 * @interface ZoneRules
 */
export interface ZoneRules {
    /**
     * 
     * @type {boolean}
     * @memberof ZoneRules
     */
    fixedOffset?: boolean;
    /**
     * 
     * @type {Array<ZoneOffsetTransitionRule>}
     * @memberof ZoneRules
     */
    transitionRules?: Array<ZoneOffsetTransitionRule>;
    /**
     * 
     * @type {Array<ZoneOffsetTransition>}
     * @memberof ZoneRules
     */
    transitions?: Array<ZoneOffsetTransition>;
}

/**
 * ActionRequiredControllerApi - axios parameter creator
 * @export
 */
export const ActionRequiredControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary notifyClientActionRequirement
         * @param {ClientActionRequiredRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyClientActionRequirementUsingPOST: async (request: ClientActionRequiredRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling notifyClientActionRequirementUsingPOST.');
            }
            const localVarPath = `/api/v1/notifications/action-required`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActionRequiredControllerApi - functional programming interface
 * @export
 */
export const ActionRequiredControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary notifyClientActionRequirement
         * @param {ClientActionRequiredRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyClientActionRequirementUsingPOST(request: ClientActionRequiredRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ActionRequiredControllerApiAxiosParamCreator(configuration).notifyClientActionRequirementUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ActionRequiredControllerApi - factory interface
 * @export
 */
export const ActionRequiredControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary notifyClientActionRequirement
         * @param {ClientActionRequiredRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyClientActionRequirementUsingPOST(request: ClientActionRequiredRequest, options?: any): AxiosPromise<void> {
            return ActionRequiredControllerApiFp(configuration).notifyClientActionRequirementUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActionRequiredControllerApi - object-oriented interface
 * @export
 * @class ActionRequiredControllerApi
 * @extends {BaseAPI}
 */
export class ActionRequiredControllerApi extends BaseAPI {
    /**
     * 
     * @summary notifyClientActionRequirement
     * @param {ClientActionRequiredRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionRequiredControllerApi
     */
    public notifyClientActionRequirementUsingPOST(request: ClientActionRequiredRequest, options?: any) {
        return ActionRequiredControllerApiFp(this.configuration).notifyClientActionRequirementUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ActivityFeedControllerApi - axios parameter creator
 * @export
 */
export const ActivityFeedControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listActivityFeed
         * @param {number} limit limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityFeedUsingGET: async (limit: number, nextPageToken?: string, previousPageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling listActivityFeedUsingGET.');
            }
            const localVarPath = `/api/v1/activity-feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }

            if (previousPageToken !== undefined) {
                localVarQueryParameter['previousPageToken'] = previousPageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityFeedControllerApi - functional programming interface
 * @export
 */
export const ActivityFeedControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listActivityFeed
         * @param {number} limit limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActivityFeedUsingGET(limit: number, nextPageToken?: string, previousPageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetActivityFeedResponse>> {
            const localVarAxiosArgs = await ActivityFeedControllerApiAxiosParamCreator(configuration).listActivityFeedUsingGET(limit, nextPageToken, previousPageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ActivityFeedControllerApi - factory interface
 * @export
 */
export const ActivityFeedControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary listActivityFeed
         * @param {number} limit limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityFeedUsingGET(limit: number, nextPageToken?: string, previousPageToken?: string, options?: any): AxiosPromise<GetActivityFeedResponse> {
            return ActivityFeedControllerApiFp(configuration).listActivityFeedUsingGET(limit, nextPageToken, previousPageToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivityFeedControllerApi - object-oriented interface
 * @export
 * @class ActivityFeedControllerApi
 * @extends {BaseAPI}
 */
export class ActivityFeedControllerApi extends BaseAPI {
    /**
     * 
     * @summary listActivityFeed
     * @param {number} limit limit
     * @param {string} [nextPageToken] nextPageToken
     * @param {string} [previousPageToken] previousPageToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityFeedControllerApi
     */
    public listActivityFeedUsingGET(limit: number, nextPageToken?: string, previousPageToken?: string, options?: any) {
        return ActivityFeedControllerApiFp(this.configuration).listActivityFeedUsingGET(limit, nextPageToken, previousPageToken, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AddressControllerApi - axios parameter creator
 * @export
 */
export const AddressControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCountryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryListUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/countries`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCountryRegions
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryRegionsUsingGET: async (countryCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode','Required parameter countryCode was null or undefined when calling getCountryRegionsUsingGET.');
            }
            const localVarPath = `/api/v1/countries/{countryCode}/regions`
                .replace(`{${"countryCode"}}`, encodeURIComponent(String(countryCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLocation
         * @param {string} zipCode zipCode
         * @param {string} [countryCode] countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationUsingGET: async (zipCode: string, countryCode?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'zipCode' is not null or undefined
            if (zipCode === null || zipCode === undefined) {
                throw new RequiredError('zipCode','Required parameter zipCode was null or undefined when calling getLocationUsingGET.');
            }
            const localVarPath = `/api/v1/locations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (zipCode !== undefined) {
                localVarQueryParameter['zipCode'] = zipCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressControllerApi - functional programming interface
 * @export
 */
export const AddressControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCountryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountryListUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCountryListResponse>> {
            const localVarAxiosArgs = await AddressControllerApiAxiosParamCreator(configuration).getCountryListUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCountryRegions
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountryRegionsUsingGET(countryCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCountryRegionsResponse>> {
            const localVarAxiosArgs = await AddressControllerApiAxiosParamCreator(configuration).getCountryRegionsUsingGET(countryCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLocation
         * @param {string} zipCode zipCode
         * @param {string} [countryCode] countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationUsingGET(zipCode: string, countryCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLocationResponse>> {
            const localVarAxiosArgs = await AddressControllerApiAxiosParamCreator(configuration).getLocationUsingGET(zipCode, countryCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AddressControllerApi - factory interface
 * @export
 */
export const AddressControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getCountryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryListUsingGET(options?: any): AxiosPromise<GetCountryListResponse> {
            return AddressControllerApiFp(configuration).getCountryListUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCountryRegions
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryRegionsUsingGET(countryCode: string, options?: any): AxiosPromise<GetCountryRegionsResponse> {
            return AddressControllerApiFp(configuration).getCountryRegionsUsingGET(countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLocation
         * @param {string} zipCode zipCode
         * @param {string} [countryCode] countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationUsingGET(zipCode: string, countryCode?: string, options?: any): AxiosPromise<GetLocationResponse> {
            return AddressControllerApiFp(configuration).getLocationUsingGET(zipCode, countryCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressControllerApi - object-oriented interface
 * @export
 * @class AddressControllerApi
 * @extends {BaseAPI}
 */
export class AddressControllerApi extends BaseAPI {
    /**
     * 
     * @summary getCountryList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public getCountryListUsingGET(options?: any) {
        return AddressControllerApiFp(this.configuration).getCountryListUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCountryRegions
     * @param {string} countryCode countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public getCountryRegionsUsingGET(countryCode: string, options?: any) {
        return AddressControllerApiFp(this.configuration).getCountryRegionsUsingGET(countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLocation
     * @param {string} zipCode zipCode
     * @param {string} [countryCode] countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    public getLocationUsingGET(zipCode: string, countryCode?: string, options?: any) {
        return AddressControllerApiFp(this.configuration).getLocationUsingGET(zipCode, countryCode, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AlertNotificationControllerApi - axios parameter creator
 * @export
 */
export const AlertNotificationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAlerts
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertsUsingGET: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getAlertsUsingGET.');
            }
            const localVarPath = `/api/v1/alerts/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markAlertAsRead
         * @param {string} alertId alertId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAlertAsReadUsingDELETE: async (alertId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            if (alertId === null || alertId === undefined) {
                throw new RequiredError('alertId','Required parameter alertId was null or undefined when calling markAlertAsReadUsingDELETE.');
            }
            const localVarPath = `/api/v1/alerts/{alertId}`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertNotificationControllerApi - functional programming interface
 * @export
 */
export const AlertNotificationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAlerts
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlertsUsingGET(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertNotificationResponse>> {
            const localVarAxiosArgs = await AlertNotificationControllerApiAxiosParamCreator(configuration).getAlertsUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markAlertAsRead
         * @param {string} alertId alertId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAlertAsReadUsingDELETE(alertId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertNotificationResponse>> {
            const localVarAxiosArgs = await AlertNotificationControllerApiAxiosParamCreator(configuration).markAlertAsReadUsingDELETE(alertId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AlertNotificationControllerApi - factory interface
 * @export
 */
export const AlertNotificationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getAlerts
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertsUsingGET(userId: string, options?: any): AxiosPromise<AlertNotificationResponse> {
            return AlertNotificationControllerApiFp(configuration).getAlertsUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markAlertAsRead
         * @param {string} alertId alertId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAlertAsReadUsingDELETE(alertId: string, options?: any): AxiosPromise<AlertNotificationResponse> {
            return AlertNotificationControllerApiFp(configuration).markAlertAsReadUsingDELETE(alertId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertNotificationControllerApi - object-oriented interface
 * @export
 * @class AlertNotificationControllerApi
 * @extends {BaseAPI}
 */
export class AlertNotificationControllerApi extends BaseAPI {
    /**
     * 
     * @summary getAlerts
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    public getAlertsUsingGET(userId: string, options?: any) {
        return AlertNotificationControllerApiFp(this.configuration).getAlertsUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markAlertAsRead
     * @param {string} alertId alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    public markAlertAsReadUsingDELETE(alertId: string, options?: any) {
        return AlertNotificationControllerApiFp(this.configuration).markAlertAsReadUsingDELETE(alertId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AppEventsControllerApi - axios parameter creator
 * @export
 */
export const AppEventsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addAppEvent
         * @param {AppEventCreateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppEventUsingPOST: async (request: AppEventCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addAppEventUsingPOST.');
            }
            const localVarPath = `/api/v1/app-events`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppEventsControllerApi - functional programming interface
 * @export
 */
export const AppEventsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addAppEvent
         * @param {AppEventCreateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAppEventUsingPOST(request: AppEventCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AppEventsControllerApiAxiosParamCreator(configuration).addAppEventUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AppEventsControllerApi - factory interface
 * @export
 */
export const AppEventsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addAppEvent
         * @param {AppEventCreateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppEventUsingPOST(request: AppEventCreateRequest, options?: any): AxiosPromise<object> {
            return AppEventsControllerApiFp(configuration).addAppEventUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppEventsControllerApi - object-oriented interface
 * @export
 * @class AppEventsControllerApi
 * @extends {BaseAPI}
 */
export class AppEventsControllerApi extends BaseAPI {
    /**
     * 
     * @summary addAppEvent
     * @param {AppEventCreateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEventsControllerApi
     */
    public addAppEventUsingPOST(request: AppEventCreateRequest, options?: any) {
        return AppEventsControllerApiFp(this.configuration).addAppEventUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AuditLawfirmEventsControllerApi - axios parameter creator
 * @export
 */
export const AuditLawfirmEventsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listLawfirmAuditEventsByCursor
         * @param {number} lawfirmId lawfirmId
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmAuditEventsByCursorUsingGET: async (lawfirmId: number, excludeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, includeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, limit?: number, nextPageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling listLawfirmAuditEventsByCursorUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/audit-events`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (excludeTypes) {
                localVarQueryParameter['excludeTypes'] = excludeTypes;
            }

            if (includeTypes) {
                localVarQueryParameter['includeTypes'] = includeTypes;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLawfirmEventsControllerApi - functional programming interface
 * @export
 */
export const AuditLawfirmEventsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listLawfirmAuditEventsByCursor
         * @param {number} lawfirmId lawfirmId
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLawfirmAuditEventsByCursorUsingGET(lawfirmId: number, excludeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, includeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, limit?: number, nextPageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLawfirmAuditEventsByCursorResponse>> {
            const localVarAxiosArgs = await AuditLawfirmEventsControllerApiAxiosParamCreator(configuration).listLawfirmAuditEventsByCursorUsingGET(lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuditLawfirmEventsControllerApi - factory interface
 * @export
 */
export const AuditLawfirmEventsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary listLawfirmAuditEventsByCursor
         * @param {number} lawfirmId lawfirmId
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmAuditEventsByCursorUsingGET(lawfirmId: number, excludeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, includeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, limit?: number, nextPageToken?: string, options?: any): AxiosPromise<ListLawfirmAuditEventsByCursorResponse> {
            return AuditLawfirmEventsControllerApiFp(configuration).listLawfirmAuditEventsByCursorUsingGET(lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuditLawfirmEventsControllerApi - object-oriented interface
 * @export
 * @class AuditLawfirmEventsControllerApi
 * @extends {BaseAPI}
 */
export class AuditLawfirmEventsControllerApi extends BaseAPI {
    /**
     * 
     * @summary listLawfirmAuditEventsByCursor
     * @param {number} lawfirmId lawfirmId
     * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
     * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
     * @param {number} [limit] limit
     * @param {string} [nextPageToken] nextPageToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLawfirmEventsControllerApi
     */
    public listLawfirmAuditEventsByCursorUsingGET(lawfirmId: number, excludeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, includeTypes?: Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>, limit?: number, nextPageToken?: string, options?: any) {
        return AuditLawfirmEventsControllerApiFp(this.configuration).listLawfirmAuditEventsByCursorUsingGET(lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AuthenticationControllerApi - axios parameter creator
 * @export
 */
export const AuthenticationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/authentication/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationControllerApi - functional programming interface
 * @export
 */
export const AuthenticationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUserResponse>> {
            const localVarAxiosArgs = await AuthenticationControllerApiAxiosParamCreator(configuration).getUserInfoUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticationControllerApi - factory interface
 * @export
 */
export const AuthenticationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET(options?: any): AxiosPromise<GetCurrentUserResponse> {
            return AuthenticationControllerApiFp(configuration).getUserInfoUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationControllerApi - object-oriented interface
 * @export
 * @class AuthenticationControllerApi
 * @extends {BaseAPI}
 */
export class AuthenticationControllerApi extends BaseAPI {
    /**
     * 
     * @summary getUserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    public getUserInfoUsingGET(options?: any) {
        return AuthenticationControllerApiFp(this.configuration).getUserInfoUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AwsCredentialsControllerApi - axios parameter creator
 * @export
 */
export const AwsCredentialsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAwsCredentials
         * @param {AwsCredentialsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwsCredentialsUsingPOST: async (request: AwsCredentialsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getAwsCredentialsUsingPOST.');
            }
            const localVarPath = `/api/v1/credentials/aws`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AwsCredentialsControllerApi - functional programming interface
 * @export
 */
export const AwsCredentialsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAwsCredentials
         * @param {AwsCredentialsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAwsCredentialsUsingPOST(request: AwsCredentialsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleCredentialsResponse>> {
            const localVarAxiosArgs = await AwsCredentialsControllerApiAxiosParamCreator(configuration).getAwsCredentialsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AwsCredentialsControllerApi - factory interface
 * @export
 */
export const AwsCredentialsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getAwsCredentials
         * @param {AwsCredentialsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwsCredentialsUsingPOST(request: AwsCredentialsRequest, options?: any): AxiosPromise<SimpleCredentialsResponse> {
            return AwsCredentialsControllerApiFp(configuration).getAwsCredentialsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AwsCredentialsControllerApi - object-oriented interface
 * @export
 * @class AwsCredentialsControllerApi
 * @extends {BaseAPI}
 */
export class AwsCredentialsControllerApi extends BaseAPI {
    /**
     * 
     * @summary getAwsCredentials
     * @param {AwsCredentialsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsCredentialsControllerApi
     */
    public getAwsCredentialsUsingPOST(request: AwsCredentialsRequest, options?: any) {
        return AwsCredentialsControllerApiFp(this.configuration).getAwsCredentialsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * BlogWebhookControllerApi - axios parameter creator
 * @export
 */
export const BlogWebhookControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleEvent
         * @param {BlogEvent} event event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleEventUsingPOST: async (event: BlogEvent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'event' is not null or undefined
            if (event === null || event === undefined) {
                throw new RequiredError('event','Required parameter event was null or undefined when calling handleEventUsingPOST.');
            }
            const localVarPath = `/api/v1/webhooks/prismic`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof event !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(event !== undefined ? event : {}) : (event || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogWebhookControllerApi - functional programming interface
 * @export
 */
export const BlogWebhookControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleEvent
         * @param {BlogEvent} event event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleEventUsingPOST(event: BlogEvent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await BlogWebhookControllerApiAxiosParamCreator(configuration).handleEventUsingPOST(event, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BlogWebhookControllerApi - factory interface
 * @export
 */
export const BlogWebhookControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary handleEvent
         * @param {BlogEvent} event event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleEventUsingPOST(event: BlogEvent, options?: any): AxiosPromise<void> {
            return BlogWebhookControllerApiFp(configuration).handleEventUsingPOST(event, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogWebhookControllerApi - object-oriented interface
 * @export
 * @class BlogWebhookControllerApi
 * @extends {BaseAPI}
 */
export class BlogWebhookControllerApi extends BaseAPI {
    /**
     * 
     * @summary handleEvent
     * @param {BlogEvent} event event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogWebhookControllerApi
     */
    public handleEventUsingPOST(event: BlogEvent, options?: any) {
        return BlogWebhookControllerApiFp(this.configuration).handleEventUsingPOST(event, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * BranchLinkControllerApi - axios parameter creator
 * @export
 */
export const BranchLinkControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createBranchLink
         * @param {CreateBranchLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchLinkUsingPOST: async (request: CreateBranchLinkRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createBranchLinkUsingPOST.');
            }
            const localVarPath = `/api/v1/branch/link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BranchLinkControllerApi - functional programming interface
 * @export
 */
export const BranchLinkControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createBranchLink
         * @param {CreateBranchLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBranchLinkUsingPOST(request: CreateBranchLinkRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await BranchLinkControllerApiAxiosParamCreator(configuration).createBranchLinkUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BranchLinkControllerApi - factory interface
 * @export
 */
export const BranchLinkControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createBranchLink
         * @param {CreateBranchLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchLinkUsingPOST(request: CreateBranchLinkRequest, options?: any): AxiosPromise<object> {
            return BranchLinkControllerApiFp(configuration).createBranchLinkUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BranchLinkControllerApi - object-oriented interface
 * @export
 * @class BranchLinkControllerApi
 * @extends {BaseAPI}
 */
export class BranchLinkControllerApi extends BaseAPI {
    /**
     * 
     * @summary createBranchLink
     * @param {CreateBranchLinkRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchLinkControllerApi
     */
    public createBranchLinkUsingPOST(request: CreateBranchLinkRequest, options?: any) {
        return BranchLinkControllerApiFp(this.configuration).createBranchLinkUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseActionsControllerApi - axios parameter creator
 * @export
 */
export const CaseActionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addActionToCaseV2
         * @param {string} caseId caseId
         * @param {AddActionToCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActionToCaseV2UsingPOST: async (caseId: string, request: AddActionToCaseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling addActionToCaseV2UsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addActionToCaseV2UsingPOST.');
            }
            const localVarPath = `/api/v2/cases/{caseId}/actions`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteActionFromCase
         * @param {string} caseActionIdString caseActionIdString
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActionFromCaseUsingDELETE: async (caseActionIdString: string, caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseActionIdString' is not null or undefined
            if (caseActionIdString === null || caseActionIdString === undefined) {
                throw new RequiredError('caseActionIdString','Required parameter caseActionIdString was null or undefined when calling deleteActionFromCaseUsingDELETE.');
            }
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling deleteActionFromCaseUsingDELETE.');
            }
            const localVarPath = `/api/{caseId}/actions/{caseActionIdString}`
                .replace(`{${"caseActionIdString"}}`, encodeURIComponent(String(caseActionIdString)))
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getActionTimeline
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionTimelineUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getActionTimelineUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/actions/timeline`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllActions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActionsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cases/actions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCaseActions
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseActionsUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCaseActionsUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/actions`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseActionsControllerApi - functional programming interface
 * @export
 */
export const CaseActionsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addActionToCaseV2
         * @param {string} caseId caseId
         * @param {AddActionToCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addActionToCaseV2UsingPOST(caseId: string, request: AddActionToCaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddActionToCaseResponse>> {
            const localVarAxiosArgs = await CaseActionsControllerApiAxiosParamCreator(configuration).addActionToCaseV2UsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteActionFromCase
         * @param {string} caseActionIdString caseActionIdString
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteActionFromCaseUsingDELETE(caseActionIdString: string, caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseActionsControllerApiAxiosParamCreator(configuration).deleteActionFromCaseUsingDELETE(caseActionIdString, caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getActionTimeline
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActionTimelineUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseActionTimelineResponse>> {
            const localVarAxiosArgs = await CaseActionsControllerApiAxiosParamCreator(configuration).getActionTimelineUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAllActions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllActionsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseActionTypesResponse>> {
            const localVarAxiosArgs = await CaseActionsControllerApiAxiosParamCreator(configuration).getAllActionsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCaseActions
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseActionsUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseActionResponse>> {
            const localVarAxiosArgs = await CaseActionsControllerApiAxiosParamCreator(configuration).getCaseActionsUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseActionsControllerApi - factory interface
 * @export
 */
export const CaseActionsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addActionToCaseV2
         * @param {string} caseId caseId
         * @param {AddActionToCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActionToCaseV2UsingPOST(caseId: string, request: AddActionToCaseRequest, options?: any): AxiosPromise<AddActionToCaseResponse> {
            return CaseActionsControllerApiFp(configuration).addActionToCaseV2UsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteActionFromCase
         * @param {string} caseActionIdString caseActionIdString
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActionFromCaseUsingDELETE(caseActionIdString: string, caseId: string, options?: any): AxiosPromise<object> {
            return CaseActionsControllerApiFp(configuration).deleteActionFromCaseUsingDELETE(caseActionIdString, caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getActionTimeline
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionTimelineUsingGET(caseId: string, options?: any): AxiosPromise<GetCaseActionTimelineResponse> {
            return CaseActionsControllerApiFp(configuration).getActionTimelineUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllActions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActionsUsingGET(options?: any): AxiosPromise<GetCaseActionTypesResponse> {
            return CaseActionsControllerApiFp(configuration).getAllActionsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCaseActions
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseActionsUsingGET(caseId: string, options?: any): AxiosPromise<GetCaseActionResponse> {
            return CaseActionsControllerApiFp(configuration).getCaseActionsUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseActionsControllerApi - object-oriented interface
 * @export
 * @class CaseActionsControllerApi
 * @extends {BaseAPI}
 */
export class CaseActionsControllerApi extends BaseAPI {
    /**
     * 
     * @summary addActionToCaseV2
     * @param {string} caseId caseId
     * @param {AddActionToCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    public addActionToCaseV2UsingPOST(caseId: string, request: AddActionToCaseRequest, options?: any) {
        return CaseActionsControllerApiFp(this.configuration).addActionToCaseV2UsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteActionFromCase
     * @param {string} caseActionIdString caseActionIdString
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    public deleteActionFromCaseUsingDELETE(caseActionIdString: string, caseId: string, options?: any) {
        return CaseActionsControllerApiFp(this.configuration).deleteActionFromCaseUsingDELETE(caseActionIdString, caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getActionTimeline
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    public getActionTimelineUsingGET(caseId: string, options?: any) {
        return CaseActionsControllerApiFp(this.configuration).getActionTimelineUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllActions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    public getAllActionsUsingGET(options?: any) {
        return CaseActionsControllerApiFp(this.configuration).getAllActionsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCaseActions
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    public getCaseActionsUsingGET(caseId: string, options?: any) {
        return CaseActionsControllerApiFp(this.configuration).getCaseActionsUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseControllerApi - axios parameter creator
 * @export
 */
export const CaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addViolationsToCitation
         * @param {string} caseId caseId
         * @param {AddViolationsToCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationsToCitationUsingPOST: async (caseId: string, request: AddViolationsToCitationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling addViolationsToCitationUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addViolationsToCitationUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/citation/violations`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary assignCaseToUser
         * @param {string} caseId caseId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCaseToUserUsingPOST: async (caseId: string, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling assignCaseToUserUsingPOST.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling assignCaseToUserUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/owner/{userId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary assignOwner
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOwnerUsingPOST: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling assignOwnerUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/owner`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findChargeDisputesByCaseId
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByCaseIdUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling findChargeDisputesByCaseIdUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/disputes`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAppearanceAttorneysForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppearanceAttorneysForCaseUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getAppearanceAttorneysForCaseUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/appearance-attorneys`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSupportTicketsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForCaseUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getSupportTicketsForCaseUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/support-tickets`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary initiateCaseAndChargeCustomer
         * @param {string} caseId caseId
         * @param {InitiateCaseAndChargeCustomerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseAndChargeCustomerUsingPOST: async (caseId: string, request: InitiateCaseAndChargeCustomerRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/initiate-with-payment`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary initiateCase
         * @param {string} caseId caseId
         * @param {object} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseUsingPOST: async (caseId: string, request?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling initiateCaseUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/initiate`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markCaseAsResolved
         * @param {string} caseId caseId
         * @param {MarkCaseAsResolvedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCaseAsResolvedUsingPOST: async (caseId: string, request: MarkCaseAsResolvedRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling markCaseAsResolvedUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling markCaseAsResolvedUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/resolution`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeViolationsFromCitation
         * @param {string} caseId caseId
         * @param {string} violationTypes violationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeViolationsFromCitationUsingDELETE: async (caseId: string, violationTypes: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
            }
            // verify required parameter 'violationTypes' is not null or undefined
            if (violationTypes === null || violationTypes === undefined) {
                throw new RequiredError('violationTypes','Required parameter violationTypes was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/citation/violations/{violationTypes}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"violationTypes"}}`, encodeURIComponent(String(violationTypes)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reopenCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenCaseUsingPUT: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling reopenCaseUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/reopen`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setCourtDateForCase
         * @param {string} caseId caseId
         * @param {SetCourtDateForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCourtDateForCaseUsingPOST: async (caseId: string, request: SetCourtDateForCaseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling setCourtDateForCaseUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling setCourtDateForCaseUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/courtdate`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary submitRequestForPriceMatch
         * @param {string} caseId caseId
         * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitRequestForPriceMatchUsingPOST: async (caseId: string, priceMatchRequest: PriceMatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
            }
            // verify required parameter 'priceMatchRequest' is not null or undefined
            if (priceMatchRequest === null || priceMatchRequest === undefined) {
                throw new RequiredError('priceMatchRequest','Required parameter priceMatchRequest was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/price-match`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof priceMatchRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(priceMatchRequest !== undefined ? priceMatchRequest : {}) : (priceMatchRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCase
         * @param {string} caseId caseId
         * @param {CaseDomainReq} caseFromRequest caseFromRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseUsingPUT: async (caseId: string, caseFromRequest: CaseDomainReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling updateCaseUsingPUT.');
            }
            // verify required parameter 'caseFromRequest' is not null or undefined
            if (caseFromRequest === null || caseFromRequest === undefined) {
                throw new RequiredError('caseFromRequest','Required parameter caseFromRequest was null or undefined when calling updateCaseUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof caseFromRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(caseFromRequest !== undefined ? caseFromRequest : {}) : (caseFromRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateDeclineTickets
         * @param {string} caseId caseId
         * @param {UpdateCaseDeclineTicketsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeclineTicketsUsingPUT: async (caseId: string, request: UpdateCaseDeclineTicketsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling updateDeclineTicketsUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateDeclineTicketsUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/decline-tickets`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseControllerApi - functional programming interface
 * @export
 */
export const CaseControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addViolationsToCitation
         * @param {string} caseId caseId
         * @param {AddViolationsToCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addViolationsToCitationUsingPOST(caseId: string, request: AddViolationsToCitationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).addViolationsToCitationUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary assignCaseToUser
         * @param {string} caseId caseId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignCaseToUserUsingPOST(caseId: string, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).assignCaseToUserUsingPOST(caseId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary assignOwner
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignOwnerUsingPOST(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).assignOwnerUsingPOST(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary findChargeDisputesByCaseId
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findChargeDisputesByCaseIdUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindChargeDisputesResponse>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).findChargeDisputesByCaseIdUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAppearanceAttorneysForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppearanceAttorneysForCaseUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppearanceAttorneysResponse>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).getAppearanceAttorneysForCaseUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSupportTicketsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportTicketsForCaseUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSupportTicketsResponse>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).getSupportTicketsForCaseUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary initiateCaseAndChargeCustomer
         * @param {string} caseId caseId
         * @param {InitiateCaseAndChargeCustomerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateCaseAndChargeCustomerUsingPOST(caseId: string, request: InitiateCaseAndChargeCustomerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitiateCaseAndChargeCustomerResponse>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).initiateCaseAndChargeCustomerUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary initiateCase
         * @param {string} caseId caseId
         * @param {object} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateCaseUsingPOST(caseId: string, request?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).initiateCaseUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markCaseAsResolved
         * @param {string} caseId caseId
         * @param {MarkCaseAsResolvedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markCaseAsResolvedUsingPOST(caseId: string, request: MarkCaseAsResolvedRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarkCaseAsResolvedResponse>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).markCaseAsResolvedUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeViolationsFromCitation
         * @param {string} caseId caseId
         * @param {string} violationTypes violationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeViolationsFromCitationUsingDELETE(caseId: string, violationTypes: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).removeViolationsFromCitationUsingDELETE(caseId, violationTypes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary reopenCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reopenCaseUsingPUT(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).reopenCaseUsingPUT(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setCourtDateForCase
         * @param {string} caseId caseId
         * @param {SetCourtDateForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCourtDateForCaseUsingPOST(caseId: string, request: SetCourtDateForCaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).setCourtDateForCaseUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary submitRequestForPriceMatch
         * @param {string} caseId caseId
         * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitRequestForPriceMatchUsingPOST(caseId: string, priceMatchRequest: PriceMatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PriceMatchResponse>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).submitRequestForPriceMatchUsingPOST(caseId, priceMatchRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCase
         * @param {string} caseId caseId
         * @param {CaseDomainReq} caseFromRequest caseFromRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCaseUsingPUT(caseId: string, caseFromRequest: CaseDomainReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseResponse>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).updateCaseUsingPUT(caseId, caseFromRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateDeclineTickets
         * @param {string} caseId caseId
         * @param {UpdateCaseDeclineTicketsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeclineTicketsUsingPUT(caseId: string, request: UpdateCaseDeclineTicketsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseControllerApiAxiosParamCreator(configuration).updateDeclineTicketsUsingPUT(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseControllerApi - factory interface
 * @export
 */
export const CaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addViolationsToCitation
         * @param {string} caseId caseId
         * @param {AddViolationsToCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationsToCitationUsingPOST(caseId: string, request: AddViolationsToCitationRequest, options?: any): AxiosPromise<object> {
            return CaseControllerApiFp(configuration).addViolationsToCitationUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary assignCaseToUser
         * @param {string} caseId caseId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCaseToUserUsingPOST(caseId: string, userId: number, options?: any): AxiosPromise<object> {
            return CaseControllerApiFp(configuration).assignCaseToUserUsingPOST(caseId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary assignOwner
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOwnerUsingPOST(caseId: string, options?: any): AxiosPromise<object> {
            return CaseControllerApiFp(configuration).assignOwnerUsingPOST(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary findChargeDisputesByCaseId
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByCaseIdUsingGET(caseId: string, options?: any): AxiosPromise<FindChargeDisputesResponse> {
            return CaseControllerApiFp(configuration).findChargeDisputesByCaseIdUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAppearanceAttorneysForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppearanceAttorneysForCaseUsingGET(caseId: string, options?: any): AxiosPromise<GetAppearanceAttorneysResponse> {
            return CaseControllerApiFp(configuration).getAppearanceAttorneysForCaseUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSupportTicketsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForCaseUsingGET(caseId: string, options?: any): AxiosPromise<GetSupportTicketsResponse> {
            return CaseControllerApiFp(configuration).getSupportTicketsForCaseUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary initiateCaseAndChargeCustomer
         * @param {string} caseId caseId
         * @param {InitiateCaseAndChargeCustomerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseAndChargeCustomerUsingPOST(caseId: string, request: InitiateCaseAndChargeCustomerRequest, options?: any): AxiosPromise<InitiateCaseAndChargeCustomerResponse> {
            return CaseControllerApiFp(configuration).initiateCaseAndChargeCustomerUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary initiateCase
         * @param {string} caseId caseId
         * @param {object} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseUsingPOST(caseId: string, request?: object, options?: any): AxiosPromise<void> {
            return CaseControllerApiFp(configuration).initiateCaseUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markCaseAsResolved
         * @param {string} caseId caseId
         * @param {MarkCaseAsResolvedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCaseAsResolvedUsingPOST(caseId: string, request: MarkCaseAsResolvedRequest, options?: any): AxiosPromise<MarkCaseAsResolvedResponse> {
            return CaseControllerApiFp(configuration).markCaseAsResolvedUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removeViolationsFromCitation
         * @param {string} caseId caseId
         * @param {string} violationTypes violationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeViolationsFromCitationUsingDELETE(caseId: string, violationTypes: string, options?: any): AxiosPromise<object> {
            return CaseControllerApiFp(configuration).removeViolationsFromCitationUsingDELETE(caseId, violationTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary reopenCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenCaseUsingPUT(caseId: string, options?: any): AxiosPromise<void> {
            return CaseControllerApiFp(configuration).reopenCaseUsingPUT(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setCourtDateForCase
         * @param {string} caseId caseId
         * @param {SetCourtDateForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCourtDateForCaseUsingPOST(caseId: string, request: SetCourtDateForCaseRequest, options?: any): AxiosPromise<void> {
            return CaseControllerApiFp(configuration).setCourtDateForCaseUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary submitRequestForPriceMatch
         * @param {string} caseId caseId
         * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitRequestForPriceMatchUsingPOST(caseId: string, priceMatchRequest: PriceMatchRequest, options?: any): AxiosPromise<PriceMatchResponse> {
            return CaseControllerApiFp(configuration).submitRequestForPriceMatchUsingPOST(caseId, priceMatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCase
         * @param {string} caseId caseId
         * @param {CaseDomainReq} caseFromRequest caseFromRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseUsingPUT(caseId: string, caseFromRequest: CaseDomainReq, options?: any): AxiosPromise<GetCaseResponse> {
            return CaseControllerApiFp(configuration).updateCaseUsingPUT(caseId, caseFromRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateDeclineTickets
         * @param {string} caseId caseId
         * @param {UpdateCaseDeclineTicketsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeclineTicketsUsingPUT(caseId: string, request: UpdateCaseDeclineTicketsRequest, options?: any): AxiosPromise<object> {
            return CaseControllerApiFp(configuration).updateDeclineTicketsUsingPUT(caseId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseControllerApi - object-oriented interface
 * @export
 * @class CaseControllerApi
 * @extends {BaseAPI}
 */
export class CaseControllerApi extends BaseAPI {
    /**
     * 
     * @summary addViolationsToCitation
     * @param {string} caseId caseId
     * @param {AddViolationsToCitationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public addViolationsToCitationUsingPOST(caseId: string, request: AddViolationsToCitationRequest, options?: any) {
        return CaseControllerApiFp(this.configuration).addViolationsToCitationUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary assignCaseToUser
     * @param {string} caseId caseId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public assignCaseToUserUsingPOST(caseId: string, userId: number, options?: any) {
        return CaseControllerApiFp(this.configuration).assignCaseToUserUsingPOST(caseId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary assignOwner
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public assignOwnerUsingPOST(caseId: string, options?: any) {
        return CaseControllerApiFp(this.configuration).assignOwnerUsingPOST(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary findChargeDisputesByCaseId
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public findChargeDisputesByCaseIdUsingGET(caseId: string, options?: any) {
        return CaseControllerApiFp(this.configuration).findChargeDisputesByCaseIdUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAppearanceAttorneysForCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public getAppearanceAttorneysForCaseUsingGET(caseId: string, options?: any) {
        return CaseControllerApiFp(this.configuration).getAppearanceAttorneysForCaseUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSupportTicketsForCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public getSupportTicketsForCaseUsingGET(caseId: string, options?: any) {
        return CaseControllerApiFp(this.configuration).getSupportTicketsForCaseUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary initiateCaseAndChargeCustomer
     * @param {string} caseId caseId
     * @param {InitiateCaseAndChargeCustomerRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public initiateCaseAndChargeCustomerUsingPOST(caseId: string, request: InitiateCaseAndChargeCustomerRequest, options?: any) {
        return CaseControllerApiFp(this.configuration).initiateCaseAndChargeCustomerUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary initiateCase
     * @param {string} caseId caseId
     * @param {object} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public initiateCaseUsingPOST(caseId: string, request?: object, options?: any) {
        return CaseControllerApiFp(this.configuration).initiateCaseUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markCaseAsResolved
     * @param {string} caseId caseId
     * @param {MarkCaseAsResolvedRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public markCaseAsResolvedUsingPOST(caseId: string, request: MarkCaseAsResolvedRequest, options?: any) {
        return CaseControllerApiFp(this.configuration).markCaseAsResolvedUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removeViolationsFromCitation
     * @param {string} caseId caseId
     * @param {string} violationTypes violationTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public removeViolationsFromCitationUsingDELETE(caseId: string, violationTypes: string, options?: any) {
        return CaseControllerApiFp(this.configuration).removeViolationsFromCitationUsingDELETE(caseId, violationTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary reopenCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public reopenCaseUsingPUT(caseId: string, options?: any) {
        return CaseControllerApiFp(this.configuration).reopenCaseUsingPUT(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setCourtDateForCase
     * @param {string} caseId caseId
     * @param {SetCourtDateForCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public setCourtDateForCaseUsingPOST(caseId: string, request: SetCourtDateForCaseRequest, options?: any) {
        return CaseControllerApiFp(this.configuration).setCourtDateForCaseUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary submitRequestForPriceMatch
     * @param {string} caseId caseId
     * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public submitRequestForPriceMatchUsingPOST(caseId: string, priceMatchRequest: PriceMatchRequest, options?: any) {
        return CaseControllerApiFp(this.configuration).submitRequestForPriceMatchUsingPOST(caseId, priceMatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCase
     * @param {string} caseId caseId
     * @param {CaseDomainReq} caseFromRequest caseFromRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public updateCaseUsingPUT(caseId: string, caseFromRequest: CaseDomainReq, options?: any) {
        return CaseControllerApiFp(this.configuration).updateCaseUsingPUT(caseId, caseFromRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateDeclineTickets
     * @param {string} caseId caseId
     * @param {UpdateCaseDeclineTicketsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    public updateDeclineTicketsUsingPUT(caseId: string, request: UpdateCaseDeclineTicketsRequest, options?: any) {
        return CaseControllerApiFp(this.configuration).updateDeclineTicketsUsingPUT(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseCreationControllerApi - axios parameter creator
 * @export
 */
export const CaseCreationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addSampleCase
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSampleCaseUsingPUT: async (lawfirmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling addSampleCaseUsingPUT.');
            }
            const localVarPath = `/api/v1/citations/{lawfirmId}/sample`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary matchCase
         * @param {string} citationIdString citationIdString
         * @param {CaseCreationRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCaseUsingPOST: async (citationIdString: string, request?: CaseCreationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationIdString' is not null or undefined
            if (citationIdString === null || citationIdString === undefined) {
                throw new RequiredError('citationIdString','Required parameter citationIdString was null or undefined when calling matchCaseUsingPOST.');
            }
            const localVarPath = `/api/v1/citations/{citationIdString}/case`
                .replace(`{${"citationIdString"}}`, encodeURIComponent(String(citationIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseCreationControllerApi - functional programming interface
 * @export
 */
export const CaseCreationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addSampleCase
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSampleCaseUsingPUT(lawfirmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CaseCreationControllerApiAxiosParamCreator(configuration).addSampleCaseUsingPUT(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary matchCase
         * @param {string} citationIdString citationIdString
         * @param {CaseCreationRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchCaseUsingPOST(citationIdString: string, request?: CaseCreationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchCaseResponse>> {
            const localVarAxiosArgs = await CaseCreationControllerApiAxiosParamCreator(configuration).matchCaseUsingPOST(citationIdString, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseCreationControllerApi - factory interface
 * @export
 */
export const CaseCreationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addSampleCase
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSampleCaseUsingPUT(lawfirmId: string, options?: any): AxiosPromise<void> {
            return CaseCreationControllerApiFp(configuration).addSampleCaseUsingPUT(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary matchCase
         * @param {string} citationIdString citationIdString
         * @param {CaseCreationRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCaseUsingPOST(citationIdString: string, request?: CaseCreationRequest, options?: any): AxiosPromise<MatchCaseResponse> {
            return CaseCreationControllerApiFp(configuration).matchCaseUsingPOST(citationIdString, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseCreationControllerApi - object-oriented interface
 * @export
 * @class CaseCreationControllerApi
 * @extends {BaseAPI}
 */
export class CaseCreationControllerApi extends BaseAPI {
    /**
     * 
     * @summary addSampleCase
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseCreationControllerApi
     */
    public addSampleCaseUsingPUT(lawfirmId: string, options?: any) {
        return CaseCreationControllerApiFp(this.configuration).addSampleCaseUsingPUT(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary matchCase
     * @param {string} citationIdString citationIdString
     * @param {CaseCreationRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseCreationControllerApi
     */
    public matchCaseUsingPOST(citationIdString: string, request?: CaseCreationRequest, options?: any) {
        return CaseCreationControllerApiFp(this.configuration).matchCaseUsingPOST(citationIdString, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseNotesControllerApi - axios parameter creator
 * @export
 */
export const CaseNotesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCaseNotes
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseNotesUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCaseNotesUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/notes`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveCaseNotes
         * @param {string} caseId caseId
         * @param {SaveCaseNotesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCaseNotesUsingPOST: async (caseId: string, request: SaveCaseNotesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling saveCaseNotesUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling saveCaseNotesUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/notes`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseNotesControllerApi - functional programming interface
 * @export
 */
export const CaseNotesControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCaseNotes
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseNotesUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseNotesResponse>> {
            const localVarAxiosArgs = await CaseNotesControllerApiAxiosParamCreator(configuration).getCaseNotesUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary saveCaseNotes
         * @param {string} caseId caseId
         * @param {SaveCaseNotesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveCaseNotesUsingPOST(caseId: string, request: SaveCaseNotesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseNotesControllerApiAxiosParamCreator(configuration).saveCaseNotesUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseNotesControllerApi - factory interface
 * @export
 */
export const CaseNotesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getCaseNotes
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseNotesUsingGET(caseId: string, options?: any): AxiosPromise<GetCaseNotesResponse> {
            return CaseNotesControllerApiFp(configuration).getCaseNotesUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary saveCaseNotes
         * @param {string} caseId caseId
         * @param {SaveCaseNotesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCaseNotesUsingPOST(caseId: string, request: SaveCaseNotesRequest, options?: any): AxiosPromise<object> {
            return CaseNotesControllerApiFp(configuration).saveCaseNotesUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseNotesControllerApi - object-oriented interface
 * @export
 * @class CaseNotesControllerApi
 * @extends {BaseAPI}
 */
export class CaseNotesControllerApi extends BaseAPI {
    /**
     * 
     * @summary getCaseNotes
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseNotesControllerApi
     */
    public getCaseNotesUsingGET(caseId: string, options?: any) {
        return CaseNotesControllerApiFp(this.configuration).getCaseNotesUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary saveCaseNotes
     * @param {string} caseId caseId
     * @param {SaveCaseNotesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseNotesControllerApi
     */
    public saveCaseNotesUsingPOST(caseId: string, request: SaveCaseNotesRequest, options?: any) {
        return CaseNotesControllerApiFp(this.configuration).saveCaseNotesUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CasePaymentControllerApi - axios parameter creator
 * @export
 */
export const CasePaymentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary authorizeChargeForCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {AuthorizeChargeForCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeChargeForCasePaymentUsingPOST: async (caseId: string, casePaymentId: string, request?: AuthorizeChargeForCasePaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling authorizeChargeForCasePaymentUsingPOST.');
            }
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling authorizeChargeForCasePaymentUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payments/{casePaymentId}/authorize`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary captureChargeFromCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {CaptureChargeFromCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureChargeFromCasePaymentUsingPOST: async (caseId: string, casePaymentId: string, request?: CaptureChargeFromCasePaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling captureChargeFromCasePaymentUsingPOST.');
            }
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling captureChargeFromCasePaymentUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payments/{casePaymentId}/capture`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCasePaymentUsingDELETE: async (caseId: string, casePaymentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling deleteCasePaymentUsingDELETE.');
            }
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling deleteCasePaymentUsingDELETE.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payments/{casePaymentId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary generateCasePaymentPlan
         * @param {string} caseId caseId
         * @param {string} paymentPlanTypeId paymentPlanTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCasePaymentPlanUsingGET: async (caseId: string, paymentPlanTypeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling generateCasePaymentPlanUsingGET.');
            }
            // verify required parameter 'paymentPlanTypeId' is not null or undefined
            if (paymentPlanTypeId === null || paymentPlanTypeId === undefined) {
                throw new RequiredError('paymentPlanTypeId','Required parameter paymentPlanTypeId was null or undefined when calling generateCasePaymentPlanUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payment-plans/{paymentPlanTypeId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"paymentPlanTypeId"}}`, encodeURIComponent(String(paymentPlanTypeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAvailablePaymentPlans
         * @param {number} lawfirmId lawfirmId
         * @param {string} legalFeeInCents legalFeeInCents
         * @param {string} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailablePaymentPlansUsingPOST: async (lawfirmId: number, legalFeeInCents: string, state: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
            }
            // verify required parameter 'legalFeeInCents' is not null or undefined
            if (legalFeeInCents === null || legalFeeInCents === undefined) {
                throw new RequiredError('legalFeeInCents','Required parameter legalFeeInCents was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
            }
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
            }
            const localVarPath = `/api/v1/payment-plans/{lawfirmId}/case-payment`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (legalFeeInCents !== undefined) {
                localVarQueryParameter['legalFeeInCents'] = legalFeeInCents;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCasePayments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasePaymentsUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCasePaymentsUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payments`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPaymentPlanOptions
         * @param {string} caseId caseId
         * @param {number} feeInCents feeInCents
         * @param {number} lawfirmId lawfirmId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanOptionsUsingGET: async (caseId: string, feeInCents: number, lawfirmId: number, userId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getPaymentPlanOptionsUsingGET.');
            }
            // verify required parameter 'feeInCents' is not null or undefined
            if (feeInCents === null || feeInCents === undefined) {
                throw new RequiredError('feeInCents','Required parameter feeInCents was null or undefined when calling getPaymentPlanOptionsUsingGET.');
            }
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getPaymentPlanOptionsUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payment-plans`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (feeInCents !== undefined) {
                localVarQueryParameter['feeInCents'] = feeInCents;
            }

            if (lawfirmId !== undefined) {
                localVarQueryParameter['lawfirmId'] = lawfirmId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getStripeCharge
         * @param {string} caseId caseId
         * @param {string} stripeChargeId stripeChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargeUsingGET: async (caseId: string, stripeChargeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getStripeChargeUsingGET.');
            }
            // verify required parameter 'stripeChargeId' is not null or undefined
            if (stripeChargeId === null || stripeChargeId === undefined) {
                throw new RequiredError('stripeChargeId','Required parameter stripeChargeId was null or undefined when calling getStripeChargeUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/charges/{stripeChargeId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"stripeChargeId"}}`, encodeURIComponent(String(stripeChargeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getStripeCharges
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargesUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getStripeChargesUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/stripe-charges`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listCostItemsForAttorney
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForAttorneyUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling listCostItemsForAttorneyUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/attorney/cost`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listCostItemsForCustomer
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForCustomerUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling listCostItemsForCustomerUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/customer/cost`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary scheduleNewPayment
         * @param {string} caseId caseId
         * @param {ScheduleNewPaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleNewPaymentUsingPOST: async (caseId: string, request: ScheduleNewPaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling scheduleNewPaymentUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling scheduleNewPaymentUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payments`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCasePayment
         * @param {string} casePaymentId casePaymentId
         * @param {UpdateCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCasePaymentUsingPUT: async (casePaymentId: string, request: UpdateCasePaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling updateCasePaymentUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateCasePaymentUsingPUT.');
            }
            const localVarPath = `/api/v1/payments/{casePaymentId}`
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatePaymentDueDate
         * @param {string} casePaymentId casePaymentId
         * @param {UpdatePaymentDueDateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentDueDateUsingPUT: async (casePaymentId: string, request: UpdatePaymentDueDateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling updatePaymentDueDateUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updatePaymentDueDateUsingPUT.');
            }
            const localVarPath = `/api/v1/payments/{casePaymentId}/due-date`
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatePaymentRecipient
         * @param {string} casePaymentId casePaymentId
         * @param {'LAWFIRM' | 'OTR'} recipient recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentRecipientUsingPUT: async (casePaymentId: string, recipient: 'LAWFIRM' | 'OTR', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling updatePaymentRecipientUsingPUT.');
            }
            // verify required parameter 'recipient' is not null or undefined
            if (recipient === null || recipient === undefined) {
                throw new RequiredError('recipient','Required parameter recipient was null or undefined when calling updatePaymentRecipientUsingPUT.');
            }
            const localVarPath = `/api/v1/payments/{casePaymentId}/owner`
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CasePaymentControllerApi - functional programming interface
 * @export
 */
export const CasePaymentControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary authorizeChargeForCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {AuthorizeChargeForCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizeChargeForCasePaymentUsingPOST(caseId: string, casePaymentId: string, request?: AuthorizeChargeForCasePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizeChargeForCasePaymentResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).authorizeChargeForCasePaymentUsingPOST(caseId, casePaymentId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary captureChargeFromCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {CaptureChargeFromCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async captureChargeFromCasePaymentUsingPOST(caseId: string, casePaymentId: string, request?: CaptureChargeFromCasePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).captureChargeFromCasePaymentUsingPOST(caseId, casePaymentId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCasePaymentUsingDELETE(caseId: string, casePaymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).deleteCasePaymentUsingDELETE(caseId, casePaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary generateCasePaymentPlan
         * @param {string} caseId caseId
         * @param {string} paymentPlanTypeId paymentPlanTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateCasePaymentPlanUsingGET(caseId: string, paymentPlanTypeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCostItemsForCustomerResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).generateCasePaymentPlanUsingGET(caseId, paymentPlanTypeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAvailablePaymentPlans
         * @param {number} lawfirmId lawfirmId
         * @param {string} legalFeeInCents legalFeeInCents
         * @param {string} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailablePaymentPlansUsingPOST(lawfirmId: number, legalFeeInCents: string, state: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAvailablePaymentPlansResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).getAvailablePaymentPlansUsingPOST(lawfirmId, legalFeeInCents, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCasePayments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCasePaymentsUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCasePaymentsResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).getCasePaymentsUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPaymentPlanOptions
         * @param {string} caseId caseId
         * @param {number} feeInCents feeInCents
         * @param {number} lawfirmId lawfirmId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentPlanOptionsUsingGET(caseId: string, feeInCents: number, lawfirmId: number, userId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAvailablePaymentPlansResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).getPaymentPlanOptionsUsingGET(caseId, feeInCents, lawfirmId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getStripeCharge
         * @param {string} caseId caseId
         * @param {string} stripeChargeId stripeChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStripeChargeUsingGET(caseId: string, stripeChargeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStripeChargeResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).getStripeChargeUsingGET(caseId, stripeChargeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getStripeCharges
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStripeChargesUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStripeChargesResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).getStripeChargesUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listCostItemsForAttorney
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCostItemsForAttorneyUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseCostsAttorneyResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).listCostItemsForAttorneyUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listCostItemsForCustomer
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCostItemsForCustomerUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCostItemsForCustomerResponse>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).listCostItemsForCustomerUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary scheduleNewPayment
         * @param {string} caseId caseId
         * @param {ScheduleNewPaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleNewPaymentUsingPOST(caseId: string, request: ScheduleNewPaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).scheduleNewPaymentUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCasePayment
         * @param {string} casePaymentId casePaymentId
         * @param {UpdateCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCasePaymentUsingPUT(casePaymentId: string, request: UpdateCasePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).updateCasePaymentUsingPUT(casePaymentId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updatePaymentDueDate
         * @param {string} casePaymentId casePaymentId
         * @param {UpdatePaymentDueDateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentDueDateUsingPUT(casePaymentId: string, request: UpdatePaymentDueDateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).updatePaymentDueDateUsingPUT(casePaymentId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updatePaymentRecipient
         * @param {string} casePaymentId casePaymentId
         * @param {'LAWFIRM' | 'OTR'} recipient recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentRecipientUsingPUT(casePaymentId: string, recipient: 'LAWFIRM' | 'OTR', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CasePaymentControllerApiAxiosParamCreator(configuration).updatePaymentRecipientUsingPUT(casePaymentId, recipient, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CasePaymentControllerApi - factory interface
 * @export
 */
export const CasePaymentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary authorizeChargeForCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {AuthorizeChargeForCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeChargeForCasePaymentUsingPOST(caseId: string, casePaymentId: string, request?: AuthorizeChargeForCasePaymentRequest, options?: any): AxiosPromise<AuthorizeChargeForCasePaymentResponse> {
            return CasePaymentControllerApiFp(configuration).authorizeChargeForCasePaymentUsingPOST(caseId, casePaymentId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary captureChargeFromCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {CaptureChargeFromCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureChargeFromCasePaymentUsingPOST(caseId: string, casePaymentId: string, request?: CaptureChargeFromCasePaymentRequest, options?: any): AxiosPromise<boolean> {
            return CasePaymentControllerApiFp(configuration).captureChargeFromCasePaymentUsingPOST(caseId, casePaymentId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCasePaymentUsingDELETE(caseId: string, casePaymentId: string, options?: any): AxiosPromise<void> {
            return CasePaymentControllerApiFp(configuration).deleteCasePaymentUsingDELETE(caseId, casePaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary generateCasePaymentPlan
         * @param {string} caseId caseId
         * @param {string} paymentPlanTypeId paymentPlanTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCasePaymentPlanUsingGET(caseId: string, paymentPlanTypeId: string, options?: any): AxiosPromise<ListCostItemsForCustomerResponse> {
            return CasePaymentControllerApiFp(configuration).generateCasePaymentPlanUsingGET(caseId, paymentPlanTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAvailablePaymentPlans
         * @param {number} lawfirmId lawfirmId
         * @param {string} legalFeeInCents legalFeeInCents
         * @param {string} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailablePaymentPlansUsingPOST(lawfirmId: number, legalFeeInCents: string, state: string, options?: any): AxiosPromise<GetAvailablePaymentPlansResponse> {
            return CasePaymentControllerApiFp(configuration).getAvailablePaymentPlansUsingPOST(lawfirmId, legalFeeInCents, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCasePayments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasePaymentsUsingGET(caseId: string, options?: any): AxiosPromise<GetCasePaymentsResponse> {
            return CasePaymentControllerApiFp(configuration).getCasePaymentsUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPaymentPlanOptions
         * @param {string} caseId caseId
         * @param {number} feeInCents feeInCents
         * @param {number} lawfirmId lawfirmId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanOptionsUsingGET(caseId: string, feeInCents: number, lawfirmId: number, userId?: number, options?: any): AxiosPromise<GetAvailablePaymentPlansResponse> {
            return CasePaymentControllerApiFp(configuration).getPaymentPlanOptionsUsingGET(caseId, feeInCents, lawfirmId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getStripeCharge
         * @param {string} caseId caseId
         * @param {string} stripeChargeId stripeChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargeUsingGET(caseId: string, stripeChargeId: string, options?: any): AxiosPromise<GetStripeChargeResponse> {
            return CasePaymentControllerApiFp(configuration).getStripeChargeUsingGET(caseId, stripeChargeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getStripeCharges
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargesUsingGET(caseId: string, options?: any): AxiosPromise<GetStripeChargesResponse> {
            return CasePaymentControllerApiFp(configuration).getStripeChargesUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listCostItemsForAttorney
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForAttorneyUsingGET(caseId: string, options?: any): AxiosPromise<GetCaseCostsAttorneyResponse> {
            return CasePaymentControllerApiFp(configuration).listCostItemsForAttorneyUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listCostItemsForCustomer
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForCustomerUsingGET(caseId: string, options?: any): AxiosPromise<ListCostItemsForCustomerResponse> {
            return CasePaymentControllerApiFp(configuration).listCostItemsForCustomerUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary scheduleNewPayment
         * @param {string} caseId caseId
         * @param {ScheduleNewPaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleNewPaymentUsingPOST(caseId: string, request: ScheduleNewPaymentRequest, options?: any): AxiosPromise<void> {
            return CasePaymentControllerApiFp(configuration).scheduleNewPaymentUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCasePayment
         * @param {string} casePaymentId casePaymentId
         * @param {UpdateCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCasePaymentUsingPUT(casePaymentId: string, request: UpdateCasePaymentRequest, options?: any): AxiosPromise<void> {
            return CasePaymentControllerApiFp(configuration).updateCasePaymentUsingPUT(casePaymentId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatePaymentDueDate
         * @param {string} casePaymentId casePaymentId
         * @param {UpdatePaymentDueDateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentDueDateUsingPUT(casePaymentId: string, request: UpdatePaymentDueDateRequest, options?: any): AxiosPromise<void> {
            return CasePaymentControllerApiFp(configuration).updatePaymentDueDateUsingPUT(casePaymentId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatePaymentRecipient
         * @param {string} casePaymentId casePaymentId
         * @param {'LAWFIRM' | 'OTR'} recipient recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentRecipientUsingPUT(casePaymentId: string, recipient: 'LAWFIRM' | 'OTR', options?: any): AxiosPromise<void> {
            return CasePaymentControllerApiFp(configuration).updatePaymentRecipientUsingPUT(casePaymentId, recipient, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CasePaymentControllerApi - object-oriented interface
 * @export
 * @class CasePaymentControllerApi
 * @extends {BaseAPI}
 */
export class CasePaymentControllerApi extends BaseAPI {
    /**
     * 
     * @summary authorizeChargeForCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {AuthorizeChargeForCasePaymentRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public authorizeChargeForCasePaymentUsingPOST(caseId: string, casePaymentId: string, request?: AuthorizeChargeForCasePaymentRequest, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).authorizeChargeForCasePaymentUsingPOST(caseId, casePaymentId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary captureChargeFromCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {CaptureChargeFromCasePaymentRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public captureChargeFromCasePaymentUsingPOST(caseId: string, casePaymentId: string, request?: CaptureChargeFromCasePaymentRequest, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).captureChargeFromCasePaymentUsingPOST(caseId, casePaymentId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public deleteCasePaymentUsingDELETE(caseId: string, casePaymentId: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).deleteCasePaymentUsingDELETE(caseId, casePaymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary generateCasePaymentPlan
     * @param {string} caseId caseId
     * @param {string} paymentPlanTypeId paymentPlanTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public generateCasePaymentPlanUsingGET(caseId: string, paymentPlanTypeId: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).generateCasePaymentPlanUsingGET(caseId, paymentPlanTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAvailablePaymentPlans
     * @param {number} lawfirmId lawfirmId
     * @param {string} legalFeeInCents legalFeeInCents
     * @param {string} state state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public getAvailablePaymentPlansUsingPOST(lawfirmId: number, legalFeeInCents: string, state: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).getAvailablePaymentPlansUsingPOST(lawfirmId, legalFeeInCents, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCasePayments
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public getCasePaymentsUsingGET(caseId: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).getCasePaymentsUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPaymentPlanOptions
     * @param {string} caseId caseId
     * @param {number} feeInCents feeInCents
     * @param {number} lawfirmId lawfirmId
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public getPaymentPlanOptionsUsingGET(caseId: string, feeInCents: number, lawfirmId: number, userId?: number, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).getPaymentPlanOptionsUsingGET(caseId, feeInCents, lawfirmId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getStripeCharge
     * @param {string} caseId caseId
     * @param {string} stripeChargeId stripeChargeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public getStripeChargeUsingGET(caseId: string, stripeChargeId: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).getStripeChargeUsingGET(caseId, stripeChargeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getStripeCharges
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public getStripeChargesUsingGET(caseId: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).getStripeChargesUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listCostItemsForAttorney
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public listCostItemsForAttorneyUsingGET(caseId: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).listCostItemsForAttorneyUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listCostItemsForCustomer
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public listCostItemsForCustomerUsingGET(caseId: string, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).listCostItemsForCustomerUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary scheduleNewPayment
     * @param {string} caseId caseId
     * @param {ScheduleNewPaymentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public scheduleNewPaymentUsingPOST(caseId: string, request: ScheduleNewPaymentRequest, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).scheduleNewPaymentUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCasePayment
     * @param {string} casePaymentId casePaymentId
     * @param {UpdateCasePaymentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public updateCasePaymentUsingPUT(casePaymentId: string, request: UpdateCasePaymentRequest, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).updateCasePaymentUsingPUT(casePaymentId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatePaymentDueDate
     * @param {string} casePaymentId casePaymentId
     * @param {UpdatePaymentDueDateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public updatePaymentDueDateUsingPUT(casePaymentId: string, request: UpdatePaymentDueDateRequest, options?: any) {
        return CasePaymentControllerApiFp(this.configuration).updatePaymentDueDateUsingPUT(casePaymentId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatePaymentRecipient
     * @param {string} casePaymentId casePaymentId
     * @param {'LAWFIRM' | 'OTR'} recipient recipient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    public updatePaymentRecipientUsingPUT(casePaymentId: string, recipient: 'LAWFIRM' | 'OTR', options?: any) {
        return CasePaymentControllerApiFp(this.configuration).updatePaymentRecipientUsingPUT(casePaymentId, recipient, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseReferralCodeControllerApi - axios parameter creator
 * @export
 */
export const CaseReferralCodeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
         * @param {string} caseId caseId
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyReferralCodeUsingPOST: async (caseId: string, codeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling applyReferralCodeUsingPOST.');
            }
            // verify required parameter 'codeId' is not null or undefined
            if (codeId === null || codeId === undefined) {
                throw new RequiredError('codeId','Required parameter codeId was null or undefined when calling applyReferralCodeUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/referralcode/{codeId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseReferralCodeControllerApi - functional programming interface
 * @export
 */
export const CaseReferralCodeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
         * @param {string} caseId caseId
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyReferralCodeUsingPOST(caseId: string, codeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchCaseResponse>> {
            const localVarAxiosArgs = await CaseReferralCodeControllerApiAxiosParamCreator(configuration).applyReferralCodeUsingPOST(caseId, codeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseReferralCodeControllerApi - factory interface
 * @export
 */
export const CaseReferralCodeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
         * @param {string} caseId caseId
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyReferralCodeUsingPOST(caseId: string, codeId: string, options?: any): AxiosPromise<MatchCaseResponse> {
            return CaseReferralCodeControllerApiFp(configuration).applyReferralCodeUsingPOST(caseId, codeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseReferralCodeControllerApi - object-oriented interface
 * @export
 * @class CaseReferralCodeControllerApi
 * @extends {BaseAPI}
 */
export class CaseReferralCodeControllerApi extends BaseAPI {
    /**
     * 
     * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
     * @param {string} caseId caseId
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseReferralCodeControllerApi
     */
    public applyReferralCodeUsingPOST(caseId: string, codeId: string, options?: any) {
        return CaseReferralCodeControllerApiFp(this.configuration).applyReferralCodeUsingPOST(caseId, codeId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseRefundControllerApi - axios parameter creator
 * @export
 */
export const CaseRefundControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary cancelCase
         * @param {CancelCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCaseUsingDELETE: async (request: CancelCaseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling cancelCaseUsingDELETE.');
            }
            const localVarPath = `/api/v2/cases`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary refundCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {RefundCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundCasePaymentUsingPOST: async (caseId: string, casePaymentId: string, request: RefundCasePaymentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling refundCasePaymentUsingPOST.');
            }
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling refundCasePaymentUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling refundCasePaymentUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payments/{casePaymentId}/refund`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary releasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePaymentUsingPOST: async (caseId: string, casePaymentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling releasePaymentUsingPOST.');
            }
            // verify required parameter 'casePaymentId' is not null or undefined
            if (casePaymentId === null || casePaymentId === undefined) {
                throw new RequiredError('casePaymentId','Required parameter casePaymentId was null or undefined when calling releasePaymentUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payments/{casePaymentId}/release`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"casePaymentId"}}`, encodeURIComponent(String(casePaymentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateRefundEligibilityForCase
         * @param {string} caseId caseId
         * @param {UpdateRefundEligibilityForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRefundEligibilityForCaseUsingPUT: async (caseId: string, request: UpdateRefundEligibilityForCaseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling updateRefundEligibilityForCaseUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateRefundEligibilityForCaseUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/refund-eligibility`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseRefundControllerApi - functional programming interface
 * @export
 */
export const CaseRefundControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary cancelCase
         * @param {CancelCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelCaseUsingDELETE(request: CancelCaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseResponse>> {
            const localVarAxiosArgs = await CaseRefundControllerApiAxiosParamCreator(configuration).cancelCaseUsingDELETE(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary refundCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {RefundCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundCasePaymentUsingPOST(caseId: string, casePaymentId: string, request: RefundCasePaymentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CaseRefundControllerApiAxiosParamCreator(configuration).refundCasePaymentUsingPOST(caseId, casePaymentId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary releasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releasePaymentUsingPOST(caseId: string, casePaymentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CaseRefundControllerApiAxiosParamCreator(configuration).releasePaymentUsingPOST(caseId, casePaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateRefundEligibilityForCase
         * @param {string} caseId caseId
         * @param {UpdateRefundEligibilityForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRefundEligibilityForCaseUsingPUT(caseId: string, request: UpdateRefundEligibilityForCaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSupportTicketsResponse>> {
            const localVarAxiosArgs = await CaseRefundControllerApiAxiosParamCreator(configuration).updateRefundEligibilityForCaseUsingPUT(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseRefundControllerApi - factory interface
 * @export
 */
export const CaseRefundControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary cancelCase
         * @param {CancelCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCaseUsingDELETE(request: CancelCaseRequest, options?: any): AxiosPromise<GetCaseResponse> {
            return CaseRefundControllerApiFp(configuration).cancelCaseUsingDELETE(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary refundCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {RefundCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundCasePaymentUsingPOST(caseId: string, casePaymentId: string, request: RefundCasePaymentRequest, options?: any): AxiosPromise<void> {
            return CaseRefundControllerApiFp(configuration).refundCasePaymentUsingPOST(caseId, casePaymentId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary releasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePaymentUsingPOST(caseId: string, casePaymentId: string, options?: any): AxiosPromise<void> {
            return CaseRefundControllerApiFp(configuration).releasePaymentUsingPOST(caseId, casePaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateRefundEligibilityForCase
         * @param {string} caseId caseId
         * @param {UpdateRefundEligibilityForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRefundEligibilityForCaseUsingPUT(caseId: string, request: UpdateRefundEligibilityForCaseRequest, options?: any): AxiosPromise<GetSupportTicketsResponse> {
            return CaseRefundControllerApiFp(configuration).updateRefundEligibilityForCaseUsingPUT(caseId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseRefundControllerApi - object-oriented interface
 * @export
 * @class CaseRefundControllerApi
 * @extends {BaseAPI}
 */
export class CaseRefundControllerApi extends BaseAPI {
    /**
     * 
     * @summary cancelCase
     * @param {CancelCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    public cancelCaseUsingDELETE(request: CancelCaseRequest, options?: any) {
        return CaseRefundControllerApiFp(this.configuration).cancelCaseUsingDELETE(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary refundCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {RefundCasePaymentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    public refundCasePaymentUsingPOST(caseId: string, casePaymentId: string, request: RefundCasePaymentRequest, options?: any) {
        return CaseRefundControllerApiFp(this.configuration).refundCasePaymentUsingPOST(caseId, casePaymentId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary releasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    public releasePaymentUsingPOST(caseId: string, casePaymentId: string, options?: any) {
        return CaseRefundControllerApiFp(this.configuration).releasePaymentUsingPOST(caseId, casePaymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateRefundEligibilityForCase
     * @param {string} caseId caseId
     * @param {UpdateRefundEligibilityForCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    public updateRefundEligibilityForCaseUsingPUT(caseId: string, request: UpdateRefundEligibilityForCaseRequest, options?: any) {
        return CaseRefundControllerApiFp(this.configuration).updateRefundEligibilityForCaseUsingPUT(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseStatusControllerApi - axios parameter creator
 * @export
 */
export const CaseStatusControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCaseResolutionStatuses
         * @param {string} [stateCode] stateCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseResolutionStatusesUsingGET: async (stateCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/case-statuses/resolution-statuses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (stateCode !== undefined) {
                localVarQueryParameter['stateCode'] = stateCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCaseStatuses
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusesUsingGET: async (categories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/case-statuses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseStatusControllerApi - functional programming interface
 * @export
 */
export const CaseStatusControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCaseResolutionStatuses
         * @param {string} [stateCode] stateCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseResolutionStatusesUsingGET(stateCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseResolutionStatusesResponse>> {
            const localVarAxiosArgs = await CaseStatusControllerApiAxiosParamCreator(configuration).getCaseResolutionStatusesUsingGET(stateCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCaseStatuses
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseStatusesUsingGET(categories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CaseStatusDetailsResponse>>> {
            const localVarAxiosArgs = await CaseStatusControllerApiAxiosParamCreator(configuration).getCaseStatusesUsingGET(categories, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseStatusControllerApi - factory interface
 * @export
 */
export const CaseStatusControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getCaseResolutionStatuses
         * @param {string} [stateCode] stateCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseResolutionStatusesUsingGET(stateCode?: string, options?: any): AxiosPromise<GetCaseResolutionStatusesResponse> {
            return CaseStatusControllerApiFp(configuration).getCaseResolutionStatusesUsingGET(stateCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCaseStatuses
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusesUsingGET(categories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options?: any): AxiosPromise<Array<CaseStatusDetailsResponse>> {
            return CaseStatusControllerApiFp(configuration).getCaseStatusesUsingGET(categories, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseStatusControllerApi - object-oriented interface
 * @export
 * @class CaseStatusControllerApi
 * @extends {BaseAPI}
 */
export class CaseStatusControllerApi extends BaseAPI {
    /**
     * 
     * @summary getCaseResolutionStatuses
     * @param {string} [stateCode] stateCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseStatusControllerApi
     */
    public getCaseResolutionStatusesUsingGET(stateCode?: string, options?: any) {
        return CaseStatusControllerApiFp(this.configuration).getCaseResolutionStatusesUsingGET(stateCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCaseStatuses
     * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseStatusControllerApi
     */
    public getCaseStatusesUsingGET(categories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options?: any) {
        return CaseStatusControllerApiFp(this.configuration).getCaseStatusesUsingGET(categories, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CaseTransferControllerApi - axios parameter creator
 * @export
 */
export const CaseTransferControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getTransferHistory
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferHistoryUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getTransferHistoryUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/transfer`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary transferCase
         * @param {string} caseId caseId
         * @param {TransferCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCaseUsingPUT: async (caseId: string, request: TransferCaseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling transferCaseUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling transferCaseUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/transfer`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaseTransferControllerApi - functional programming interface
 * @export
 */
export const CaseTransferControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getTransferHistory
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransferHistoryUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseTransferResponse>> {
            const localVarAxiosArgs = await CaseTransferControllerApiAxiosParamCreator(configuration).getTransferHistoryUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary transferCase
         * @param {string} caseId caseId
         * @param {TransferCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferCaseUsingPUT(caseId: string, request: TransferCaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CaseTransferControllerApiAxiosParamCreator(configuration).transferCaseUsingPUT(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaseTransferControllerApi - factory interface
 * @export
 */
export const CaseTransferControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getTransferHistory
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferHistoryUsingGET(caseId: string, options?: any): AxiosPromise<CaseTransferResponse> {
            return CaseTransferControllerApiFp(configuration).getTransferHistoryUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary transferCase
         * @param {string} caseId caseId
         * @param {TransferCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCaseUsingPUT(caseId: string, request: TransferCaseRequest, options?: any): AxiosPromise<object> {
            return CaseTransferControllerApiFp(configuration).transferCaseUsingPUT(caseId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaseTransferControllerApi - object-oriented interface
 * @export
 * @class CaseTransferControllerApi
 * @extends {BaseAPI}
 */
export class CaseTransferControllerApi extends BaseAPI {
    /**
     * 
     * @summary getTransferHistory
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTransferControllerApi
     */
    public getTransferHistoryUsingGET(caseId: string, options?: any) {
        return CaseTransferControllerApiFp(this.configuration).getTransferHistoryUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary transferCase
     * @param {string} caseId caseId
     * @param {TransferCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTransferControllerApi
     */
    public transferCaseUsingPUT(caseId: string, request: TransferCaseRequest, options?: any) {
        return CaseTransferControllerApiFp(this.configuration).transferCaseUsingPUT(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CatchAllControllerApi - axios parameter creator
 * @export
 */
export const CatchAllControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingDELETE1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingGET1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingHEAD1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingOPTIONS1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPATCH1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPOST1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPUT1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/**`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatchAllControllerApi - functional programming interface
 * @export
 */
export const CatchAllControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmappedRequestUsingDELETE1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CatchAllControllerApiAxiosParamCreator(configuration).unmappedRequestUsingDELETE1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmappedRequestUsingGET1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CatchAllControllerApiAxiosParamCreator(configuration).unmappedRequestUsingGET1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmappedRequestUsingHEAD1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CatchAllControllerApiAxiosParamCreator(configuration).unmappedRequestUsingHEAD1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmappedRequestUsingOPTIONS1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CatchAllControllerApiAxiosParamCreator(configuration).unmappedRequestUsingOPTIONS1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmappedRequestUsingPATCH1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CatchAllControllerApiAxiosParamCreator(configuration).unmappedRequestUsingPATCH1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmappedRequestUsingPOST1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CatchAllControllerApiAxiosParamCreator(configuration).unmappedRequestUsingPOST1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unmappedRequestUsingPUT1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CatchAllControllerApiAxiosParamCreator(configuration).unmappedRequestUsingPUT1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CatchAllControllerApi - factory interface
 * @export
 */
export const CatchAllControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingDELETE1(options?: any): AxiosPromise<object> {
            return CatchAllControllerApiFp(configuration).unmappedRequestUsingDELETE1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingGET1(options?: any): AxiosPromise<object> {
            return CatchAllControllerApiFp(configuration).unmappedRequestUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingHEAD1(options?: any): AxiosPromise<object> {
            return CatchAllControllerApiFp(configuration).unmappedRequestUsingHEAD1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingOPTIONS1(options?: any): AxiosPromise<object> {
            return CatchAllControllerApiFp(configuration).unmappedRequestUsingOPTIONS1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPATCH1(options?: any): AxiosPromise<object> {
            return CatchAllControllerApiFp(configuration).unmappedRequestUsingPATCH1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPOST1(options?: any): AxiosPromise<object> {
            return CatchAllControllerApiFp(configuration).unmappedRequestUsingPOST1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPUT1(options?: any): AxiosPromise<object> {
            return CatchAllControllerApiFp(configuration).unmappedRequestUsingPUT1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatchAllControllerApi - object-oriented interface
 * @export
 * @class CatchAllControllerApi
 * @extends {BaseAPI}
 */
export class CatchAllControllerApi extends BaseAPI {
    /**
     * 
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    public unmappedRequestUsingDELETE1(options?: any) {
        return CatchAllControllerApiFp(this.configuration).unmappedRequestUsingDELETE1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    public unmappedRequestUsingGET1(options?: any) {
        return CatchAllControllerApiFp(this.configuration).unmappedRequestUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    public unmappedRequestUsingHEAD1(options?: any) {
        return CatchAllControllerApiFp(this.configuration).unmappedRequestUsingHEAD1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    public unmappedRequestUsingOPTIONS1(options?: any) {
        return CatchAllControllerApiFp(this.configuration).unmappedRequestUsingOPTIONS1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    public unmappedRequestUsingPATCH1(options?: any) {
        return CatchAllControllerApiFp(this.configuration).unmappedRequestUsingPATCH1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    public unmappedRequestUsingPOST1(options?: any) {
        return CatchAllControllerApiFp(this.configuration).unmappedRequestUsingPOST1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    public unmappedRequestUsingPUT1(options?: any) {
        return CatchAllControllerApiFp(this.configuration).unmappedRequestUsingPUT1(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CertificateControllerApi - axios parameter creator
 * @export
 */
export const CertificateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getSSLPublicCertFile
         * @param {'DER' | 'PEM'} encoding encoding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSSLPublicCertFileUsingGET: async (encoding: 'DER' | 'PEM', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'encoding' is not null or undefined
            if (encoding === null || encoding === undefined) {
                throw new RequiredError('encoding','Required parameter encoding was null or undefined when calling getSSLPublicCertFileUsingGET.');
            }
            const localVarPath = `/api/v1/certificates/ssl`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (encoding !== undefined) {
                localVarQueryParameter['encoding'] = encoding;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CertificateControllerApi - functional programming interface
 * @export
 */
export const CertificateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getSSLPublicCertFile
         * @param {'DER' | 'PEM'} encoding encoding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSSLPublicCertFileUsingGET(encoding: 'DER' | 'PEM', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SSLCertificateResponse>> {
            const localVarAxiosArgs = await CertificateControllerApiAxiosParamCreator(configuration).getSSLPublicCertFileUsingGET(encoding, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CertificateControllerApi - factory interface
 * @export
 */
export const CertificateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getSSLPublicCertFile
         * @param {'DER' | 'PEM'} encoding encoding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSSLPublicCertFileUsingGET(encoding: 'DER' | 'PEM', options?: any): AxiosPromise<SSLCertificateResponse> {
            return CertificateControllerApiFp(configuration).getSSLPublicCertFileUsingGET(encoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CertificateControllerApi - object-oriented interface
 * @export
 * @class CertificateControllerApi
 * @extends {BaseAPI}
 */
export class CertificateControllerApi extends BaseAPI {
    /**
     * 
     * @summary getSSLPublicCertFile
     * @param {'DER' | 'PEM'} encoding encoding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    public getSSLPublicCertFileUsingGET(encoding: 'DER' | 'PEM', options?: any) {
        return CertificateControllerApiFp(this.configuration).getSSLPublicCertFileUsingGET(encoding, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CitationControllerApi - axios parameter creator
 * @export
 */
export const CitationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary assignCitationOwner
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCitationOwnerUsingPOST: async (citationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling assignCitationOwnerUsingPOST.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/owner`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createNewCitation
         * @param {CreateCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCitationUsingPOST: async (request: CreateCitationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createNewCitationUsingPOST.');
            }
            const localVarPath = `/api/v1/citations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createReferralSourceForCitation
         * @param {string} citationId citationId
         * @param {CreateReferralSourceForCitation} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferralSourceForCitationUsingPOST: async (citationId: string, request: CreateReferralSourceForCitation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling createReferralSourceForCitationUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createReferralSourceForCitationUsingPOST.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/referral-source`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCitationUsingDELETE: async (citationIdString: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationIdString' is not null or undefined
            if (citationIdString === null || citationIdString === undefined) {
                throw new RequiredError('citationIdString','Required parameter citationIdString was null or undefined when calling deleteCitationUsingDELETE.');
            }
            const localVarPath = `/api/v1/citations/{citationIdString}`
                .replace(`{${"citationIdString"}}`, encodeURIComponent(String(citationIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteMissingCourtRecord
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMissingCourtRecordUsingDELETE: async (citationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling deleteMissingCourtRecordUsingDELETE.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/courts/missing`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary dismissCitationsFromContactList
         * @param {DismissCitationsFromContactListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissCitationsFromContactListUsingPOST: async (request: DismissCitationsFromContactListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling dismissCitationsFromContactListUsingPOST.');
            }
            const localVarPath = `/api/v1/citations/dismiss`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAnonymousTicketUploads
         * @param {string} emailAddress emailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnonymousTicketUploadsUsingGET: async (emailAddress: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailAddress' is not null or undefined
            if (emailAddress === null || emailAddress === undefined) {
                throw new RequiredError('emailAddress','Required parameter emailAddress was null or undefined when calling getAnonymousTicketUploadsUsingGET.');
            }
            const localVarPath = `/api/v1/citations/{emailAddress}/anonymous-tickets`
                .replace(`{${"emailAddress"}}`, encodeURIComponent(String(emailAddress)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationUsingGET: async (citationIdString: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationIdString' is not null or undefined
            if (citationIdString === null || citationIdString === undefined) {
                throw new RequiredError('citationIdString','Required parameter citationIdString was null or undefined when calling getCitationUsingGET.');
            }
            const localVarPath = `/api/v1/citations/{citationIdString}`
                .replace(`{${"citationIdString"}}`, encodeURIComponent(String(citationIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getListOfCitationsWithMissingCourt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfCitationsWithMissingCourtUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/citations/courts/missing`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getNoViolationCitations
         * @param {Array<string>} [regionCodes] regionCodes
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoViolationCitationsUsingGET: async (regionCodes?: Array<string>, trailingDays?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/citations/no-violation-uploads`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (regionCodes) {
                localVarQueryParameter['regionCodes'] = regionCodes;
            }

            if (trailingDays !== undefined) {
                localVarQueryParameter['trailingDays'] = trailingDays;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary postMissingCourtForCitation
         * @param {string} citationId citationId
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMissingCourtForCitationUsingPOST: async (citationId: string, state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling postMissingCourtForCitationUsingPOST.');
            }
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling postMissingCourtForCitationUsingPOST.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/court/missing`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setCitationContactListFlag
         * @param {string} citationIdString citationIdString
         * @param {boolean} isDismissed isDismissed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCitationContactListFlagUsingPOST: async (citationIdString: string, isDismissed: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationIdString' is not null or undefined
            if (citationIdString === null || citationIdString === undefined) {
                throw new RequiredError('citationIdString','Required parameter citationIdString was null or undefined when calling setCitationContactListFlagUsingPOST.');
            }
            // verify required parameter 'isDismissed' is not null or undefined
            if (isDismissed === null || isDismissed === undefined) {
                throw new RequiredError('isDismissed','Required parameter isDismissed was null or undefined when calling setCitationContactListFlagUsingPOST.');
            }
            const localVarPath = `/api/v1/citations/{citationIdString}/dismiss`
                .replace(`{${"citationIdString"}}`, encodeURIComponent(String(citationIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isDismissed !== undefined) {
                localVarQueryParameter['isDismissed'] = isDismissed;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCitationAddress
         * @param {string} citationId citationId
         * @param {UpdateCitationAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationAddressUsingPOST: async (citationId: string, request: UpdateCitationAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling updateCitationAddressUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateCitationAddressUsingPOST.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/address`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCitationPicture
         * @param {string} citationId citationId
         * @param {UpdateCitationPictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationPictureUsingPUT: async (citationId: string, request: UpdateCitationPictureRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling updateCitationPictureUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateCitationPictureUsingPUT.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/picture`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCitation
         * @param {string} citationIdString citationIdString
         * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationUsingPUT: async (citationIdString: string, updateCitationRequest: UpdateCitationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationIdString' is not null or undefined
            if (citationIdString === null || citationIdString === undefined) {
                throw new RequiredError('citationIdString','Required parameter citationIdString was null or undefined when calling updateCitationUsingPUT.');
            }
            // verify required parameter 'updateCitationRequest' is not null or undefined
            if (updateCitationRequest === null || updateCitationRequest === undefined) {
                throw new RequiredError('updateCitationRequest','Required parameter updateCitationRequest was null or undefined when calling updateCitationUsingPUT.');
            }
            const localVarPath = `/api/v1/citations/{citationIdString}`
                .replace(`{${"citationIdString"}}`, encodeURIComponent(String(citationIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateCitationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateCitationRequest !== undefined ? updateCitationRequest : {}) : (updateCitationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CitationControllerApi - functional programming interface
 * @export
 */
export const CitationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary assignCitationOwner
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignCitationOwnerUsingPOST(citationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).assignCitationOwnerUsingPOST(citationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createNewCitation
         * @param {CreateCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewCitationUsingPOST(request: CreateCitationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCitationResponse>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).createNewCitationUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createReferralSourceForCitation
         * @param {string} citationId citationId
         * @param {CreateReferralSourceForCitation} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReferralSourceForCitationUsingPOST(citationId: string, request: CreateReferralSourceForCitation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).createReferralSourceForCitationUsingPOST(citationId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCitationUsingDELETE(citationIdString: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCitationResponse>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).deleteCitationUsingDELETE(citationIdString, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteMissingCourtRecord
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMissingCourtRecordUsingDELETE(citationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListOfCitationsWithMissingCourtResponse>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).deleteMissingCourtRecordUsingDELETE(citationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary dismissCitationsFromContactList
         * @param {DismissCitationsFromContactListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dismissCitationsFromContactListUsingPOST(request: DismissCitationsFromContactListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).dismissCitationsFromContactListUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAnonymousTicketUploads
         * @param {string} emailAddress emailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnonymousTicketUploadsUsingGET(emailAddress: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCitationsResponse>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).getAnonymousTicketUploadsUsingGET(emailAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCitationUsingGET(citationIdString: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCitationResponse>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).getCitationUsingGET(citationIdString, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getListOfCitationsWithMissingCourt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListOfCitationsWithMissingCourtUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListOfCitationsWithMissingCourtResponse>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).getListOfCitationsWithMissingCourtUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getNoViolationCitations
         * @param {Array<string>} [regionCodes] regionCodes
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoViolationCitationsUsingGET(regionCodes?: Array<string>, trailingDays?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNoViolationCitationsResponse>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).getNoViolationCitationsUsingGET(regionCodes, trailingDays, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary postMissingCourtForCitation
         * @param {string} citationId citationId
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMissingCourtForCitationUsingPOST(citationId: string, state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).postMissingCourtForCitationUsingPOST(citationId, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setCitationContactListFlag
         * @param {string} citationIdString citationIdString
         * @param {boolean} isDismissed isDismissed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCitationContactListFlagUsingPOST(citationIdString: string, isDismissed: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).setCitationContactListFlagUsingPOST(citationIdString, isDismissed, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCitationAddress
         * @param {string} citationId citationId
         * @param {UpdateCitationAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCitationAddressUsingPOST(citationId: string, request: UpdateCitationAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).updateCitationAddressUsingPOST(citationId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCitationPicture
         * @param {string} citationId citationId
         * @param {UpdateCitationPictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCitationPictureUsingPUT(citationId: string, request: UpdateCitationPictureRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).updateCitationPictureUsingPUT(citationId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCitation
         * @param {string} citationIdString citationIdString
         * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCitationUsingPUT(citationIdString: string, updateCitationRequest: UpdateCitationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CitationControllerApiAxiosParamCreator(configuration).updateCitationUsingPUT(citationIdString, updateCitationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CitationControllerApi - factory interface
 * @export
 */
export const CitationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary assignCitationOwner
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCitationOwnerUsingPOST(citationId: number, options?: any): AxiosPromise<object> {
            return CitationControllerApiFp(configuration).assignCitationOwnerUsingPOST(citationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createNewCitation
         * @param {CreateCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCitationUsingPOST(request: CreateCitationRequest, options?: any): AxiosPromise<CreateCitationResponse> {
            return CitationControllerApiFp(configuration).createNewCitationUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createReferralSourceForCitation
         * @param {string} citationId citationId
         * @param {CreateReferralSourceForCitation} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferralSourceForCitationUsingPOST(citationId: string, request: CreateReferralSourceForCitation, options?: any): AxiosPromise<void> {
            return CitationControllerApiFp(configuration).createReferralSourceForCitationUsingPOST(citationId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCitationUsingDELETE(citationIdString: string, options?: any): AxiosPromise<DeleteCitationResponse> {
            return CitationControllerApiFp(configuration).deleteCitationUsingDELETE(citationIdString, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteMissingCourtRecord
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMissingCourtRecordUsingDELETE(citationId: number, options?: any): AxiosPromise<GetListOfCitationsWithMissingCourtResponse> {
            return CitationControllerApiFp(configuration).deleteMissingCourtRecordUsingDELETE(citationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary dismissCitationsFromContactList
         * @param {DismissCitationsFromContactListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissCitationsFromContactListUsingPOST(request: DismissCitationsFromContactListRequest, options?: any): AxiosPromise<object> {
            return CitationControllerApiFp(configuration).dismissCitationsFromContactListUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAnonymousTicketUploads
         * @param {string} emailAddress emailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnonymousTicketUploadsUsingGET(emailAddress: string, options?: any): AxiosPromise<GetCitationsResponse> {
            return CitationControllerApiFp(configuration).getAnonymousTicketUploadsUsingGET(emailAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationUsingGET(citationIdString: string, options?: any): AxiosPromise<GetCitationResponse> {
            return CitationControllerApiFp(configuration).getCitationUsingGET(citationIdString, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getListOfCitationsWithMissingCourt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfCitationsWithMissingCourtUsingGET(options?: any): AxiosPromise<GetListOfCitationsWithMissingCourtResponse> {
            return CitationControllerApiFp(configuration).getListOfCitationsWithMissingCourtUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getNoViolationCitations
         * @param {Array<string>} [regionCodes] regionCodes
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoViolationCitationsUsingGET(regionCodes?: Array<string>, trailingDays?: number, options?: any): AxiosPromise<GetNoViolationCitationsResponse> {
            return CitationControllerApiFp(configuration).getNoViolationCitationsUsingGET(regionCodes, trailingDays, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary postMissingCourtForCitation
         * @param {string} citationId citationId
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMissingCourtForCitationUsingPOST(citationId: string, state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): AxiosPromise<object> {
            return CitationControllerApiFp(configuration).postMissingCourtForCitationUsingPOST(citationId, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setCitationContactListFlag
         * @param {string} citationIdString citationIdString
         * @param {boolean} isDismissed isDismissed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCitationContactListFlagUsingPOST(citationIdString: string, isDismissed: boolean, options?: any): AxiosPromise<object> {
            return CitationControllerApiFp(configuration).setCitationContactListFlagUsingPOST(citationIdString, isDismissed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCitationAddress
         * @param {string} citationId citationId
         * @param {UpdateCitationAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationAddressUsingPOST(citationId: string, request: UpdateCitationAddressRequest, options?: any): AxiosPromise<void> {
            return CitationControllerApiFp(configuration).updateCitationAddressUsingPOST(citationId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCitationPicture
         * @param {string} citationId citationId
         * @param {UpdateCitationPictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationPictureUsingPUT(citationId: string, request: UpdateCitationPictureRequest, options?: any): AxiosPromise<void> {
            return CitationControllerApiFp(configuration).updateCitationPictureUsingPUT(citationId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCitation
         * @param {string} citationIdString citationIdString
         * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationUsingPUT(citationIdString: string, updateCitationRequest: UpdateCitationRequest, options?: any): AxiosPromise<void> {
            return CitationControllerApiFp(configuration).updateCitationUsingPUT(citationIdString, updateCitationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CitationControllerApi - object-oriented interface
 * @export
 * @class CitationControllerApi
 * @extends {BaseAPI}
 */
export class CitationControllerApi extends BaseAPI {
    /**
     * 
     * @summary assignCitationOwner
     * @param {number} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public assignCitationOwnerUsingPOST(citationId: number, options?: any) {
        return CitationControllerApiFp(this.configuration).assignCitationOwnerUsingPOST(citationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createNewCitation
     * @param {CreateCitationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public createNewCitationUsingPOST(request: CreateCitationRequest, options?: any) {
        return CitationControllerApiFp(this.configuration).createNewCitationUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createReferralSourceForCitation
     * @param {string} citationId citationId
     * @param {CreateReferralSourceForCitation} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public createReferralSourceForCitationUsingPOST(citationId: string, request: CreateReferralSourceForCitation, options?: any) {
        return CitationControllerApiFp(this.configuration).createReferralSourceForCitationUsingPOST(citationId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCitation
     * @param {string} citationIdString citationIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public deleteCitationUsingDELETE(citationIdString: string, options?: any) {
        return CitationControllerApiFp(this.configuration).deleteCitationUsingDELETE(citationIdString, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteMissingCourtRecord
     * @param {number} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public deleteMissingCourtRecordUsingDELETE(citationId: number, options?: any) {
        return CitationControllerApiFp(this.configuration).deleteMissingCourtRecordUsingDELETE(citationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary dismissCitationsFromContactList
     * @param {DismissCitationsFromContactListRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public dismissCitationsFromContactListUsingPOST(request: DismissCitationsFromContactListRequest, options?: any) {
        return CitationControllerApiFp(this.configuration).dismissCitationsFromContactListUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAnonymousTicketUploads
     * @param {string} emailAddress emailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public getAnonymousTicketUploadsUsingGET(emailAddress: string, options?: any) {
        return CitationControllerApiFp(this.configuration).getAnonymousTicketUploadsUsingGET(emailAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCitation
     * @param {string} citationIdString citationIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public getCitationUsingGET(citationIdString: string, options?: any) {
        return CitationControllerApiFp(this.configuration).getCitationUsingGET(citationIdString, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getListOfCitationsWithMissingCourt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public getListOfCitationsWithMissingCourtUsingGET(options?: any) {
        return CitationControllerApiFp(this.configuration).getListOfCitationsWithMissingCourtUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getNoViolationCitations
     * @param {Array<string>} [regionCodes] regionCodes
     * @param {number} [trailingDays] trailingDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public getNoViolationCitationsUsingGET(regionCodes?: Array<string>, trailingDays?: number, options?: any) {
        return CitationControllerApiFp(this.configuration).getNoViolationCitationsUsingGET(regionCodes, trailingDays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary postMissingCourtForCitation
     * @param {string} citationId citationId
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public postMissingCourtForCitationUsingPOST(citationId: string, state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any) {
        return CitationControllerApiFp(this.configuration).postMissingCourtForCitationUsingPOST(citationId, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setCitationContactListFlag
     * @param {string} citationIdString citationIdString
     * @param {boolean} isDismissed isDismissed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public setCitationContactListFlagUsingPOST(citationIdString: string, isDismissed: boolean, options?: any) {
        return CitationControllerApiFp(this.configuration).setCitationContactListFlagUsingPOST(citationIdString, isDismissed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCitationAddress
     * @param {string} citationId citationId
     * @param {UpdateCitationAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public updateCitationAddressUsingPOST(citationId: string, request: UpdateCitationAddressRequest, options?: any) {
        return CitationControllerApiFp(this.configuration).updateCitationAddressUsingPOST(citationId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCitationPicture
     * @param {string} citationId citationId
     * @param {UpdateCitationPictureRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public updateCitationPictureUsingPUT(citationId: string, request: UpdateCitationPictureRequest, options?: any) {
        return CitationControllerApiFp(this.configuration).updateCitationPictureUsingPUT(citationId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCitation
     * @param {string} citationIdString citationIdString
     * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    public updateCitationUsingPUT(citationIdString: string, updateCitationRequest: UpdateCitationRequest, options?: any) {
        return CitationControllerApiFp(this.configuration).updateCitationUsingPUT(citationIdString, updateCitationRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ConfigurationControllerApi - axios parameter creator
 * @export
 */
export const ConfigurationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAppConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigurationUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/config/app`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurationControllerApi - functional programming interface
 * @export
 */
export const ConfigurationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAppConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppConfigurationUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppConfigResponse>> {
            const localVarAxiosArgs = await ConfigurationControllerApiAxiosParamCreator(configuration).getAppConfigurationUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConfigurationControllerApi - factory interface
 * @export
 */
export const ConfigurationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getAppConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigurationUsingGET(options?: any): AxiosPromise<GetAppConfigResponse> {
            return ConfigurationControllerApiFp(configuration).getAppConfigurationUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurationControllerApi - object-oriented interface
 * @export
 * @class ConfigurationControllerApi
 * @extends {BaseAPI}
 */
export class ConfigurationControllerApi extends BaseAPI {
    /**
     * 
     * @summary getAppConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationControllerApi
     */
    public getAppConfigurationUsingGET(options?: any) {
        return ConfigurationControllerApiFp(this.configuration).getAppConfigurationUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ConsoleListControllerApi - axios parameter creator
 * @export
 */
export const ConsoleListControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary findDisputes
         * @param {FindDisputesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDisputesUsingPOST: async (request: FindDisputesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling findDisputesUsingPOST.');
            }
            const localVarPath = `/api/v1/console/disputes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCasesWithCoverageObtained
         * @param {GenericAdminListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithCoverageObtainedUsingPOST: async (request: GenericAdminListRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getCasesWithCoverageObtainedUsingPOST.');
            }
            const localVarPath = `/api/v1/console/cases-with-coverage-obtained`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCasesWithMissingLawfirmPayouts
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithMissingLawfirmPayoutsUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getCasesWithMissingLawfirmPayoutsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/cases/missing-lawfirm-payouts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCasesWithOverduePayments
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithOverduePaymentsUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getCasesWithOverduePaymentsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/cases/unpaid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCitationPhoneLeads
         * @param {GetCitationPhoneLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationPhoneLeadsUsingPOST: async (request: GetCitationPhoneLeadsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getCitationPhoneLeadsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/citation-phone-leads`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCitationsWithMissingFields
         * @param {GetCitationsWithMissingFieldsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationsWithMissingFieldsUsingPOST: async (request: GetCitationsWithMissingFieldsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getCitationsWithMissingFieldsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/citations-with-missing-fields`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getClientConfirmedUnpaidCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientConfirmedUnpaidCasesUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getClientConfirmedUnpaidCasesUsingPOST.');
            }
            const localVarPath = `/api/v1/console/cases/client-confirmed-unpaid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDeclinedCases
         * @param {GetDeclinedCasesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeclinedCasesUsingPOST: async (request: GetDeclinedCasesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getDeclinedCasesUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/declined`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getInvalidCasesWithStripeCharge
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvalidCasesWithStripeChargeUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getInvalidCasesWithStripeChargeUsingPOST.');
            }
            const localVarPath = `/api/v1/console/cases/invalid-with-charge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLostCasesWithTransferNotReversed
         * @param {GetLostCasesWithTransferNotReversedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLostCasesWithTransferNotReversedUsingPOST: async (request: GetLostCasesWithTransferNotReversedRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getLostCasesWithTransferNotReversedUsingPOST.');
            }
            const localVarPath = `/api/v1/console/cases/lost/not-reversed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPendingCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingCasesUsingPOST: async (request: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getPendingCasesUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/pending`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPendingTicketReviews
         * @param {GetPendingTicketReviewsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTicketReviewsUsingPOST: async (request: GetPendingTicketReviewsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getPendingTicketReviewsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/ticket-review-requests/pending`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listLawfirmLeads
         * @param {GetLawfirmLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmLeadsUsingPOST: async (request: GetLawfirmLeadsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling listLawfirmLeadsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/lawfirms/leads`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listPotentialCustomers
         * @param {GetPotentialCustomersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPotentialCustomersUsingPOST: async (request: GetPotentialCustomersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling listPotentialCustomersUsingPOST.');
            }
            const localVarPath = `/api/v1/console/potential-customers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsoleListControllerApi - functional programming interface
 * @export
 */
export const ConsoleListControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary findDisputes
         * @param {FindDisputesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findDisputesUsingPOST(request: FindDisputesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindChargeDisputesResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).findDisputesUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCasesWithCoverageObtained
         * @param {GenericAdminListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCasesWithCoverageObtainedUsingPOST(request: GenericAdminListRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCasesWithCoverageObtainedResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getCasesWithCoverageObtainedUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCasesWithMissingLawfirmPayouts
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCasesWithMissingLawfirmPayoutsUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCasesWithMissingLawfirmPayoutsResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getCasesWithMissingLawfirmPayoutsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCasesWithOverduePayments
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCasesWithOverduePaymentsUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCasesWithOverduePaymentsResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getCasesWithOverduePaymentsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCitationPhoneLeads
         * @param {GetCitationPhoneLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCitationPhoneLeadsUsingPOST(request: GetCitationPhoneLeadsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCitationPhoneLeadsResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getCitationPhoneLeadsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCitationsWithMissingFields
         * @param {GetCitationsWithMissingFieldsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCitationsWithMissingFieldsUsingPOST(request: GetCitationsWithMissingFieldsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCitationsWithMissingFieldsResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getCitationsWithMissingFieldsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getClientConfirmedUnpaidCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientConfirmedUnpaidCasesUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientConfirmedUnpaidCasesResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getClientConfirmedUnpaidCasesUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDeclinedCases
         * @param {GetDeclinedCasesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeclinedCasesUsingPOST(request: GetDeclinedCasesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeclinedCasesResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getDeclinedCasesUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getInvalidCasesWithStripeCharge
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvalidCasesWithStripeChargeUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvalidCasesWithStripeChargeResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getInvalidCasesWithStripeChargeUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLostCasesWithTransferNotReversed
         * @param {GetLostCasesWithTransferNotReversedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLostCasesWithTransferNotReversedUsingPOST(request: GetLostCasesWithTransferNotReversedRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLostCasesWithTransferNotReversedResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getLostCasesWithTransferNotReversedUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPendingCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingCasesUsingPOST(request: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPendingCasesResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getPendingCasesUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPendingTicketReviews
         * @param {GetPendingTicketReviewsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingTicketReviewsUsingPOST(request: GetPendingTicketReviewsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPendingTicketReviewsResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).getPendingTicketReviewsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listLawfirmLeads
         * @param {GetLawfirmLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLawfirmLeadsUsingPOST(request: GetLawfirmLeadsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmLeadsResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).listLawfirmLeadsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listPotentialCustomers
         * @param {GetPotentialCustomersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPotentialCustomersUsingPOST(request: GetPotentialCustomersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPotentialCustomersResponse>> {
            const localVarAxiosArgs = await ConsoleListControllerApiAxiosParamCreator(configuration).listPotentialCustomersUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConsoleListControllerApi - factory interface
 * @export
 */
export const ConsoleListControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary findDisputes
         * @param {FindDisputesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDisputesUsingPOST(request: FindDisputesRequest, options?: any): AxiosPromise<FindChargeDisputesResponse> {
            return ConsoleListControllerApiFp(configuration).findDisputesUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCasesWithCoverageObtained
         * @param {GenericAdminListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithCoverageObtainedUsingPOST(request: GenericAdminListRequest, options?: any): AxiosPromise<GetCasesWithCoverageObtainedResponse> {
            return ConsoleListControllerApiFp(configuration).getCasesWithCoverageObtainedUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCasesWithMissingLawfirmPayouts
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithMissingLawfirmPayoutsUsingPOST(request: object, options?: any): AxiosPromise<GetCasesWithMissingLawfirmPayoutsResponse> {
            return ConsoleListControllerApiFp(configuration).getCasesWithMissingLawfirmPayoutsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCasesWithOverduePayments
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithOverduePaymentsUsingPOST(request: object, options?: any): AxiosPromise<GetCasesWithOverduePaymentsResponse> {
            return ConsoleListControllerApiFp(configuration).getCasesWithOverduePaymentsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCitationPhoneLeads
         * @param {GetCitationPhoneLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationPhoneLeadsUsingPOST(request: GetCitationPhoneLeadsRequest, options?: any): AxiosPromise<GetCitationPhoneLeadsResponse> {
            return ConsoleListControllerApiFp(configuration).getCitationPhoneLeadsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCitationsWithMissingFields
         * @param {GetCitationsWithMissingFieldsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationsWithMissingFieldsUsingPOST(request: GetCitationsWithMissingFieldsRequest, options?: any): AxiosPromise<GetCitationsWithMissingFieldsResponse> {
            return ConsoleListControllerApiFp(configuration).getCitationsWithMissingFieldsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getClientConfirmedUnpaidCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientConfirmedUnpaidCasesUsingPOST(request: object, options?: any): AxiosPromise<GetClientConfirmedUnpaidCasesResponse> {
            return ConsoleListControllerApiFp(configuration).getClientConfirmedUnpaidCasesUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDeclinedCases
         * @param {GetDeclinedCasesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeclinedCasesUsingPOST(request: GetDeclinedCasesRequest, options?: any): AxiosPromise<GetDeclinedCasesResponse> {
            return ConsoleListControllerApiFp(configuration).getDeclinedCasesUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getInvalidCasesWithStripeCharge
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvalidCasesWithStripeChargeUsingPOST(request: object, options?: any): AxiosPromise<GetInvalidCasesWithStripeChargeResponse> {
            return ConsoleListControllerApiFp(configuration).getInvalidCasesWithStripeChargeUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLostCasesWithTransferNotReversed
         * @param {GetLostCasesWithTransferNotReversedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLostCasesWithTransferNotReversedUsingPOST(request: GetLostCasesWithTransferNotReversedRequest, options?: any): AxiosPromise<GetLostCasesWithTransferNotReversedResponse> {
            return ConsoleListControllerApiFp(configuration).getLostCasesWithTransferNotReversedUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPendingCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingCasesUsingPOST(request: object, options?: any): AxiosPromise<GetPendingCasesResponse> {
            return ConsoleListControllerApiFp(configuration).getPendingCasesUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPendingTicketReviews
         * @param {GetPendingTicketReviewsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTicketReviewsUsingPOST(request: GetPendingTicketReviewsRequest, options?: any): AxiosPromise<GetPendingTicketReviewsResponse> {
            return ConsoleListControllerApiFp(configuration).getPendingTicketReviewsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listLawfirmLeads
         * @param {GetLawfirmLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmLeadsUsingPOST(request: GetLawfirmLeadsRequest, options?: any): AxiosPromise<GetLawfirmLeadsResponse> {
            return ConsoleListControllerApiFp(configuration).listLawfirmLeadsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listPotentialCustomers
         * @param {GetPotentialCustomersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPotentialCustomersUsingPOST(request: GetPotentialCustomersRequest, options?: any): AxiosPromise<GetPotentialCustomersResponse> {
            return ConsoleListControllerApiFp(configuration).listPotentialCustomersUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsoleListControllerApi - object-oriented interface
 * @export
 * @class ConsoleListControllerApi
 * @extends {BaseAPI}
 */
export class ConsoleListControllerApi extends BaseAPI {
    /**
     * 
     * @summary findDisputes
     * @param {FindDisputesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public findDisputesUsingPOST(request: FindDisputesRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).findDisputesUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCasesWithCoverageObtained
     * @param {GenericAdminListRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getCasesWithCoverageObtainedUsingPOST(request: GenericAdminListRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getCasesWithCoverageObtainedUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCasesWithMissingLawfirmPayouts
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getCasesWithMissingLawfirmPayoutsUsingPOST(request: object, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getCasesWithMissingLawfirmPayoutsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCasesWithOverduePayments
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getCasesWithOverduePaymentsUsingPOST(request: object, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getCasesWithOverduePaymentsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCitationPhoneLeads
     * @param {GetCitationPhoneLeadsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getCitationPhoneLeadsUsingPOST(request: GetCitationPhoneLeadsRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getCitationPhoneLeadsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCitationsWithMissingFields
     * @param {GetCitationsWithMissingFieldsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getCitationsWithMissingFieldsUsingPOST(request: GetCitationsWithMissingFieldsRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getCitationsWithMissingFieldsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getClientConfirmedUnpaidCases
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getClientConfirmedUnpaidCasesUsingPOST(request: object, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getClientConfirmedUnpaidCasesUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDeclinedCases
     * @param {GetDeclinedCasesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getDeclinedCasesUsingPOST(request: GetDeclinedCasesRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getDeclinedCasesUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getInvalidCasesWithStripeCharge
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getInvalidCasesWithStripeChargeUsingPOST(request: object, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getInvalidCasesWithStripeChargeUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLostCasesWithTransferNotReversed
     * @param {GetLostCasesWithTransferNotReversedRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getLostCasesWithTransferNotReversedUsingPOST(request: GetLostCasesWithTransferNotReversedRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getLostCasesWithTransferNotReversedUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPendingCases
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getPendingCasesUsingPOST(request: object, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getPendingCasesUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPendingTicketReviews
     * @param {GetPendingTicketReviewsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public getPendingTicketReviewsUsingPOST(request: GetPendingTicketReviewsRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).getPendingTicketReviewsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listLawfirmLeads
     * @param {GetLawfirmLeadsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public listLawfirmLeadsUsingPOST(request: GetLawfirmLeadsRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).listLawfirmLeadsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listPotentialCustomers
     * @param {GetPotentialCustomersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    public listPotentialCustomersUsingPOST(request: GetPotentialCustomersRequest, options?: any) {
        return ConsoleListControllerApiFp(this.configuration).listPotentialCustomersUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ContactTimelineControllerApi - axios parameter creator
 * @export
 */
export const ContactTimelineControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listContactTimeline
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactTimelineUsingGET: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listContactTimelineUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userId}/contact-timeline`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactTimelineControllerApi - functional programming interface
 * @export
 */
export const ContactTimelineControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listContactTimeline
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContactTimelineUsingGET(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContactTimelineResponse>> {
            const localVarAxiosArgs = await ContactTimelineControllerApiAxiosParamCreator(configuration).listContactTimelineUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ContactTimelineControllerApi - factory interface
 * @export
 */
export const ContactTimelineControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary listContactTimeline
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactTimelineUsingGET(userId: number, options?: any): AxiosPromise<ListContactTimelineResponse> {
            return ContactTimelineControllerApiFp(configuration).listContactTimelineUsingGET(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactTimelineControllerApi - object-oriented interface
 * @export
 * @class ContactTimelineControllerApi
 * @extends {BaseAPI}
 */
export class ContactTimelineControllerApi extends BaseAPI {
    /**
     * 
     * @summary listContactTimeline
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactTimelineControllerApi
     */
    public listContactTimelineUsingGET(userId: number, options?: any) {
        return ContactTimelineControllerApiFp(this.configuration).listContactTimelineUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ConversationControllerApi - axios parameter creator
 * @export
 */
export const ConversationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addMessageToConversation
         * @param {string} caseId caseId
         * @param {AddNewCaseMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessageToConversationUsingPOST: async (caseId: string, request: AddNewCaseMessageRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling addMessageToConversationUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addMessageToConversationUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/conversation`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary editMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {EditConversationMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageUsingPUT: async (caseId: string, messageId: number, request: EditConversationMessageRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling editMessageUsingPUT.');
            }
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling editMessageUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling editMessageUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/conversation/{messageId}/edit`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getConversation
         * @param {string} caseId caseId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationUsingGET: async (caseId: string, length?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getConversationUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/conversation`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageUsingGET: async (caseId: string, messageId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getMessageUsingGET.');
            }
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling getMessageUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/conversation/{messageId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markMessageAsDeleted
         * @param {string} caseId caseId
         * @param {boolean} isDeleted isDeleted
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedUsingPUT: async (caseId: string, isDeleted: boolean, messageId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling markMessageAsDeletedUsingPUT.');
            }
            // verify required parameter 'isDeleted' is not null or undefined
            if (isDeleted === null || isDeleted === undefined) {
                throw new RequiredError('isDeleted','Required parameter isDeleted was null or undefined when calling markMessageAsDeletedUsingPUT.');
            }
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling markMessageAsDeletedUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/conversation/{messageId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isDeleted !== undefined) {
                localVarQueryParameter['isDeleted'] = isDeleted;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversationControllerApi - functional programming interface
 * @export
 */
export const ConversationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addMessageToConversation
         * @param {string} caseId caseId
         * @param {AddNewCaseMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMessageToConversationUsingPOST(caseId: string, request: AddNewCaseMessageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCaseMessageResponse>> {
            const localVarAxiosArgs = await ConversationControllerApiAxiosParamCreator(configuration).addMessageToConversationUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary editMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {EditConversationMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editMessageUsingPUT(caseId: string, messageId: number, request: EditConversationMessageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ConversationControllerApiAxiosParamCreator(configuration).editMessageUsingPUT(caseId, messageId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getConversation
         * @param {string} caseId caseId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationUsingGET(caseId: string, length?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseMessagesResponse>> {
            const localVarAxiosArgs = await ConversationControllerApiAxiosParamCreator(configuration).getConversationUsingGET(caseId, length, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageUsingGET(caseId: string, messageId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseMessagesResponse>> {
            const localVarAxiosArgs = await ConversationControllerApiAxiosParamCreator(configuration).getMessageUsingGET(caseId, messageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markMessageAsDeleted
         * @param {string} caseId caseId
         * @param {boolean} isDeleted isDeleted
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsDeletedUsingPUT(caseId: string, isDeleted: boolean, messageId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ConversationControllerApiAxiosParamCreator(configuration).markMessageAsDeletedUsingPUT(caseId, isDeleted, messageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConversationControllerApi - factory interface
 * @export
 */
export const ConversationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addMessageToConversation
         * @param {string} caseId caseId
         * @param {AddNewCaseMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessageToConversationUsingPOST(caseId: string, request: AddNewCaseMessageRequest, options?: any): AxiosPromise<AddCaseMessageResponse> {
            return ConversationControllerApiFp(configuration).addMessageToConversationUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary editMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {EditConversationMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageUsingPUT(caseId: string, messageId: number, request: EditConversationMessageRequest, options?: any): AxiosPromise<object> {
            return ConversationControllerApiFp(configuration).editMessageUsingPUT(caseId, messageId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getConversation
         * @param {string} caseId caseId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationUsingGET(caseId: string, length?: number, page?: number, options?: any): AxiosPromise<GetCaseMessagesResponse> {
            return ConversationControllerApiFp(configuration).getConversationUsingGET(caseId, length, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageUsingGET(caseId: string, messageId: number, options?: any): AxiosPromise<GetCaseMessagesResponse> {
            return ConversationControllerApiFp(configuration).getMessageUsingGET(caseId, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markMessageAsDeleted
         * @param {string} caseId caseId
         * @param {boolean} isDeleted isDeleted
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedUsingPUT(caseId: string, isDeleted: boolean, messageId: number, options?: any): AxiosPromise<object> {
            return ConversationControllerApiFp(configuration).markMessageAsDeletedUsingPUT(caseId, isDeleted, messageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConversationControllerApi - object-oriented interface
 * @export
 * @class ConversationControllerApi
 * @extends {BaseAPI}
 */
export class ConversationControllerApi extends BaseAPI {
    /**
     * 
     * @summary addMessageToConversation
     * @param {string} caseId caseId
     * @param {AddNewCaseMessageRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public addMessageToConversationUsingPOST(caseId: string, request: AddNewCaseMessageRequest, options?: any) {
        return ConversationControllerApiFp(this.configuration).addMessageToConversationUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary editMessage
     * @param {string} caseId caseId
     * @param {number} messageId messageId
     * @param {EditConversationMessageRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public editMessageUsingPUT(caseId: string, messageId: number, request: EditConversationMessageRequest, options?: any) {
        return ConversationControllerApiFp(this.configuration).editMessageUsingPUT(caseId, messageId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getConversation
     * @param {string} caseId caseId
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public getConversationUsingGET(caseId: string, length?: number, page?: number, options?: any) {
        return ConversationControllerApiFp(this.configuration).getConversationUsingGET(caseId, length, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMessage
     * @param {string} caseId caseId
     * @param {number} messageId messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public getMessageUsingGET(caseId: string, messageId: number, options?: any) {
        return ConversationControllerApiFp(this.configuration).getMessageUsingGET(caseId, messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markMessageAsDeleted
     * @param {string} caseId caseId
     * @param {boolean} isDeleted isDeleted
     * @param {number} messageId messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public markMessageAsDeletedUsingPUT(caseId: string, isDeleted: boolean, messageId: number, options?: any) {
        return ConversationControllerApiFp(this.configuration).markMessageAsDeletedUsingPUT(caseId, isDeleted, messageId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CountyControllerApi - axios parameter creator
 * @export
 */
export const CountyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCounties
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountiesUsingGET: async (state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling getCountiesUsingGET.');
            }
            const localVarPath = `/api/v1/counties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountyControllerApi - functional programming interface
 * @export
 */
export const CountyControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCounties
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountiesUsingGET(state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCountiesResponse>> {
            const localVarAxiosArgs = await CountyControllerApiAxiosParamCreator(configuration).getCountiesUsingGET(state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CountyControllerApi - factory interface
 * @export
 */
export const CountyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getCounties
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountiesUsingGET(state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): AxiosPromise<GetCountiesResponse> {
            return CountyControllerApiFp(configuration).getCountiesUsingGET(state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountyControllerApi - object-oriented interface
 * @export
 * @class CountyControllerApi
 * @extends {BaseAPI}
 */
export class CountyControllerApi extends BaseAPI {
    /**
     * 
     * @summary getCounties
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountyControllerApi
     */
    public getCountiesUsingGET(state: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any) {
        return CountyControllerApiFp(this.configuration).getCountiesUsingGET(state, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CourtControllerApi - axios parameter creator
 * @export
 */
export const CourtControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCourt
         * @param {AddCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtUsingPOST: async (request: AddCourtRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addCourtUsingPOST.');
            }
            const localVarPath = `/api/v1/courts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsUsingGET: async (citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/courts/traffic`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (citationId !== undefined) {
                localVarQueryParameter['citationId'] = citationId;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (county !== undefined) {
                localVarQueryParameter['county'] = county;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (regionCode !== undefined) {
                localVarQueryParameter['regionCode'] = regionCode;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findCourtsWithNoCoverage
         * @param {string} [countryCode] countryCode
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsWithNoCoverageUsingGET: async (countryCode?: string, countyId?: number, regionCode?: string, trailingDays?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/courts/no-coverage`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (countyId !== undefined) {
                localVarQueryParameter['countyId'] = countyId;
            }

            if (regionCode !== undefined) {
                localVarQueryParameter['regionCode'] = regionCode;
            }

            if (trailingDays !== undefined) {
                localVarQueryParameter['trailingDays'] = trailingDays;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCourt
         * @param {number} courtId courtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtUsingGET: async (courtId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtId' is not null or undefined
            if (courtId === null || courtId === undefined) {
                throw new RequiredError('courtId','Required parameter courtId was null or undefined when calling getCourtUsingGET.');
            }
            const localVarPath = `/api/v1/courts/{courtId}`
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary searchCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCourtsUsingGET: async (citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/courts/traffic`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (citationId !== undefined) {
                localVarQueryParameter['citationId'] = citationId;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (county !== undefined) {
                localVarQueryParameter['county'] = county;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (regionCode !== undefined) {
                localVarQueryParameter['regionCode'] = regionCode;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCourtAddress
         * @param {number} addressId addressId
         * @param {number} courtId courtId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtAddressUsingPUT: async (addressId: number, courtId: number, request: UpsertAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            if (addressId === null || addressId === undefined) {
                throw new RequiredError('addressId','Required parameter addressId was null or undefined when calling updateCourtAddressUsingPUT.');
            }
            // verify required parameter 'courtId' is not null or undefined
            if (courtId === null || courtId === undefined) {
                throw new RequiredError('courtId','Required parameter courtId was null or undefined when calling updateCourtAddressUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateCourtAddressUsingPUT.');
            }
            const localVarPath = `/api/v1/courts/{courtId}/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)))
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCourt
         * @param {number} courtId courtId
         * @param {UpdateCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtUsingPUT: async (courtId: number, request: UpdateCourtRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtId' is not null or undefined
            if (courtId === null || courtId === undefined) {
                throw new RequiredError('courtId','Required parameter courtId was null or undefined when calling updateCourtUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateCourtUsingPUT.');
            }
            const localVarPath = `/api/v1/courts/{courtId}`
                .replace(`{${"courtId"}}`, encodeURIComponent(String(courtId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourtControllerApi - functional programming interface
 * @export
 */
export const CourtControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCourt
         * @param {AddCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCourtUsingPOST(request: AddCourtRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CourtControllerApiAxiosParamCreator(configuration).addCourtUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary findCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCourtsUsingGET(citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindsCourtsResponse>> {
            const localVarAxiosArgs = await CourtControllerApiAxiosParamCreator(configuration).findCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary findCourtsWithNoCoverage
         * @param {string} [countryCode] countryCode
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCourtsWithNoCoverageUsingGET(countryCode?: string, countyId?: number, regionCode?: string, trailingDays?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindCourtsWithNoCoverageResponse>> {
            const localVarAxiosArgs = await CourtControllerApiAxiosParamCreator(configuration).findCourtsWithNoCoverageUsingGET(countryCode, countyId, regionCode, trailingDays, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCourt
         * @param {number} courtId courtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtUsingGET(courtId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCourtResponse>> {
            const localVarAxiosArgs = await CourtControllerApiAxiosParamCreator(configuration).getCourtUsingGET(courtId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary searchCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCourtsUsingGET(citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCourtsByQueryResponse>> {
            const localVarAxiosArgs = await CourtControllerApiAxiosParamCreator(configuration).searchCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCourtAddress
         * @param {number} addressId addressId
         * @param {number} courtId courtId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCourtAddressUsingPUT(addressId: number, courtId: number, request: UpsertAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CourtControllerApiAxiosParamCreator(configuration).updateCourtAddressUsingPUT(addressId, courtId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCourt
         * @param {number} courtId courtId
         * @param {UpdateCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCourtUsingPUT(courtId: number, request: UpdateCourtRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CourtControllerApiAxiosParamCreator(configuration).updateCourtUsingPUT(courtId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CourtControllerApi - factory interface
 * @export
 */
export const CourtControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addCourt
         * @param {AddCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtUsingPOST(request: AddCourtRequest, options?: any): AxiosPromise<void> {
            return CourtControllerApiFp(configuration).addCourtUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary findCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsUsingGET(citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): AxiosPromise<FindsCourtsResponse> {
            return CourtControllerApiFp(configuration).findCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary findCourtsWithNoCoverage
         * @param {string} [countryCode] countryCode
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsWithNoCoverageUsingGET(countryCode?: string, countyId?: number, regionCode?: string, trailingDays?: number, options?: any): AxiosPromise<FindCourtsWithNoCoverageResponse> {
            return CourtControllerApiFp(configuration).findCourtsWithNoCoverageUsingGET(countryCode, countyId, regionCode, trailingDays, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCourt
         * @param {number} courtId courtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtUsingGET(courtId: number, options?: any): AxiosPromise<GetCourtResponse> {
            return CourtControllerApiFp(configuration).getCourtUsingGET(courtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary searchCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCourtsUsingGET(citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any): AxiosPromise<GetCourtsByQueryResponse> {
            return CourtControllerApiFp(configuration).searchCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCourtAddress
         * @param {number} addressId addressId
         * @param {number} courtId courtId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtAddressUsingPUT(addressId: number, courtId: number, request: UpsertAddressRequest, options?: any): AxiosPromise<void> {
            return CourtControllerApiFp(configuration).updateCourtAddressUsingPUT(addressId, courtId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCourt
         * @param {number} courtId courtId
         * @param {UpdateCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtUsingPUT(courtId: number, request: UpdateCourtRequest, options?: any): AxiosPromise<void> {
            return CourtControllerApiFp(configuration).updateCourtUsingPUT(courtId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourtControllerApi - object-oriented interface
 * @export
 * @class CourtControllerApi
 * @extends {BaseAPI}
 */
export class CourtControllerApi extends BaseAPI {
    /**
     * 
     * @summary addCourt
     * @param {AddCourtRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    public addCourtUsingPOST(request: AddCourtRequest, options?: any) {
        return CourtControllerApiFp(this.configuration).addCourtUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary findCourts
     * @param {number} [citationId] citationId
     * @param {string} [city] city
     * @param {string} [countryCode] countryCode
     * @param {string} [county] county
     * @param {number} [length] length
     * @param {number} [offset] offset
     * @param {string} [q] q
     * @param {string} [regionCode] regionCode
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    public findCourtsUsingGET(citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any) {
        return CourtControllerApiFp(this.configuration).findCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary findCourtsWithNoCoverage
     * @param {string} [countryCode] countryCode
     * @param {number} [countyId] countyId
     * @param {string} [regionCode] regionCode
     * @param {number} [trailingDays] trailingDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    public findCourtsWithNoCoverageUsingGET(countryCode?: string, countyId?: number, regionCode?: string, trailingDays?: number, options?: any) {
        return CourtControllerApiFp(this.configuration).findCourtsWithNoCoverageUsingGET(countryCode, countyId, regionCode, trailingDays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCourt
     * @param {number} courtId courtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    public getCourtUsingGET(courtId: number, options?: any) {
        return CourtControllerApiFp(this.configuration).getCourtUsingGET(courtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary searchCourts
     * @param {number} [citationId] citationId
     * @param {string} [city] city
     * @param {string} [countryCode] countryCode
     * @param {string} [county] county
     * @param {number} [length] length
     * @param {number} [offset] offset
     * @param {string} [q] q
     * @param {string} [regionCode] regionCode
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    public searchCourtsUsingGET(citationId?: number, city?: string, countryCode?: string, county?: string, length?: number, offset?: number, q?: string, regionCode?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', options?: any) {
        return CourtControllerApiFp(this.configuration).searchCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCourtAddress
     * @param {number} addressId addressId
     * @param {number} courtId courtId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    public updateCourtAddressUsingPUT(addressId: number, courtId: number, request: UpsertAddressRequest, options?: any) {
        return CourtControllerApiFp(this.configuration).updateCourtAddressUsingPUT(addressId, courtId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCourt
     * @param {number} courtId courtId
     * @param {UpdateCourtRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    public updateCourtUsingPUT(courtId: number, request: UpdateCourtRequest, options?: any) {
        return CourtControllerApiFp(this.configuration).updateCourtUsingPUT(courtId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CrmControllerApi - axios parameter creator
 * @export
 */
export const CrmControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary generateTemplate
         * @param {GenerateTemplateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTemplateUsingPOST: async (request: GenerateTemplateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling generateTemplateUsingPOST.');
            }
            const localVarPath = `/api/v1/crm/generate-template`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOutgoingContacts
         * @param {string} recipientEmailAddress recipientEmailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingContactsUsingGET: async (recipientEmailAddress: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientEmailAddress' is not null or undefined
            if (recipientEmailAddress === null || recipientEmailAddress === undefined) {
                throw new RequiredError('recipientEmailAddress','Required parameter recipientEmailAddress was null or undefined when calling getOutgoingContactsUsingGET.');
            }
            const localVarPath = `/api/v1/crm/contacts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recipientEmailAddress !== undefined) {
                localVarQueryParameter['recipientEmailAddress'] = recipientEmailAddress;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTemplates
         * @param {Array<string>} [category] category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesUsingGET: async (category?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/crm/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category) {
                localVarQueryParameter['category'] = category;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary replyToTicket
         * @param {number} ticketId ticketId
         * @param {ReplyToTicketRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToTicketUsingPOST: async (ticketId: number, request: ReplyToTicketRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            if (ticketId === null || ticketId === undefined) {
                throw new RequiredError('ticketId','Required parameter ticketId was null or undefined when calling replyToTicketUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling replyToTicketUsingPOST.');
            }
            const localVarPath = `/api/v1/crm/ticket/{ticketId}/reply`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendConsolidatedEmailToUser
         * @param {SendConsolidatedEmailToUser} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConsolidatedEmailToUserUsingPOST: async (request: SendConsolidatedEmailToUser, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling sendConsolidatedEmailToUserUsingPOST.');
            }
            const localVarPath = `/api/v1/crm/user/consolidate-email`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendEmailToUser
         * @param {SendEmailToUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUserUsingPOST: async (request: SendEmailToUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling sendEmailToUserUsingPOST.');
            }
            const localVarPath = `/api/v1/crm/user/email`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendEmailToUsers
         * @param {SendEmailToUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUsersUsingPOST: async (request: SendEmailToUsersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling sendEmailToUsersUsingPOST.');
            }
            const localVarPath = `/api/v1/crm/users/email`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CrmControllerApi - functional programming interface
 * @export
 */
export const CrmControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary generateTemplate
         * @param {GenerateTemplateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTemplateUsingPOST(request: GenerateTemplateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmailTemplateResponse>> {
            const localVarAxiosArgs = await CrmControllerApiAxiosParamCreator(configuration).generateTemplateUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getOutgoingContacts
         * @param {string} recipientEmailAddress recipientEmailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutgoingContactsUsingGET(recipientEmailAddress: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOutgoingContactsResponse>> {
            const localVarAxiosArgs = await CrmControllerApiAxiosParamCreator(configuration).getOutgoingContactsUsingGET(recipientEmailAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getTemplates
         * @param {Array<string>} [category] category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplatesUsingGET(category?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await CrmControllerApiAxiosParamCreator(configuration).getTemplatesUsingGET(category, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary replyToTicket
         * @param {number} ticketId ticketId
         * @param {ReplyToTicketRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replyToTicketUsingPOST(ticketId: number, request: ReplyToTicketRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CrmControllerApiAxiosParamCreator(configuration).replyToTicketUsingPOST(ticketId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendConsolidatedEmailToUser
         * @param {SendConsolidatedEmailToUser} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendConsolidatedEmailToUserUsingPOST(request: SendConsolidatedEmailToUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await CrmControllerApiAxiosParamCreator(configuration).sendConsolidatedEmailToUserUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendEmailToUser
         * @param {SendEmailToUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailToUserUsingPOST(request: SendEmailToUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CrmControllerApiAxiosParamCreator(configuration).sendEmailToUserUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendEmailToUsers
         * @param {SendEmailToUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailToUsersUsingPOST(request: SendEmailToUsersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CrmControllerApiAxiosParamCreator(configuration).sendEmailToUsersUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CrmControllerApi - factory interface
 * @export
 */
export const CrmControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary generateTemplate
         * @param {GenerateTemplateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTemplateUsingPOST(request: GenerateTemplateRequest, options?: any): AxiosPromise<GetEmailTemplateResponse> {
            return CrmControllerApiFp(configuration).generateTemplateUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOutgoingContacts
         * @param {string} recipientEmailAddress recipientEmailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingContactsUsingGET(recipientEmailAddress: string, options?: any): AxiosPromise<GetOutgoingContactsResponse> {
            return CrmControllerApiFp(configuration).getOutgoingContactsUsingGET(recipientEmailAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTemplates
         * @param {Array<string>} [category] category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesUsingGET(category?: Array<string>, options?: any): AxiosPromise<Array<string>> {
            return CrmControllerApiFp(configuration).getTemplatesUsingGET(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary replyToTicket
         * @param {number} ticketId ticketId
         * @param {ReplyToTicketRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToTicketUsingPOST(ticketId: number, request: ReplyToTicketRequest, options?: any): AxiosPromise<object> {
            return CrmControllerApiFp(configuration).replyToTicketUsingPOST(ticketId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendConsolidatedEmailToUser
         * @param {SendConsolidatedEmailToUser} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConsolidatedEmailToUserUsingPOST(request: SendConsolidatedEmailToUser, options?: any): AxiosPromise<object> {
            return CrmControllerApiFp(configuration).sendConsolidatedEmailToUserUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendEmailToUser
         * @param {SendEmailToUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUserUsingPOST(request: SendEmailToUserRequest, options?: any): AxiosPromise<void> {
            return CrmControllerApiFp(configuration).sendEmailToUserUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendEmailToUsers
         * @param {SendEmailToUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUsersUsingPOST(request: SendEmailToUsersRequest, options?: any): AxiosPromise<void> {
            return CrmControllerApiFp(configuration).sendEmailToUsersUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CrmControllerApi - object-oriented interface
 * @export
 * @class CrmControllerApi
 * @extends {BaseAPI}
 */
export class CrmControllerApi extends BaseAPI {
    /**
     * 
     * @summary generateTemplate
     * @param {GenerateTemplateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    public generateTemplateUsingPOST(request: GenerateTemplateRequest, options?: any) {
        return CrmControllerApiFp(this.configuration).generateTemplateUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOutgoingContacts
     * @param {string} recipientEmailAddress recipientEmailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    public getOutgoingContactsUsingGET(recipientEmailAddress: string, options?: any) {
        return CrmControllerApiFp(this.configuration).getOutgoingContactsUsingGET(recipientEmailAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTemplates
     * @param {Array<string>} [category] category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    public getTemplatesUsingGET(category?: Array<string>, options?: any) {
        return CrmControllerApiFp(this.configuration).getTemplatesUsingGET(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary replyToTicket
     * @param {number} ticketId ticketId
     * @param {ReplyToTicketRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    public replyToTicketUsingPOST(ticketId: number, request: ReplyToTicketRequest, options?: any) {
        return CrmControllerApiFp(this.configuration).replyToTicketUsingPOST(ticketId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendConsolidatedEmailToUser
     * @param {SendConsolidatedEmailToUser} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    public sendConsolidatedEmailToUserUsingPOST(request: SendConsolidatedEmailToUser, options?: any) {
        return CrmControllerApiFp(this.configuration).sendConsolidatedEmailToUserUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendEmailToUser
     * @param {SendEmailToUserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    public sendEmailToUserUsingPOST(request: SendEmailToUserRequest, options?: any) {
        return CrmControllerApiFp(this.configuration).sendEmailToUserUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendEmailToUsers
     * @param {SendEmailToUsersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    public sendEmailToUsersUsingPOST(request: SendEmailToUsersRequest, options?: any) {
        return CrmControllerApiFp(this.configuration).sendEmailToUsersUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CustomerLeadControllerApi - axios parameter creator
 * @export
 */
export const CustomerLeadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary postCustomerLead
         * @param {AddCustomerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerLeadUsingPOST: async (request: AddCustomerLeadRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling postCustomerLeadUsingPOST.');
            }
            const localVarPath = `/api/v1/customer-leads`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerLeadControllerApi - functional programming interface
 * @export
 */
export const CustomerLeadControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary postCustomerLead
         * @param {AddCustomerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomerLeadUsingPOST(request: AddCustomerLeadRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CustomerLeadControllerApiAxiosParamCreator(configuration).postCustomerLeadUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomerLeadControllerApi - factory interface
 * @export
 */
export const CustomerLeadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary postCustomerLead
         * @param {AddCustomerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerLeadUsingPOST(request: AddCustomerLeadRequest, options?: any): AxiosPromise<void> {
            return CustomerLeadControllerApiFp(configuration).postCustomerLeadUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerLeadControllerApi - object-oriented interface
 * @export
 * @class CustomerLeadControllerApi
 * @extends {BaseAPI}
 */
export class CustomerLeadControllerApi extends BaseAPI {
    /**
     * 
     * @summary postCustomerLead
     * @param {AddCustomerLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerLeadControllerApi
     */
    public postCustomerLeadUsingPOST(request: AddCustomerLeadRequest, options?: any) {
        return CustomerLeadControllerApiFp(this.configuration).postCustomerLeadUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CustomerReviewControllerApi - axios parameter creator
 * @export
 */
export const CustomerReviewControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCustomerReview
         * @param {AddReviewRequest} addReviewRequest addReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerReviewUsingPOST: async (addReviewRequest: AddReviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addReviewRequest' is not null or undefined
            if (addReviewRequest === null || addReviewRequest === undefined) {
                throw new RequiredError('addReviewRequest','Required parameter addReviewRequest was null or undefined when calling addCustomerReviewUsingPOST.');
            }
            const localVarPath = `/api/v1/reviews`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addReviewRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addReviewRequest !== undefined ? addReviewRequest : {}) : (addReviewRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listCustomerReviews
         * @param {boolean} [includeAnonymous] includeAnonymous
         * @param {boolean} [includeRatings] includeRatings
         * @param {boolean} [isFeatured] isFeatured
         * @param {number} [lawfirmId] lawfirmId
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {Array<string>} [tags] tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerReviewsUsingGET: async (includeAnonymous?: boolean, includeRatings?: boolean, isFeatured?: boolean, lawfirmId?: number, limit?: number, nextPageToken?: string, previousPageToken?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reviews`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeAnonymous !== undefined) {
                localVarQueryParameter['includeAnonymous'] = includeAnonymous;
            }

            if (includeRatings !== undefined) {
                localVarQueryParameter['includeRatings'] = includeRatings;
            }

            if (isFeatured !== undefined) {
                localVarQueryParameter['isFeatured'] = isFeatured;
            }

            if (lawfirmId !== undefined) {
                localVarQueryParameter['lawfirmId'] = lawfirmId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }

            if (previousPageToken !== undefined) {
                localVarQueryParameter['previousPageToken'] = previousPageToken;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listEligibleStatusesForReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEligibleStatusesForReviewUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reviews/eligible-statuses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markCommentWithVote
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {boolean} [like] like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCommentWithVoteUsingPUT: async (commentId: number, reviewId: number, like?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling markCommentWithVoteUsingPUT.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling markCommentWithVoteUsingPUT.');
            }
            const localVarPath = `/api/v1/reviews/{reviewId}/comments/{commentId}/vote`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (like !== undefined) {
                localVarQueryParameter['like'] = like;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markReviewWithVote
         * @param {number} reviewId reviewId
         * @param {boolean} [helpful] helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReviewWithVoteUsingPUT: async (reviewId: number, helpful?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling markReviewWithVoteUsingPUT.');
            }
            const localVarPath = `/api/v1/reviews/{reviewId}/vote`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (helpful !== undefined) {
                localVarQueryParameter['helpful'] = helpful;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary replyToCustomerReview
         * @param {number} reviewId reviewId
         * @param {ReplyToReviewRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToCustomerReviewUsingPOST: async (reviewId: number, request: ReplyToReviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling replyToCustomerReviewUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling replyToCustomerReviewUsingPOST.');
            }
            const localVarPath = `/api/v1/reviews/{reviewId}/comments`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCommentForCustomerReview
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {UpdateReplyForCustomerReview} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommentForCustomerReviewUsingPOST: async (commentId: number, reviewId: number, request: UpdateReplyForCustomerReview, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
            }
            const localVarPath = `/api/v1/reviews/{reviewId}/comments/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerReviewControllerApi - functional programming interface
 * @export
 */
export const CustomerReviewControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCustomerReview
         * @param {AddReviewRequest} addReviewRequest addReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomerReviewUsingPOST(addReviewRequest: AddReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CustomerReviewControllerApiAxiosParamCreator(configuration).addCustomerReviewUsingPOST(addReviewRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listCustomerReviews
         * @param {boolean} [includeAnonymous] includeAnonymous
         * @param {boolean} [includeRatings] includeRatings
         * @param {boolean} [isFeatured] isFeatured
         * @param {number} [lawfirmId] lawfirmId
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {Array<string>} [tags] tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerReviewsUsingGET(includeAnonymous?: boolean, includeRatings?: boolean, isFeatured?: boolean, lawfirmId?: number, limit?: number, nextPageToken?: string, previousPageToken?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReviewsResponse>> {
            const localVarAxiosArgs = await CustomerReviewControllerApiAxiosParamCreator(configuration).listCustomerReviewsUsingGET(includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listEligibleStatusesForReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEligibleStatusesForReviewUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEligibleStatusResponse>> {
            const localVarAxiosArgs = await CustomerReviewControllerApiAxiosParamCreator(configuration).listEligibleStatusesForReviewUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markCommentWithVote
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {boolean} [like] like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markCommentWithVoteUsingPUT(commentId: number, reviewId: number, like?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CustomerReviewControllerApiAxiosParamCreator(configuration).markCommentWithVoteUsingPUT(commentId, reviewId, like, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markReviewWithVote
         * @param {number} reviewId reviewId
         * @param {boolean} [helpful] helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markReviewWithVoteUsingPUT(reviewId: number, helpful?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CustomerReviewControllerApiAxiosParamCreator(configuration).markReviewWithVoteUsingPUT(reviewId, helpful, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary replyToCustomerReview
         * @param {number} reviewId reviewId
         * @param {ReplyToReviewRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replyToCustomerReviewUsingPOST(reviewId: number, request: ReplyToReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CustomerReviewControllerApiAxiosParamCreator(configuration).replyToCustomerReviewUsingPOST(reviewId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCommentForCustomerReview
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {UpdateReplyForCustomerReview} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCommentForCustomerReviewUsingPOST(commentId: number, reviewId: number, request: UpdateReplyForCustomerReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CustomerReviewControllerApiAxiosParamCreator(configuration).updateCommentForCustomerReviewUsingPOST(commentId, reviewId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomerReviewControllerApi - factory interface
 * @export
 */
export const CustomerReviewControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addCustomerReview
         * @param {AddReviewRequest} addReviewRequest addReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerReviewUsingPOST(addReviewRequest: AddReviewRequest, options?: any): AxiosPromise<void> {
            return CustomerReviewControllerApiFp(configuration).addCustomerReviewUsingPOST(addReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listCustomerReviews
         * @param {boolean} [includeAnonymous] includeAnonymous
         * @param {boolean} [includeRatings] includeRatings
         * @param {boolean} [isFeatured] isFeatured
         * @param {number} [lawfirmId] lawfirmId
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {Array<string>} [tags] tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerReviewsUsingGET(includeAnonymous?: boolean, includeRatings?: boolean, isFeatured?: boolean, lawfirmId?: number, limit?: number, nextPageToken?: string, previousPageToken?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', tags?: Array<string>, options?: any): AxiosPromise<ListReviewsResponse> {
            return CustomerReviewControllerApiFp(configuration).listCustomerReviewsUsingGET(includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listEligibleStatusesForReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEligibleStatusesForReviewUsingGET(options?: any): AxiosPromise<ListEligibleStatusResponse> {
            return CustomerReviewControllerApiFp(configuration).listEligibleStatusesForReviewUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markCommentWithVote
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {boolean} [like] like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCommentWithVoteUsingPUT(commentId: number, reviewId: number, like?: boolean, options?: any): AxiosPromise<void> {
            return CustomerReviewControllerApiFp(configuration).markCommentWithVoteUsingPUT(commentId, reviewId, like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markReviewWithVote
         * @param {number} reviewId reviewId
         * @param {boolean} [helpful] helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReviewWithVoteUsingPUT(reviewId: number, helpful?: boolean, options?: any): AxiosPromise<void> {
            return CustomerReviewControllerApiFp(configuration).markReviewWithVoteUsingPUT(reviewId, helpful, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary replyToCustomerReview
         * @param {number} reviewId reviewId
         * @param {ReplyToReviewRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToCustomerReviewUsingPOST(reviewId: number, request: ReplyToReviewRequest, options?: any): AxiosPromise<void> {
            return CustomerReviewControllerApiFp(configuration).replyToCustomerReviewUsingPOST(reviewId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCommentForCustomerReview
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {UpdateReplyForCustomerReview} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommentForCustomerReviewUsingPOST(commentId: number, reviewId: number, request: UpdateReplyForCustomerReview, options?: any): AxiosPromise<void> {
            return CustomerReviewControllerApiFp(configuration).updateCommentForCustomerReviewUsingPOST(commentId, reviewId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerReviewControllerApi - object-oriented interface
 * @export
 * @class CustomerReviewControllerApi
 * @extends {BaseAPI}
 */
export class CustomerReviewControllerApi extends BaseAPI {
    /**
     * 
     * @summary addCustomerReview
     * @param {AddReviewRequest} addReviewRequest addReviewRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    public addCustomerReviewUsingPOST(addReviewRequest: AddReviewRequest, options?: any) {
        return CustomerReviewControllerApiFp(this.configuration).addCustomerReviewUsingPOST(addReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listCustomerReviews
     * @param {boolean} [includeAnonymous] includeAnonymous
     * @param {boolean} [includeRatings] includeRatings
     * @param {boolean} [isFeatured] isFeatured
     * @param {number} [lawfirmId] lawfirmId
     * @param {number} [limit] limit
     * @param {string} [nextPageToken] nextPageToken
     * @param {string} [previousPageToken] previousPageToken
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
     * @param {Array<string>} [tags] tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    public listCustomerReviewsUsingGET(includeAnonymous?: boolean, includeRatings?: boolean, isFeatured?: boolean, lawfirmId?: number, limit?: number, nextPageToken?: string, previousPageToken?: string, state?: 'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY', tags?: Array<string>, options?: any) {
        return CustomerReviewControllerApiFp(this.configuration).listCustomerReviewsUsingGET(includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listEligibleStatusesForReview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    public listEligibleStatusesForReviewUsingGET(options?: any) {
        return CustomerReviewControllerApiFp(this.configuration).listEligibleStatusesForReviewUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markCommentWithVote
     * @param {number} commentId commentId
     * @param {number} reviewId reviewId
     * @param {boolean} [like] like
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    public markCommentWithVoteUsingPUT(commentId: number, reviewId: number, like?: boolean, options?: any) {
        return CustomerReviewControllerApiFp(this.configuration).markCommentWithVoteUsingPUT(commentId, reviewId, like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markReviewWithVote
     * @param {number} reviewId reviewId
     * @param {boolean} [helpful] helpful
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    public markReviewWithVoteUsingPUT(reviewId: number, helpful?: boolean, options?: any) {
        return CustomerReviewControllerApiFp(this.configuration).markReviewWithVoteUsingPUT(reviewId, helpful, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary replyToCustomerReview
     * @param {number} reviewId reviewId
     * @param {ReplyToReviewRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    public replyToCustomerReviewUsingPOST(reviewId: number, request: ReplyToReviewRequest, options?: any) {
        return CustomerReviewControllerApiFp(this.configuration).replyToCustomerReviewUsingPOST(reviewId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCommentForCustomerReview
     * @param {number} commentId commentId
     * @param {number} reviewId reviewId
     * @param {UpdateReplyForCustomerReview} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    public updateCommentForCustomerReviewUsingPOST(commentId: number, reviewId: number, request: UpdateReplyForCustomerReview, options?: any) {
        return CustomerReviewControllerApiFp(this.configuration).updateCommentForCustomerReviewUsingPOST(commentId, reviewId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * DashboardControllerApi - axios parameter creator
 * @export
 */
export const DashboardControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getBookings
         * @param {GetBookingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingsUsingPOST: async (request: GetBookingsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getBookingsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/bookings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRegisteredUsers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredUsersUsingPOST: async (graphRequest: GraphRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphRequest' is not null or undefined
            if (graphRequest === null || graphRequest === undefined) {
                throw new RequiredError('graphRequest','Required parameter graphRequest was null or undefined when calling getRegisteredUsersUsingPOST.');
            }
            const localVarPath = `/api/v1/console/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUserRegistrations
         * @param {GetUserRegistrationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRegistrationsUsingPOST: async (request: GetUserRegistrationsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getUserRegistrationsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/registrations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listCasesByStatus
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCasesByStatusUsingPOST: async (graphRequest: GraphRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphRequest' is not null or undefined
            if (graphRequest === null || graphRequest === undefined) {
                throw new RequiredError('graphRequest','Required parameter graphRequest was null or undefined when calling listCasesByStatusUsingPOST.');
            }
            const localVarPath = `/api/v1/console/cases/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listCustomers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomersUsingPOST: async (graphRequest: GraphRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphRequest' is not null or undefined
            if (graphRequest === null || graphRequest === undefined) {
                throw new RequiredError('graphRequest','Required parameter graphRequest was null or undefined when calling listCustomersUsingPOST.');
            }
            const localVarPath = `/api/v1/console/customers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listDropoffs
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDropoffsUsingPOST: async (graphRequest: GraphRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphRequest' is not null or undefined
            if (graphRequest === null || graphRequest === undefined) {
                throw new RequiredError('graphRequest','Required parameter graphRequest was null or undefined when calling listDropoffsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/dropoff`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listExpenses
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExpensesUsingPOST: async (graphRequest: GraphRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphRequest' is not null or undefined
            if (graphRequest === null || graphRequest === undefined) {
                throw new RequiredError('graphRequest','Required parameter graphRequest was null or undefined when calling listExpensesUsingPOST.');
            }
            const localVarPath = `/api/v1/console/expenses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listLawyerLeads
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawyerLeadsUsingPOST: async (graphRequest: GraphRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphRequest' is not null or undefined
            if (graphRequest === null || graphRequest === undefined) {
                throw new RequiredError('graphRequest','Required parameter graphRequest was null or undefined when calling listLawyerLeadsUsingPOST.');
            }
            const localVarPath = `/api/v1/console/lawyer-leads`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardControllerApi - functional programming interface
 * @export
 */
export const DashboardControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getBookings
         * @param {GetBookingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookingsUsingPOST(request: GetBookingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBookingsResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).getBookingsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getRegisteredUsers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegisteredUsersUsingPOST(graphRequest: GraphRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqlResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).getRegisteredUsersUsingPOST(graphRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getUserRegistrations
         * @param {GetUserRegistrationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRegistrationsUsingPOST(request: GetUserRegistrationsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserRegistrationsResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).getUserRegistrationsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listCasesByStatus
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCasesByStatusUsingPOST(graphRequest: GraphRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqlResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).listCasesByStatusUsingPOST(graphRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listCustomers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomersUsingPOST(graphRequest: GraphRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqlResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).listCustomersUsingPOST(graphRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listDropoffs
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDropoffsUsingPOST(graphRequest: GraphRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqlResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).listDropoffsUsingPOST(graphRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listExpenses
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExpensesUsingPOST(graphRequest: GraphRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqlResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).listExpensesUsingPOST(graphRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listLawyerLeads
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLawyerLeadsUsingPOST(graphRequest: GraphRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqlResponse>> {
            const localVarAxiosArgs = await DashboardControllerApiAxiosParamCreator(configuration).listLawyerLeadsUsingPOST(graphRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DashboardControllerApi - factory interface
 * @export
 */
export const DashboardControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getBookings
         * @param {GetBookingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingsUsingPOST(request: GetBookingsRequest, options?: any): AxiosPromise<GetBookingsResponse> {
            return DashboardControllerApiFp(configuration).getBookingsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRegisteredUsers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredUsersUsingPOST(graphRequest: GraphRequest, options?: any): AxiosPromise<SqlResponse> {
            return DashboardControllerApiFp(configuration).getRegisteredUsersUsingPOST(graphRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUserRegistrations
         * @param {GetUserRegistrationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRegistrationsUsingPOST(request: GetUserRegistrationsRequest, options?: any): AxiosPromise<GetUserRegistrationsResponse> {
            return DashboardControllerApiFp(configuration).getUserRegistrationsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listCasesByStatus
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCasesByStatusUsingPOST(graphRequest: GraphRequest, options?: any): AxiosPromise<SqlResponse> {
            return DashboardControllerApiFp(configuration).listCasesByStatusUsingPOST(graphRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listCustomers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomersUsingPOST(graphRequest: GraphRequest, options?: any): AxiosPromise<SqlResponse> {
            return DashboardControllerApiFp(configuration).listCustomersUsingPOST(graphRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listDropoffs
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDropoffsUsingPOST(graphRequest: GraphRequest, options?: any): AxiosPromise<SqlResponse> {
            return DashboardControllerApiFp(configuration).listDropoffsUsingPOST(graphRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listExpenses
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExpensesUsingPOST(graphRequest: GraphRequest, options?: any): AxiosPromise<SqlResponse> {
            return DashboardControllerApiFp(configuration).listExpensesUsingPOST(graphRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listLawyerLeads
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawyerLeadsUsingPOST(graphRequest: GraphRequest, options?: any): AxiosPromise<SqlResponse> {
            return DashboardControllerApiFp(configuration).listLawyerLeadsUsingPOST(graphRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardControllerApi - object-oriented interface
 * @export
 * @class DashboardControllerApi
 * @extends {BaseAPI}
 */
export class DashboardControllerApi extends BaseAPI {
    /**
     * 
     * @summary getBookings
     * @param {GetBookingsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public getBookingsUsingPOST(request: GetBookingsRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).getBookingsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRegisteredUsers
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public getRegisteredUsersUsingPOST(graphRequest: GraphRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).getRegisteredUsersUsingPOST(graphRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUserRegistrations
     * @param {GetUserRegistrationsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public getUserRegistrationsUsingPOST(request: GetUserRegistrationsRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).getUserRegistrationsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listCasesByStatus
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public listCasesByStatusUsingPOST(graphRequest: GraphRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).listCasesByStatusUsingPOST(graphRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listCustomers
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public listCustomersUsingPOST(graphRequest: GraphRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).listCustomersUsingPOST(graphRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listDropoffs
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public listDropoffsUsingPOST(graphRequest: GraphRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).listDropoffsUsingPOST(graphRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listExpenses
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public listExpensesUsingPOST(graphRequest: GraphRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).listExpensesUsingPOST(graphRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listLawyerLeads
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    public listLawyerLeadsUsingPOST(graphRequest: GraphRequest, options?: any) {
        return DashboardControllerApiFp(this.configuration).listLawyerLeadsUsingPOST(graphRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * DirectMailControllerApi - axios parameter creator
 * @export
 */
export const DirectMailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addDirectMailTemplate
         * @param {DirectMailTemplateToAdd} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDirectMailTemplateUsingPOST: async (request: DirectMailTemplateToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addDirectMailTemplateUsingPOST.');
            }
            const localVarPath = `/api/v1/direct-mail/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDirectMailTemplates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectMailTemplatesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/direct-mail/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSentMail
         * @param {DirectMailGetRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentMailUsingPOST: async (request: DirectMailGetRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getSentMailUsingPOST.');
            }
            const localVarPath = `/api/v1/direct-mail/fetch-sent-mail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handleLobEvent
         * @param {LobEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleLobEventUsingPOST: async (request: LobEventRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling handleLobEventUsingPOST.');
            }
            const localVarPath = `/api/v1/direct-mail/lob-events`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendDirectMail
         * @param {DirectMailSendRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectMailUsingPOST: async (request: DirectMailSendRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling sendDirectMailUsingPOST.');
            }
            const localVarPath = `/api/v1/direct-mail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendDirectReferralCheck
         * @param {number} userId userId
         * @param {SendDirectReferralCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectReferralCheckUsingPOST: async (userId: number, request: SendDirectReferralCheckRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling sendDirectReferralCheckUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling sendDirectReferralCheckUsingPOST.');
            }
            const localVarPath = `/api/v1/direct-mail/{userId}/send-referral-check`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validateDirectMailRequestForSend
         * @param {ValidateDirectMailRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateDirectMailRequestForSendUsingPOST: async (request: ValidateDirectMailRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling validateDirectMailRequestForSendUsingPOST.');
            }
            const localVarPath = `/api/v1/direct-mail/validate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary verifyMailingAddress
         * @param {VerifyMailingAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMailingAddressUsingPOST: async (request: VerifyMailingAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling verifyMailingAddressUsingPOST.');
            }
            const localVarPath = `/api/v1/direct-mail/verify-address`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectMailControllerApi - functional programming interface
 * @export
 */
export const DirectMailControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addDirectMailTemplate
         * @param {DirectMailTemplateToAdd} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDirectMailTemplateUsingPOST(request: DirectMailTemplateToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).addDirectMailTemplateUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDirectMailTemplates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectMailTemplatesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectMailTemplateResponse>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).getDirectMailTemplatesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSentMail
         * @param {DirectMailGetRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSentMailUsingPOST(request: DirectMailGetRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectMailContactResponse>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).getSentMailUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary handleLobEvent
         * @param {LobEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleLobEventUsingPOST(request: LobEventRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).handleLobEventUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendDirectMail
         * @param {DirectMailSendRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendDirectMailUsingPOST(request: DirectMailSendRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendDirectMailResponse>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).sendDirectMailUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendDirectReferralCheck
         * @param {number} userId userId
         * @param {SendDirectReferralCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendDirectReferralCheckUsingPOST(userId: number, request: SendDirectReferralCheckRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendDirectCheckResponse>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).sendDirectReferralCheckUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary validateDirectMailRequestForSend
         * @param {ValidateDirectMailRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateDirectMailRequestForSendUsingPOST(request: ValidateDirectMailRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateDirectMailResponse>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).validateDirectMailRequestForSendUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary verifyMailingAddress
         * @param {VerifyMailingAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyMailingAddressUsingPOST(request: VerifyMailingAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyMailingAddressResponse>> {
            const localVarAxiosArgs = await DirectMailControllerApiAxiosParamCreator(configuration).verifyMailingAddressUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DirectMailControllerApi - factory interface
 * @export
 */
export const DirectMailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addDirectMailTemplate
         * @param {DirectMailTemplateToAdd} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDirectMailTemplateUsingPOST(request: DirectMailTemplateToAdd, options?: any): AxiosPromise<void> {
            return DirectMailControllerApiFp(configuration).addDirectMailTemplateUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDirectMailTemplates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectMailTemplatesUsingGET(options?: any): AxiosPromise<DirectMailTemplateResponse> {
            return DirectMailControllerApiFp(configuration).getDirectMailTemplatesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSentMail
         * @param {DirectMailGetRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentMailUsingPOST(request: DirectMailGetRequest, options?: any): AxiosPromise<DirectMailContactResponse> {
            return DirectMailControllerApiFp(configuration).getSentMailUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handleLobEvent
         * @param {LobEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleLobEventUsingPOST(request: LobEventRequest, options?: any): AxiosPromise<void> {
            return DirectMailControllerApiFp(configuration).handleLobEventUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendDirectMail
         * @param {DirectMailSendRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectMailUsingPOST(request: DirectMailSendRequest, options?: any): AxiosPromise<SendDirectMailResponse> {
            return DirectMailControllerApiFp(configuration).sendDirectMailUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendDirectReferralCheck
         * @param {number} userId userId
         * @param {SendDirectReferralCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectReferralCheckUsingPOST(userId: number, request: SendDirectReferralCheckRequest, options?: any): AxiosPromise<SendDirectCheckResponse> {
            return DirectMailControllerApiFp(configuration).sendDirectReferralCheckUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary validateDirectMailRequestForSend
         * @param {ValidateDirectMailRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateDirectMailRequestForSendUsingPOST(request: ValidateDirectMailRequest, options?: any): AxiosPromise<ValidateDirectMailResponse> {
            return DirectMailControllerApiFp(configuration).validateDirectMailRequestForSendUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary verifyMailingAddress
         * @param {VerifyMailingAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMailingAddressUsingPOST(request: VerifyMailingAddressRequest, options?: any): AxiosPromise<VerifyMailingAddressResponse> {
            return DirectMailControllerApiFp(configuration).verifyMailingAddressUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectMailControllerApi - object-oriented interface
 * @export
 * @class DirectMailControllerApi
 * @extends {BaseAPI}
 */
export class DirectMailControllerApi extends BaseAPI {
    /**
     * 
     * @summary addDirectMailTemplate
     * @param {DirectMailTemplateToAdd} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public addDirectMailTemplateUsingPOST(request: DirectMailTemplateToAdd, options?: any) {
        return DirectMailControllerApiFp(this.configuration).addDirectMailTemplateUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDirectMailTemplates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public getDirectMailTemplatesUsingGET(options?: any) {
        return DirectMailControllerApiFp(this.configuration).getDirectMailTemplatesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSentMail
     * @param {DirectMailGetRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public getSentMailUsingPOST(request: DirectMailGetRequest, options?: any) {
        return DirectMailControllerApiFp(this.configuration).getSentMailUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handleLobEvent
     * @param {LobEventRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public handleLobEventUsingPOST(request: LobEventRequest, options?: any) {
        return DirectMailControllerApiFp(this.configuration).handleLobEventUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendDirectMail
     * @param {DirectMailSendRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public sendDirectMailUsingPOST(request: DirectMailSendRequest, options?: any) {
        return DirectMailControllerApiFp(this.configuration).sendDirectMailUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendDirectReferralCheck
     * @param {number} userId userId
     * @param {SendDirectReferralCheckRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public sendDirectReferralCheckUsingPOST(userId: number, request: SendDirectReferralCheckRequest, options?: any) {
        return DirectMailControllerApiFp(this.configuration).sendDirectReferralCheckUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary validateDirectMailRequestForSend
     * @param {ValidateDirectMailRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public validateDirectMailRequestForSendUsingPOST(request: ValidateDirectMailRequest, options?: any) {
        return DirectMailControllerApiFp(this.configuration).validateDirectMailRequestForSendUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary verifyMailingAddress
     * @param {VerifyMailingAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    public verifyMailingAddressUsingPOST(request: VerifyMailingAddressRequest, options?: any) {
        return DirectMailControllerApiFp(this.configuration).verifyMailingAddressUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * DripControllerApi - axios parameter creator
 * @export
 */
export const DripControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary removeFromDrip
         * @param {DripRemoveRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromDripUsingDELETE: async (request: DripRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling removeFromDripUsingDELETE.');
            }
            const localVarPath = `/api/v1/drip`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DripControllerApi - functional programming interface
 * @export
 */
export const DripControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary removeFromDrip
         * @param {DripRemoveRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromDripUsingDELETE(request: DripRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DripControllerApiAxiosParamCreator(configuration).removeFromDripUsingDELETE(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DripControllerApi - factory interface
 * @export
 */
export const DripControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary removeFromDrip
         * @param {DripRemoveRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromDripUsingDELETE(request: DripRemoveRequest, options?: any): AxiosPromise<void> {
            return DripControllerApiFp(configuration).removeFromDripUsingDELETE(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DripControllerApi - object-oriented interface
 * @export
 * @class DripControllerApi
 * @extends {BaseAPI}
 */
export class DripControllerApi extends BaseAPI {
    /**
     * 
     * @summary removeFromDrip
     * @param {DripRemoveRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DripControllerApi
     */
    public removeFromDripUsingDELETE(request: DripRemoveRequest, options?: any) {
        return DripControllerApiFp(this.configuration).removeFromDripUsingDELETE(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * DripWebhooksControllerApi - axios parameter creator
 * @export
 */
export const DripWebhooksControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleBounceOrComplaintEvent
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceOrComplaintEventUsingPOST: async (request: DripWebhookEvent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling handleBounceOrComplaintEventUsingPOST.');
            }
            const localVarPath = `/api/v1/webhooks/drip/bounce-or-complaint`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handleDripWebhook
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleDripWebhookUsingPOST: async (request: DripWebhookEvent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling handleDripWebhookUsingPOST.');
            }
            const localVarPath = `/api/v1/drip/webhooks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DripWebhooksControllerApi - functional programming interface
 * @export
 */
export const DripWebhooksControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleBounceOrComplaintEvent
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleBounceOrComplaintEventUsingPOST(request: DripWebhookEvent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DripWebhooksControllerApiAxiosParamCreator(configuration).handleBounceOrComplaintEventUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary handleDripWebhook
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleDripWebhookUsingPOST(request: DripWebhookEvent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DripWebhooksControllerApiAxiosParamCreator(configuration).handleDripWebhookUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DripWebhooksControllerApi - factory interface
 * @export
 */
export const DripWebhooksControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary handleBounceOrComplaintEvent
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceOrComplaintEventUsingPOST(request: DripWebhookEvent, options?: any): AxiosPromise<object> {
            return DripWebhooksControllerApiFp(configuration).handleBounceOrComplaintEventUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handleDripWebhook
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleDripWebhookUsingPOST(request: DripWebhookEvent, options?: any): AxiosPromise<object> {
            return DripWebhooksControllerApiFp(configuration).handleDripWebhookUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DripWebhooksControllerApi - object-oriented interface
 * @export
 * @class DripWebhooksControllerApi
 * @extends {BaseAPI}
 */
export class DripWebhooksControllerApi extends BaseAPI {
    /**
     * 
     * @summary handleBounceOrComplaintEvent
     * @param {DripWebhookEvent} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DripWebhooksControllerApi
     */
    public handleBounceOrComplaintEventUsingPOST(request: DripWebhookEvent, options?: any) {
        return DripWebhooksControllerApiFp(this.configuration).handleBounceOrComplaintEventUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handleDripWebhook
     * @param {DripWebhookEvent} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DripWebhooksControllerApi
     */
    public handleDripWebhookUsingPOST(request: DripWebhookEvent, options?: any) {
        return DripWebhooksControllerApiFp(this.configuration).handleDripWebhookUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * EmailSubscriptionControllerApi - axios parameter creator
 * @export
 */
export const EmailSubscriptionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary subscribe
         * @param {SubscribeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeUsingPOST: async (request: SubscribeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling subscribeUsingPOST.');
            }
            const localVarPath = `/api/v1/subscribe`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailSubscriptionControllerApi - functional programming interface
 * @export
 */
export const EmailSubscriptionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary subscribe
         * @param {SubscribeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeUsingPOST(request: SubscribeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await EmailSubscriptionControllerApiAxiosParamCreator(configuration).subscribeUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EmailSubscriptionControllerApi - factory interface
 * @export
 */
export const EmailSubscriptionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary subscribe
         * @param {SubscribeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeUsingPOST(request: SubscribeRequest, options?: any): AxiosPromise<object> {
            return EmailSubscriptionControllerApiFp(configuration).subscribeUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailSubscriptionControllerApi - object-oriented interface
 * @export
 * @class EmailSubscriptionControllerApi
 * @extends {BaseAPI}
 */
export class EmailSubscriptionControllerApi extends BaseAPI {
    /**
     * 
     * @summary subscribe
     * @param {SubscribeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSubscriptionControllerApi
     */
    public subscribeUsingPOST(request: SubscribeRequest, options?: any) {
        return EmailSubscriptionControllerApiFp(this.configuration).subscribeUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * FeedbackControllerApi - axios parameter creator
 * @export
 */
export const FeedbackControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary postFeedback
         * @param {PostFeedbackRequest} request request
         * @param {boolean} [isReview] isReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackUsingPOST: async (request: PostFeedbackRequest, isReview?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling postFeedbackUsingPOST.');
            }
            const localVarPath = `/api/v1/feedback`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isReview !== undefined) {
                localVarQueryParameter['isReview'] = isReview;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedbackControllerApi - functional programming interface
 * @export
 */
export const FeedbackControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary postFeedback
         * @param {PostFeedbackRequest} request request
         * @param {boolean} [isReview] isReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFeedbackUsingPOST(request: PostFeedbackRequest, isReview?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await FeedbackControllerApiAxiosParamCreator(configuration).postFeedbackUsingPOST(request, isReview, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeedbackControllerApi - factory interface
 * @export
 */
export const FeedbackControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary postFeedback
         * @param {PostFeedbackRequest} request request
         * @param {boolean} [isReview] isReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackUsingPOST(request: PostFeedbackRequest, isReview?: boolean, options?: any): AxiosPromise<object> {
            return FeedbackControllerApiFp(configuration).postFeedbackUsingPOST(request, isReview, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedbackControllerApi - object-oriented interface
 * @export
 * @class FeedbackControllerApi
 * @extends {BaseAPI}
 */
export class FeedbackControllerApi extends BaseAPI {
    /**
     * 
     * @summary postFeedback
     * @param {PostFeedbackRequest} request request
     * @param {boolean} [isReview] isReview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackControllerApi
     */
    public postFeedbackUsingPOST(request: PostFeedbackRequest, isReview?: boolean, options?: any) {
        return FeedbackControllerApiFp(this.configuration).postFeedbackUsingPOST(request, isReview, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * FreshcallerControllerApi - axios parameter creator
 * @export
 */
export const FreshcallerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary signRecordingUrl
         * @param {SignRecordingUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signRecordingUrlUsingPOST: async (request: SignRecordingUrlRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling signRecordingUrlUsingPOST.');
            }
            const localVarPath = `/api/v1/phone-calls/sign`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FreshcallerControllerApi - functional programming interface
 * @export
 */
export const FreshcallerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary signRecordingUrl
         * @param {SignRecordingUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signRecordingUrlUsingPOST(request: SignRecordingUrlRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignRecordingUrlResponse>> {
            const localVarAxiosArgs = await FreshcallerControllerApiAxiosParamCreator(configuration).signRecordingUrlUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FreshcallerControllerApi - factory interface
 * @export
 */
export const FreshcallerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary signRecordingUrl
         * @param {SignRecordingUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signRecordingUrlUsingPOST(request: SignRecordingUrlRequest, options?: any): AxiosPromise<SignRecordingUrlResponse> {
            return FreshcallerControllerApiFp(configuration).signRecordingUrlUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FreshcallerControllerApi - object-oriented interface
 * @export
 * @class FreshcallerControllerApi
 * @extends {BaseAPI}
 */
export class FreshcallerControllerApi extends BaseAPI {
    /**
     * 
     * @summary signRecordingUrl
     * @param {SignRecordingUrlRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshcallerControllerApi
     */
    public signRecordingUrlUsingPOST(request: SignRecordingUrlRequest, options?: any) {
        return FreshcallerControllerApiFp(this.configuration).signRecordingUrlUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * FreshdeskTicketControllerApi - axios parameter creator
 * @export
 */
export const FreshdeskTicketControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary mergeTicket
         * @param {number} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeTicketUsingPOST: async (ticketId: number, request: FreshdeskWebhookRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            if (ticketId === null || ticketId === undefined) {
                throw new RequiredError('ticketId','Required parameter ticketId was null or undefined when calling mergeTicketUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling mergeTicketUsingPOST.');
            }
            const localVarPath = `/api/v1/freshdesk/webhook/ticket/{ticketId}/merge`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ticketStatusChangeHook
         * @param {string} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketStatusChangeHookUsingPUT: async (ticketId: string, request: FreshdeskWebhookRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            if (ticketId === null || ticketId === undefined) {
                throw new RequiredError('ticketId','Required parameter ticketId was null or undefined when calling ticketStatusChangeHookUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling ticketStatusChangeHookUsingPUT.');
            }
            const localVarPath = `/api/v1/freshdesk/ticket/{ticketId}/webhook/status-change`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateFreshdeskTicket
         * @param {number} ticketId ticketId
         * @param {FreshDeskTicketReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFreshdeskTicketUsingPUT: async (ticketId: number, request: FreshDeskTicketReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            if (ticketId === null || ticketId === undefined) {
                throw new RequiredError('ticketId','Required parameter ticketId was null or undefined when calling updateFreshdeskTicketUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateFreshdeskTicketUsingPUT.');
            }
            const localVarPath = `/api/v1/freshdesk/ticket/{ticketId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FreshdeskTicketControllerApi - functional programming interface
 * @export
 */
export const FreshdeskTicketControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary mergeTicket
         * @param {number} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeTicketUsingPOST(ticketId: number, request: FreshdeskWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeTicketResponse>> {
            const localVarAxiosArgs = await FreshdeskTicketControllerApiAxiosParamCreator(configuration).mergeTicketUsingPOST(ticketId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ticketStatusChangeHook
         * @param {string} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketStatusChangeHookUsingPUT(ticketId: string, request: FreshdeskWebhookRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FreshdeskTicketControllerApiAxiosParamCreator(configuration).ticketStatusChangeHookUsingPUT(ticketId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateFreshdeskTicket
         * @param {number} ticketId ticketId
         * @param {FreshDeskTicketReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFreshdeskTicketUsingPUT(ticketId: number, request: FreshDeskTicketReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FreshDeskTicketRes>> {
            const localVarAxiosArgs = await FreshdeskTicketControllerApiAxiosParamCreator(configuration).updateFreshdeskTicketUsingPUT(ticketId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FreshdeskTicketControllerApi - factory interface
 * @export
 */
export const FreshdeskTicketControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary mergeTicket
         * @param {number} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeTicketUsingPOST(ticketId: number, request: FreshdeskWebhookRequest, options?: any): AxiosPromise<MergeTicketResponse> {
            return FreshdeskTicketControllerApiFp(configuration).mergeTicketUsingPOST(ticketId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ticketStatusChangeHook
         * @param {string} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketStatusChangeHookUsingPUT(ticketId: string, request: FreshdeskWebhookRequest, options?: any): AxiosPromise<void> {
            return FreshdeskTicketControllerApiFp(configuration).ticketStatusChangeHookUsingPUT(ticketId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateFreshdeskTicket
         * @param {number} ticketId ticketId
         * @param {FreshDeskTicketReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFreshdeskTicketUsingPUT(ticketId: number, request: FreshDeskTicketReq, options?: any): AxiosPromise<FreshDeskTicketRes> {
            return FreshdeskTicketControllerApiFp(configuration).updateFreshdeskTicketUsingPUT(ticketId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FreshdeskTicketControllerApi - object-oriented interface
 * @export
 * @class FreshdeskTicketControllerApi
 * @extends {BaseAPI}
 */
export class FreshdeskTicketControllerApi extends BaseAPI {
    /**
     * 
     * @summary mergeTicket
     * @param {number} ticketId ticketId
     * @param {FreshdeskWebhookRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshdeskTicketControllerApi
     */
    public mergeTicketUsingPOST(ticketId: number, request: FreshdeskWebhookRequest, options?: any) {
        return FreshdeskTicketControllerApiFp(this.configuration).mergeTicketUsingPOST(ticketId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ticketStatusChangeHook
     * @param {string} ticketId ticketId
     * @param {FreshdeskWebhookRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshdeskTicketControllerApi
     */
    public ticketStatusChangeHookUsingPUT(ticketId: string, request: FreshdeskWebhookRequest, options?: any) {
        return FreshdeskTicketControllerApiFp(this.configuration).ticketStatusChangeHookUsingPUT(ticketId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateFreshdeskTicket
     * @param {number} ticketId ticketId
     * @param {FreshDeskTicketReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshdeskTicketControllerApi
     */
    public updateFreshdeskTicketUsingPUT(ticketId: number, request: FreshDeskTicketReq, options?: any) {
        return FreshdeskTicketControllerApiFp(this.configuration).updateFreshdeskTicketUsingPUT(ticketId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * GetCaseControllerApi - axios parameter creator
 * @export
 */
export const GetCaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCaseClient
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClientUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCaseClientUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/client`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCaseFromCitation
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseFromCitationUsingGET: async (citationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling getCaseFromCitationUsingGET.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/case`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCaseUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetCaseControllerApi - functional programming interface
 * @export
 */
export const GetCaseControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCaseClient
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseClientUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await GetCaseControllerApiAxiosParamCreator(configuration).getCaseClientUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCaseFromCitation
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseFromCitationUsingGET(citationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseFromCitationResponse>> {
            const localVarAxiosArgs = await GetCaseControllerApiAxiosParamCreator(configuration).getCaseFromCitationUsingGET(citationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseResponse>> {
            const localVarAxiosArgs = await GetCaseControllerApiAxiosParamCreator(configuration).getCaseUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GetCaseControllerApi - factory interface
 * @export
 */
export const GetCaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getCaseClient
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClientUsingGET(caseId: string, options?: any): AxiosPromise<GetUserResponse> {
            return GetCaseControllerApiFp(configuration).getCaseClientUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCaseFromCitation
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseFromCitationUsingGET(citationId: string, options?: any): AxiosPromise<GetCaseFromCitationResponse> {
            return GetCaseControllerApiFp(configuration).getCaseFromCitationUsingGET(citationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUsingGET(caseId: string, options?: any): AxiosPromise<GetCaseResponse> {
            return GetCaseControllerApiFp(configuration).getCaseUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetCaseControllerApi - object-oriented interface
 * @export
 * @class GetCaseControllerApi
 * @extends {BaseAPI}
 */
export class GetCaseControllerApi extends BaseAPI {
    /**
     * 
     * @summary getCaseClient
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetCaseControllerApi
     */
    public getCaseClientUsingGET(caseId: string, options?: any) {
        return GetCaseControllerApiFp(this.configuration).getCaseClientUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCaseFromCitation
     * @param {string} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetCaseControllerApi
     */
    public getCaseFromCitationUsingGET(citationId: string, options?: any) {
        return GetCaseControllerApiFp(this.configuration).getCaseFromCitationUsingGET(citationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetCaseControllerApi
     */
    public getCaseUsingGET(caseId: string, options?: any) {
        return GetCaseControllerApiFp(this.configuration).getCaseUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HouseholdMateControllerApi - axios parameter creator
 * @export
 */
export const HouseholdMateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary acceptHouseholdInvite
         * @param {string} email email
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptHouseholdInviteUsingPUT: async (email: string, token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling acceptHouseholdInviteUsingPUT.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling acceptHouseholdInviteUsingPUT.');
            }
            const localVarPath = `/api/v1/household-mates/accept-invite`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary cancelHouseholdMateInvite
         * @param {string} inviteeEmail inviteeEmail
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelHouseholdMateInviteUsingDELETE: async (inviteeEmail: string, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteeEmail' is not null or undefined
            if (inviteeEmail === null || inviteeEmail === undefined) {
                throw new RequiredError('inviteeEmail','Required parameter inviteeEmail was null or undefined when calling cancelHouseholdMateInviteUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling cancelHouseholdMateInviteUsingDELETE.');
            }
            const localVarPath = `/api/v1/household-mates/{userId}/invite`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (inviteeEmail !== undefined) {
                localVarQueryParameter['inviteeEmail'] = inviteeEmail;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getHouseholdMates
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseholdMatesUsingGET: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getHouseholdMatesUsingGET.');
            }
            const localVarPath = `/api/v1/household-mates/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary inviteHouseholdMate
         * @param {number} userId userId
         * @param {InviteHouseholdMateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteHouseholdMateUsingPOST: async (userId: number, request: InviteHouseholdMateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling inviteHouseholdMateUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling inviteHouseholdMateUsingPOST.');
            }
            const localVarPath = `/api/v1/household-mates/{userId}/invite`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HouseholdMateControllerApi - functional programming interface
 * @export
 */
export const HouseholdMateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary acceptHouseholdInvite
         * @param {string} email email
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptHouseholdInviteUsingPUT(email: string, token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HouseholdMateControllerApiAxiosParamCreator(configuration).acceptHouseholdInviteUsingPUT(email, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary cancelHouseholdMateInvite
         * @param {string} inviteeEmail inviteeEmail
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelHouseholdMateInviteUsingDELETE(inviteeEmail: string, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HouseholdMateControllerApiAxiosParamCreator(configuration).cancelHouseholdMateInviteUsingDELETE(inviteeEmail, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getHouseholdMates
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHouseholdMatesUsingGET(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHouseholdMatesResponse>> {
            const localVarAxiosArgs = await HouseholdMateControllerApiAxiosParamCreator(configuration).getHouseholdMatesUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary inviteHouseholdMate
         * @param {number} userId userId
         * @param {InviteHouseholdMateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteHouseholdMateUsingPOST(userId: number, request: InviteHouseholdMateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HouseholdMateControllerApiAxiosParamCreator(configuration).inviteHouseholdMateUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HouseholdMateControllerApi - factory interface
 * @export
 */
export const HouseholdMateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary acceptHouseholdInvite
         * @param {string} email email
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptHouseholdInviteUsingPUT(email: string, token: string, options?: any): AxiosPromise<void> {
            return HouseholdMateControllerApiFp(configuration).acceptHouseholdInviteUsingPUT(email, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary cancelHouseholdMateInvite
         * @param {string} inviteeEmail inviteeEmail
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelHouseholdMateInviteUsingDELETE(inviteeEmail: string, userId: number, options?: any): AxiosPromise<void> {
            return HouseholdMateControllerApiFp(configuration).cancelHouseholdMateInviteUsingDELETE(inviteeEmail, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getHouseholdMates
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseholdMatesUsingGET(userId: string, options?: any): AxiosPromise<GetHouseholdMatesResponse> {
            return HouseholdMateControllerApiFp(configuration).getHouseholdMatesUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary inviteHouseholdMate
         * @param {number} userId userId
         * @param {InviteHouseholdMateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteHouseholdMateUsingPOST(userId: number, request: InviteHouseholdMateRequest, options?: any): AxiosPromise<void> {
            return HouseholdMateControllerApiFp(configuration).inviteHouseholdMateUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HouseholdMateControllerApi - object-oriented interface
 * @export
 * @class HouseholdMateControllerApi
 * @extends {BaseAPI}
 */
export class HouseholdMateControllerApi extends BaseAPI {
    /**
     * 
     * @summary acceptHouseholdInvite
     * @param {string} email email
     * @param {string} token token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    public acceptHouseholdInviteUsingPUT(email: string, token: string, options?: any) {
        return HouseholdMateControllerApiFp(this.configuration).acceptHouseholdInviteUsingPUT(email, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary cancelHouseholdMateInvite
     * @param {string} inviteeEmail inviteeEmail
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    public cancelHouseholdMateInviteUsingDELETE(inviteeEmail: string, userId: number, options?: any) {
        return HouseholdMateControllerApiFp(this.configuration).cancelHouseholdMateInviteUsingDELETE(inviteeEmail, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getHouseholdMates
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    public getHouseholdMatesUsingGET(userId: string, options?: any) {
        return HouseholdMateControllerApiFp(this.configuration).getHouseholdMatesUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary inviteHouseholdMate
     * @param {number} userId userId
     * @param {InviteHouseholdMateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    public inviteHouseholdMateUsingPOST(userId: number, request: InviteHouseholdMateRequest, options?: any) {
        return HouseholdMateControllerApiFp(this.configuration).inviteHouseholdMateUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * InsuranceCalculatorControllerApi - axios parameter creator
 * @export
 */
export const InsuranceCalculatorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary calculateTicketSavings
         * @param {EstimateInsuranceSavingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateTicketSavingsUsingPOST: async (request: EstimateInsuranceSavingsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling calculateTicketSavingsUsingPOST.');
            }
            const localVarPath = `/api/v1/insurance/ticket/savings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsuranceCalculatorControllerApi - functional programming interface
 * @export
 */
export const InsuranceCalculatorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary calculateTicketSavings
         * @param {EstimateInsuranceSavingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateTicketSavingsUsingPOST(request: EstimateInsuranceSavingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateInsuranceSavingsResponse>> {
            const localVarAxiosArgs = await InsuranceCalculatorControllerApiAxiosParamCreator(configuration).calculateTicketSavingsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InsuranceCalculatorControllerApi - factory interface
 * @export
 */
export const InsuranceCalculatorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary calculateTicketSavings
         * @param {EstimateInsuranceSavingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateTicketSavingsUsingPOST(request: EstimateInsuranceSavingsRequest, options?: any): AxiosPromise<EstimateInsuranceSavingsResponse> {
            return InsuranceCalculatorControllerApiFp(configuration).calculateTicketSavingsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InsuranceCalculatorControllerApi - object-oriented interface
 * @export
 * @class InsuranceCalculatorControllerApi
 * @extends {BaseAPI}
 */
export class InsuranceCalculatorControllerApi extends BaseAPI {
    /**
     * 
     * @summary calculateTicketSavings
     * @param {EstimateInsuranceSavingsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceCalculatorControllerApi
     */
    public calculateTicketSavingsUsingPOST(request: EstimateInsuranceSavingsRequest, options?: any) {
        return InsuranceCalculatorControllerApiFp(this.configuration).calculateTicketSavingsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmCaseDecisionControllerApi - axios parameter creator
 * @export
 */
export const LawfirmCaseDecisionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary setLawfirmCaseDecision
         * @param {string} caseId caseId
         * @param {SetLawfirmCaseDecisionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLawfirmCaseDecisionUsingPOST: async (caseId: string, request: SetLawfirmCaseDecisionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling setLawfirmCaseDecisionUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling setLawfirmCaseDecisionUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirm/cases/{caseId}/decision`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmCaseDecisionControllerApi - functional programming interface
 * @export
 */
export const LawfirmCaseDecisionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary setLawfirmCaseDecision
         * @param {string} caseId caseId
         * @param {SetLawfirmCaseDecisionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLawfirmCaseDecisionUsingPOST(caseId: string, request: SetLawfirmCaseDecisionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmCaseDecisionControllerApiAxiosParamCreator(configuration).setLawfirmCaseDecisionUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmCaseDecisionControllerApi - factory interface
 * @export
 */
export const LawfirmCaseDecisionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary setLawfirmCaseDecision
         * @param {string} caseId caseId
         * @param {SetLawfirmCaseDecisionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLawfirmCaseDecisionUsingPOST(caseId: string, request: SetLawfirmCaseDecisionRequest, options?: any): AxiosPromise<object> {
            return LawfirmCaseDecisionControllerApiFp(configuration).setLawfirmCaseDecisionUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmCaseDecisionControllerApi - object-oriented interface
 * @export
 * @class LawfirmCaseDecisionControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmCaseDecisionControllerApi extends BaseAPI {
    /**
     * 
     * @summary setLawfirmCaseDecision
     * @param {string} caseId caseId
     * @param {SetLawfirmCaseDecisionRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmCaseDecisionControllerApi
     */
    public setLawfirmCaseDecisionUsingPOST(caseId: string, request: SetLawfirmCaseDecisionRequest, options?: any) {
        return LawfirmCaseDecisionControllerApiFp(this.configuration).setLawfirmCaseDecisionUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmCasesControllerApi - axios parameter creator
 * @export
 */
export const LawfirmCasesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getLawfirmCasesByPage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {GetLawfirmSummaryCaseRequest} request request
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesByPageUsingPOST: async (lawfirmIdString: string, request: GetLawfirmSummaryCaseRequest, length?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmIdString' is not null or undefined
            if (lawfirmIdString === null || lawfirmIdString === undefined) {
                throw new RequiredError('lawfirmIdString','Required parameter lawfirmIdString was null or undefined when calling getLawfirmCasesByPageUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getLawfirmCasesByPageUsingPOST.');
            }
            const localVarPath = `/api/v2/lawfirm/{lawfirmIdString}/cases`
                .replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(lawfirmIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmCases
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesUsingGET: async (lawfirmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmCasesUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/cases`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmCasesControllerApi - functional programming interface
 * @export
 */
export const LawfirmCasesControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getLawfirmCasesByPage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {GetLawfirmSummaryCaseRequest} request request
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmCasesByPageUsingPOST(lawfirmIdString: string, request: GetLawfirmSummaryCaseRequest, length?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmSummaryCasesResponse>> {
            const localVarAxiosArgs = await LawfirmCasesControllerApiAxiosParamCreator(configuration).getLawfirmCasesByPageUsingPOST(lawfirmIdString, request, length, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmCases
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmCasesUsingGET(lawfirmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmCasesResponse>> {
            const localVarAxiosArgs = await LawfirmCasesControllerApiAxiosParamCreator(configuration).getLawfirmCasesUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmCasesControllerApi - factory interface
 * @export
 */
export const LawfirmCasesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getLawfirmCasesByPage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {GetLawfirmSummaryCaseRequest} request request
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesByPageUsingPOST(lawfirmIdString: string, request: GetLawfirmSummaryCaseRequest, length?: number, page?: number, options?: any): AxiosPromise<GetLawfirmSummaryCasesResponse> {
            return LawfirmCasesControllerApiFp(configuration).getLawfirmCasesByPageUsingPOST(lawfirmIdString, request, length, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmCases
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesUsingGET(lawfirmId: string, options?: any): AxiosPromise<GetLawfirmCasesResponse> {
            return LawfirmCasesControllerApiFp(configuration).getLawfirmCasesUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmCasesControllerApi - object-oriented interface
 * @export
 * @class LawfirmCasesControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmCasesControllerApi extends BaseAPI {
    /**
     * 
     * @summary getLawfirmCasesByPage
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {GetLawfirmSummaryCaseRequest} request request
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmCasesControllerApi
     */
    public getLawfirmCasesByPageUsingPOST(lawfirmIdString: string, request: GetLawfirmSummaryCaseRequest, length?: number, page?: number, options?: any) {
        return LawfirmCasesControllerApiFp(this.configuration).getLawfirmCasesByPageUsingPOST(lawfirmIdString, request, length, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmCases
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmCasesControllerApi
     */
    public getLawfirmCasesUsingGET(lawfirmId: string, options?: any) {
        return LawfirmCasesControllerApiFp(this.configuration).getLawfirmCasesUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmControllerApi - axios parameter creator
 * @export
 */
export const LawfirmControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addLawfirmAddress
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLawfirmAddressUsingPOST: async (lawfirmId: number, request: UpsertAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling addLawfirmAddressUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addLawfirmAddressUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/addresses`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createLawfirm
         * @param {CreateNewLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLawfirmUsingPOST: async (request: CreateNewLawfirmRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createLawfirmUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteLawfirmConnectedAccount
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripeAccountId stripeAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmConnectedAccountUsingDELETE: async (lawfirmId: number, stripeAccountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
            }
            // verify required parameter 'stripeAccountId' is not null or undefined
            if (stripeAccountId === null || stripeAccountId === undefined) {
                throw new RequiredError('stripeAccountId','Required parameter stripeAccountId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/stripe/account/{stripeAccountId}`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)))
                .replace(`{${"stripeAccountId"}}`, encodeURIComponent(String(stripeAccountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteLawfirmCoverPhoto
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmCoverPhotoUsingDELETE: async (lawfirmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling deleteLawfirmCoverPhotoUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/cover-photo`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmAddresses
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmAddressesUsingGET: async (lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmAddressesUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/addresses`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmByUrl
         * @param {string} seoUrl seoUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmByUrlUsingGET: async (seoUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'seoUrl' is not null or undefined
            if (seoUrl === null || seoUrl === undefined) {
                throw new RequiredError('seoUrl','Required parameter seoUrl was null or undefined when calling getLawfirmByUrlUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seoUrl !== undefined) {
                localVarQueryParameter['seoUrl'] = seoUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmCaseStats
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseStatsUsingGET: async (lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmCaseStatsUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/cases/stats`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmInboxMessages
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmInboxMessagesUsingGET: async (lawfirmId: number, length?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmInboxMessagesUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/messages`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmJobTitles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmJobTitlesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lawfirms/job-titles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmLawyers
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmLawyersUsingGET: async (lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmLawyersUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/lawyers`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmSettings
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmSettingsUsingGET: async (lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmSettingsUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/settings`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmStatuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmStatusesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lawfirms/statuses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {boolean} [isDetailsRequired] isDetailsRequired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmUsingGET: async (lawfirmIdString: string, isDetailsRequired?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmIdString' is not null or undefined
            if (lawfirmIdString === null || lawfirmIdString === undefined) {
                throw new RequiredError('lawfirmIdString','Required parameter lawfirmIdString was null or undefined when calling getLawfirmUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmIdString}`
                .replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(lawfirmIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isDetailsRequired !== undefined) {
                localVarQueryParameter['isDetailsRequired'] = isDetailsRequired;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirms
         * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
         * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
         * @param {boolean} [includeTestLawfirms] includeTestLawfirms
         * @param {boolean} [includeVacationMode] includeVacationMode
         * @param {string} [q] q
         * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
         * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmsUsingGET: async (acceptsAccidentTickets?: boolean, acceptsPastDueTickets?: boolean, includeTestLawfirms?: boolean, includeVacationMode?: boolean, q?: string, states?: Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>, statuses?: Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lawfirms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptsAccidentTickets !== undefined) {
                localVarQueryParameter['acceptsAccidentTickets'] = acceptsAccidentTickets;
            }

            if (acceptsPastDueTickets !== undefined) {
                localVarQueryParameter['acceptsPastDueTickets'] = acceptsPastDueTickets;
            }

            if (includeTestLawfirms !== undefined) {
                localVarQueryParameter['includeTestLawfirms'] = includeTestLawfirms;
            }

            if (includeVacationMode !== undefined) {
                localVarQueryParameter['includeVacationMode'] = includeVacationMode;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (states) {
                localVarQueryParameter['states'] = states;
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOtrLawfirmNotes
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtrLawfirmNotesUsingGET: async (lawfirmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getOtrLawfirmNotesUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/otr-notes`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getStripeConnectedAccounts
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeConnectedAccountsUsingGET: async (lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getStripeConnectedAccountsUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/stripe`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSupportedStatesForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedStatesForLawfirmUsingGET: async (lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getSupportedStatesForLawfirmUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/supported-states`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setVacationMode
         * @param {number} lawfirmId lawfirmId
         * @param {LawfirmVacationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVacationModeUsingPOST: async (lawfirmId: number, request: LawfirmVacationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling setVacationModeUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling setVacationModeUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/vacation`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLawfirmAddress
         * @param {number} addressId addressId
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmAddressUsingPUT: async (addressId: number, lawfirmId: number, request: UpsertAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            if (addressId === null || addressId === undefined) {
                throw new RequiredError('addressId','Required parameter addressId was null or undefined when calling updateLawfirmAddressUsingPUT.');
            }
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling updateLawfirmAddressUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateLawfirmAddressUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)))
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLawfirmSettings
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmSettingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmSettingsUsingPOST: async (lawfirmIdString: string, request: UpdateLawfirmSettingsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmIdString' is not null or undefined
            if (lawfirmIdString === null || lawfirmIdString === undefined) {
                throw new RequiredError('lawfirmIdString','Required parameter lawfirmIdString was null or undefined when calling updateLawfirmSettingsUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateLawfirmSettingsUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmIdString}/settings`
                .replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(lawfirmIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmUsingPUT: async (lawfirmIdString: string, request: UpdateLawfirmRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmIdString' is not null or undefined
            if (lawfirmIdString === null || lawfirmIdString === undefined) {
                throw new RequiredError('lawfirmIdString','Required parameter lawfirmIdString was null or undefined when calling updateLawfirmUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateLawfirmUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmIdString}`
                .replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(lawfirmIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLawfirmWithPicture
         * @param {string} lawfirmId lawfirmId
         * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmWithPictureUsingPUT: async (lawfirmId: string, lawfirmPictureRequest: LawfirmPictureRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
            }
            // verify required parameter 'lawfirmPictureRequest' is not null or undefined
            if (lawfirmPictureRequest === null || lawfirmPictureRequest === undefined) {
                throw new RequiredError('lawfirmPictureRequest','Required parameter lawfirmPictureRequest was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/picture`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof lawfirmPictureRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(lawfirmPictureRequest !== undefined ? lawfirmPictureRequest : {}) : (lawfirmPictureRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatePaymentModel
         * @param {number} lawfirmId lawfirmId
         * @param {UpdateLawfirmPaymentModelRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentModelUsingPUT: async (lawfirmId: number, request: UpdateLawfirmPaymentModelRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling updatePaymentModelUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updatePaymentModelUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/payment-model`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmControllerApi - functional programming interface
 * @export
 */
export const LawfirmControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addLawfirmAddress
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLawfirmAddressUsingPOST(lawfirmId: number, request: UpsertAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).addLawfirmAddressUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createLawfirm
         * @param {CreateNewLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLawfirmUsingPOST(request: CreateNewLawfirmRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).createLawfirmUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteLawfirmConnectedAccount
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripeAccountId stripeAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLawfirmConnectedAccountUsingDELETE(lawfirmId: number, stripeAccountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).deleteLawfirmConnectedAccountUsingDELETE(lawfirmId, stripeAccountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteLawfirmCoverPhoto
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLawfirmCoverPhotoUsingDELETE(lawfirmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).deleteLawfirmCoverPhotoUsingDELETE(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmAddresses
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmAddressesUsingGET(lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmAddressesResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmAddressesUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmByUrl
         * @param {string} seoUrl seoUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmByUrlUsingGET(seoUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmByUrlUsingGET(seoUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmCaseStats
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmCaseStatsUsingGET(lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmCaseStatsResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmCaseStatsUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmInboxMessages
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmInboxMessagesUsingGET(lawfirmId: number, length?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmInboxMessagesResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmInboxMessagesUsingGET(lawfirmId, length, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmJobTitles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmJobTitlesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmJobTitleResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmJobTitlesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmLawyers
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmLawyersUsingGET(lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmLawyersResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmLawyersUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmSettings
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmSettingsUsingGET(lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmSettingsResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmSettingsUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmStatuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmStatusesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmStatusesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {boolean} [isDetailsRequired] isDetailsRequired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmUsingGET(lawfirmIdString: string, isDetailsRequired?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmUsingGET(lawfirmIdString, isDetailsRequired, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirms
         * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
         * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
         * @param {boolean} [includeTestLawfirms] includeTestLawfirms
         * @param {boolean} [includeVacationMode] includeVacationMode
         * @param {string} [q] q
         * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
         * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmsUsingGET(acceptsAccidentTickets?: boolean, acceptsPastDueTickets?: boolean, includeTestLawfirms?: boolean, includeVacationMode?: boolean, q?: string, states?: Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>, statuses?: Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmsResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getLawfirmsUsingGET(acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getOtrLawfirmNotes
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOtrLawfirmNotesUsingGET(lawfirmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getOtrLawfirmNotesUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getStripeConnectedAccounts
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStripeConnectedAccountsUsingGET(lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStripeConnectedAccountsResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getStripeConnectedAccountsUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSupportedStatesForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportedStatesForLawfirmUsingGET(lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmSupportedStatesResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).getSupportedStatesForLawfirmUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setVacationMode
         * @param {number} lawfirmId lawfirmId
         * @param {LawfirmVacationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVacationModeUsingPOST(lawfirmId: number, request: LawfirmVacationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).setVacationModeUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateLawfirmAddress
         * @param {number} addressId addressId
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLawfirmAddressUsingPUT(addressId: number, lawfirmId: number, request: UpsertAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).updateLawfirmAddressUsingPUT(addressId, lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateLawfirmSettings
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmSettingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLawfirmSettingsUsingPOST(lawfirmIdString: string, request: UpdateLawfirmSettingsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).updateLawfirmSettingsUsingPOST(lawfirmIdString, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLawfirmUsingPUT(lawfirmIdString: string, request: UpdateLawfirmRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).updateLawfirmUsingPUT(lawfirmIdString, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateLawfirmWithPicture
         * @param {string} lawfirmId lawfirmId
         * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLawfirmWithPictureUsingPUT(lawfirmId: string, lawfirmPictureRequest: LawfirmPictureRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).updateLawfirmWithPictureUsingPUT(lawfirmId, lawfirmPictureRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updatePaymentModel
         * @param {number} lawfirmId lawfirmId
         * @param {UpdateLawfirmPaymentModelRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentModelUsingPUT(lawfirmId: number, request: UpdateLawfirmPaymentModelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmControllerApiAxiosParamCreator(configuration).updatePaymentModelUsingPUT(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmControllerApi - factory interface
 * @export
 */
export const LawfirmControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addLawfirmAddress
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLawfirmAddressUsingPOST(lawfirmId: number, request: UpsertAddressRequest, options?: any): AxiosPromise<void> {
            return LawfirmControllerApiFp(configuration).addLawfirmAddressUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createLawfirm
         * @param {CreateNewLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLawfirmUsingPOST(request: CreateNewLawfirmRequest, options?: any): AxiosPromise<GetLawfirmResponse> {
            return LawfirmControllerApiFp(configuration).createLawfirmUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteLawfirmConnectedAccount
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripeAccountId stripeAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmConnectedAccountUsingDELETE(lawfirmId: number, stripeAccountId: string, options?: any): AxiosPromise<void> {
            return LawfirmControllerApiFp(configuration).deleteLawfirmConnectedAccountUsingDELETE(lawfirmId, stripeAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteLawfirmCoverPhoto
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmCoverPhotoUsingDELETE(lawfirmId: string, options?: any): AxiosPromise<object> {
            return LawfirmControllerApiFp(configuration).deleteLawfirmCoverPhotoUsingDELETE(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmAddresses
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmAddressesUsingGET(lawfirmId: number, options?: any): AxiosPromise<GetLawfirmAddressesResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmAddressesUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmByUrl
         * @param {string} seoUrl seoUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmByUrlUsingGET(seoUrl: string, options?: any): AxiosPromise<GetLawfirmResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmByUrlUsingGET(seoUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmCaseStats
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseStatsUsingGET(lawfirmId: number, options?: any): AxiosPromise<GetLawfirmCaseStatsResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmCaseStatsUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmInboxMessages
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmInboxMessagesUsingGET(lawfirmId: number, length?: number, page?: number, options?: any): AxiosPromise<GetLawfirmInboxMessagesResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmInboxMessagesUsingGET(lawfirmId, length, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmJobTitles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmJobTitlesUsingGET(options?: any): AxiosPromise<GetLawfirmJobTitleResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmJobTitlesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmLawyers
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmLawyersUsingGET(lawfirmId: number, options?: any): AxiosPromise<GetLawfirmLawyersResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmLawyersUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmSettings
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmSettingsUsingGET(lawfirmId: number, options?: any): AxiosPromise<GetLawfirmSettingsResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmSettingsUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmStatuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmStatusesUsingGET(options?: any): AxiosPromise<object> {
            return LawfirmControllerApiFp(configuration).getLawfirmStatusesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {boolean} [isDetailsRequired] isDetailsRequired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmUsingGET(lawfirmIdString: string, isDetailsRequired?: boolean, options?: any): AxiosPromise<GetLawfirmResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmUsingGET(lawfirmIdString, isDetailsRequired, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirms
         * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
         * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
         * @param {boolean} [includeTestLawfirms] includeTestLawfirms
         * @param {boolean} [includeVacationMode] includeVacationMode
         * @param {string} [q] q
         * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
         * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmsUsingGET(acceptsAccidentTickets?: boolean, acceptsPastDueTickets?: boolean, includeTestLawfirms?: boolean, includeVacationMode?: boolean, q?: string, states?: Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>, statuses?: Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>, options?: any): AxiosPromise<GetLawfirmsResponse> {
            return LawfirmControllerApiFp(configuration).getLawfirmsUsingGET(acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOtrLawfirmNotes
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtrLawfirmNotesUsingGET(lawfirmId: string, options?: any): AxiosPromise<object> {
            return LawfirmControllerApiFp(configuration).getOtrLawfirmNotesUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getStripeConnectedAccounts
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeConnectedAccountsUsingGET(lawfirmId: number, options?: any): AxiosPromise<GetStripeConnectedAccountsResponse> {
            return LawfirmControllerApiFp(configuration).getStripeConnectedAccountsUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSupportedStatesForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedStatesForLawfirmUsingGET(lawfirmId: number, options?: any): AxiosPromise<GetLawfirmSupportedStatesResponse> {
            return LawfirmControllerApiFp(configuration).getSupportedStatesForLawfirmUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setVacationMode
         * @param {number} lawfirmId lawfirmId
         * @param {LawfirmVacationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVacationModeUsingPOST(lawfirmId: number, request: LawfirmVacationRequest, options?: any): AxiosPromise<GetLawfirmResponse> {
            return LawfirmControllerApiFp(configuration).setVacationModeUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLawfirmAddress
         * @param {number} addressId addressId
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmAddressUsingPUT(addressId: number, lawfirmId: number, request: UpsertAddressRequest, options?: any): AxiosPromise<void> {
            return LawfirmControllerApiFp(configuration).updateLawfirmAddressUsingPUT(addressId, lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLawfirmSettings
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmSettingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmSettingsUsingPOST(lawfirmIdString: string, request: UpdateLawfirmSettingsRequest, options?: any): AxiosPromise<GetLawfirmResponse> {
            return LawfirmControllerApiFp(configuration).updateLawfirmSettingsUsingPOST(lawfirmIdString, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmUsingPUT(lawfirmIdString: string, request: UpdateLawfirmRequest, options?: any): AxiosPromise<object> {
            return LawfirmControllerApiFp(configuration).updateLawfirmUsingPUT(lawfirmIdString, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLawfirmWithPicture
         * @param {string} lawfirmId lawfirmId
         * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmWithPictureUsingPUT(lawfirmId: string, lawfirmPictureRequest: LawfirmPictureRequest, options?: any): AxiosPromise<object> {
            return LawfirmControllerApiFp(configuration).updateLawfirmWithPictureUsingPUT(lawfirmId, lawfirmPictureRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatePaymentModel
         * @param {number} lawfirmId lawfirmId
         * @param {UpdateLawfirmPaymentModelRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentModelUsingPUT(lawfirmId: number, request: UpdateLawfirmPaymentModelRequest, options?: any): AxiosPromise<void> {
            return LawfirmControllerApiFp(configuration).updatePaymentModelUsingPUT(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmControllerApi - object-oriented interface
 * @export
 * @class LawfirmControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmControllerApi extends BaseAPI {
    /**
     * 
     * @summary addLawfirmAddress
     * @param {number} lawfirmId lawfirmId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public addLawfirmAddressUsingPOST(lawfirmId: number, request: UpsertAddressRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).addLawfirmAddressUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createLawfirm
     * @param {CreateNewLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public createLawfirmUsingPOST(request: CreateNewLawfirmRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).createLawfirmUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteLawfirmConnectedAccount
     * @param {number} lawfirmId lawfirmId
     * @param {string} stripeAccountId stripeAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public deleteLawfirmConnectedAccountUsingDELETE(lawfirmId: number, stripeAccountId: string, options?: any) {
        return LawfirmControllerApiFp(this.configuration).deleteLawfirmConnectedAccountUsingDELETE(lawfirmId, stripeAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteLawfirmCoverPhoto
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public deleteLawfirmCoverPhotoUsingDELETE(lawfirmId: string, options?: any) {
        return LawfirmControllerApiFp(this.configuration).deleteLawfirmCoverPhotoUsingDELETE(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmAddresses
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmAddressesUsingGET(lawfirmId: number, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmAddressesUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmByUrl
     * @param {string} seoUrl seoUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmByUrlUsingGET(seoUrl: string, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmByUrlUsingGET(seoUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmCaseStats
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmCaseStatsUsingGET(lawfirmId: number, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmCaseStatsUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmInboxMessages
     * @param {number} lawfirmId lawfirmId
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmInboxMessagesUsingGET(lawfirmId: number, length?: number, page?: number, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmInboxMessagesUsingGET(lawfirmId, length, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmJobTitles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmJobTitlesUsingGET(options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmJobTitlesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmLawyers
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmLawyersUsingGET(lawfirmId: number, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmLawyersUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmSettings
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmSettingsUsingGET(lawfirmId: number, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmSettingsUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmStatuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmStatusesUsingGET(options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmStatusesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirm
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {boolean} [isDetailsRequired] isDetailsRequired
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmUsingGET(lawfirmIdString: string, isDetailsRequired?: boolean, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmUsingGET(lawfirmIdString, isDetailsRequired, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirms
     * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
     * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
     * @param {boolean} [includeTestLawfirms] includeTestLawfirms
     * @param {boolean} [includeVacationMode] includeVacationMode
     * @param {string} [q] q
     * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
     * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getLawfirmsUsingGET(acceptsAccidentTickets?: boolean, acceptsPastDueTickets?: boolean, includeTestLawfirms?: boolean, includeVacationMode?: boolean, q?: string, states?: Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>, statuses?: Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getLawfirmsUsingGET(acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOtrLawfirmNotes
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getOtrLawfirmNotesUsingGET(lawfirmId: string, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getOtrLawfirmNotesUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getStripeConnectedAccounts
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getStripeConnectedAccountsUsingGET(lawfirmId: number, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getStripeConnectedAccountsUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSupportedStatesForLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public getSupportedStatesForLawfirmUsingGET(lawfirmId: number, options?: any) {
        return LawfirmControllerApiFp(this.configuration).getSupportedStatesForLawfirmUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setVacationMode
     * @param {number} lawfirmId lawfirmId
     * @param {LawfirmVacationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public setVacationModeUsingPOST(lawfirmId: number, request: LawfirmVacationRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).setVacationModeUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLawfirmAddress
     * @param {number} addressId addressId
     * @param {number} lawfirmId lawfirmId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public updateLawfirmAddressUsingPUT(addressId: number, lawfirmId: number, request: UpsertAddressRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).updateLawfirmAddressUsingPUT(addressId, lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLawfirmSettings
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {UpdateLawfirmSettingsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public updateLawfirmSettingsUsingPOST(lawfirmIdString: string, request: UpdateLawfirmSettingsRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).updateLawfirmSettingsUsingPOST(lawfirmIdString, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLawfirm
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {UpdateLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public updateLawfirmUsingPUT(lawfirmIdString: string, request: UpdateLawfirmRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).updateLawfirmUsingPUT(lawfirmIdString, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLawfirmWithPicture
     * @param {string} lawfirmId lawfirmId
     * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public updateLawfirmWithPictureUsingPUT(lawfirmId: string, lawfirmPictureRequest: LawfirmPictureRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).updateLawfirmWithPictureUsingPUT(lawfirmId, lawfirmPictureRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatePaymentModel
     * @param {number} lawfirmId lawfirmId
     * @param {UpdateLawfirmPaymentModelRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    public updatePaymentModelUsingPUT(lawfirmId: number, request: UpdateLawfirmPaymentModelRequest, options?: any) {
        return LawfirmControllerApiFp(this.configuration).updatePaymentModelUsingPUT(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmDocumentControllerApi - axios parameter creator
 * @export
 */
export const LawfirmDocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary generateDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {GetDocumentsRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDocUsingPOST: async (docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request?: GetDocumentsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'docType' is not null or undefined
            if (docType === null || docType === undefined) {
                throw new RequiredError('docType','Required parameter docType was null or undefined when calling generateDocUsingPOST.');
            }
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling generateDocUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/documents`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (docType !== undefined) {
                localVarQueryParameter['doc_type'] = docType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDocument
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentUsingGET: async (docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'docType' is not null or undefined
            if (docType === null || docType === undefined) {
                throw new RequiredError('docType','Required parameter docType was null or undefined when calling getDocumentUsingGET.');
            }
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getDocumentUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/documents`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (docType !== undefined) {
                localVarQueryParameter['doc_type'] = docType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmCaseDocuments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseDocumentsUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getLawfirmCaseDocumentsUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/documents`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markDocumentWithDecision
         * @param {string} docId docId
         * @param {DocumentDecisionRequest} decisionRequest decisionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markDocumentWithDecisionUsingPOST: async (docId: string, decisionRequest: DocumentDecisionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            if (docId === null || docId === undefined) {
                throw new RequiredError('docId','Required parameter docId was null or undefined when calling markDocumentWithDecisionUsingPOST.');
            }
            // verify required parameter 'decisionRequest' is not null or undefined
            if (decisionRequest === null || decisionRequest === undefined) {
                throw new RequiredError('decisionRequest','Required parameter decisionRequest was null or undefined when calling markDocumentWithDecisionUsingPOST.');
            }
            const localVarPath = `/api/v1/documents/{docId}/decision`
                .replace(`{${"docId"}}`, encodeURIComponent(String(docId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof decisionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(decisionRequest !== undefined ? decisionRequest : {}) : (decisionRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary previewDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {PreviewDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewDocUsingPOST: async (docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request: PreviewDocumentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'docType' is not null or undefined
            if (docType === null || docType === undefined) {
                throw new RequiredError('docType','Required parameter docType was null or undefined when calling previewDocUsingPOST.');
            }
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling previewDocUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling previewDocUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/documents/preview`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (docType !== undefined) {
                localVarQueryParameter['doc_type'] = docType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary uploadCopy
         * @param {string} lawfirmId lawfirmId
         * @param {PutDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCopyUsingPUT: async (lawfirmId: string, request: PutDocumentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling uploadCopyUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling uploadCopyUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/documents`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmDocumentControllerApi - functional programming interface
 * @export
 */
export const LawfirmDocumentControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary generateDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {GetDocumentsRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request?: GetDocumentsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LawfirmDocumentResponse>> {
            const localVarAxiosArgs = await LawfirmDocumentControllerApiAxiosParamCreator(configuration).generateDocUsingPOST(docType, lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDocument
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentUsingGET(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LawfirmDocumentTemplateResponse>> {
            const localVarAxiosArgs = await LawfirmDocumentControllerApiAxiosParamCreator(configuration).getDocumentUsingGET(docType, lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmCaseDocuments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmCaseDocumentsUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCaseDocumentResponse>> {
            const localVarAxiosArgs = await LawfirmDocumentControllerApiAxiosParamCreator(configuration).getLawfirmCaseDocumentsUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markDocumentWithDecision
         * @param {string} docId docId
         * @param {DocumentDecisionRequest} decisionRequest decisionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markDocumentWithDecisionUsingPOST(docId: string, decisionRequest: DocumentDecisionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmDocumentControllerApiAxiosParamCreator(configuration).markDocumentWithDecisionUsingPOST(docId, decisionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary previewDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {PreviewDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request: PreviewDocumentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LawfirmDocumentResponse>> {
            const localVarAxiosArgs = await LawfirmDocumentControllerApiAxiosParamCreator(configuration).previewDocUsingPOST(docType, lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary uploadCopy
         * @param {string} lawfirmId lawfirmId
         * @param {PutDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCopyUsingPUT(lawfirmId: string, request: PutDocumentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmDocumentControllerApiAxiosParamCreator(configuration).uploadCopyUsingPUT(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmDocumentControllerApi - factory interface
 * @export
 */
export const LawfirmDocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary generateDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {GetDocumentsRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request?: GetDocumentsRequest, options?: any): AxiosPromise<LawfirmDocumentResponse> {
            return LawfirmDocumentControllerApiFp(configuration).generateDocUsingPOST(docType, lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDocument
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentUsingGET(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, options?: any): AxiosPromise<LawfirmDocumentTemplateResponse> {
            return LawfirmDocumentControllerApiFp(configuration).getDocumentUsingGET(docType, lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmCaseDocuments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseDocumentsUsingGET(caseId: string, options?: any): AxiosPromise<GetCaseDocumentResponse> {
            return LawfirmDocumentControllerApiFp(configuration).getLawfirmCaseDocumentsUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markDocumentWithDecision
         * @param {string} docId docId
         * @param {DocumentDecisionRequest} decisionRequest decisionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markDocumentWithDecisionUsingPOST(docId: string, decisionRequest: DocumentDecisionRequest, options?: any): AxiosPromise<void> {
            return LawfirmDocumentControllerApiFp(configuration).markDocumentWithDecisionUsingPOST(docId, decisionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary previewDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {PreviewDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request: PreviewDocumentRequest, options?: any): AxiosPromise<LawfirmDocumentResponse> {
            return LawfirmDocumentControllerApiFp(configuration).previewDocUsingPOST(docType, lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary uploadCopy
         * @param {string} lawfirmId lawfirmId
         * @param {PutDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCopyUsingPUT(lawfirmId: string, request: PutDocumentRequest, options?: any): AxiosPromise<void> {
            return LawfirmDocumentControllerApiFp(configuration).uploadCopyUsingPUT(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmDocumentControllerApi - object-oriented interface
 * @export
 * @class LawfirmDocumentControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmDocumentControllerApi extends BaseAPI {
    /**
     * 
     * @summary generateDoc
     * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
     * @param {string} lawfirmId lawfirmId
     * @param {GetDocumentsRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    public generateDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request?: GetDocumentsRequest, options?: any) {
        return LawfirmDocumentControllerApiFp(this.configuration).generateDocUsingPOST(docType, lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDocument
     * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    public getDocumentUsingGET(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, options?: any) {
        return LawfirmDocumentControllerApiFp(this.configuration).getDocumentUsingGET(docType, lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmCaseDocuments
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    public getLawfirmCaseDocumentsUsingGET(caseId: string, options?: any) {
        return LawfirmDocumentControllerApiFp(this.configuration).getLawfirmCaseDocumentsUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markDocumentWithDecision
     * @param {string} docId docId
     * @param {DocumentDecisionRequest} decisionRequest decisionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    public markDocumentWithDecisionUsingPOST(docId: string, decisionRequest: DocumentDecisionRequest, options?: any) {
        return LawfirmDocumentControllerApiFp(this.configuration).markDocumentWithDecisionUsingPOST(docId, decisionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary previewDoc
     * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
     * @param {string} lawfirmId lawfirmId
     * @param {PreviewDocumentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    public previewDocUsingPOST(docType: 'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE', lawfirmId: string, request: PreviewDocumentRequest, options?: any) {
        return LawfirmDocumentControllerApiFp(this.configuration).previewDocUsingPOST(docType, lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary uploadCopy
     * @param {string} lawfirmId lawfirmId
     * @param {PutDocumentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    public uploadCopyUsingPUT(lawfirmId: string, request: PutDocumentRequest, options?: any) {
        return LawfirmDocumentControllerApiFp(this.configuration).uploadCopyUsingPUT(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmFeeCoverageControllerApi - axios parameter creator
 * @export
 */
export const LawfirmFeeCoverageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCourtToCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {PostCourtCoverageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtToCoverageUsingPOST: async (lawfirmIdString: string, request: PostCourtCoverageRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmIdString' is not null or undefined
            if (lawfirmIdString === null || lawfirmIdString === undefined) {
                throw new RequiredError('lawfirmIdString','Required parameter lawfirmIdString was null or undefined when calling addCourtToCoverageUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addCourtToCoverageUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmIdString}/courts`
                .replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(lawfirmIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary enableViolationsForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {EnableViolationsForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableViolationsForLawfirmUsingPOST: async (lawfirmId: string, request: EnableViolationsForLawfirmRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling enableViolationsForLawfirmUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling enableViolationsForLawfirmUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/account-fees/enable-violations`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {boolean} [enabledFeesOnly] enabledFeesOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFeesUsingGET: async (lawfirmId: string, enabledFeesOnly?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getAccountFeesUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/account-fees`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (enabledFeesOnly !== undefined) {
                localVarQueryParameter['enabledFeesOnly'] = enabledFeesOnly;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageUsingGET: async (lawfirmIdString: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmIdString' is not null or undefined
            if (lawfirmIdString === null || lawfirmIdString === undefined) {
                throw new RequiredError('lawfirmIdString','Required parameter lawfirmIdString was null or undefined when calling getLawfirmCoverageUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmIdString}/coverage`
                .replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(lawfirmIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmFeeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeeCoverageUsingGET: async (lawfirmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmFeeCoverageUsingGET.');
            }
            const localVarPath = `/api/v2/lawfirms/{lawfirmId}/coverage`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
         * @param {boolean} [isPermitted] isPermitted
         * @param {number} [violationId] violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFeesUsingDELETE: async (lawfirmId: string, classification?: 'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR', isPermitted?: boolean, violationId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling removeAccountFeesUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/account-fees`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (classification !== undefined) {
                localVarQueryParameter['classification'] = classification;
            }

            if (isPermitted !== undefined) {
                localVarQueryParameter['isPermitted'] = isPermitted;
            }

            if (violationId !== undefined) {
                localVarQueryParameter['violationId'] = violationId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeCourts
         * @param {Array<number>} courtsToRemove courtsToRemove
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCourtsUsingDELETE: async (courtsToRemove: Array<number>, lawfirmId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'courtsToRemove' is not null or undefined
            if (courtsToRemove === null || courtsToRemove === undefined) {
                throw new RequiredError('courtsToRemove','Required parameter courtsToRemove was null or undefined when calling removeCourtsUsingDELETE.');
            }
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling removeCourtsUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/courts`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (courtsToRemove) {
                localVarQueryParameter['courtsToRemove'] = courtsToRemove;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCoverageUsingDELETE: async (lawfirmId: string, courtsToRemove: RemoveCoverageRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling removeCoverageUsingDELETE.');
            }
            // verify required parameter 'courtsToRemove' is not null or undefined
            if (courtsToRemove === null || courtsToRemove === undefined) {
                throw new RequiredError('courtsToRemove','Required parameter courtsToRemove was null or undefined when calling removeCoverageUsingDELETE.');
            }
            const localVarPath = `/api/v2/lawfirms/{lawfirmId}/courts`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof courtsToRemove !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(courtsToRemove !== undefined ? courtsToRemove : {}) : (courtsToRemove || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resetFeesForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {ResetFeesForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetFeesForLawfirmUsingPOST: async (lawfirmId: string, request: ResetFeesForLawfirmRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling resetFeesForLawfirmUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling resetFeesForLawfirmUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/account-fees/reset`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {AccountLevelFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountFeesUsingPOST: async (lawfirmId: string, request: AccountLevelFeeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling saveAccountFeesUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling saveAccountFeesUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/account-fees`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmFeeCoverageControllerApi - functional programming interface
 * @export
 */
export const LawfirmFeeCoverageControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCourtToCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {PostCourtCoverageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCourtToCoverageUsingPOST(lawfirmIdString: string, request: PostCourtCoverageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).addCourtToCoverageUsingPOST(lawfirmIdString, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary enableViolationsForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {EnableViolationsForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableViolationsForLawfirmUsingPOST(lawfirmId: string, request: EnableViolationsForLawfirmRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnableViolationsForLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).enableViolationsForLawfirmUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {boolean} [enabledFeesOnly] enabledFeesOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountFeesUsingGET(lawfirmId: string, enabledFeesOnly?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountLevelFeeResponse>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).getAccountFeesUsingGET(lawfirmId, enabledFeesOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmCoverageUsingGET(lawfirmIdString: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmCoverageResponse>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).getLawfirmCoverageUsingGET(lawfirmIdString, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmFeeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmFeeCoverageUsingGET(lawfirmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmFeeCoverageResponse>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).getLawfirmFeeCoverageUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
         * @param {boolean} [isPermitted] isPermitted
         * @param {number} [violationId] violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAccountFeesUsingDELETE(lawfirmId: string, classification?: 'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR', isPermitted?: boolean, violationId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).removeAccountFeesUsingDELETE(lawfirmId, classification, isPermitted, violationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeCourts
         * @param {Array<number>} courtsToRemove courtsToRemove
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCourtsUsingDELETE(courtsToRemove: Array<number>, lawfirmId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).removeCourtsUsingDELETE(courtsToRemove, lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCoverageUsingDELETE(lawfirmId: string, courtsToRemove: RemoveCoverageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).removeCoverageUsingDELETE(lawfirmId, courtsToRemove, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary resetFeesForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {ResetFeesForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetFeesForLawfirmUsingPOST(lawfirmId: string, request: ResetFeesForLawfirmRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetFeesForLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).resetFeesForLawfirmUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary saveAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {AccountLevelFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAccountFeesUsingPOST(lawfirmId: string, request: AccountLevelFeeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmFeeCoverageControllerApiAxiosParamCreator(configuration).saveAccountFeesUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmFeeCoverageControllerApi - factory interface
 * @export
 */
export const LawfirmFeeCoverageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addCourtToCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {PostCourtCoverageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtToCoverageUsingPOST(lawfirmIdString: string, request: PostCourtCoverageRequest, options?: any): AxiosPromise<object> {
            return LawfirmFeeCoverageControllerApiFp(configuration).addCourtToCoverageUsingPOST(lawfirmIdString, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary enableViolationsForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {EnableViolationsForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableViolationsForLawfirmUsingPOST(lawfirmId: string, request: EnableViolationsForLawfirmRequest, options?: any): AxiosPromise<EnableViolationsForLawfirmResponse> {
            return LawfirmFeeCoverageControllerApiFp(configuration).enableViolationsForLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {boolean} [enabledFeesOnly] enabledFeesOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFeesUsingGET(lawfirmId: string, enabledFeesOnly?: boolean, options?: any): AxiosPromise<AccountLevelFeeResponse> {
            return LawfirmFeeCoverageControllerApiFp(configuration).getAccountFeesUsingGET(lawfirmId, enabledFeesOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageUsingGET(lawfirmIdString: string, options?: any): AxiosPromise<GetLawfirmCoverageResponse> {
            return LawfirmFeeCoverageControllerApiFp(configuration).getLawfirmCoverageUsingGET(lawfirmIdString, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmFeeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeeCoverageUsingGET(lawfirmId: string, options?: any): AxiosPromise<GetLawfirmFeeCoverageResponse> {
            return LawfirmFeeCoverageControllerApiFp(configuration).getLawfirmFeeCoverageUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removeAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
         * @param {boolean} [isPermitted] isPermitted
         * @param {number} [violationId] violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFeesUsingDELETE(lawfirmId: string, classification?: 'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR', isPermitted?: boolean, violationId?: number, options?: any): AxiosPromise<void> {
            return LawfirmFeeCoverageControllerApiFp(configuration).removeAccountFeesUsingDELETE(lawfirmId, classification, isPermitted, violationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removeCourts
         * @param {Array<number>} courtsToRemove courtsToRemove
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCourtsUsingDELETE(courtsToRemove: Array<number>, lawfirmId: string, options?: any): AxiosPromise<void> {
            return LawfirmFeeCoverageControllerApiFp(configuration).removeCourtsUsingDELETE(courtsToRemove, lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCoverageUsingDELETE(lawfirmId: string, courtsToRemove: RemoveCoverageRequest, options?: any): AxiosPromise<void> {
            return LawfirmFeeCoverageControllerApiFp(configuration).removeCoverageUsingDELETE(lawfirmId, courtsToRemove, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary resetFeesForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {ResetFeesForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetFeesForLawfirmUsingPOST(lawfirmId: string, request: ResetFeesForLawfirmRequest, options?: any): AxiosPromise<ResetFeesForLawfirmResponse> {
            return LawfirmFeeCoverageControllerApiFp(configuration).resetFeesForLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary saveAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {AccountLevelFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountFeesUsingPOST(lawfirmId: string, request: AccountLevelFeeRequest, options?: any): AxiosPromise<object> {
            return LawfirmFeeCoverageControllerApiFp(configuration).saveAccountFeesUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmFeeCoverageControllerApi - object-oriented interface
 * @export
 * @class LawfirmFeeCoverageControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmFeeCoverageControllerApi extends BaseAPI {
    /**
     * 
     * @summary addCourtToCoverage
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {PostCourtCoverageRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public addCourtToCoverageUsingPOST(lawfirmIdString: string, request: PostCourtCoverageRequest, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).addCourtToCoverageUsingPOST(lawfirmIdString, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary enableViolationsForLawfirm
     * @param {string} lawfirmId lawfirmId
     * @param {EnableViolationsForLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public enableViolationsForLawfirmUsingPOST(lawfirmId: string, request: EnableViolationsForLawfirmRequest, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).enableViolationsForLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAccountFees
     * @param {string} lawfirmId lawfirmId
     * @param {boolean} [enabledFeesOnly] enabledFeesOnly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public getAccountFeesUsingGET(lawfirmId: string, enabledFeesOnly?: boolean, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).getAccountFeesUsingGET(lawfirmId, enabledFeesOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmCoverage
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public getLawfirmCoverageUsingGET(lawfirmIdString: string, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).getLawfirmCoverageUsingGET(lawfirmIdString, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmFeeCoverage
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public getLawfirmFeeCoverageUsingGET(lawfirmId: string, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).getLawfirmFeeCoverageUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removeAccountFees
     * @param {string} lawfirmId lawfirmId
     * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
     * @param {boolean} [isPermitted] isPermitted
     * @param {number} [violationId] violationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public removeAccountFeesUsingDELETE(lawfirmId: string, classification?: 'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR', isPermitted?: boolean, violationId?: number, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).removeAccountFeesUsingDELETE(lawfirmId, classification, isPermitted, violationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removeCourts
     * @param {Array<number>} courtsToRemove courtsToRemove
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public removeCourtsUsingDELETE(courtsToRemove: Array<number>, lawfirmId: string, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).removeCourtsUsingDELETE(courtsToRemove, lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removeCoverage
     * @param {string} lawfirmId lawfirmId
     * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public removeCoverageUsingDELETE(lawfirmId: string, courtsToRemove: RemoveCoverageRequest, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).removeCoverageUsingDELETE(lawfirmId, courtsToRemove, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary resetFeesForLawfirm
     * @param {string} lawfirmId lawfirmId
     * @param {ResetFeesForLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public resetFeesForLawfirmUsingPOST(lawfirmId: string, request: ResetFeesForLawfirmRequest, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).resetFeesForLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary saveAccountFees
     * @param {string} lawfirmId lawfirmId
     * @param {AccountLevelFeeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    public saveAccountFeesUsingPOST(lawfirmId: string, request: AccountLevelFeeRequest, options?: any) {
        return LawfirmFeeCoverageControllerApiFp(this.configuration).saveAccountFeesUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmPaymentModelControllerApi - axios parameter creator
 * @export
 */
export const LawfirmPaymentModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getPaymentModelTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentModelTypesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/payment-models`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmPaymentModelControllerApi - functional programming interface
 * @export
 */
export const LawfirmPaymentModelControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getPaymentModelTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentModelTypesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentModelTypesResponse>> {
            const localVarAxiosArgs = await LawfirmPaymentModelControllerApiAxiosParamCreator(configuration).getPaymentModelTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmPaymentModelControllerApi - factory interface
 * @export
 */
export const LawfirmPaymentModelControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getPaymentModelTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentModelTypesUsingGET(options?: any): AxiosPromise<GetPaymentModelTypesResponse> {
            return LawfirmPaymentModelControllerApiFp(configuration).getPaymentModelTypesUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmPaymentModelControllerApi - object-oriented interface
 * @export
 * @class LawfirmPaymentModelControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmPaymentModelControllerApi extends BaseAPI {
    /**
     * 
     * @summary getPaymentModelTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmPaymentModelControllerApi
     */
    public getPaymentModelTypesUsingGET(options?: any) {
        return LawfirmPaymentModelControllerApiFp(this.configuration).getPaymentModelTypesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmRatesControllerApi - axios parameter creator
 * @export
 */
export const LawfirmRatesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getActiveRatesByArea
         * @param {GeoRatesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRatesByAreaUsingPOST: async (request: GeoRatesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getActiveRatesByAreaUsingPOST.');
            }
            const localVarPath = `/api/v1/rates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmRatesControllerApi - functional programming interface
 * @export
 */
export const LawfirmRatesControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getActiveRatesByArea
         * @param {GeoRatesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveRatesByAreaUsingPOST(request: GeoRatesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LawfirmsRatesResponse>> {
            const localVarAxiosArgs = await LawfirmRatesControllerApiAxiosParamCreator(configuration).getActiveRatesByAreaUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmRatesControllerApi - factory interface
 * @export
 */
export const LawfirmRatesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getActiveRatesByArea
         * @param {GeoRatesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRatesByAreaUsingPOST(request: GeoRatesRequest, options?: any): AxiosPromise<LawfirmsRatesResponse> {
            return LawfirmRatesControllerApiFp(configuration).getActiveRatesByAreaUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmRatesControllerApi - object-oriented interface
 * @export
 * @class LawfirmRatesControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmRatesControllerApi extends BaseAPI {
    /**
     * 
     * @summary getActiveRatesByArea
     * @param {GeoRatesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmRatesControllerApi
     */
    public getActiveRatesByAreaUsingPOST(request: GeoRatesRequest, options?: any) {
        return LawfirmRatesControllerApiFp(this.configuration).getActiveRatesByAreaUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmStorefrontControllerApi - axios parameter creator
 * @export
 */
export const LawfirmStorefrontControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listLawfirmStorefronts
         * @param {number} [page] page
         * @param {string} [regionCode] regionCode
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmStorefrontsUsingGET: async (page?: number, regionCode?: string, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lawfirm-storefronts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (regionCode !== undefined) {
                localVarQueryParameter['regionCode'] = regionCode;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmStorefrontControllerApi - functional programming interface
 * @export
 */
export const LawfirmStorefrontControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listLawfirmStorefronts
         * @param {number} [page] page
         * @param {string} [regionCode] regionCode
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLawfirmStorefrontsUsingGET(page?: number, regionCode?: string, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLawfirmStorefrontsResponse>> {
            const localVarAxiosArgs = await LawfirmStorefrontControllerApiAxiosParamCreator(configuration).listLawfirmStorefrontsUsingGET(page, regionCode, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmStorefrontControllerApi - factory interface
 * @export
 */
export const LawfirmStorefrontControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary listLawfirmStorefronts
         * @param {number} [page] page
         * @param {string} [regionCode] regionCode
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmStorefrontsUsingGET(page?: number, regionCode?: string, size?: number, options?: any): AxiosPromise<ListLawfirmStorefrontsResponse> {
            return LawfirmStorefrontControllerApiFp(configuration).listLawfirmStorefrontsUsingGET(page, regionCode, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmStorefrontControllerApi - object-oriented interface
 * @export
 * @class LawfirmStorefrontControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmStorefrontControllerApi extends BaseAPI {
    /**
     * 
     * @summary listLawfirmStorefronts
     * @param {number} [page] page
     * @param {string} [regionCode] regionCode
     * @param {number} [size] size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmStorefrontControllerApi
     */
    public listLawfirmStorefrontsUsingGET(page?: number, regionCode?: string, size?: number, options?: any) {
        return LawfirmStorefrontControllerApiFp(this.configuration).listLawfirmStorefrontsUsingGET(page, regionCode, size, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmSurchargeControllerApi - axios parameter creator
 * @export
 */
export const LawfirmSurchargeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmSurchargesUsingGET: async (lawfirmId: string, featureType?: 'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling listLawfirmSurchargesUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/surcharges`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (featureType !== undefined) {
                localVarQueryParameter['featureType'] = featureType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveLawfirmSurchargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSurchargesUsingDELETE: async (lawfirmId: string, request: RemoveLawfirmSurchargeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling removeSurchargesUsingDELETE.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling removeSurchargesUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/surcharges`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {SaveLawfirmSurchargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawfirmSurchargesUsingPOST: async (lawfirmId: string, request: SaveLawfirmSurchargesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling saveLawfirmSurchargesUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling saveLawfirmSurchargesUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/surcharges`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmSurchargeControllerApi - functional programming interface
 * @export
 */
export const LawfirmSurchargeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary listLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLawfirmSurchargesUsingGET(lawfirmId: string, featureType?: 'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLawfirmSurchargesResponse>> {
            const localVarAxiosArgs = await LawfirmSurchargeControllerApiAxiosParamCreator(configuration).listLawfirmSurchargesUsingGET(lawfirmId, featureType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveLawfirmSurchargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSurchargesUsingDELETE(lawfirmId: string, request: RemoveLawfirmSurchargeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmSurchargeControllerApiAxiosParamCreator(configuration).removeSurchargesUsingDELETE(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary saveLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {SaveLawfirmSurchargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveLawfirmSurchargesUsingPOST(lawfirmId: string, request: SaveLawfirmSurchargesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmSurchargeControllerApiAxiosParamCreator(configuration).saveLawfirmSurchargesUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmSurchargeControllerApi - factory interface
 * @export
 */
export const LawfirmSurchargeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary listLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmSurchargesUsingGET(lawfirmId: string, featureType?: 'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT', options?: any): AxiosPromise<ListLawfirmSurchargesResponse> {
            return LawfirmSurchargeControllerApiFp(configuration).listLawfirmSurchargesUsingGET(lawfirmId, featureType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removeSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveLawfirmSurchargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSurchargesUsingDELETE(lawfirmId: string, request: RemoveLawfirmSurchargeRequest, options?: any): AxiosPromise<object> {
            return LawfirmSurchargeControllerApiFp(configuration).removeSurchargesUsingDELETE(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary saveLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {SaveLawfirmSurchargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawfirmSurchargesUsingPOST(lawfirmId: string, request: SaveLawfirmSurchargesRequest, options?: any): AxiosPromise<object> {
            return LawfirmSurchargeControllerApiFp(configuration).saveLawfirmSurchargesUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmSurchargeControllerApi - object-oriented interface
 * @export
 * @class LawfirmSurchargeControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmSurchargeControllerApi extends BaseAPI {
    /**
     * 
     * @summary listLawfirmSurcharges
     * @param {string} lawfirmId lawfirmId
     * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmSurchargeControllerApi
     */
    public listLawfirmSurchargesUsingGET(lawfirmId: string, featureType?: 'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT', options?: any) {
        return LawfirmSurchargeControllerApiFp(this.configuration).listLawfirmSurchargesUsingGET(lawfirmId, featureType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removeSurcharges
     * @param {string} lawfirmId lawfirmId
     * @param {RemoveLawfirmSurchargeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmSurchargeControllerApi
     */
    public removeSurchargesUsingDELETE(lawfirmId: string, request: RemoveLawfirmSurchargeRequest, options?: any) {
        return LawfirmSurchargeControllerApiFp(this.configuration).removeSurchargesUsingDELETE(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary saveLawfirmSurcharges
     * @param {string} lawfirmId lawfirmId
     * @param {SaveLawfirmSurchargesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmSurchargeControllerApi
     */
    public saveLawfirmSurchargesUsingPOST(lawfirmId: string, request: SaveLawfirmSurchargesRequest, options?: any) {
        return LawfirmSurchargeControllerApiFp(this.configuration).saveLawfirmSurchargesUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawfirmTransactionsControllerApi - axios parameter creator
 * @export
 */
export const LawfirmTransactionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary chargeFeeToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {ChargeFeeToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeFeeToLawfirmUsingPOST: async (lawfirmId: number, request: ChargeFeeToLawfirmRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/debits`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary debitLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debitLawfirmFeeUsingPOST: async (lawfirmFeeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmFeeId' is not null or undefined
            if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                throw new RequiredError('lawfirmFeeId','Required parameter lawfirmFeeId was null or undefined when calling debitLawfirmFeeUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirm-fees/{lawfirmFeeId}/debit`
                .replace(`{${"lawfirmFeeId"}}`, encodeURIComponent(String(lawfirmFeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteLawfirmFeeRecord
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmFeeRecordUsingDELETE: async (lawfirmFeeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmFeeId' is not null or undefined
            if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                throw new RequiredError('lawfirmFeeId','Required parameter lawfirmFeeId was null or undefined when calling deleteLawfirmFeeRecordUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/fees/{lawfirmFeeId}`
                .replace(`{${"lawfirmFeeId"}}`, encodeURIComponent(String(lawfirmFeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteLawfirmPayoutRecord
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmPayoutRecordUsingDELETE: async (lawfirmPayoutId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmPayoutId' is not null or undefined
            if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                throw new RequiredError('lawfirmPayoutId','Required parameter lawfirmPayoutId was null or undefined when calling deleteLawfirmPayoutRecordUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/payouts/{lawfirmPayoutId}`
                .replace(`{${"lawfirmPayoutId"}}`, encodeURIComponent(String(lawfirmPayoutId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary executeLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeLawfirmPayoutUsingPOST: async (lawfirmPayoutId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmPayoutId' is not null or undefined
            if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                throw new RequiredError('lawfirmPayoutId','Required parameter lawfirmPayoutId was null or undefined when calling executeLawfirmPayoutUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirm-payouts/{lawfirmPayoutId}/transfer`
                .replace(`{${"lawfirmPayoutId"}}`, encodeURIComponent(String(lawfirmPayoutId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmFees
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeesUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getLawfirmFeesUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/lawfirm-fees`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmFinancialTransactions
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFinancialTransactionsUsingGET: async (lawfirmId: number, length?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmFinancialTransactionsUsingGET.');
            }
            const localVarPath = `/api/v2/lawfirms/{lawfirmId}/transactions`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmPayoutReversals
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutReversalsUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getLawfirmPayoutReversalsUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/reversals`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmPayouts
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutsUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getLawfirmPayoutsUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/payouts`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmTransactionsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmTransactionsForCaseUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getLawfirmTransactionsForCaseUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/lawfirm-transactions`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary refundLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {RefundLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundLawfirmFeeUsingPOST: async (lawfirmFeeId: string, request: RefundLawfirmFeeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmFeeId' is not null or undefined
            if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                throw new RequiredError('lawfirmFeeId','Required parameter lawfirmFeeId was null or undefined when calling refundLawfirmFeeUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling refundLawfirmFeeUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirm-fee/{lawfirmFeeId}/refund`
                .replace(`{${"lawfirmFeeId"}}`, encodeURIComponent(String(lawfirmFeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reverseLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {ReverseLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseLawfirmPayoutUsingPOST: async (lawfirmPayoutId: string, request: ReverseLawfirmPayoutRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmPayoutId' is not null or undefined
            if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                throw new RequiredError('lawfirmPayoutId','Required parameter lawfirmPayoutId was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirm-payouts/{lawfirmPayoutId}/reverse`
                .replace(`{${"lawfirmPayoutId"}}`, encodeURIComponent(String(lawfirmPayoutId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendPayoutToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {SendPayoutToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPayoutToLawfirmUsingPOST: async (lawfirmId: number, request: SendPayoutToLawfirmRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/payouts`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {UpdateLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmFeeUsingPUT: async (lawfirmFeeId: string, request: UpdateLawfirmFeeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmFeeId' is not null or undefined
            if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                throw new RequiredError('lawfirmFeeId','Required parameter lawfirmFeeId was null or undefined when calling updateLawfirmFeeUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateLawfirmFeeUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirm-fees/{lawfirmFeeId}`
                .replace(`{${"lawfirmFeeId"}}`, encodeURIComponent(String(lawfirmFeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {UpdateLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmPayoutUsingPUT: async (lawfirmPayoutId: string, request: UpdateLawfirmPayoutRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmPayoutId' is not null or undefined
            if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                throw new RequiredError('lawfirmPayoutId','Required parameter lawfirmPayoutId was null or undefined when calling updateLawfirmPayoutUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateLawfirmPayoutUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirm-payouts/{lawfirmPayoutId}`
                .replace(`{${"lawfirmPayoutId"}}`, encodeURIComponent(String(lawfirmPayoutId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawfirmTransactionsControllerApi - functional programming interface
 * @export
 */
export const LawfirmTransactionsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary chargeFeeToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {ChargeFeeToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chargeFeeToLawfirmUsingPOST(lawfirmId: number, request: ChargeFeeToLawfirmRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeFeeToLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).chargeFeeToLawfirmUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary debitLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debitLawfirmFeeUsingPOST(lawfirmFeeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).debitLawfirmFeeUsingPOST(lawfirmFeeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteLawfirmFeeRecord
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteLawfirmPayoutRecord
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary executeLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeLawfirmPayoutUsingPOST(lawfirmPayoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).executeLawfirmPayoutUsingPOST(lawfirmPayoutId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmFees
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmFeesUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmFeesResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).getLawfirmFeesUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmFinancialTransactions
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmFinancialTransactionsUsingGET(lawfirmId: number, length?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmFinancialTransactionsResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).getLawfirmFinancialTransactionsUsingGET(lawfirmId, length, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmPayoutReversals
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmPayoutReversalsUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmPayoutReversalsResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).getLawfirmPayoutReversalsUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmPayouts
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmPayoutsUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmPayoutsResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).getLawfirmPayoutsUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmTransactionsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmTransactionsForCaseUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmTransactionsForCaseResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).getLawfirmTransactionsForCaseUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary refundLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {RefundLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundLawfirmFeeUsingPOST(lawfirmFeeId: string, request: RefundLawfirmFeeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).refundLawfirmFeeUsingPOST(lawfirmFeeId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary reverseLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {ReverseLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reverseLawfirmPayoutUsingPOST(lawfirmPayoutId: string, request: ReverseLawfirmPayoutRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).reverseLawfirmPayoutUsingPOST(lawfirmPayoutId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendPayoutToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {SendPayoutToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPayoutToLawfirmUsingPOST(lawfirmId: number, request: SendPayoutToLawfirmRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendPayoutToLawfirmResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).sendPayoutToLawfirmUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {UpdateLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLawfirmFeeUsingPUT(lawfirmFeeId: string, request: UpdateLawfirmFeeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateLawfirmFeeResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).updateLawfirmFeeUsingPUT(lawfirmFeeId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {UpdateLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLawfirmPayoutUsingPUT(lawfirmPayoutId: string, request: UpdateLawfirmPayoutRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateLawfirmPayoutResponse>> {
            const localVarAxiosArgs = await LawfirmTransactionsControllerApiAxiosParamCreator(configuration).updateLawfirmPayoutUsingPUT(lawfirmPayoutId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawfirmTransactionsControllerApi - factory interface
 * @export
 */
export const LawfirmTransactionsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary chargeFeeToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {ChargeFeeToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeFeeToLawfirmUsingPOST(lawfirmId: number, request: ChargeFeeToLawfirmRequest, options?: any): AxiosPromise<ChargeFeeToLawfirmResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).chargeFeeToLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary debitLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debitLawfirmFeeUsingPOST(lawfirmFeeId: string, options?: any): AxiosPromise<void> {
            return LawfirmTransactionsControllerApiFp(configuration).debitLawfirmFeeUsingPOST(lawfirmFeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteLawfirmFeeRecord
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId: string, options?: any): AxiosPromise<void> {
            return LawfirmTransactionsControllerApiFp(configuration).deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteLawfirmPayoutRecord
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId: string, options?: any): AxiosPromise<void> {
            return LawfirmTransactionsControllerApiFp(configuration).deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary executeLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeLawfirmPayoutUsingPOST(lawfirmPayoutId: string, options?: any): AxiosPromise<void> {
            return LawfirmTransactionsControllerApiFp(configuration).executeLawfirmPayoutUsingPOST(lawfirmPayoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmFees
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeesUsingGET(caseId: string, options?: any): AxiosPromise<GetLawfirmFeesResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).getLawfirmFeesUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmFinancialTransactions
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFinancialTransactionsUsingGET(lawfirmId: number, length?: number, page?: number, options?: any): AxiosPromise<GetLawfirmFinancialTransactionsResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).getLawfirmFinancialTransactionsUsingGET(lawfirmId, length, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmPayoutReversals
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutReversalsUsingGET(caseId: string, options?: any): AxiosPromise<GetLawfirmPayoutReversalsResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).getLawfirmPayoutReversalsUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmPayouts
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutsUsingGET(caseId: string, options?: any): AxiosPromise<GetLawfirmPayoutsResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).getLawfirmPayoutsUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmTransactionsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmTransactionsForCaseUsingGET(caseId: string, options?: any): AxiosPromise<GetLawfirmTransactionsForCaseResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).getLawfirmTransactionsForCaseUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary refundLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {RefundLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundLawfirmFeeUsingPOST(lawfirmFeeId: string, request: RefundLawfirmFeeRequest, options?: any): AxiosPromise<void> {
            return LawfirmTransactionsControllerApiFp(configuration).refundLawfirmFeeUsingPOST(lawfirmFeeId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary reverseLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {ReverseLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseLawfirmPayoutUsingPOST(lawfirmPayoutId: string, request: ReverseLawfirmPayoutRequest, options?: any): AxiosPromise<object> {
            return LawfirmTransactionsControllerApiFp(configuration).reverseLawfirmPayoutUsingPOST(lawfirmPayoutId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendPayoutToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {SendPayoutToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPayoutToLawfirmUsingPOST(lawfirmId: number, request: SendPayoutToLawfirmRequest, options?: any): AxiosPromise<SendPayoutToLawfirmResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).sendPayoutToLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {UpdateLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmFeeUsingPUT(lawfirmFeeId: string, request: UpdateLawfirmFeeRequest, options?: any): AxiosPromise<UpdateLawfirmFeeResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).updateLawfirmFeeUsingPUT(lawfirmFeeId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {UpdateLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmPayoutUsingPUT(lawfirmPayoutId: string, request: UpdateLawfirmPayoutRequest, options?: any): AxiosPromise<UpdateLawfirmPayoutResponse> {
            return LawfirmTransactionsControllerApiFp(configuration).updateLawfirmPayoutUsingPUT(lawfirmPayoutId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawfirmTransactionsControllerApi - object-oriented interface
 * @export
 * @class LawfirmTransactionsControllerApi
 * @extends {BaseAPI}
 */
export class LawfirmTransactionsControllerApi extends BaseAPI {
    /**
     * 
     * @summary chargeFeeToLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {ChargeFeeToLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public chargeFeeToLawfirmUsingPOST(lawfirmId: number, request: ChargeFeeToLawfirmRequest, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).chargeFeeToLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary debitLawfirmFee
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public debitLawfirmFeeUsingPOST(lawfirmFeeId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).debitLawfirmFeeUsingPOST(lawfirmFeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteLawfirmFeeRecord
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteLawfirmPayoutRecord
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary executeLawfirmPayout
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public executeLawfirmPayoutUsingPOST(lawfirmPayoutId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).executeLawfirmPayoutUsingPOST(lawfirmPayoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmFees
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public getLawfirmFeesUsingGET(caseId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).getLawfirmFeesUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmFinancialTransactions
     * @param {number} lawfirmId lawfirmId
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public getLawfirmFinancialTransactionsUsingGET(lawfirmId: number, length?: number, page?: number, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).getLawfirmFinancialTransactionsUsingGET(lawfirmId, length, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmPayoutReversals
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public getLawfirmPayoutReversalsUsingGET(caseId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).getLawfirmPayoutReversalsUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmPayouts
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public getLawfirmPayoutsUsingGET(caseId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).getLawfirmPayoutsUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmTransactionsForCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public getLawfirmTransactionsForCaseUsingGET(caseId: string, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).getLawfirmTransactionsForCaseUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary refundLawfirmFee
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {RefundLawfirmFeeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public refundLawfirmFeeUsingPOST(lawfirmFeeId: string, request: RefundLawfirmFeeRequest, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).refundLawfirmFeeUsingPOST(lawfirmFeeId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary reverseLawfirmPayout
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {ReverseLawfirmPayoutRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public reverseLawfirmPayoutUsingPOST(lawfirmPayoutId: string, request: ReverseLawfirmPayoutRequest, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).reverseLawfirmPayoutUsingPOST(lawfirmPayoutId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendPayoutToLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {SendPayoutToLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public sendPayoutToLawfirmUsingPOST(lawfirmId: number, request: SendPayoutToLawfirmRequest, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).sendPayoutToLawfirmUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLawfirmFee
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {UpdateLawfirmFeeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public updateLawfirmFeeUsingPUT(lawfirmFeeId: string, request: UpdateLawfirmFeeRequest, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).updateLawfirmFeeUsingPUT(lawfirmFeeId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateLawfirmPayout
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {UpdateLawfirmPayoutRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    public updateLawfirmPayoutUsingPUT(lawfirmPayoutId: string, request: UpdateLawfirmPayoutRequest, options?: any) {
        return LawfirmTransactionsControllerApiFp(this.configuration).updateLawfirmPayoutUsingPUT(lawfirmPayoutId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LawyerControllerApi - axios parameter creator
 * @export
 */
export const LawyerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteLawyerLicenses
         * @param {string} userId userId
         * @param {DeleteLawyerLicenseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawyerLicensesUsingDELETE: async (userId: string, request: DeleteLawyerLicenseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawyers/{userId}/licenses`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawyerEmailGuesses
         * @param {number} lawyerId lawyerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawyerEmailGuessesUsingGET: async (lawyerId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawyerId' is not null or undefined
            if (lawyerId === null || lawyerId === undefined) {
                throw new RequiredError('lawyerId','Required parameter lawyerId was null or undefined when calling getLawyerEmailGuessesUsingGET.');
            }
            const localVarPath = `/api/v1/lawyers/{lawyerId}/email-guesses`
                .replace(`{${"lawyerId"}}`, encodeURIComponent(String(lawyerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveLawyerLead
         * @param {SaveLawyerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLeadUsingPOST: async (request: SaveLawyerLeadRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling saveLawyerLeadUsingPOST.');
            }
            const localVarPath = `/api/v1/lawyers/lead`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary saveLawyerLicenses
         * @param {string} userId userId
         * @param {SaveLawyerLicensesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLicensesUsingPOST: async (userId: string, request: SaveLawyerLicensesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling saveLawyerLicensesUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling saveLawyerLicensesUsingPOST.');
            }
            const localVarPath = `/api/v1/lawyers/{userId}/licenses`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upsertLawyer
         * @param {SaveLawyerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertLawyerUsingPOST: async (request: SaveLawyerRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling upsertLawyerUsingPOST.');
            }
            const localVarPath = `/api/v1/lawyers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LawyerControllerApi - functional programming interface
 * @export
 */
export const LawyerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteLawyerLicenses
         * @param {string} userId userId
         * @param {DeleteLawyerLicenseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLawyerLicensesUsingDELETE(userId: string, request: DeleteLawyerLicenseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawyerControllerApiAxiosParamCreator(configuration).deleteLawyerLicensesUsingDELETE(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawyerEmailGuesses
         * @param {number} lawyerId lawyerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawyerEmailGuessesUsingGET(lawyerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawyerControllerApiAxiosParamCreator(configuration).getLawyerEmailGuessesUsingGET(lawyerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary saveLawyerLead
         * @param {SaveLawyerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveLawyerLeadUsingPOST(request: SaveLawyerLeadRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawyerControllerApiAxiosParamCreator(configuration).saveLawyerLeadUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary saveLawyerLicenses
         * @param {string} userId userId
         * @param {SaveLawyerLicensesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveLawyerLicensesUsingPOST(userId: string, request: SaveLawyerLicensesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawyerControllerApiAxiosParamCreator(configuration).saveLawyerLicensesUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary upsertLawyer
         * @param {SaveLawyerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertLawyerUsingPOST(request: SaveLawyerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LawyerControllerApiAxiosParamCreator(configuration).upsertLawyerUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LawyerControllerApi - factory interface
 * @export
 */
export const LawyerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary deleteLawyerLicenses
         * @param {string} userId userId
         * @param {DeleteLawyerLicenseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawyerLicensesUsingDELETE(userId: string, request: DeleteLawyerLicenseRequest, options?: any): AxiosPromise<object> {
            return LawyerControllerApiFp(configuration).deleteLawyerLicensesUsingDELETE(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawyerEmailGuesses
         * @param {number} lawyerId lawyerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawyerEmailGuessesUsingGET(lawyerId: number, options?: any): AxiosPromise<object> {
            return LawyerControllerApiFp(configuration).getLawyerEmailGuessesUsingGET(lawyerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary saveLawyerLead
         * @param {SaveLawyerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLeadUsingPOST(request: SaveLawyerLeadRequest, options?: any): AxiosPromise<object> {
            return LawyerControllerApiFp(configuration).saveLawyerLeadUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary saveLawyerLicenses
         * @param {string} userId userId
         * @param {SaveLawyerLicensesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLicensesUsingPOST(userId: string, request: SaveLawyerLicensesRequest, options?: any): AxiosPromise<object> {
            return LawyerControllerApiFp(configuration).saveLawyerLicensesUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary upsertLawyer
         * @param {SaveLawyerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertLawyerUsingPOST(request: SaveLawyerRequest, options?: any): AxiosPromise<object> {
            return LawyerControllerApiFp(configuration).upsertLawyerUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LawyerControllerApi - object-oriented interface
 * @export
 * @class LawyerControllerApi
 * @extends {BaseAPI}
 */
export class LawyerControllerApi extends BaseAPI {
    /**
     * 
     * @summary deleteLawyerLicenses
     * @param {string} userId userId
     * @param {DeleteLawyerLicenseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    public deleteLawyerLicensesUsingDELETE(userId: string, request: DeleteLawyerLicenseRequest, options?: any) {
        return LawyerControllerApiFp(this.configuration).deleteLawyerLicensesUsingDELETE(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawyerEmailGuesses
     * @param {number} lawyerId lawyerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    public getLawyerEmailGuessesUsingGET(lawyerId: number, options?: any) {
        return LawyerControllerApiFp(this.configuration).getLawyerEmailGuessesUsingGET(lawyerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary saveLawyerLead
     * @param {SaveLawyerLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    public saveLawyerLeadUsingPOST(request: SaveLawyerLeadRequest, options?: any) {
        return LawyerControllerApiFp(this.configuration).saveLawyerLeadUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary saveLawyerLicenses
     * @param {string} userId userId
     * @param {SaveLawyerLicensesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    public saveLawyerLicensesUsingPOST(userId: string, request: SaveLawyerLicensesRequest, options?: any) {
        return LawyerControllerApiFp(this.configuration).saveLawyerLicensesUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary upsertLawyer
     * @param {SaveLawyerRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    public upsertLawyerUsingPOST(request: SaveLawyerRequest, options?: any) {
        return LawyerControllerApiFp(this.configuration).upsertLawyerUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * LineItemControllerApi - axios parameter creator
 * @export
 */
export const LineItemControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCaseLineItemUsingDELETE: async (caseId: string, lineItemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling deleteCaseLineItemUsingDELETE.');
            }
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling deleteCaseLineItemUsingDELETE.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/lineitems/{lineItemId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"lineItemId"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLineItemTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemTypesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lineitems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLineItems
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemsUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getLineItemsUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/line-items`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary insertCaseLineItem
         * @param {string} caseId caseId
         * @param {InsertInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCaseLineItemUsingPOST: async (caseId: string, request: InsertInvoiceLineItemRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling insertCaseLineItemUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling insertCaseLineItemUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/lineitems`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {UpdateInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseLineItemUsingPUT: async (caseId: string, lineItemId: string, request: UpdateInvoiceLineItemRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling updateCaseLineItemUsingPUT.');
            }
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling updateCaseLineItemUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateCaseLineItemUsingPUT.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/lineitems/{lineItemId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)))
                .replace(`{${"lineItemId"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LineItemControllerApi - functional programming interface
 * @export
 */
export const LineItemControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCaseLineItemUsingDELETE(caseId: string, lineItemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LineItemControllerApiAxiosParamCreator(configuration).deleteCaseLineItemUsingDELETE(caseId, lineItemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLineItemTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLineItemTypesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLineItemTypesResponse>> {
            const localVarAxiosArgs = await LineItemControllerApiAxiosParamCreator(configuration).getLineItemTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLineItems
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLineItemsUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLineItemsResponse>> {
            const localVarAxiosArgs = await LineItemControllerApiAxiosParamCreator(configuration).getLineItemsUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary insertCaseLineItem
         * @param {string} caseId caseId
         * @param {InsertInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertCaseLineItemUsingPOST(caseId: string, request: InsertInvoiceLineItemRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertCaseLineItemResponse>> {
            const localVarAxiosArgs = await LineItemControllerApiAxiosParamCreator(configuration).insertCaseLineItemUsingPOST(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {UpdateInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCaseLineItemUsingPUT(caseId: string, lineItemId: string, request: UpdateInvoiceLineItemRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await LineItemControllerApiAxiosParamCreator(configuration).updateCaseLineItemUsingPUT(caseId, lineItemId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LineItemControllerApi - factory interface
 * @export
 */
export const LineItemControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary deleteCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCaseLineItemUsingDELETE(caseId: string, lineItemId: string, options?: any): AxiosPromise<object> {
            return LineItemControllerApiFp(configuration).deleteCaseLineItemUsingDELETE(caseId, lineItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLineItemTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemTypesUsingGET(options?: any): AxiosPromise<GetLineItemTypesResponse> {
            return LineItemControllerApiFp(configuration).getLineItemTypesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLineItems
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemsUsingGET(caseId: string, options?: any): AxiosPromise<GetLineItemsResponse> {
            return LineItemControllerApiFp(configuration).getLineItemsUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary insertCaseLineItem
         * @param {string} caseId caseId
         * @param {InsertInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCaseLineItemUsingPOST(caseId: string, request: InsertInvoiceLineItemRequest, options?: any): AxiosPromise<InsertCaseLineItemResponse> {
            return LineItemControllerApiFp(configuration).insertCaseLineItemUsingPOST(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {UpdateInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseLineItemUsingPUT(caseId: string, lineItemId: string, request: UpdateInvoiceLineItemRequest, options?: any): AxiosPromise<object> {
            return LineItemControllerApiFp(configuration).updateCaseLineItemUsingPUT(caseId, lineItemId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LineItemControllerApi - object-oriented interface
 * @export
 * @class LineItemControllerApi
 * @extends {BaseAPI}
 */
export class LineItemControllerApi extends BaseAPI {
    /**
     * 
     * @summary deleteCaseLineItem
     * @param {string} caseId caseId
     * @param {string} lineItemId lineItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    public deleteCaseLineItemUsingDELETE(caseId: string, lineItemId: string, options?: any) {
        return LineItemControllerApiFp(this.configuration).deleteCaseLineItemUsingDELETE(caseId, lineItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLineItemTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    public getLineItemTypesUsingGET(options?: any) {
        return LineItemControllerApiFp(this.configuration).getLineItemTypesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLineItems
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    public getLineItemsUsingGET(caseId: string, options?: any) {
        return LineItemControllerApiFp(this.configuration).getLineItemsUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary insertCaseLineItem
     * @param {string} caseId caseId
     * @param {InsertInvoiceLineItemRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    public insertCaseLineItemUsingPOST(caseId: string, request: InsertInvoiceLineItemRequest, options?: any) {
        return LineItemControllerApiFp(this.configuration).insertCaseLineItemUsingPOST(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCaseLineItem
     * @param {string} caseId caseId
     * @param {string} lineItemId lineItemId
     * @param {UpdateInvoiceLineItemRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    public updateCaseLineItemUsingPUT(caseId: string, lineItemId: string, request: UpdateInvoiceLineItemRequest, options?: any) {
        return LineItemControllerApiFp(this.configuration).updateCaseLineItemUsingPUT(caseId, lineItemId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ListCasesControllerApi - axios parameter creator
 * @export
 */
export const ListCasesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCasesForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesForUserUsingGET: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getCasesForUserUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userId}/cases`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUserCases
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCasesUsingGET: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserCasesUsingGET.');
            }
            const localVarPath = `/api/v2/users/{userId}/cases`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listDashboardCases
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {string} [previousPageToken] previousPageToken
         * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardCasesUsingGET: async (userId: number, limit?: number, previousPageToken?: string, sortBy?: 'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE', statusCategories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listDashboardCasesUsingGET.');
            }
            const localVarPath = `/api/v3/users/{userId}/cases`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (previousPageToken !== undefined) {
                localVarQueryParameter['previousPageToken'] = previousPageToken;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (statusCategories) {
                localVarQueryParameter['statusCategories'] = statusCategories;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListCasesControllerApi - functional programming interface
 * @export
 */
export const ListCasesControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCasesForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCasesForUserUsingGET(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientCasesResponse>> {
            const localVarAxiosArgs = await ListCasesControllerApiAxiosParamCreator(configuration).getCasesForUserUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getUserCases
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCasesUsingGET(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserCasesResponse>> {
            const localVarAxiosArgs = await ListCasesControllerApiAxiosParamCreator(configuration).getUserCasesUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listDashboardCases
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {string} [previousPageToken] previousPageToken
         * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDashboardCasesUsingGET(userId: number, limit?: number, previousPageToken?: string, sortBy?: 'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE', statusCategories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDashboardCasesResponse>> {
            const localVarAxiosArgs = await ListCasesControllerApiAxiosParamCreator(configuration).listDashboardCasesUsingGET(userId, limit, previousPageToken, sortBy, statusCategories, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ListCasesControllerApi - factory interface
 * @export
 */
export const ListCasesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getCasesForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesForUserUsingGET(userId: string, options?: any): AxiosPromise<GetClientCasesResponse> {
            return ListCasesControllerApiFp(configuration).getCasesForUserUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUserCases
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCasesUsingGET(userId: number, options?: any): AxiosPromise<GetUserCasesResponse> {
            return ListCasesControllerApiFp(configuration).getUserCasesUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listDashboardCases
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {string} [previousPageToken] previousPageToken
         * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardCasesUsingGET(userId: number, limit?: number, previousPageToken?: string, sortBy?: 'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE', statusCategories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options?: any): AxiosPromise<ListDashboardCasesResponse> {
            return ListCasesControllerApiFp(configuration).listDashboardCasesUsingGET(userId, limit, previousPageToken, sortBy, statusCategories, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListCasesControllerApi - object-oriented interface
 * @export
 * @class ListCasesControllerApi
 * @extends {BaseAPI}
 */
export class ListCasesControllerApi extends BaseAPI {
    /**
     * 
     * @summary getCasesForUser
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListCasesControllerApi
     */
    public getCasesForUserUsingGET(userId: string, options?: any) {
        return ListCasesControllerApiFp(this.configuration).getCasesForUserUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUserCases
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListCasesControllerApi
     */
    public getUserCasesUsingGET(userId: number, options?: any) {
        return ListCasesControllerApiFp(this.configuration).getUserCasesUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listDashboardCases
     * @param {number} userId userId
     * @param {number} [limit] limit
     * @param {string} [previousPageToken] previousPageToken
     * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
     * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListCasesControllerApi
     */
    public listDashboardCasesUsingGET(userId: number, limit?: number, previousPageToken?: string, sortBy?: 'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE', statusCategories?: Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>, options?: any) {
        return ListCasesControllerApiFp(this.configuration).listDashboardCasesUsingGET(userId, limit, previousPageToken, sortBy, statusCategories, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * NotesControllerApi - axios parameter creator
 * @export
 */
export const NotesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNote
         * @param {CreateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNoteUsingPOST: async (request: CreateNoteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createNoteUsingPOST.');
            }
            const localVarPath = `/api/v1/notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteNote
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNoteUsingDELETE: async (noteId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling deleteNoteUsingDELETE.');
            }
            const localVarPath = `/api/v1/notes/{noteId}`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateNote
         * @param {number} noteId noteId
         * @param {UpdateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNoteUsingPUT: async (noteId: number, request: UpdateNoteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling updateNoteUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateNoteUsingPUT.');
            }
            const localVarPath = `/api/v1/notes/{noteId}`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotesControllerApi - functional programming interface
 * @export
 */
export const NotesControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNote
         * @param {CreateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNoteUsingPOST(request: CreateNoteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateNoteResponse>> {
            const localVarAxiosArgs = await NotesControllerApiAxiosParamCreator(configuration).createNoteUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteNote
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNoteUsingDELETE(noteId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await NotesControllerApiAxiosParamCreator(configuration).deleteNoteUsingDELETE(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateNote
         * @param {number} noteId noteId
         * @param {UpdateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNoteUsingPUT(noteId: number, request: UpdateNoteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateNoteResponse>> {
            const localVarAxiosArgs = await NotesControllerApiAxiosParamCreator(configuration).updateNoteUsingPUT(noteId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotesControllerApi - factory interface
 * @export
 */
export const NotesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createNote
         * @param {CreateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNoteUsingPOST(request: CreateNoteRequest, options?: any): AxiosPromise<CreateNoteResponse> {
            return NotesControllerApiFp(configuration).createNoteUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteNote
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNoteUsingDELETE(noteId: number, options?: any): AxiosPromise<void> {
            return NotesControllerApiFp(configuration).deleteNoteUsingDELETE(noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateNote
         * @param {number} noteId noteId
         * @param {UpdateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNoteUsingPUT(noteId: number, request: UpdateNoteRequest, options?: any): AxiosPromise<UpdateNoteResponse> {
            return NotesControllerApiFp(configuration).updateNoteUsingPUT(noteId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotesControllerApi - object-oriented interface
 * @export
 * @class NotesControllerApi
 * @extends {BaseAPI}
 */
export class NotesControllerApi extends BaseAPI {
    /**
     * 
     * @summary createNote
     * @param {CreateNoteRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesControllerApi
     */
    public createNoteUsingPOST(request: CreateNoteRequest, options?: any) {
        return NotesControllerApiFp(this.configuration).createNoteUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteNote
     * @param {number} noteId noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesControllerApi
     */
    public deleteNoteUsingDELETE(noteId: number, options?: any) {
        return NotesControllerApiFp(this.configuration).deleteNoteUsingDELETE(noteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateNote
     * @param {number} noteId noteId
     * @param {UpdateNoteRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesControllerApi
     */
    public updateNoteUsingPUT(noteId: number, request: UpdateNoteRequest, options?: any) {
        return NotesControllerApiFp(this.configuration).updateNoteUsingPUT(noteId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * OnDemandRequestControllerApi - axios parameter creator
 * @export
 */
export const OnDemandRequestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary requestLawyer
         * @param {string} caseId caseId
         * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLawyerUsingPOST: async (caseId: string, lawyerRequest: NoLawyerAvailableRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling requestLawyerUsingPOST.');
            }
            // verify required parameter 'lawyerRequest' is not null or undefined
            if (lawyerRequest === null || lawyerRequest === undefined) {
                throw new RequiredError('lawyerRequest','Required parameter lawyerRequest was null or undefined when calling requestLawyerUsingPOST.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/request`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof lawyerRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(lawyerRequest !== undefined ? lawyerRequest : {}) : (lawyerRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnDemandRequestControllerApi - functional programming interface
 * @export
 */
export const OnDemandRequestControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary requestLawyer
         * @param {string} caseId caseId
         * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestLawyerUsingPOST(caseId: string, lawyerRequest: NoLawyerAvailableRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await OnDemandRequestControllerApiAxiosParamCreator(configuration).requestLawyerUsingPOST(caseId, lawyerRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OnDemandRequestControllerApi - factory interface
 * @export
 */
export const OnDemandRequestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary requestLawyer
         * @param {string} caseId caseId
         * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLawyerUsingPOST(caseId: string, lawyerRequest: NoLawyerAvailableRequest, options?: any): AxiosPromise<object> {
            return OnDemandRequestControllerApiFp(configuration).requestLawyerUsingPOST(caseId, lawyerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnDemandRequestControllerApi - object-oriented interface
 * @export
 * @class OnDemandRequestControllerApi
 * @extends {BaseAPI}
 */
export class OnDemandRequestControllerApi extends BaseAPI {
    /**
     * 
     * @summary requestLawyer
     * @param {string} caseId caseId
     * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRequestControllerApi
     */
    public requestLawyerUsingPOST(caseId: string, lawyerRequest: NoLawyerAvailableRequest, options?: any) {
        return OnDemandRequestControllerApiFp(this.configuration).requestLawyerUsingPOST(caseId, lawyerRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * OneTimePasswordControllerApi - axios parameter creator
 * @export
 */
export const OneTimePasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sendOneTimePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOneTimePasswordUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/one_time_password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OneTimePasswordControllerApi - functional programming interface
 * @export
 */
export const OneTimePasswordControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sendOneTimePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendOneTimePasswordUsingPOST(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await OneTimePasswordControllerApiAxiosParamCreator(configuration).sendOneTimePasswordUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OneTimePasswordControllerApi - factory interface
 * @export
 */
export const OneTimePasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary sendOneTimePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOneTimePasswordUsingPOST(options?: any): AxiosPromise<void> {
            return OneTimePasswordControllerApiFp(configuration).sendOneTimePasswordUsingPOST(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OneTimePasswordControllerApi - object-oriented interface
 * @export
 * @class OneTimePasswordControllerApi
 * @extends {BaseAPI}
 */
export class OneTimePasswordControllerApi extends BaseAPI {
    /**
     * 
     * @summary sendOneTimePassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OneTimePasswordControllerApi
     */
    public sendOneTimePasswordUsingPOST(options?: any) {
        return OneTimePasswordControllerApiFp(this.configuration).sendOneTimePasswordUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * PhoneLeadsControllerApi - axios parameter creator
 * @export
 */
export const PhoneLeadsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addNoteToPhoneLead
         * @param {AddNoteToPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteToPhoneLeadUsingPOST: async (request: AddNoteToPhoneLeadRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addNoteToPhoneLeadUsingPOST.');
            }
            const localVarPath = `/api/v1/phone-leads/notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary dismissPhoneLead
         * @param {DismissPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissPhoneLeadUsingPOST: async (request: DismissPhoneLeadRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling dismissPhoneLeadUsingPOST.');
            }
            const localVarPath = `/api/v1/phone-leads/dismiss`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneLeadsControllerApi - functional programming interface
 * @export
 */
export const PhoneLeadsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addNoteToPhoneLead
         * @param {AddNoteToPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNoteToPhoneLeadUsingPOST(request: AddNoteToPhoneLeadRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateNoteResponse>> {
            const localVarAxiosArgs = await PhoneLeadsControllerApiAxiosParamCreator(configuration).addNoteToPhoneLeadUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary dismissPhoneLead
         * @param {DismissPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dismissPhoneLeadUsingPOST(request: DismissPhoneLeadRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PhoneLeadsControllerApiAxiosParamCreator(configuration).dismissPhoneLeadUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PhoneLeadsControllerApi - factory interface
 * @export
 */
export const PhoneLeadsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addNoteToPhoneLead
         * @param {AddNoteToPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteToPhoneLeadUsingPOST(request: AddNoteToPhoneLeadRequest, options?: any): AxiosPromise<CreateNoteResponse> {
            return PhoneLeadsControllerApiFp(configuration).addNoteToPhoneLeadUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary dismissPhoneLead
         * @param {DismissPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissPhoneLeadUsingPOST(request: DismissPhoneLeadRequest, options?: any): AxiosPromise<void> {
            return PhoneLeadsControllerApiFp(configuration).dismissPhoneLeadUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhoneLeadsControllerApi - object-oriented interface
 * @export
 * @class PhoneLeadsControllerApi
 * @extends {BaseAPI}
 */
export class PhoneLeadsControllerApi extends BaseAPI {
    /**
     * 
     * @summary addNoteToPhoneLead
     * @param {AddNoteToPhoneLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneLeadsControllerApi
     */
    public addNoteToPhoneLeadUsingPOST(request: AddNoteToPhoneLeadRequest, options?: any) {
        return PhoneLeadsControllerApiFp(this.configuration).addNoteToPhoneLeadUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary dismissPhoneLead
     * @param {DismissPhoneLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneLeadsControllerApi
     */
    public dismissPhoneLeadUsingPOST(request: DismissPhoneLeadRequest, options?: any) {
        return PhoneLeadsControllerApiFp(this.configuration).dismissPhoneLeadUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * PushNotificationControllerApi - axios parameter creator
 * @export
 */
export const PushNotificationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUnreadCounts
         * @param {boolean} [includeMessage] includeMessage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnreadCountsUsingGET: async (includeMessage?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/unread`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeMessage !== undefined) {
                localVarQueryParameter['includeMessage'] = includeMessage;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markAllReadForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllReadForUserUsingDELETE: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling markAllReadForUserUsingDELETE.');
            }
            const localVarPath = `/api/v1/notifications/unread/{userId}/user`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markPageTypesAsRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationByPagesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPageTypesAsReadUsingDELETE: async (caseId: string, request: DeleteNotificationByPagesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling markPageTypesAsReadUsingDELETE.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling markPageTypesAsReadUsingDELETE.');
            }
            const localVarPath = `/api/v2/notifications/unread/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadUsingDELETE: async (caseId: string, request: DeleteNotificationEventRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling markReadUsingDELETE.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling markReadUsingDELETE.');
            }
            const localVarPath = `/api/v1/notifications/unread/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary pushCaseMessage
         * @param {string} caseId caseId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushCaseMessageUsingPOST: async (caseId: string, pushRequest: PushNotificationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling pushCaseMessageUsingPOST.');
            }
            // verify required parameter 'pushRequest' is not null or undefined
            if (pushRequest === null || pushRequest === undefined) {
                throw new RequiredError('pushRequest','Required parameter pushRequest was null or undefined when calling pushCaseMessageUsingPOST.');
            }
            const localVarPath = `/api/v1/notifications/cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof pushRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pushRequest !== undefined ? pushRequest : {}) : (pushRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary pushNotificationToUser
         * @param {string} recipientId recipientId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushNotificationToUserUsingPOST: async (recipientId: string, pushRequest: PushNotificationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientId' is not null or undefined
            if (recipientId === null || recipientId === undefined) {
                throw new RequiredError('recipientId','Required parameter recipientId was null or undefined when calling pushNotificationToUserUsingPOST.');
            }
            // verify required parameter 'pushRequest' is not null or undefined
            if (pushRequest === null || pushRequest === undefined) {
                throw new RequiredError('pushRequest','Required parameter pushRequest was null or undefined when calling pushNotificationToUserUsingPOST.');
            }
            const localVarPath = `/api/v1/notifications/users/{recipientId}`
                .replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof pushRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pushRequest !== undefined ? pushRequest : {}) : (pushRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary register
         * @param {PushNotificationRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST: async (request: PushNotificationRegistrationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling registerUsingPOST.');
            }
            const localVarPath = `/api/v1/notifications/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PushNotificationControllerApi - functional programming interface
 * @export
 */
export const PushNotificationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUnreadCounts
         * @param {boolean} [includeMessage] includeMessage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnreadCountsUsingGET(includeMessage?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationEvents>> {
            const localVarAxiosArgs = await PushNotificationControllerApiAxiosParamCreator(configuration).getUnreadCountsUsingGET(includeMessage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markAllReadForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAllReadForUserUsingDELETE(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PushNotificationControllerApiAxiosParamCreator(configuration).markAllReadForUserUsingDELETE(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markPageTypesAsRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationByPagesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markPageTypesAsReadUsingDELETE(caseId: string, request: DeleteNotificationByPagesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationEvents>> {
            const localVarAxiosArgs = await PushNotificationControllerApiAxiosParamCreator(configuration).markPageTypesAsReadUsingDELETE(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markReadUsingDELETE(caseId: string, request: DeleteNotificationEventRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationEvents>> {
            const localVarAxiosArgs = await PushNotificationControllerApiAxiosParamCreator(configuration).markReadUsingDELETE(caseId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary pushCaseMessage
         * @param {string} caseId caseId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushCaseMessageUsingPOST(caseId: string, pushRequest: PushNotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await PushNotificationControllerApiAxiosParamCreator(configuration).pushCaseMessageUsingPOST(caseId, pushRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary pushNotificationToUser
         * @param {string} recipientId recipientId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushNotificationToUserUsingPOST(recipientId: string, pushRequest: PushNotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await PushNotificationControllerApiAxiosParamCreator(configuration).pushNotificationToUserUsingPOST(recipientId, pushRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary register
         * @param {PushNotificationRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUsingPOST(request: PushNotificationRegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await PushNotificationControllerApiAxiosParamCreator(configuration).registerUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PushNotificationControllerApi - factory interface
 * @export
 */
export const PushNotificationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getUnreadCounts
         * @param {boolean} [includeMessage] includeMessage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnreadCountsUsingGET(includeMessage?: boolean, options?: any): AxiosPromise<NotificationEvents> {
            return PushNotificationControllerApiFp(configuration).getUnreadCountsUsingGET(includeMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markAllReadForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllReadForUserUsingDELETE(userId: string, options?: any): AxiosPromise<void> {
            return PushNotificationControllerApiFp(configuration).markAllReadForUserUsingDELETE(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markPageTypesAsRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationByPagesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPageTypesAsReadUsingDELETE(caseId: string, request: DeleteNotificationByPagesRequest, options?: any): AxiosPromise<NotificationEvents> {
            return PushNotificationControllerApiFp(configuration).markPageTypesAsReadUsingDELETE(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadUsingDELETE(caseId: string, request: DeleteNotificationEventRequest, options?: any): AxiosPromise<NotificationEvents> {
            return PushNotificationControllerApiFp(configuration).markReadUsingDELETE(caseId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary pushCaseMessage
         * @param {string} caseId caseId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushCaseMessageUsingPOST(caseId: string, pushRequest: PushNotificationRequest, options?: any): AxiosPromise<object> {
            return PushNotificationControllerApiFp(configuration).pushCaseMessageUsingPOST(caseId, pushRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary pushNotificationToUser
         * @param {string} recipientId recipientId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushNotificationToUserUsingPOST(recipientId: string, pushRequest: PushNotificationRequest, options?: any): AxiosPromise<object> {
            return PushNotificationControllerApiFp(configuration).pushNotificationToUserUsingPOST(recipientId, pushRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary register
         * @param {PushNotificationRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST(request: PushNotificationRegistrationRequest, options?: any): AxiosPromise<object> {
            return PushNotificationControllerApiFp(configuration).registerUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PushNotificationControllerApi - object-oriented interface
 * @export
 * @class PushNotificationControllerApi
 * @extends {BaseAPI}
 */
export class PushNotificationControllerApi extends BaseAPI {
    /**
     * 
     * @summary getUnreadCounts
     * @param {boolean} [includeMessage] includeMessage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    public getUnreadCountsUsingGET(includeMessage?: boolean, options?: any) {
        return PushNotificationControllerApiFp(this.configuration).getUnreadCountsUsingGET(includeMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markAllReadForUser
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    public markAllReadForUserUsingDELETE(userId: string, options?: any) {
        return PushNotificationControllerApiFp(this.configuration).markAllReadForUserUsingDELETE(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markPageTypesAsRead
     * @param {string} caseId caseId
     * @param {DeleteNotificationByPagesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    public markPageTypesAsReadUsingDELETE(caseId: string, request: DeleteNotificationByPagesRequest, options?: any) {
        return PushNotificationControllerApiFp(this.configuration).markPageTypesAsReadUsingDELETE(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markRead
     * @param {string} caseId caseId
     * @param {DeleteNotificationEventRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    public markReadUsingDELETE(caseId: string, request: DeleteNotificationEventRequest, options?: any) {
        return PushNotificationControllerApiFp(this.configuration).markReadUsingDELETE(caseId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary pushCaseMessage
     * @param {string} caseId caseId
     * @param {PushNotificationRequest} pushRequest pushRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    public pushCaseMessageUsingPOST(caseId: string, pushRequest: PushNotificationRequest, options?: any) {
        return PushNotificationControllerApiFp(this.configuration).pushCaseMessageUsingPOST(caseId, pushRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary pushNotificationToUser
     * @param {string} recipientId recipientId
     * @param {PushNotificationRequest} pushRequest pushRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    public pushNotificationToUserUsingPOST(recipientId: string, pushRequest: PushNotificationRequest, options?: any) {
        return PushNotificationControllerApiFp(this.configuration).pushNotificationToUserUsingPOST(recipientId, pushRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary register
     * @param {PushNotificationRegistrationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    public registerUsingPOST(request: PushNotificationRegistrationRequest, options?: any) {
        return PushNotificationControllerApiFp(this.configuration).registerUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * RecurringBillingControllerApi - axios parameter creator
 * @export
 */
export const RecurringBillingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary cancelBillingSubscription
         * @param {string} id id
         * @param {string} userId userId
         * @param {boolean} [isProrated] isProrated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBillingSubscriptionUsingDELETE: async (id: string, userId: string, isProrated?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
            }
            const localVarPath = `/api/v1/billing/{userId}/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isProrated !== undefined) {
                localVarQueryParameter['isProrated'] = isProrated;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createBillingSubscription
         * @param {number} userId userId
         * @param {CreateBillingSubscriptionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionUsingPOST: async (userId: number, request: CreateBillingSubscriptionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling createBillingSubscriptionUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createBillingSubscriptionUsingPOST.');
            }
            const localVarPath = `/api/v1/billing/{userId}/subscriptions`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listBillingProducts
         * @param {boolean} [active] active
         * @param {string} [audience] audience
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingProductsUsingGET: async (active?: boolean, audience?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/billing/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (audience !== undefined) {
                localVarQueryParameter['audience'] = audience;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listBillingSubscriptions
         * @param {number} userId userId
         * @param {boolean} [includeInactive] includeInactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptionsUsingGET: async (userId: number, includeInactive?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listBillingSubscriptionsUsingGET.');
            }
            const localVarPath = `/api/v1/billing/{userId}/subscriptions`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeInactive !== undefined) {
                localVarQueryParameter['includeInactive'] = includeInactive;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listSubscriptionInvoices
         * @param {string} id id
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionInvoicesUsingGET: async (id: string, userId: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionInvoicesUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listSubscriptionInvoicesUsingGET.');
            }
            const localVarPath = `/api/v1/billing/{userId}/subscriptions/{id}/invoices`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecurringBillingControllerApi - functional programming interface
 * @export
 */
export const RecurringBillingControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary cancelBillingSubscription
         * @param {string} id id
         * @param {string} userId userId
         * @param {boolean} [isProrated] isProrated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelBillingSubscriptionUsingDELETE(id: string, userId: string, isProrated?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelBillingSubscriptionResponse>> {
            const localVarAxiosArgs = await RecurringBillingControllerApiAxiosParamCreator(configuration).cancelBillingSubscriptionUsingDELETE(id, userId, isProrated, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createBillingSubscription
         * @param {number} userId userId
         * @param {CreateBillingSubscriptionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBillingSubscriptionUsingPOST(userId: number, request: CreateBillingSubscriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBillingSubscriptionResponse>> {
            const localVarAxiosArgs = await RecurringBillingControllerApiAxiosParamCreator(configuration).createBillingSubscriptionUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listBillingProducts
         * @param {boolean} [active] active
         * @param {string} [audience] audience
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBillingProductsUsingGET(active?: boolean, audience?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBillingProductsResponse>> {
            const localVarAxiosArgs = await RecurringBillingControllerApiAxiosParamCreator(configuration).listBillingProductsUsingGET(active, audience, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listBillingSubscriptions
         * @param {number} userId userId
         * @param {boolean} [includeInactive] includeInactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBillingSubscriptionsUsingGET(userId: number, includeInactive?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBillingSubscriptionsResponse>> {
            const localVarAxiosArgs = await RecurringBillingControllerApiAxiosParamCreator(configuration).listBillingSubscriptionsUsingGET(userId, includeInactive, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listSubscriptionInvoices
         * @param {string} id id
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionInvoicesUsingGET(id: string, userId: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSubscriptionInvoicesResponse>> {
            const localVarAxiosArgs = await RecurringBillingControllerApiAxiosParamCreator(configuration).listSubscriptionInvoicesUsingGET(id, userId, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RecurringBillingControllerApi - factory interface
 * @export
 */
export const RecurringBillingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary cancelBillingSubscription
         * @param {string} id id
         * @param {string} userId userId
         * @param {boolean} [isProrated] isProrated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBillingSubscriptionUsingDELETE(id: string, userId: string, isProrated?: boolean, options?: any): AxiosPromise<CancelBillingSubscriptionResponse> {
            return RecurringBillingControllerApiFp(configuration).cancelBillingSubscriptionUsingDELETE(id, userId, isProrated, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createBillingSubscription
         * @param {number} userId userId
         * @param {CreateBillingSubscriptionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionUsingPOST(userId: number, request: CreateBillingSubscriptionRequest, options?: any): AxiosPromise<CreateBillingSubscriptionResponse> {
            return RecurringBillingControllerApiFp(configuration).createBillingSubscriptionUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listBillingProducts
         * @param {boolean} [active] active
         * @param {string} [audience] audience
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingProductsUsingGET(active?: boolean, audience?: string, limit?: number, options?: any): AxiosPromise<ListBillingProductsResponse> {
            return RecurringBillingControllerApiFp(configuration).listBillingProductsUsingGET(active, audience, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listBillingSubscriptions
         * @param {number} userId userId
         * @param {boolean} [includeInactive] includeInactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptionsUsingGET(userId: number, includeInactive?: boolean, options?: any): AxiosPromise<ListBillingSubscriptionsResponse> {
            return RecurringBillingControllerApiFp(configuration).listBillingSubscriptionsUsingGET(userId, includeInactive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listSubscriptionInvoices
         * @param {string} id id
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionInvoicesUsingGET(id: string, userId: number, limit?: number, options?: any): AxiosPromise<ListSubscriptionInvoicesResponse> {
            return RecurringBillingControllerApiFp(configuration).listSubscriptionInvoicesUsingGET(id, userId, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecurringBillingControllerApi - object-oriented interface
 * @export
 * @class RecurringBillingControllerApi
 * @extends {BaseAPI}
 */
export class RecurringBillingControllerApi extends BaseAPI {
    /**
     * 
     * @summary cancelBillingSubscription
     * @param {string} id id
     * @param {string} userId userId
     * @param {boolean} [isProrated] isProrated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    public cancelBillingSubscriptionUsingDELETE(id: string, userId: string, isProrated?: boolean, options?: any) {
        return RecurringBillingControllerApiFp(this.configuration).cancelBillingSubscriptionUsingDELETE(id, userId, isProrated, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createBillingSubscription
     * @param {number} userId userId
     * @param {CreateBillingSubscriptionRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    public createBillingSubscriptionUsingPOST(userId: number, request: CreateBillingSubscriptionRequest, options?: any) {
        return RecurringBillingControllerApiFp(this.configuration).createBillingSubscriptionUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listBillingProducts
     * @param {boolean} [active] active
     * @param {string} [audience] audience
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    public listBillingProductsUsingGET(active?: boolean, audience?: string, limit?: number, options?: any) {
        return RecurringBillingControllerApiFp(this.configuration).listBillingProductsUsingGET(active, audience, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listBillingSubscriptions
     * @param {number} userId userId
     * @param {boolean} [includeInactive] includeInactive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    public listBillingSubscriptionsUsingGET(userId: number, includeInactive?: boolean, options?: any) {
        return RecurringBillingControllerApiFp(this.configuration).listBillingSubscriptionsUsingGET(userId, includeInactive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listSubscriptionInvoices
     * @param {string} id id
     * @param {number} userId userId
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    public listSubscriptionInvoicesUsingGET(id: string, userId: number, limit?: number, options?: any) {
        return RecurringBillingControllerApiFp(this.configuration).listSubscriptionInvoicesUsingGET(id, userId, limit, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * RefLinkControllerApi - axios parameter creator
 * @export
 */
export const RefLinkControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getRefLinksForUser
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefLinksForUserUsingGET: async (userIdString: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdString' is not null or undefined
            if (userIdString === null || userIdString === undefined) {
                throw new RequiredError('userIdString','Required parameter userIdString was null or undefined when calling getRefLinksForUserUsingGET.');
            }
            const localVarPath = `/api/v1/reflinks/{userIdString}`
                .replace(`{${"userIdString"}}`, encodeURIComponent(String(userIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefLinkControllerApi - functional programming interface
 * @export
 */
export const RefLinkControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getRefLinksForUser
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefLinksForUserUsingGET(userIdString: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserRefLinksResponse>> {
            const localVarAxiosArgs = await RefLinkControllerApiAxiosParamCreator(configuration).getRefLinksForUserUsingGET(userIdString, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RefLinkControllerApi - factory interface
 * @export
 */
export const RefLinkControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getRefLinksForUser
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefLinksForUserUsingGET(userIdString: string, options?: any): AxiosPromise<GetUserRefLinksResponse> {
            return RefLinkControllerApiFp(configuration).getRefLinksForUserUsingGET(userIdString, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefLinkControllerApi - object-oriented interface
 * @export
 * @class RefLinkControllerApi
 * @extends {BaseAPI}
 */
export class RefLinkControllerApi extends BaseAPI {
    /**
     * 
     * @summary getRefLinksForUser
     * @param {string} userIdString userIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefLinkControllerApi
     */
    public getRefLinksForUserUsingGET(userIdString: string, options?: any) {
        return RefLinkControllerApiFp(this.configuration).getRefLinksForUserUsingGET(userIdString, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ReferralCodeControllerApi - axios parameter creator
 * @export
 */
export const ReferralCodeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Only for admins. This will approve and activate a given referral code
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveReferralCodeUsingPUT: async (codeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            if (codeId === null || codeId === undefined) {
                throw new RequiredError('codeId','Required parameter codeId was null or undefined when calling approveReferralCodeUsingPUT.');
            }
            const localVarPath = `/api/v1/referrals/codes/{codeId}/approve`
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
         * @param {CreateReferralCodeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReferralCodeUsingPOST: async (request: CreateReferralCodeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling generateReferralCodeUsingPOST.');
            }
            const localVarPath = `/api/v1/referrals/codes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReferralCode
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodeUsingGET: async (codeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            if (codeId === null || codeId === undefined) {
                throw new RequiredError('codeId','Required parameter codeId was null or undefined when calling getReferralCodeUsingGET.');
            }
            const localVarPath = `/api/v1/referrals/codes/{codeId}`
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getReferralCodes
         * @param {boolean} [isActive] isActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodesUsingGET: async (isActive?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/referrals/codes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary markCodeAsInactive
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCodeAsInactiveUsingDELETE: async (codeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            if (codeId === null || codeId === undefined) {
                throw new RequiredError('codeId','Required parameter codeId was null or undefined when calling markCodeAsInactiveUsingDELETE.');
            }
            const localVarPath = `/api/v1/referrals/codes/{codeId}`
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferralCodeUsingGET: async (codeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            if (codeId === null || codeId === undefined) {
                throw new RequiredError('codeId','Required parameter codeId was null or undefined when calling validateReferralCodeUsingGET.');
            }
            const localVarPath = `/api/v1/referrals/codes/{codeId}/validate`
                .replace(`{${"codeId"}}`, encodeURIComponent(String(codeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralCodeControllerApi - functional programming interface
 * @export
 */
export const ReferralCodeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Only for admins. This will approve and activate a given referral code
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveReferralCodeUsingPUT(codeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ReferralCodeControllerApiAxiosParamCreator(configuration).approveReferralCodeUsingPUT(codeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
         * @param {CreateReferralCodeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateReferralCodeUsingPOST(request: CreateReferralCodeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReferralCodeResponse>> {
            const localVarAxiosArgs = await ReferralCodeControllerApiAxiosParamCreator(configuration).generateReferralCodeUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getReferralCode
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferralCodeUsingGET(codeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferralCodeResponse>> {
            const localVarAxiosArgs = await ReferralCodeControllerApiAxiosParamCreator(configuration).getReferralCodeUsingGET(codeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getReferralCodes
         * @param {boolean} [isActive] isActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferralCodesUsingGET(isActive?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferralCodesResponse>> {
            const localVarAxiosArgs = await ReferralCodeControllerApiAxiosParamCreator(configuration).getReferralCodesUsingGET(isActive, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary markCodeAsInactive
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markCodeAsInactiveUsingDELETE(codeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ReferralCodeControllerApiAxiosParamCreator(configuration).markCodeAsInactiveUsingDELETE(codeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateReferralCodeUsingGET(codeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferralCodeResponse>> {
            const localVarAxiosArgs = await ReferralCodeControllerApiAxiosParamCreator(configuration).validateReferralCodeUsingGET(codeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReferralCodeControllerApi - factory interface
 * @export
 */
export const ReferralCodeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Only for admins. This will approve and activate a given referral code
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveReferralCodeUsingPUT(codeId: string, options?: any): AxiosPromise<void> {
            return ReferralCodeControllerApiFp(configuration).approveReferralCodeUsingPUT(codeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
         * @param {CreateReferralCodeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReferralCodeUsingPOST(request: CreateReferralCodeRequest, options?: any): AxiosPromise<CreateReferralCodeResponse> {
            return ReferralCodeControllerApiFp(configuration).generateReferralCodeUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReferralCode
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodeUsingGET(codeId: string, options?: any): AxiosPromise<GetReferralCodeResponse> {
            return ReferralCodeControllerApiFp(configuration).getReferralCodeUsingGET(codeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getReferralCodes
         * @param {boolean} [isActive] isActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodesUsingGET(isActive?: boolean, options?: any): AxiosPromise<GetReferralCodesResponse> {
            return ReferralCodeControllerApiFp(configuration).getReferralCodesUsingGET(isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary markCodeAsInactive
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCodeAsInactiveUsingDELETE(codeId: string, options?: any): AxiosPromise<void> {
            return ReferralCodeControllerApiFp(configuration).markCodeAsInactiveUsingDELETE(codeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferralCodeUsingGET(codeId: string, options?: any): AxiosPromise<GetReferralCodeResponse> {
            return ReferralCodeControllerApiFp(configuration).validateReferralCodeUsingGET(codeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferralCodeControllerApi - object-oriented interface
 * @export
 * @class ReferralCodeControllerApi
 * @extends {BaseAPI}
 */
export class ReferralCodeControllerApi extends BaseAPI {
    /**
     * 
     * @summary Only for admins. This will approve and activate a given referral code
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    public approveReferralCodeUsingPUT(codeId: string, options?: any) {
        return ReferralCodeControllerApiFp(this.configuration).approveReferralCodeUsingPUT(codeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
     * @param {CreateReferralCodeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    public generateReferralCodeUsingPOST(request: CreateReferralCodeRequest, options?: any) {
        return ReferralCodeControllerApiFp(this.configuration).generateReferralCodeUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReferralCode
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    public getReferralCodeUsingGET(codeId: string, options?: any) {
        return ReferralCodeControllerApiFp(this.configuration).getReferralCodeUsingGET(codeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getReferralCodes
     * @param {boolean} [isActive] isActive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    public getReferralCodesUsingGET(isActive?: boolean, options?: any) {
        return ReferralCodeControllerApiFp(this.configuration).getReferralCodesUsingGET(isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary markCodeAsInactive
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    public markCodeAsInactiveUsingDELETE(codeId: string, options?: any) {
        return ReferralCodeControllerApiFp(this.configuration).markCodeAsInactiveUsingDELETE(codeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    public validateReferralCodeUsingGET(codeId: string, options?: any) {
        return ReferralCodeControllerApiFp(this.configuration).validateReferralCodeUsingGET(codeId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ReferralControllerApi - axios parameter creator
 * @export
 */
export const ReferralControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getReferralHistory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralHistoryUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/referrals`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listReferrals
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralsUsingGET: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling listReferralsUsingGET.');
            }
            const localVarPath = `/api/v2/referrals`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary publishReferralContacts
         * @param {PublishReferralRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishReferralContactsUsingPOST: async (request: PublishReferralRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling publishReferralContactsUsingPOST.');
            }
            const localVarPath = `/api/v1/referrals/contacts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralControllerApi - functional programming interface
 * @export
 */
export const ReferralControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getReferralHistory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferralHistoryUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReferralsHistoryResponse>> {
            const localVarAxiosArgs = await ReferralControllerApiAxiosParamCreator(configuration).getReferralHistoryUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listReferrals
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReferralsUsingGET(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReferralsResponse>> {
            const localVarAxiosArgs = await ReferralControllerApiAxiosParamCreator(configuration).listReferralsUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary publishReferralContacts
         * @param {PublishReferralRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishReferralContactsUsingPOST(request: PublishReferralRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishReferralContactsResponse>> {
            const localVarAxiosArgs = await ReferralControllerApiAxiosParamCreator(configuration).publishReferralContactsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReferralControllerApi - factory interface
 * @export
 */
export const ReferralControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getReferralHistory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralHistoryUsingGET(options?: any): AxiosPromise<GetReferralsHistoryResponse> {
            return ReferralControllerApiFp(configuration).getReferralHistoryUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listReferrals
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralsUsingGET(userId: number, options?: any): AxiosPromise<ListReferralsResponse> {
            return ReferralControllerApiFp(configuration).listReferralsUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary publishReferralContacts
         * @param {PublishReferralRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishReferralContactsUsingPOST(request: PublishReferralRequest, options?: any): AxiosPromise<PublishReferralContactsResponse> {
            return ReferralControllerApiFp(configuration).publishReferralContactsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferralControllerApi - object-oriented interface
 * @export
 * @class ReferralControllerApi
 * @extends {BaseAPI}
 */
export class ReferralControllerApi extends BaseAPI {
    /**
     * 
     * @summary getReferralHistory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralControllerApi
     */
    public getReferralHistoryUsingGET(options?: any) {
        return ReferralControllerApiFp(this.configuration).getReferralHistoryUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listReferrals
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralControllerApi
     */
    public listReferralsUsingGET(userId: number, options?: any) {
        return ReferralControllerApiFp(this.configuration).listReferralsUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary publishReferralContacts
     * @param {PublishReferralRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralControllerApi
     */
    public publishReferralContactsUsingPOST(request: PublishReferralRequest, options?: any) {
        return ReferralControllerApiFp(this.configuration).publishReferralContactsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ReferralSourceControllerApi - axios parameter creator
 * @export
 */
export const ReferralSourceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUserReferralSourceTypes
         * @param {'ALL' | 'ENABLED'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReferralSourceTypesUsingGET: async (flavor?: 'ALL' | 'ENABLED', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/referrals/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flavor !== undefined) {
                localVarQueryParameter['flavor'] = flavor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setReferralSource
         * @param {SetReferralSourceRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setReferralSourceUsingPOST: async (request: SetReferralSourceRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling setReferralSourceUsingPOST.');
            }
            const localVarPath = `/api/v1/referrals/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralSourceControllerApi - functional programming interface
 * @export
 */
export const ReferralSourceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUserReferralSourceTypes
         * @param {'ALL' | 'ENABLED'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserReferralSourceTypesUsingGET(flavor?: 'ALL' | 'ENABLED', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserReferralSourceTypesResponse>> {
            const localVarAxiosArgs = await ReferralSourceControllerApiAxiosParamCreator(configuration).getUserReferralSourceTypesUsingGET(flavor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setReferralSource
         * @param {SetReferralSourceRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setReferralSourceUsingPOST(request: SetReferralSourceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterNewUserResponse>> {
            const localVarAxiosArgs = await ReferralSourceControllerApiAxiosParamCreator(configuration).setReferralSourceUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReferralSourceControllerApi - factory interface
 * @export
 */
export const ReferralSourceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getUserReferralSourceTypes
         * @param {'ALL' | 'ENABLED'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReferralSourceTypesUsingGET(flavor?: 'ALL' | 'ENABLED', options?: any): AxiosPromise<GetUserReferralSourceTypesResponse> {
            return ReferralSourceControllerApiFp(configuration).getUserReferralSourceTypesUsingGET(flavor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setReferralSource
         * @param {SetReferralSourceRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setReferralSourceUsingPOST(request: SetReferralSourceRequest, options?: any): AxiosPromise<RegisterNewUserResponse> {
            return ReferralSourceControllerApiFp(configuration).setReferralSourceUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferralSourceControllerApi - object-oriented interface
 * @export
 * @class ReferralSourceControllerApi
 * @extends {BaseAPI}
 */
export class ReferralSourceControllerApi extends BaseAPI {
    /**
     * 
     * @summary getUserReferralSourceTypes
     * @param {'ALL' | 'ENABLED'} [flavor] flavor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralSourceControllerApi
     */
    public getUserReferralSourceTypesUsingGET(flavor?: 'ALL' | 'ENABLED', options?: any) {
        return ReferralSourceControllerApiFp(this.configuration).getUserReferralSourceTypesUsingGET(flavor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setReferralSource
     * @param {SetReferralSourceRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralSourceControllerApi
     */
    public setReferralSourceUsingPOST(request: SetReferralSourceRequest, options?: any) {
        return ReferralSourceControllerApiFp(this.configuration).setReferralSourceUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * RefundEligibilityControllerApi - axios parameter creator
 * @export
 */
export const RefundEligibilityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary isRefundEligible
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundEligibleUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling isRefundEligibleUsingGET.');
            }
            const localVarPath = `/api/v1/cases/{caseId}/refund/eligibility`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefundEligibilityControllerApi - functional programming interface
 * @export
 */
export const RefundEligibilityControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary isRefundEligible
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isRefundEligibleUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsRefundEligibleResponse>> {
            const localVarAxiosArgs = await RefundEligibilityControllerApiAxiosParamCreator(configuration).isRefundEligibleUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RefundEligibilityControllerApi - factory interface
 * @export
 */
export const RefundEligibilityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary isRefundEligible
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundEligibleUsingGET(caseId: string, options?: any): AxiosPromise<IsRefundEligibleResponse> {
            return RefundEligibilityControllerApiFp(configuration).isRefundEligibleUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefundEligibilityControllerApi - object-oriented interface
 * @export
 * @class RefundEligibilityControllerApi
 * @extends {BaseAPI}
 */
export class RefundEligibilityControllerApi extends BaseAPI {
    /**
     * 
     * @summary isRefundEligible
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundEligibilityControllerApi
     */
    public isRefundEligibleUsingGET(caseId: string, options?: any) {
        return RefundEligibilityControllerApiFp(this.configuration).isRefundEligibleUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * RegistrationControllerApi - axios parameter creator
 * @export
 */
export const RegistrationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary registerNewUser
         * @param {RegisterNewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewUserUsingPOST: async (request: RegisterNewUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling registerNewUserUsingPOST.');
            }
            const localVarPath = `/api/v1/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateBranchLinksForAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBranchLinksForAllUsersUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/tools/updateBranchLinksForAllUsers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationControllerApi - functional programming interface
 * @export
 */
export const RegistrationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary registerNewUser
         * @param {RegisterNewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerNewUserUsingPOST(request: RegisterNewUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterNewUserResponse>> {
            const localVarAxiosArgs = await RegistrationControllerApiAxiosParamCreator(configuration).registerNewUserUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateBranchLinksForAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBranchLinksForAllUsersUsingPOST(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await RegistrationControllerApiAxiosParamCreator(configuration).updateBranchLinksForAllUsersUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RegistrationControllerApi - factory interface
 * @export
 */
export const RegistrationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary registerNewUser
         * @param {RegisterNewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewUserUsingPOST(request: RegisterNewUserRequest, options?: any): AxiosPromise<RegisterNewUserResponse> {
            return RegistrationControllerApiFp(configuration).registerNewUserUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateBranchLinksForAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBranchLinksForAllUsersUsingPOST(options?: any): AxiosPromise<object> {
            return RegistrationControllerApiFp(configuration).updateBranchLinksForAllUsersUsingPOST(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationControllerApi - object-oriented interface
 * @export
 * @class RegistrationControllerApi
 * @extends {BaseAPI}
 */
export class RegistrationControllerApi extends BaseAPI {
    /**
     * 
     * @summary registerNewUser
     * @param {RegisterNewUserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public registerNewUserUsingPOST(request: RegisterNewUserRequest, options?: any) {
        return RegistrationControllerApiFp(this.configuration).registerNewUserUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateBranchLinksForAllUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public updateBranchLinksForAllUsersUsingPOST(options?: any) {
        return RegistrationControllerApiFp(this.configuration).updateBranchLinksForAllUsersUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ReportingControllerApi - axios parameter creator
 * @export
 */
export const ReportingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCourtCoverageForCountyReport
         * @param {number} countyId countyId
         * @param {string} regionCode regionCode
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForCountyReportUsingGET: async (countyId: number, regionCode: string, urWindowInDays?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'countyId' is not null or undefined
            if (countyId === null || countyId === undefined) {
                throw new RequiredError('countyId','Required parameter countyId was null or undefined when calling getCourtCoverageForCountyReportUsingGET.');
            }
            // verify required parameter 'regionCode' is not null or undefined
            if (regionCode === null || regionCode === undefined) {
                throw new RequiredError('regionCode','Required parameter regionCode was null or undefined when calling getCourtCoverageForCountyReportUsingGET.');
            }
            const localVarPath = `/api/v1/reports/court-coverage/{regionCode}/{countyId}`
                .replace(`{${"countyId"}}`, encodeURIComponent(String(countyId)))
                .replace(`{${"regionCode"}}`, encodeURIComponent(String(regionCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (urWindowInDays !== undefined) {
                localVarQueryParameter['urWindowInDays'] = urWindowInDays;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCourtCoverageForStateReport
         * @param {string} regionCode regionCode
         * @param {number} [countyId] countyId
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForStateReportUsingGET: async (regionCode: string, countyId?: number, urWindowInDays?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionCode' is not null or undefined
            if (regionCode === null || regionCode === undefined) {
                throw new RequiredError('regionCode','Required parameter regionCode was null or undefined when calling getCourtCoverageForStateReportUsingGET.');
            }
            const localVarPath = `/api/v1/reports/court-coverage/{regionCode}`
                .replace(`{${"regionCode"}}`, encodeURIComponent(String(regionCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countyId !== undefined) {
                localVarQueryParameter['countyId'] = countyId;
            }

            if (urWindowInDays !== undefined) {
                localVarQueryParameter['urWindowInDays'] = urWindowInDays;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCourtCoverageReport
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageReportUsingGET: async (urWindowInDays?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reports/court-coverage`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (urWindowInDays !== undefined) {
                localVarQueryParameter['urWindowInDays'] = urWindowInDays;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLawfirmCoverageReport
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageReportUsingGET: async (countyId?: number, regionCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reports/court-coverage/lawfirms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countyId !== undefined) {
                localVarQueryParameter['countyId'] = countyId;
            }

            if (regionCode !== undefined) {
                localVarQueryParameter['regionCode'] = regionCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportingControllerApi - functional programming interface
 * @export
 */
export const ReportingControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getCourtCoverageForCountyReport
         * @param {number} countyId countyId
         * @param {string} regionCode regionCode
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtCoverageForCountyReportUsingGET(countyId: number, regionCode: string, urWindowInDays?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCourtCoverageForCountyReportResponse>> {
            const localVarAxiosArgs = await ReportingControllerApiAxiosParamCreator(configuration).getCourtCoverageForCountyReportUsingGET(countyId, regionCode, urWindowInDays, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCourtCoverageForStateReport
         * @param {string} regionCode regionCode
         * @param {number} [countyId] countyId
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtCoverageForStateReportUsingGET(regionCode: string, countyId?: number, urWindowInDays?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCourtCoverageForStateReportResponse>> {
            const localVarAxiosArgs = await ReportingControllerApiAxiosParamCreator(configuration).getCourtCoverageForStateReportUsingGET(regionCode, countyId, urWindowInDays, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCourtCoverageReport
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourtCoverageReportUsingGET(urWindowInDays?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCourtCoverageReportResponse>> {
            const localVarAxiosArgs = await ReportingControllerApiAxiosParamCreator(configuration).getCourtCoverageReportUsingGET(urWindowInDays, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLawfirmCoverageReport
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmCoverageReportUsingGET(countyId?: number, regionCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmCoverageReportResponse>> {
            const localVarAxiosArgs = await ReportingControllerApiAxiosParamCreator(configuration).getLawfirmCoverageReportUsingGET(countyId, regionCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportingControllerApi - factory interface
 * @export
 */
export const ReportingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getCourtCoverageForCountyReport
         * @param {number} countyId countyId
         * @param {string} regionCode regionCode
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForCountyReportUsingGET(countyId: number, regionCode: string, urWindowInDays?: number, options?: any): AxiosPromise<GetCourtCoverageForCountyReportResponse> {
            return ReportingControllerApiFp(configuration).getCourtCoverageForCountyReportUsingGET(countyId, regionCode, urWindowInDays, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCourtCoverageForStateReport
         * @param {string} regionCode regionCode
         * @param {number} [countyId] countyId
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForStateReportUsingGET(regionCode: string, countyId?: number, urWindowInDays?: number, options?: any): AxiosPromise<GetCourtCoverageForStateReportResponse> {
            return ReportingControllerApiFp(configuration).getCourtCoverageForStateReportUsingGET(regionCode, countyId, urWindowInDays, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCourtCoverageReport
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageReportUsingGET(urWindowInDays?: number, options?: any): AxiosPromise<GetCourtCoverageReportResponse> {
            return ReportingControllerApiFp(configuration).getCourtCoverageReportUsingGET(urWindowInDays, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLawfirmCoverageReport
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageReportUsingGET(countyId?: number, regionCode?: string, options?: any): AxiosPromise<GetLawfirmCoverageReportResponse> {
            return ReportingControllerApiFp(configuration).getLawfirmCoverageReportUsingGET(countyId, regionCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportingControllerApi - object-oriented interface
 * @export
 * @class ReportingControllerApi
 * @extends {BaseAPI}
 */
export class ReportingControllerApi extends BaseAPI {
    /**
     * 
     * @summary getCourtCoverageForCountyReport
     * @param {number} countyId countyId
     * @param {string} regionCode regionCode
     * @param {number} [urWindowInDays] urWindowInDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    public getCourtCoverageForCountyReportUsingGET(countyId: number, regionCode: string, urWindowInDays?: number, options?: any) {
        return ReportingControllerApiFp(this.configuration).getCourtCoverageForCountyReportUsingGET(countyId, regionCode, urWindowInDays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCourtCoverageForStateReport
     * @param {string} regionCode regionCode
     * @param {number} [countyId] countyId
     * @param {number} [urWindowInDays] urWindowInDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    public getCourtCoverageForStateReportUsingGET(regionCode: string, countyId?: number, urWindowInDays?: number, options?: any) {
        return ReportingControllerApiFp(this.configuration).getCourtCoverageForStateReportUsingGET(regionCode, countyId, urWindowInDays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCourtCoverageReport
     * @param {number} [urWindowInDays] urWindowInDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    public getCourtCoverageReportUsingGET(urWindowInDays?: number, options?: any) {
        return ReportingControllerApiFp(this.configuration).getCourtCoverageReportUsingGET(urWindowInDays, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLawfirmCoverageReport
     * @param {number} [countyId] countyId
     * @param {string} [regionCode] regionCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    public getLawfirmCoverageReportUsingGET(countyId?: number, regionCode?: string, options?: any) {
        return ReportingControllerApiFp(this.configuration).getLawfirmCoverageReportUsingGET(countyId, regionCode, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ScheduledTaskControllerApi - axios parameter creator
 * @export
 */
export const ScheduledTaskControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteScheduledTask
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledTaskUsingDELETE: async (taskId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling deleteScheduledTaskUsingDELETE.');
            }
            const localVarPath = `/api/v1/scheduled-tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getScheduledTasks
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTasksUsingGET: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getScheduledTasksUsingGET.');
            }
            const localVarPath = `/api/v1/scheduled-tasks/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary rescheduleTask
         * @param {string} taskId taskId
         * @param {RescheduleTaskRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleTaskUsingPUT: async (taskId: string, request: RescheduleTaskRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling rescheduleTaskUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling rescheduleTaskUsingPUT.');
            }
            const localVarPath = `/api/v1/scheduled-tasks/{taskId}/reschedule`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduledTaskControllerApi - functional programming interface
 * @export
 */
export const ScheduledTaskControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteScheduledTask
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduledTaskUsingDELETE(taskId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledTaskGetResponse>> {
            const localVarAxiosArgs = await ScheduledTaskControllerApiAxiosParamCreator(configuration).deleteScheduledTaskUsingDELETE(taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getScheduledTasks
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduledTasksUsingGET(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledTaskGetResponse>> {
            const localVarAxiosArgs = await ScheduledTaskControllerApiAxiosParamCreator(configuration).getScheduledTasksUsingGET(caseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary rescheduleTask
         * @param {string} taskId taskId
         * @param {RescheduleTaskRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescheduleTaskUsingPUT(taskId: string, request: RescheduleTaskRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ScheduledTaskControllerApiAxiosParamCreator(configuration).rescheduleTaskUsingPUT(taskId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ScheduledTaskControllerApi - factory interface
 * @export
 */
export const ScheduledTaskControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary deleteScheduledTask
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledTaskUsingDELETE(taskId: number, options?: any): AxiosPromise<ScheduledTaskGetResponse> {
            return ScheduledTaskControllerApiFp(configuration).deleteScheduledTaskUsingDELETE(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getScheduledTasks
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTasksUsingGET(caseId: string, options?: any): AxiosPromise<ScheduledTaskGetResponse> {
            return ScheduledTaskControllerApiFp(configuration).getScheduledTasksUsingGET(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary rescheduleTask
         * @param {string} taskId taskId
         * @param {RescheduleTaskRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleTaskUsingPUT(taskId: string, request: RescheduleTaskRequest, options?: any): AxiosPromise<void> {
            return ScheduledTaskControllerApiFp(configuration).rescheduleTaskUsingPUT(taskId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduledTaskControllerApi - object-oriented interface
 * @export
 * @class ScheduledTaskControllerApi
 * @extends {BaseAPI}
 */
export class ScheduledTaskControllerApi extends BaseAPI {
    /**
     * 
     * @summary deleteScheduledTask
     * @param {number} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskControllerApi
     */
    public deleteScheduledTaskUsingDELETE(taskId: number, options?: any) {
        return ScheduledTaskControllerApiFp(this.configuration).deleteScheduledTaskUsingDELETE(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getScheduledTasks
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskControllerApi
     */
    public getScheduledTasksUsingGET(caseId: string, options?: any) {
        return ScheduledTaskControllerApiFp(this.configuration).getScheduledTasksUsingGET(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary rescheduleTask
     * @param {string} taskId taskId
     * @param {RescheduleTaskRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskControllerApi
     */
    public rescheduleTaskUsingPUT(taskId: string, request: RescheduleTaskRequest, options?: any) {
        return ScheduledTaskControllerApiFp(this.configuration).rescheduleTaskUsingPUT(taskId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * SnsListenerControllerApi - axios parameter creator
 * @export
 */
export const SnsListenerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleBounceComplaintEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceComplaintEmailsUsingPOST: async (request: SNSNotificationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling handleBounceComplaintEmailsUsingPOST.');
            }
            const localVarPath = `/api/v1/blacklists/ses/emails/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handleIncomingEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleIncomingEmailsUsingPOST: async (request: SNSNotificationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling handleIncomingEmailsUsingPOST.');
            }
            const localVarPath = `/api/v1/ses/inbound-emails`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnsListenerControllerApi - functional programming interface
 * @export
 */
export const SnsListenerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleBounceComplaintEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleBounceComplaintEmailsUsingPOST(request: SNSNotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await SnsListenerControllerApiAxiosParamCreator(configuration).handleBounceComplaintEmailsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary handleIncomingEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleIncomingEmailsUsingPOST(request: SNSNotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SnsListenerControllerApiAxiosParamCreator(configuration).handleIncomingEmailsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SnsListenerControllerApi - factory interface
 * @export
 */
export const SnsListenerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary handleBounceComplaintEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceComplaintEmailsUsingPOST(request: SNSNotificationRequest, options?: any): AxiosPromise<object> {
            return SnsListenerControllerApiFp(configuration).handleBounceComplaintEmailsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handleIncomingEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleIncomingEmailsUsingPOST(request: SNSNotificationRequest, options?: any): AxiosPromise<void> {
            return SnsListenerControllerApiFp(configuration).handleIncomingEmailsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SnsListenerControllerApi - object-oriented interface
 * @export
 * @class SnsListenerControllerApi
 * @extends {BaseAPI}
 */
export class SnsListenerControllerApi extends BaseAPI {
    /**
     * 
     * @summary handleBounceComplaintEmails
     * @param {SNSNotificationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnsListenerControllerApi
     */
    public handleBounceComplaintEmailsUsingPOST(request: SNSNotificationRequest, options?: any) {
        return SnsListenerControllerApiFp(this.configuration).handleBounceComplaintEmailsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handleIncomingEmails
     * @param {SNSNotificationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnsListenerControllerApi
     */
    public handleIncomingEmailsUsingPOST(request: SNSNotificationRequest, options?: any) {
        return SnsListenerControllerApiFp(this.configuration).handleIncomingEmailsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * SocialLoginControllerApi - axios parameter creator
 * @export
 */
export const SocialLoginControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary appleConnect
         * @param {AppleLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleConnectUsingPOST: async (request: AppleLoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling appleConnectUsingPOST.');
            }
            const localVarPath = `/api/v1/connect/apple`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary facebookConnect
         * @param {string} providerId providerId
         * @param {SocialLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facebookConnectUsingPOST: async (providerId: string, request: SocialLoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            if (providerId === null || providerId === undefined) {
                throw new RequiredError('providerId','Required parameter providerId was null or undefined when calling facebookConnectUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling facebookConnectUsingPOST.');
            }
            const localVarPath = `/api/v1/connect/{providerId}`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocialLoginControllerApi - functional programming interface
 * @export
 */
export const SocialLoginControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary appleConnect
         * @param {AppleLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appleConnectUsingPOST(request: AppleLoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SocialLoginResponse>> {
            const localVarAxiosArgs = await SocialLoginControllerApiAxiosParamCreator(configuration).appleConnectUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary facebookConnect
         * @param {string} providerId providerId
         * @param {SocialLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facebookConnectUsingPOST(providerId: string, request: SocialLoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SocialLoginResponse>> {
            const localVarAxiosArgs = await SocialLoginControllerApiAxiosParamCreator(configuration).facebookConnectUsingPOST(providerId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SocialLoginControllerApi - factory interface
 * @export
 */
export const SocialLoginControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary appleConnect
         * @param {AppleLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleConnectUsingPOST(request: AppleLoginRequest, options?: any): AxiosPromise<SocialLoginResponse> {
            return SocialLoginControllerApiFp(configuration).appleConnectUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary facebookConnect
         * @param {string} providerId providerId
         * @param {SocialLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facebookConnectUsingPOST(providerId: string, request: SocialLoginRequest, options?: any): AxiosPromise<SocialLoginResponse> {
            return SocialLoginControllerApiFp(configuration).facebookConnectUsingPOST(providerId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SocialLoginControllerApi - object-oriented interface
 * @export
 * @class SocialLoginControllerApi
 * @extends {BaseAPI}
 */
export class SocialLoginControllerApi extends BaseAPI {
    /**
     * 
     * @summary appleConnect
     * @param {AppleLoginRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialLoginControllerApi
     */
    public appleConnectUsingPOST(request: AppleLoginRequest, options?: any) {
        return SocialLoginControllerApiFp(this.configuration).appleConnectUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary facebookConnect
     * @param {string} providerId providerId
     * @param {SocialLoginRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialLoginControllerApi
     */
    public facebookConnectUsingPOST(providerId: string, request: SocialLoginRequest, options?: any) {
        return SocialLoginControllerApiFp(this.configuration).facebookConnectUsingPOST(providerId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * StripeCardControllerApi - axios parameter creator
 * @export
 */
export const StripeCardControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addACHToLawfirmStripeAccount
         * @param {string} lawfirmId lawfirmId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToLawfirmStripeAccountUsingPOST: async (lawfirmId: string, request: AddACHToStripeAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/stripe/ach`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addACHToUserStripeAccount
         * @param {string} userId userId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToUserStripeAccountUsingPOST: async (userId: string, request: AddACHToStripeAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
            }
            const localVarPath = `/api/v1/users/{userId}/stripe/ach`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addCardToStripeAccount
         * @param {AddCardToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToStripeAccountUsingPOST: async (request: AddCardToStripeAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addCardToStripeAccountUsingPOST.');
            }
            const localVarPath = `/api/v1/users/stripe/account/cards`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteBankAccountFromLawfirmStripeAccount
         * @param {string} bankAccountId bankAccountId
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccountFromLawfirmStripeAccountUsingDELETE: async (bankAccountId: string, lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountId' is not null or undefined
            if (bankAccountId === null || bankAccountId === undefined) {
                throw new RequiredError('bankAccountId','Required parameter bankAccountId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
            }
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/stripe/bank-accounts/{bankAccountId}`
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)))
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCardForUser
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardForUserUsingDELETE: async (cardId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling deleteCardForUserUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteCardForUserUsingDELETE.');
            }
            const localVarPath = `/api/v1/users/{userId}/stripe/account/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardUsingDELETE: async (cardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling deleteCardUsingDELETE.');
            }
            const localVarPath = `/api/v1/users/stripe/account/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsingGET: async (cardId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling getCardUsingGET.');
            }
            const localVarPath = `/api/v1/users/stripe/account/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPaymentMethodsUsingGET: async (lawfirmId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling getLawfirmPaymentMethodsUsingGET.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/paymentmethods`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all the payment methods available on the user\'s Stripe account.
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForUserUsingGET: async (userIdString: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdString' is not null or undefined
            if (userIdString === null || userIdString === undefined) {
                throw new RequiredError('userIdString','Required parameter userIdString was null or undefined when calling getPaymentMethodsForUserUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userIdString}/paymentmethods`
                .replace(`{${"userIdString"}}`, encodeURIComponent(String(userIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setCardAsPrimary
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCardAsPrimaryUsingPUT: async (cardId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            if (cardId === null || cardId === undefined) {
                throw new RequiredError('cardId','Required parameter cardId was null or undefined when calling setCardAsPrimaryUsingPUT.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling setCardAsPrimaryUsingPUT.');
            }
            const localVarPath = `/api/v1/users/{userId}/account/cards/{cardId}/primary`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setDefaultPaymentMethodForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripePaymentSourceId stripePaymentSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultPaymentMethodForLawfirmUsingPUT: async (lawfirmId: number, stripePaymentSourceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lawfirmId' is not null or undefined
            if (lawfirmId === null || lawfirmId === undefined) {
                throw new RequiredError('lawfirmId','Required parameter lawfirmId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
            }
            // verify required parameter 'stripePaymentSourceId' is not null or undefined
            if (stripePaymentSourceId === null || stripePaymentSourceId === undefined) {
                throw new RequiredError('stripePaymentSourceId','Required parameter stripePaymentSourceId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
            }
            const localVarPath = `/api/v1/lawfirms/{lawfirmId}/stripe/payment-methods/default`
                .replace(`{${"lawfirmId"}}`, encodeURIComponent(String(lawfirmId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (stripePaymentSourceId !== undefined) {
                localVarQueryParameter['stripePaymentSourceId'] = stripePaymentSourceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeCardControllerApi - functional programming interface
 * @export
 */
export const StripeCardControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addACHToLawfirmStripeAccount
         * @param {string} lawfirmId lawfirmId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addACHToLawfirmStripeAccountUsingPOST(lawfirmId: string, request: AddACHToStripeAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).addACHToLawfirmStripeAccountUsingPOST(lawfirmId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary addACHToUserStripeAccount
         * @param {string} userId userId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addACHToUserStripeAccountUsingPOST(userId: string, request: AddACHToStripeAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).addACHToUserStripeAccountUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary addCardToStripeAccount
         * @param {AddCardToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCardToStripeAccountUsingPOST(request: AddCardToStripeAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCardToStripeAccountResponse>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).addCardToStripeAccountUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteBankAccountFromLawfirmStripeAccount
         * @param {string} bankAccountId bankAccountId
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId: string, lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId, lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCardForUser
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCardForUserUsingDELETE(cardId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeCardDomain>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).deleteCardForUserUsingDELETE(cardId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCardUsingDELETE(cardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeCardDomain>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).deleteCardUsingDELETE(cardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardUsingGET(cardId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeCardDomain>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).getCardUsingGET(cardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLawfirmPaymentMethodsUsingGET(lawfirmId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLawfirmPaymentMethodsResponse>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).getLawfirmPaymentMethodsUsingGET(lawfirmId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all the payment methods available on the user\'s Stripe account.
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethodsForUserUsingGET(userIdString: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentMethodsForUserResponse>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).getPaymentMethodsForUserUsingGET(userIdString, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setCardAsPrimary
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCardAsPrimaryUsingPUT(cardId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).setCardAsPrimaryUsingPUT(cardId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setDefaultPaymentMethodForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripePaymentSourceId stripePaymentSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId: number, stripePaymentSourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StripeCardControllerApiAxiosParamCreator(configuration).setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId, stripePaymentSourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StripeCardControllerApi - factory interface
 * @export
 */
export const StripeCardControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addACHToLawfirmStripeAccount
         * @param {string} lawfirmId lawfirmId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToLawfirmStripeAccountUsingPOST(lawfirmId: string, request: AddACHToStripeAccountRequest, options?: any): AxiosPromise<object> {
            return StripeCardControllerApiFp(configuration).addACHToLawfirmStripeAccountUsingPOST(lawfirmId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addACHToUserStripeAccount
         * @param {string} userId userId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToUserStripeAccountUsingPOST(userId: string, request: AddACHToStripeAccountRequest, options?: any): AxiosPromise<object> {
            return StripeCardControllerApiFp(configuration).addACHToUserStripeAccountUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addCardToStripeAccount
         * @param {AddCardToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToStripeAccountUsingPOST(request: AddCardToStripeAccountRequest, options?: any): AxiosPromise<AddCardToStripeAccountResponse> {
            return StripeCardControllerApiFp(configuration).addCardToStripeAccountUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteBankAccountFromLawfirmStripeAccount
         * @param {string} bankAccountId bankAccountId
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId: string, lawfirmId: number, options?: any): AxiosPromise<void> {
            return StripeCardControllerApiFp(configuration).deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId, lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCardForUser
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardForUserUsingDELETE(cardId: string, userId: string, options?: any): AxiosPromise<StripeCardDomain> {
            return StripeCardControllerApiFp(configuration).deleteCardForUserUsingDELETE(cardId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardUsingDELETE(cardId: string, options?: any): AxiosPromise<StripeCardDomain> {
            return StripeCardControllerApiFp(configuration).deleteCardUsingDELETE(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsingGET(cardId: string, options?: any): AxiosPromise<StripeCardDomain> {
            return StripeCardControllerApiFp(configuration).getCardUsingGET(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPaymentMethodsUsingGET(lawfirmId: number, options?: any): AxiosPromise<GetLawfirmPaymentMethodsResponse> {
            return StripeCardControllerApiFp(configuration).getLawfirmPaymentMethodsUsingGET(lawfirmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all the payment methods available on the user\'s Stripe account.
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForUserUsingGET(userIdString: string, options?: any): AxiosPromise<GetPaymentMethodsForUserResponse> {
            return StripeCardControllerApiFp(configuration).getPaymentMethodsForUserUsingGET(userIdString, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setCardAsPrimary
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCardAsPrimaryUsingPUT(cardId: string, userId: string, options?: any): AxiosPromise<void> {
            return StripeCardControllerApiFp(configuration).setCardAsPrimaryUsingPUT(cardId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setDefaultPaymentMethodForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripePaymentSourceId stripePaymentSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId: number, stripePaymentSourceId: string, options?: any): AxiosPromise<void> {
            return StripeCardControllerApiFp(configuration).setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId, stripePaymentSourceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeCardControllerApi - object-oriented interface
 * @export
 * @class StripeCardControllerApi
 * @extends {BaseAPI}
 */
export class StripeCardControllerApi extends BaseAPI {
    /**
     * 
     * @summary addACHToLawfirmStripeAccount
     * @param {string} lawfirmId lawfirmId
     * @param {AddACHToStripeAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public addACHToLawfirmStripeAccountUsingPOST(lawfirmId: string, request: AddACHToStripeAccountRequest, options?: any) {
        return StripeCardControllerApiFp(this.configuration).addACHToLawfirmStripeAccountUsingPOST(lawfirmId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addACHToUserStripeAccount
     * @param {string} userId userId
     * @param {AddACHToStripeAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public addACHToUserStripeAccountUsingPOST(userId: string, request: AddACHToStripeAccountRequest, options?: any) {
        return StripeCardControllerApiFp(this.configuration).addACHToUserStripeAccountUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addCardToStripeAccount
     * @param {AddCardToStripeAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public addCardToStripeAccountUsingPOST(request: AddCardToStripeAccountRequest, options?: any) {
        return StripeCardControllerApiFp(this.configuration).addCardToStripeAccountUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteBankAccountFromLawfirmStripeAccount
     * @param {string} bankAccountId bankAccountId
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId: string, lawfirmId: number, options?: any) {
        return StripeCardControllerApiFp(this.configuration).deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId, lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCardForUser
     * @param {string} cardId cardId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public deleteCardForUserUsingDELETE(cardId: string, userId: string, options?: any) {
        return StripeCardControllerApiFp(this.configuration).deleteCardForUserUsingDELETE(cardId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCard
     * @param {string} cardId cardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public deleteCardUsingDELETE(cardId: string, options?: any) {
        return StripeCardControllerApiFp(this.configuration).deleteCardUsingDELETE(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCard
     * @param {string} cardId cardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public getCardUsingGET(cardId: string, options?: any) {
        return StripeCardControllerApiFp(this.configuration).getCardUsingGET(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public getLawfirmPaymentMethodsUsingGET(lawfirmId: number, options?: any) {
        return StripeCardControllerApiFp(this.configuration).getLawfirmPaymentMethodsUsingGET(lawfirmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all the payment methods available on the user\'s Stripe account.
     * @param {string} userIdString userIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public getPaymentMethodsForUserUsingGET(userIdString: string, options?: any) {
        return StripeCardControllerApiFp(this.configuration).getPaymentMethodsForUserUsingGET(userIdString, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setCardAsPrimary
     * @param {string} cardId cardId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public setCardAsPrimaryUsingPUT(cardId: string, userId: string, options?: any) {
        return StripeCardControllerApiFp(this.configuration).setCardAsPrimaryUsingPUT(cardId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setDefaultPaymentMethodForLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {string} stripePaymentSourceId stripePaymentSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    public setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId: number, stripePaymentSourceId: string, options?: any) {
        return StripeCardControllerApiFp(this.configuration).setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId, stripePaymentSourceId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * StripeControllerApi - axios parameter creator
 * @export
 */
export const StripeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary connectStripeAccount
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectStripeAccountUsingPOST: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling connectStripeAccountUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/connect`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createConnectAccountLink
         * @param {CreateConnectAccountLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectAccountLinkUsingPOST: async (request: CreateConnectAccountLinkRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createConnectAccountLinkUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/account/link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createStripeConnectAccount
         * @param {CreateStripeConnectAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeConnectAccountUsingPOST: async (request: CreateStripeConnectAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling createStripeConnectAccountUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handleOrphanedStripeCharges
         * @param {HandleOrphanedStripeChargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleOrphanedStripeChargesUsingPOST: async (request: HandleOrphanedStripeChargeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling handleOrphanedStripeChargesUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/handle-orphaned-stripe-charges`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateDispute
         * @param {string} disputeId disputeId
         * @param {UpdateDisputeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisputeUsingPUT: async (disputeId: string, request: UpdateDisputeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'disputeId' is not null or undefined
            if (disputeId === null || disputeId === undefined) {
                throw new RequiredError('disputeId','Required parameter disputeId was null or undefined when calling updateDisputeUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateDisputeUsingPUT.');
            }
            const localVarPath = `/api/v1/stripe/disputes/{disputeId}`
                .replace(`{${"disputeId"}}`, encodeURIComponent(String(disputeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeControllerApi - functional programming interface
 * @export
 */
export const StripeControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary connectStripeAccount
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectStripeAccountUsingPOST(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StripeControllerApiAxiosParamCreator(configuration).connectStripeAccountUsingPOST(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createConnectAccountLink
         * @param {CreateConnectAccountLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConnectAccountLinkUsingPOST(request: CreateConnectAccountLinkRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConnectAccountLinkResponse>> {
            const localVarAxiosArgs = await StripeControllerApiAxiosParamCreator(configuration).createConnectAccountLinkUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createStripeConnectAccount
         * @param {CreateStripeConnectAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStripeConnectAccountUsingPOST(request: CreateStripeConnectAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateStripeConnectAccountResponse>> {
            const localVarAxiosArgs = await StripeControllerApiAxiosParamCreator(configuration).createStripeConnectAccountUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary handleOrphanedStripeCharges
         * @param {HandleOrphanedStripeChargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleOrphanedStripeChargesUsingPOST(request: HandleOrphanedStripeChargeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandleOrphanedStripeChargeResponse>> {
            const localVarAxiosArgs = await StripeControllerApiAxiosParamCreator(configuration).handleOrphanedStripeChargesUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateDispute
         * @param {string} disputeId disputeId
         * @param {UpdateDisputeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDisputeUsingPUT(disputeId: string, request: UpdateDisputeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StripeControllerApiAxiosParamCreator(configuration).updateDisputeUsingPUT(disputeId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StripeControllerApi - factory interface
 * @export
 */
export const StripeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary connectStripeAccount
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectStripeAccountUsingPOST(code: string, options?: any): AxiosPromise<object> {
            return StripeControllerApiFp(configuration).connectStripeAccountUsingPOST(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createConnectAccountLink
         * @param {CreateConnectAccountLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectAccountLinkUsingPOST(request: CreateConnectAccountLinkRequest, options?: any): AxiosPromise<CreateConnectAccountLinkResponse> {
            return StripeControllerApiFp(configuration).createConnectAccountLinkUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createStripeConnectAccount
         * @param {CreateStripeConnectAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeConnectAccountUsingPOST(request: CreateStripeConnectAccountRequest, options?: any): AxiosPromise<CreateStripeConnectAccountResponse> {
            return StripeControllerApiFp(configuration).createStripeConnectAccountUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handleOrphanedStripeCharges
         * @param {HandleOrphanedStripeChargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleOrphanedStripeChargesUsingPOST(request: HandleOrphanedStripeChargeRequest, options?: any): AxiosPromise<HandleOrphanedStripeChargeResponse> {
            return StripeControllerApiFp(configuration).handleOrphanedStripeChargesUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateDispute
         * @param {string} disputeId disputeId
         * @param {UpdateDisputeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisputeUsingPUT(disputeId: string, request: UpdateDisputeRequest, options?: any): AxiosPromise<void> {
            return StripeControllerApiFp(configuration).updateDisputeUsingPUT(disputeId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeControllerApi - object-oriented interface
 * @export
 * @class StripeControllerApi
 * @extends {BaseAPI}
 */
export class StripeControllerApi extends BaseAPI {
    /**
     * 
     * @summary connectStripeAccount
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    public connectStripeAccountUsingPOST(code: string, options?: any) {
        return StripeControllerApiFp(this.configuration).connectStripeAccountUsingPOST(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createConnectAccountLink
     * @param {CreateConnectAccountLinkRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    public createConnectAccountLinkUsingPOST(request: CreateConnectAccountLinkRequest, options?: any) {
        return StripeControllerApiFp(this.configuration).createConnectAccountLinkUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createStripeConnectAccount
     * @param {CreateStripeConnectAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    public createStripeConnectAccountUsingPOST(request: CreateStripeConnectAccountRequest, options?: any) {
        return StripeControllerApiFp(this.configuration).createStripeConnectAccountUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handleOrphanedStripeCharges
     * @param {HandleOrphanedStripeChargeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    public handleOrphanedStripeChargesUsingPOST(request: HandleOrphanedStripeChargeRequest, options?: any) {
        return StripeControllerApiFp(this.configuration).handleOrphanedStripeChargesUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateDispute
     * @param {string} disputeId disputeId
     * @param {UpdateDisputeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    public updateDisputeUsingPUT(disputeId: string, request: UpdateDisputeRequest, options?: any) {
        return StripeControllerApiFp(this.configuration).updateDisputeUsingPUT(disputeId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * StripeSyncControllerApi - axios parameter creator
 * @export
 */
export const StripeSyncControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary syncAllDisputes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncAllDisputesUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/stripe/disputes/sync-all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary syncDispute
         * @param {string} disputeId disputeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncDisputeUsingPOST: async (disputeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'disputeId' is not null or undefined
            if (disputeId === null || disputeId === undefined) {
                throw new RequiredError('disputeId','Required parameter disputeId was null or undefined when calling syncDisputeUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/disputes/{disputeId}/sync`
                .replace(`{${"disputeId"}}`, encodeURIComponent(String(disputeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary syncStripeCharges
         * @param {SyncStripeChargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeChargesUsingPOST: async (request: SyncStripeChargesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling syncStripeChargesUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/sync-stripe-charges`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary syncStripePayments
         * @param {SyncStripePaymentsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripePaymentsUsingPOST: async (request: SyncStripePaymentsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling syncStripePaymentsUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/payments/sync`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary syncStripeRefunds
         * @param {SyncStripeRefundsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeRefundsUsingPOST: async (request: SyncStripeRefundsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling syncStripeRefundsUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/sync-stripe-refunds`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary syncStripeTransfers
         * @param {SyncStripeTransfersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeTransfersUsingPOST: async (request: SyncStripeTransfersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling syncStripeTransfersUsingPOST.');
            }
            const localVarPath = `/api/v1/stripe/transfers/sync`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeSyncControllerApi - functional programming interface
 * @export
 */
export const StripeSyncControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary syncAllDisputes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncAllDisputesUsingPOST(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StripeSyncControllerApiAxiosParamCreator(configuration).syncAllDisputesUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary syncDispute
         * @param {string} disputeId disputeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncDisputeUsingPOST(disputeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncStripeDisputeResponse>> {
            const localVarAxiosArgs = await StripeSyncControllerApiAxiosParamCreator(configuration).syncDisputeUsingPOST(disputeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary syncStripeCharges
         * @param {SyncStripeChargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncStripeChargesUsingPOST(request: SyncStripeChargesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncStripeChargesResponse>> {
            const localVarAxiosArgs = await StripeSyncControllerApiAxiosParamCreator(configuration).syncStripeChargesUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary syncStripePayments
         * @param {SyncStripePaymentsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncStripePaymentsUsingPOST(request: SyncStripePaymentsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncStripePaymentsResponse>> {
            const localVarAxiosArgs = await StripeSyncControllerApiAxiosParamCreator(configuration).syncStripePaymentsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary syncStripeRefunds
         * @param {SyncStripeRefundsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncStripeRefundsUsingPOST(request: SyncStripeRefundsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncStripeChargesResponse>> {
            const localVarAxiosArgs = await StripeSyncControllerApiAxiosParamCreator(configuration).syncStripeRefundsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary syncStripeTransfers
         * @param {SyncStripeTransfersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncStripeTransfersUsingPOST(request: SyncStripeTransfersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncStripeTransfersResponse>> {
            const localVarAxiosArgs = await StripeSyncControllerApiAxiosParamCreator(configuration).syncStripeTransfersUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StripeSyncControllerApi - factory interface
 * @export
 */
export const StripeSyncControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary syncAllDisputes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncAllDisputesUsingPOST(options?: any): AxiosPromise<void> {
            return StripeSyncControllerApiFp(configuration).syncAllDisputesUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary syncDispute
         * @param {string} disputeId disputeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncDisputeUsingPOST(disputeId: string, options?: any): AxiosPromise<SyncStripeDisputeResponse> {
            return StripeSyncControllerApiFp(configuration).syncDisputeUsingPOST(disputeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary syncStripeCharges
         * @param {SyncStripeChargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeChargesUsingPOST(request: SyncStripeChargesRequest, options?: any): AxiosPromise<SyncStripeChargesResponse> {
            return StripeSyncControllerApiFp(configuration).syncStripeChargesUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary syncStripePayments
         * @param {SyncStripePaymentsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripePaymentsUsingPOST(request: SyncStripePaymentsRequest, options?: any): AxiosPromise<SyncStripePaymentsResponse> {
            return StripeSyncControllerApiFp(configuration).syncStripePaymentsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary syncStripeRefunds
         * @param {SyncStripeRefundsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeRefundsUsingPOST(request: SyncStripeRefundsRequest, options?: any): AxiosPromise<SyncStripeChargesResponse> {
            return StripeSyncControllerApiFp(configuration).syncStripeRefundsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary syncStripeTransfers
         * @param {SyncStripeTransfersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeTransfersUsingPOST(request: SyncStripeTransfersRequest, options?: any): AxiosPromise<SyncStripeTransfersResponse> {
            return StripeSyncControllerApiFp(configuration).syncStripeTransfersUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeSyncControllerApi - object-oriented interface
 * @export
 * @class StripeSyncControllerApi
 * @extends {BaseAPI}
 */
export class StripeSyncControllerApi extends BaseAPI {
    /**
     * 
     * @summary syncAllDisputes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    public syncAllDisputesUsingPOST(options?: any) {
        return StripeSyncControllerApiFp(this.configuration).syncAllDisputesUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary syncDispute
     * @param {string} disputeId disputeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    public syncDisputeUsingPOST(disputeId: string, options?: any) {
        return StripeSyncControllerApiFp(this.configuration).syncDisputeUsingPOST(disputeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary syncStripeCharges
     * @param {SyncStripeChargesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    public syncStripeChargesUsingPOST(request: SyncStripeChargesRequest, options?: any) {
        return StripeSyncControllerApiFp(this.configuration).syncStripeChargesUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary syncStripePayments
     * @param {SyncStripePaymentsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    public syncStripePaymentsUsingPOST(request: SyncStripePaymentsRequest, options?: any) {
        return StripeSyncControllerApiFp(this.configuration).syncStripePaymentsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary syncStripeRefunds
     * @param {SyncStripeRefundsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    public syncStripeRefundsUsingPOST(request: SyncStripeRefundsRequest, options?: any) {
        return StripeSyncControllerApiFp(this.configuration).syncStripeRefundsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary syncStripeTransfers
     * @param {SyncStripeTransfersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    public syncStripeTransfersUsingPOST(request: SyncStripeTransfersRequest, options?: any) {
        return StripeSyncControllerApiFp(this.configuration).syncStripeTransfersUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * StripeWebhookControllerApi - axios parameter creator
 * @export
 */
export const StripeWebhookControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleStripeWebhookFromLawfirmAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromLawfirmAccountUsingPOST: async (request?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/stripe/acct_15jGPnDVzhogLb0T/webhook`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary handleStripeWebhookFromOTRAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromOTRAccountUsingPOST: async (request?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeWebhookControllerApi - functional programming interface
 * @export
 */
export const StripeWebhookControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary handleStripeWebhookFromLawfirmAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleStripeWebhookFromLawfirmAccountUsingPOST(request?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await StripeWebhookControllerApiAxiosParamCreator(configuration).handleStripeWebhookFromLawfirmAccountUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary handleStripeWebhookFromOTRAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleStripeWebhookFromOTRAccountUsingPOST(request?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await StripeWebhookControllerApiAxiosParamCreator(configuration).handleStripeWebhookFromOTRAccountUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StripeWebhookControllerApi - factory interface
 * @export
 */
export const StripeWebhookControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary handleStripeWebhookFromLawfirmAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromLawfirmAccountUsingPOST(request?: string, options?: any): AxiosPromise<string> {
            return StripeWebhookControllerApiFp(configuration).handleStripeWebhookFromLawfirmAccountUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary handleStripeWebhookFromOTRAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromOTRAccountUsingPOST(request?: string, options?: any): AxiosPromise<string> {
            return StripeWebhookControllerApiFp(configuration).handleStripeWebhookFromOTRAccountUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeWebhookControllerApi - object-oriented interface
 * @export
 * @class StripeWebhookControllerApi
 * @extends {BaseAPI}
 */
export class StripeWebhookControllerApi extends BaseAPI {
    /**
     * 
     * @summary handleStripeWebhookFromLawfirmAccount
     * @param {string} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeWebhookControllerApi
     */
    public handleStripeWebhookFromLawfirmAccountUsingPOST(request?: string, options?: any) {
        return StripeWebhookControllerApiFp(this.configuration).handleStripeWebhookFromLawfirmAccountUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary handleStripeWebhookFromOTRAccount
     * @param {string} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeWebhookControllerApi
     */
    public handleStripeWebhookFromOTRAccountUsingPOST(request?: string, options?: any) {
        return StripeWebhookControllerApiFp(this.configuration).handleStripeWebhookFromOTRAccountUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * TicketReviewControllerApi - axios parameter creator
 * @export
 */
export const TicketReviewControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getTicketReviewInfo
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketReviewInfoUsingGET: async (citationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'citationId' is not null or undefined
            if (citationId === null || citationId === undefined) {
                throw new RequiredError('citationId','Required parameter citationId was null or undefined when calling getTicketReviewInfoUsingGET.');
            }
            const localVarPath = `/api/v1/citations/{citationId}/ticket-review`
                .replace(`{${"citationId"}}`, encodeURIComponent(String(citationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary persistTicketEvaluation
         * @param {PersistTicketEvaluationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        persistTicketEvaluationUsingPOST: async (request: PersistTicketEvaluationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling persistTicketEvaluationUsingPOST.');
            }
            const localVarPath = `/api/v1/ticket-evaluation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateTicketEvaluationRequest
         * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
         * @param {TicketReviewRequestReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketEvaluationRequestUsingPUT: async (ticketEvaluationRequestId: number, request: TicketReviewRequestReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketEvaluationRequestId' is not null or undefined
            if (ticketEvaluationRequestId === null || ticketEvaluationRequestId === undefined) {
                throw new RequiredError('ticketEvaluationRequestId','Required parameter ticketEvaluationRequestId was null or undefined when calling updateTicketEvaluationRequestUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateTicketEvaluationRequestUsingPUT.');
            }
            const localVarPath = `/api/v1/ticket-evaluation/{ticketEvaluationRequestId}`
                .replace(`{${"ticketEvaluationRequestId"}}`, encodeURIComponent(String(ticketEvaluationRequestId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketReviewControllerApi - functional programming interface
 * @export
 */
export const TicketReviewControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getTicketReviewInfo
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketReviewInfoUsingGET(citationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTicketReviewResponse>> {
            const localVarAxiosArgs = await TicketReviewControllerApiAxiosParamCreator(configuration).getTicketReviewInfoUsingGET(citationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary persistTicketEvaluation
         * @param {PersistTicketEvaluationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async persistTicketEvaluationUsingPOST(request: PersistTicketEvaluationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await TicketReviewControllerApiAxiosParamCreator(configuration).persistTicketEvaluationUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateTicketEvaluationRequest
         * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
         * @param {TicketReviewRequestReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId: number, request: TicketReviewRequestReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await TicketReviewControllerApiAxiosParamCreator(configuration).updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TicketReviewControllerApi - factory interface
 * @export
 */
export const TicketReviewControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getTicketReviewInfo
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketReviewInfoUsingGET(citationId: string, options?: any): AxiosPromise<GetTicketReviewResponse> {
            return TicketReviewControllerApiFp(configuration).getTicketReviewInfoUsingGET(citationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary persistTicketEvaluation
         * @param {PersistTicketEvaluationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        persistTicketEvaluationUsingPOST(request: PersistTicketEvaluationRequest, options?: any): AxiosPromise<number> {
            return TicketReviewControllerApiFp(configuration).persistTicketEvaluationUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateTicketEvaluationRequest
         * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
         * @param {TicketReviewRequestReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId: number, request: TicketReviewRequestReq, options?: any): AxiosPromise<object> {
            return TicketReviewControllerApiFp(configuration).updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketReviewControllerApi - object-oriented interface
 * @export
 * @class TicketReviewControllerApi
 * @extends {BaseAPI}
 */
export class TicketReviewControllerApi extends BaseAPI {
    /**
     * 
     * @summary getTicketReviewInfo
     * @param {string} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketReviewControllerApi
     */
    public getTicketReviewInfoUsingGET(citationId: string, options?: any) {
        return TicketReviewControllerApiFp(this.configuration).getTicketReviewInfoUsingGET(citationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary persistTicketEvaluation
     * @param {PersistTicketEvaluationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketReviewControllerApi
     */
    public persistTicketEvaluationUsingPOST(request: PersistTicketEvaluationRequest, options?: any) {
        return TicketReviewControllerApiFp(this.configuration).persistTicketEvaluationUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateTicketEvaluationRequest
     * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
     * @param {TicketReviewRequestReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketReviewControllerApi
     */
    public updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId: number, request: TicketReviewRequestReq, options?: any) {
        return TicketReviewControllerApiFp(this.configuration).updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * TrafficViolationControllerApi - axios parameter creator
 * @export
 */
export const TrafficViolationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addViolation
         * @param {boolean} isLive isLive
         * @param {AddViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationUsingPOST: async (isLive: boolean, request: AddViolationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'isLive' is not null or undefined
            if (isLive === null || isLive === undefined) {
                throw new RequiredError('isLive','Required parameter isLive was null or undefined when calling addViolationUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addViolationUsingPOST.');
            }
            const localVarPath = `/api/v1/violations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isLive !== undefined) {
                localVarQueryParameter['isLive'] = isLive;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteViolation
         * @param {number} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViolationUsingDELETE: async (violationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'violationId' is not null or undefined
            if (violationId === null || violationId === undefined) {
                throw new RequiredError('violationId','Required parameter violationId was null or undefined when calling deleteViolationUsingDELETE.');
            }
            const localVarPath = `/api/v1/violations/{violationId}`
                .replace(`{${"violationId"}}`, encodeURIComponent(String(violationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRegionsWithViolations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsWithViolationsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/violations/region-availability`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getTrafficViolationTypes
         * @param {string} [audience] audience
         * @param {string} [flavor] flavor
         * @param {boolean} [includePenalties] includePenalties
         * @param {string} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrafficViolationTypesUsingGET: async (audience?: string, flavor?: string, includePenalties?: boolean, state?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/violations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (audience !== undefined) {
                localVarQueryParameter['audience'] = audience;
            }

            if (flavor !== undefined) {
                localVarQueryParameter['flavor'] = flavor;
            }

            if (includePenalties !== undefined) {
                localVarQueryParameter['includePenalties'] = includePenalties;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listViolationClassifications
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViolationClassificationsUsingGET: async (regionCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/violations/classifications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (regionCode !== undefined) {
                localVarQueryParameter['regionCode'] = regionCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateViolation
         * @param {number} violationId violationId
         * @param {UpdateViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViolationUsingPUT: async (violationId: number, request: UpdateViolationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'violationId' is not null or undefined
            if (violationId === null || violationId === undefined) {
                throw new RequiredError('violationId','Required parameter violationId was null or undefined when calling updateViolationUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateViolationUsingPUT.');
            }
            const localVarPath = `/api/v1/violations/{violationId}`
                .replace(`{${"violationId"}}`, encodeURIComponent(String(violationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrafficViolationControllerApi - functional programming interface
 * @export
 */
export const TrafficViolationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addViolation
         * @param {boolean} isLive isLive
         * @param {AddViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addViolationUsingPOST(isLive: boolean, request: AddViolationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddViolationResponse>> {
            const localVarAxiosArgs = await TrafficViolationControllerApiAxiosParamCreator(configuration).addViolationUsingPOST(isLive, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteViolation
         * @param {number} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteViolationUsingDELETE(violationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TrafficViolationControllerApiAxiosParamCreator(configuration).deleteViolationUsingDELETE(violationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getRegionsWithViolations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegionsWithViolationsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRegionsWithViolationsResponse>> {
            const localVarAxiosArgs = await TrafficViolationControllerApiAxiosParamCreator(configuration).getRegionsWithViolationsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getTrafficViolationTypes
         * @param {string} [audience] audience
         * @param {string} [flavor] flavor
         * @param {boolean} [includePenalties] includePenalties
         * @param {string} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrafficViolationTypesUsingGET(audience?: string, flavor?: string, includePenalties?: boolean, state?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTrafficViolationTypesResponse>> {
            const localVarAxiosArgs = await TrafficViolationControllerApiAxiosParamCreator(configuration).getTrafficViolationTypesUsingGET(audience, flavor, includePenalties, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listViolationClassifications
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listViolationClassificationsUsingGET(regionCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListViolationClassificationResponse>> {
            const localVarAxiosArgs = await TrafficViolationControllerApiAxiosParamCreator(configuration).listViolationClassificationsUsingGET(regionCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateViolation
         * @param {number} violationId violationId
         * @param {UpdateViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateViolationUsingPUT(violationId: number, request: UpdateViolationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TrafficViolationControllerApiAxiosParamCreator(configuration).updateViolationUsingPUT(violationId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TrafficViolationControllerApi - factory interface
 * @export
 */
export const TrafficViolationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addViolation
         * @param {boolean} isLive isLive
         * @param {AddViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationUsingPOST(isLive: boolean, request: AddViolationRequest, options?: any): AxiosPromise<AddViolationResponse> {
            return TrafficViolationControllerApiFp(configuration).addViolationUsingPOST(isLive, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteViolation
         * @param {number} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViolationUsingDELETE(violationId: number, options?: any): AxiosPromise<void> {
            return TrafficViolationControllerApiFp(configuration).deleteViolationUsingDELETE(violationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRegionsWithViolations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsWithViolationsUsingGET(options?: any): AxiosPromise<GetRegionsWithViolationsResponse> {
            return TrafficViolationControllerApiFp(configuration).getRegionsWithViolationsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getTrafficViolationTypes
         * @param {string} [audience] audience
         * @param {string} [flavor] flavor
         * @param {boolean} [includePenalties] includePenalties
         * @param {string} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrafficViolationTypesUsingGET(audience?: string, flavor?: string, includePenalties?: boolean, state?: string, options?: any): AxiosPromise<GetTrafficViolationTypesResponse> {
            return TrafficViolationControllerApiFp(configuration).getTrafficViolationTypesUsingGET(audience, flavor, includePenalties, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary listViolationClassifications
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViolationClassificationsUsingGET(regionCode?: string, options?: any): AxiosPromise<ListViolationClassificationResponse> {
            return TrafficViolationControllerApiFp(configuration).listViolationClassificationsUsingGET(regionCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateViolation
         * @param {number} violationId violationId
         * @param {UpdateViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViolationUsingPUT(violationId: number, request: UpdateViolationRequest, options?: any): AxiosPromise<void> {
            return TrafficViolationControllerApiFp(configuration).updateViolationUsingPUT(violationId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrafficViolationControllerApi - object-oriented interface
 * @export
 * @class TrafficViolationControllerApi
 * @extends {BaseAPI}
 */
export class TrafficViolationControllerApi extends BaseAPI {
    /**
     * 
     * @summary addViolation
     * @param {boolean} isLive isLive
     * @param {AddViolationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    public addViolationUsingPOST(isLive: boolean, request: AddViolationRequest, options?: any) {
        return TrafficViolationControllerApiFp(this.configuration).addViolationUsingPOST(isLive, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteViolation
     * @param {number} violationId violationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    public deleteViolationUsingDELETE(violationId: number, options?: any) {
        return TrafficViolationControllerApiFp(this.configuration).deleteViolationUsingDELETE(violationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRegionsWithViolations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    public getRegionsWithViolationsUsingGET(options?: any) {
        return TrafficViolationControllerApiFp(this.configuration).getRegionsWithViolationsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getTrafficViolationTypes
     * @param {string} [audience] audience
     * @param {string} [flavor] flavor
     * @param {boolean} [includePenalties] includePenalties
     * @param {string} [state] state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    public getTrafficViolationTypesUsingGET(audience?: string, flavor?: string, includePenalties?: boolean, state?: string, options?: any) {
        return TrafficViolationControllerApiFp(this.configuration).getTrafficViolationTypesUsingGET(audience, flavor, includePenalties, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary listViolationClassifications
     * @param {string} [regionCode] regionCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    public listViolationClassificationsUsingGET(regionCode?: string, options?: any) {
        return TrafficViolationControllerApiFp(this.configuration).listViolationClassificationsUsingGET(regionCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateViolation
     * @param {number} violationId violationId
     * @param {UpdateViolationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    public updateViolationUsingPUT(violationId: number, request: UpdateViolationRequest, options?: any) {
        return TrafficViolationControllerApiFp(this.configuration).updateViolationUsingPUT(violationId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UrlRedirectControllerApi - axios parameter creator
 * @export
 */
export const UrlRedirectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addRedirectUrl
         * @param {AddRedirectUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRedirectUrlUsingPOST: async (request: AddRedirectUrlRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addRedirectUrlUsingPOST.');
            }
            const localVarPath = `/api/v1/redirects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary clearCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCacheUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/redirects/clear-cache`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRedirectUrl
         * @param {string} [landingPageUrl] landingPageUrl
         * @param {string} [lawfirmId] lawfirmId
         * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectUrlUsingGET: async (landingPageUrl?: string, lawfirmId?: string, pageType?: 'DEBUG' | 'SEO' | 'VANITY', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/redirects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (landingPageUrl !== undefined) {
                localVarQueryParameter['landingPageUrl'] = landingPageUrl;
            }

            if (lawfirmId !== undefined) {
                localVarQueryParameter['lawfirmId'] = lawfirmId;
            }

            if (pageType !== undefined) {
                localVarQueryParameter['pageType'] = pageType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UrlRedirectControllerApi - functional programming interface
 * @export
 */
export const UrlRedirectControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addRedirectUrl
         * @param {AddRedirectUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRedirectUrlUsingPOST(request: AddRedirectUrlRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UrlRedirectControllerApiAxiosParamCreator(configuration).addRedirectUrlUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary clearCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearCacheUsingPOST(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UrlRedirectControllerApiAxiosParamCreator(configuration).clearCacheUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getRedirectUrl
         * @param {string} [landingPageUrl] landingPageUrl
         * @param {string} [lawfirmId] lawfirmId
         * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedirectUrlUsingGET(landingPageUrl?: string, lawfirmId?: string, pageType?: 'DEBUG' | 'SEO' | 'VANITY', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRedirectUrlResponse>> {
            const localVarAxiosArgs = await UrlRedirectControllerApiAxiosParamCreator(configuration).getRedirectUrlUsingGET(landingPageUrl, lawfirmId, pageType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UrlRedirectControllerApi - factory interface
 * @export
 */
export const UrlRedirectControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addRedirectUrl
         * @param {AddRedirectUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRedirectUrlUsingPOST(request: AddRedirectUrlRequest, options?: any): AxiosPromise<void> {
            return UrlRedirectControllerApiFp(configuration).addRedirectUrlUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary clearCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCacheUsingPOST(options?: any): AxiosPromise<void> {
            return UrlRedirectControllerApiFp(configuration).clearCacheUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRedirectUrl
         * @param {string} [landingPageUrl] landingPageUrl
         * @param {string} [lawfirmId] lawfirmId
         * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectUrlUsingGET(landingPageUrl?: string, lawfirmId?: string, pageType?: 'DEBUG' | 'SEO' | 'VANITY', options?: any): AxiosPromise<GetRedirectUrlResponse> {
            return UrlRedirectControllerApiFp(configuration).getRedirectUrlUsingGET(landingPageUrl, lawfirmId, pageType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UrlRedirectControllerApi - object-oriented interface
 * @export
 * @class UrlRedirectControllerApi
 * @extends {BaseAPI}
 */
export class UrlRedirectControllerApi extends BaseAPI {
    /**
     * 
     * @summary addRedirectUrl
     * @param {AddRedirectUrlRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlRedirectControllerApi
     */
    public addRedirectUrlUsingPOST(request: AddRedirectUrlRequest, options?: any) {
        return UrlRedirectControllerApiFp(this.configuration).addRedirectUrlUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary clearCache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlRedirectControllerApi
     */
    public clearCacheUsingPOST(options?: any) {
        return UrlRedirectControllerApiFp(this.configuration).clearCacheUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRedirectUrl
     * @param {string} [landingPageUrl] landingPageUrl
     * @param {string} [lawfirmId] lawfirmId
     * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlRedirectControllerApi
     */
    public getRedirectUrlUsingGET(landingPageUrl?: string, lawfirmId?: string, pageType?: 'DEBUG' | 'SEO' | 'VANITY', options?: any) {
        return UrlRedirectControllerApiFp(this.configuration).getRedirectUrlUsingGET(landingPageUrl, lawfirmId, pageType, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserAccountControllerApi - axios parameter creator
 * @export
 */
export const UserAccountControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addExtraAccount
         * @param {string} userId userId
         * @param {AddExtraAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExtraAccountUsingPOST: async (userId: string, request: AddExtraAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addExtraAccountUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addExtraAccountUsingPOST.');
            }
            const localVarPath = `/api/v1/users/{userId}/account`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeAdditionalUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdditionalUserHandleUsingDELETE: async (userHandle: string, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userHandle' is not null or undefined
            if (userHandle === null || userHandle === undefined) {
                throw new RequiredError('userHandle','Required parameter userHandle was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
            }
            const localVarPath = `/api/v1/users/{userId}/accounts/{userHandle}`
                .replace(`{${"userHandle"}}`, encodeURIComponent(String(userHandle)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setPrimaryUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrimaryUserHandleUsingPUT: async (userHandle: string, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userHandle' is not null or undefined
            if (userHandle === null || userHandle === undefined) {
                throw new RequiredError('userHandle','Required parameter userHandle was null or undefined when calling setPrimaryUserHandleUsingPUT.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling setPrimaryUserHandleUsingPUT.');
            }
            const localVarPath = `/api/v1/users/{userId}/accounts/{userHandle}/set-primary-user-handle`
                .replace(`{${"userHandle"}}`, encodeURIComponent(String(userHandle)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAccountControllerApi - functional programming interface
 * @export
 */
export const UserAccountControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addExtraAccount
         * @param {string} userId userId
         * @param {AddExtraAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExtraAccountUsingPOST(userId: string, request: AddExtraAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserAccountControllerApiAxiosParamCreator(configuration).addExtraAccountUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeAdditionalUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAdditionalUserHandleUsingDELETE(userHandle: string, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserAccountControllerApiAxiosParamCreator(configuration).removeAdditionalUserHandleUsingDELETE(userHandle, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setPrimaryUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPrimaryUserHandleUsingPUT(userHandle: string, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserAccountControllerApiAxiosParamCreator(configuration).setPrimaryUserHandleUsingPUT(userHandle, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserAccountControllerApi - factory interface
 * @export
 */
export const UserAccountControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addExtraAccount
         * @param {string} userId userId
         * @param {AddExtraAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExtraAccountUsingPOST(userId: string, request: AddExtraAccountRequest, options?: any): AxiosPromise<void> {
            return UserAccountControllerApiFp(configuration).addExtraAccountUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removeAdditionalUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdditionalUserHandleUsingDELETE(userHandle: string, userId: number, options?: any): AxiosPromise<void> {
            return UserAccountControllerApiFp(configuration).removeAdditionalUserHandleUsingDELETE(userHandle, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setPrimaryUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrimaryUserHandleUsingPUT(userHandle: string, userId: number, options?: any): AxiosPromise<void> {
            return UserAccountControllerApiFp(configuration).setPrimaryUserHandleUsingPUT(userHandle, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAccountControllerApi - object-oriented interface
 * @export
 * @class UserAccountControllerApi
 * @extends {BaseAPI}
 */
export class UserAccountControllerApi extends BaseAPI {
    /**
     * 
     * @summary addExtraAccount
     * @param {string} userId userId
     * @param {AddExtraAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountControllerApi
     */
    public addExtraAccountUsingPOST(userId: string, request: AddExtraAccountRequest, options?: any) {
        return UserAccountControllerApiFp(this.configuration).addExtraAccountUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removeAdditionalUserHandle
     * @param {string} userHandle userHandle
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountControllerApi
     */
    public removeAdditionalUserHandleUsingDELETE(userHandle: string, userId: number, options?: any) {
        return UserAccountControllerApiFp(this.configuration).removeAdditionalUserHandleUsingDELETE(userHandle, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setPrimaryUserHandle
     * @param {string} userHandle userHandle
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountControllerApi
     */
    public setPrimaryUserHandleUsingPUT(userHandle: string, userId: number, options?: any) {
        return UserAccountControllerApiFp(this.configuration).setPrimaryUserHandleUsingPUT(userHandle, userId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary findChargeDisputesByUserId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByUserIdUsingGET: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling findChargeDisputesByUserIdUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userId}/disputes`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCurrentUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOverduePayments
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverduePaymentsUsingGET: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getOverduePaymentsUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userId}/overdue-payments`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSupportTicketsForUser
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForUserUsingGET: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling getSupportTicketsForUserUsingGET.');
            }
            const localVarPath = `/api/v1/users/{email}/support-tickets`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUserDetails
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetailsUsingGET: async (userIdString: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdString' is not null or undefined
            if (userIdString === null || userIdString === undefined) {
                throw new RequiredError('userIdString','Required parameter userIdString was null or undefined when calling getUserDetailsUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userIdString}`
                .replace(`{${"userIdString"}}`, encodeURIComponent(String(userIdString)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUserStripeAccount
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStripeAccountUsingGET: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserStripeAccountUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userId}/stripe/account`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary isUserLoggedIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserLoggedInUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/authentication/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateUserProfile
         * @param {number} userId userId
         * @param {UpdateUserProfileRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUsingPUT: async (userId: number, request: UpdateUserProfileRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUserProfileUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateUserProfileUsingPUT.');
            }
            const localVarPath = `/api/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateUserRoles
         * @param {UpdateUserRolesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRolesUsingPOST: async (request: UpdateUserRolesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateUserRolesUsingPOST.');
            }
            const localVarPath = `/api/v1/users/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validateUserByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateUserByEmailUsingGET: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling validateUserByEmailUsingGET.');
            }
            const localVarPath = `/api/v1/users/validate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary findChargeDisputesByUserId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findChargeDisputesByUserIdUsingGET(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindChargeDisputesResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).findChargeDisputesByUserIdUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCurrentUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfoUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUserResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).getCurrentUserInfoUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getOverduePayments
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOverduePaymentsUsingGET(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOverduePaymentsResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).getOverduePaymentsUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSupportTicketsForUser
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportTicketsForUserUsingGET(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSupportTicketsResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).getSupportTicketsForUserUsingGET(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getUserDetails
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetailsUsingGET(userIdString: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserDetailsResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).getUserDetailsUsingGET(userIdString, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getUserStripeAccount
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStripeAccountUsingGET(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserStripeAccountResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).getUserStripeAccountUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary isUserLoggedIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isUserLoggedInUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsUserLoggedInResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).isUserLoggedInUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateUserProfile
         * @param {number} userId userId
         * @param {UpdateUserProfileRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfileUsingPUT(userId: number, request: UpdateUserProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserDetailsResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).updateUserProfileUsingPUT(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateUserRoles
         * @param {UpdateUserRolesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserRolesUsingPOST(request: UpdateUserRolesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).updateUserRolesUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary validateUserByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateUserByEmailUsingGET(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateUserEmailResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).validateUserByEmailUsingGET(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary findChargeDisputesByUserId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByUserIdUsingGET(userId: string, options?: any): AxiosPromise<FindChargeDisputesResponse> {
            return UserControllerApiFp(configuration).findChargeDisputesByUserIdUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCurrentUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoUsingGET(options?: any): AxiosPromise<GetCurrentUserResponse> {
            return UserControllerApiFp(configuration).getCurrentUserInfoUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOverduePayments
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverduePaymentsUsingGET(userId: number, options?: any): AxiosPromise<GetOverduePaymentsResponse> {
            return UserControllerApiFp(configuration).getOverduePaymentsUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSupportTicketsForUser
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForUserUsingGET(email: string, options?: any): AxiosPromise<GetSupportTicketsResponse> {
            return UserControllerApiFp(configuration).getSupportTicketsForUserUsingGET(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUserDetails
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetailsUsingGET(userIdString: string, options?: any): AxiosPromise<GetUserDetailsResponse> {
            return UserControllerApiFp(configuration).getUserDetailsUsingGET(userIdString, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUserStripeAccount
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStripeAccountUsingGET(userId: number, options?: any): AxiosPromise<GetUserStripeAccountResponse> {
            return UserControllerApiFp(configuration).getUserStripeAccountUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary isUserLoggedIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserLoggedInUsingGET(options?: any): AxiosPromise<IsUserLoggedInResponse> {
            return UserControllerApiFp(configuration).isUserLoggedInUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateUserProfile
         * @param {number} userId userId
         * @param {UpdateUserProfileRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUsingPUT(userId: number, request: UpdateUserProfileRequest, options?: any): AxiosPromise<UpdateUserDetailsResponse> {
            return UserControllerApiFp(configuration).updateUserProfileUsingPUT(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateUserRoles
         * @param {UpdateUserRolesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRolesUsingPOST(request: UpdateUserRolesRequest, options?: any): AxiosPromise<void> {
            return UserControllerApiFp(configuration).updateUserRolesUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary validateUserByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateUserByEmailUsingGET(email: string, options?: any): AxiosPromise<ValidateUserEmailResponse> {
            return UserControllerApiFp(configuration).validateUserByEmailUsingGET(email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary findChargeDisputesByUserId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public findChargeDisputesByUserIdUsingGET(userId: string, options?: any) {
        return UserControllerApiFp(this.configuration).findChargeDisputesByUserIdUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCurrentUserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getCurrentUserInfoUsingGET(options?: any) {
        return UserControllerApiFp(this.configuration).getCurrentUserInfoUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOverduePayments
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getOverduePaymentsUsingGET(userId: number, options?: any) {
        return UserControllerApiFp(this.configuration).getOverduePaymentsUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSupportTicketsForUser
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getSupportTicketsForUserUsingGET(email: string, options?: any) {
        return UserControllerApiFp(this.configuration).getSupportTicketsForUserUsingGET(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUserDetails
     * @param {string} userIdString userIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserDetailsUsingGET(userIdString: string, options?: any) {
        return UserControllerApiFp(this.configuration).getUserDetailsUsingGET(userIdString, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUserStripeAccount
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserStripeAccountUsingGET(userId: number, options?: any) {
        return UserControllerApiFp(this.configuration).getUserStripeAccountUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary isUserLoggedIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public isUserLoggedInUsingGET(options?: any) {
        return UserControllerApiFp(this.configuration).isUserLoggedInUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateUserProfile
     * @param {number} userId userId
     * @param {UpdateUserProfileRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUserProfileUsingPUT(userId: number, request: UpdateUserProfileRequest, options?: any) {
        return UserControllerApiFp(this.configuration).updateUserProfileUsingPUT(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateUserRoles
     * @param {UpdateUserRolesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUserRolesUsingPOST(request: UpdateUserRolesRequest, options?: any) {
        return UserControllerApiFp(this.configuration).updateUserRolesUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary validateUserByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public validateUserByEmailUsingGET(email: string, options?: any) {
        return UserControllerApiFp(this.configuration).validateUserByEmailUsingGET(email, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserPasswordControllerApi - axios parameter creator
 * @export
 */
export const UserPasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary changeUserPassword
         * @param {ChangeUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPasswordUsingPUT: async (request: ChangeUserPasswordRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling changeUserPasswordUsingPUT.');
            }
            const localVarPath = `/api/v1/user/p`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resetUserPasswordByAdmin
         * @param {number} userId userId
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordByAdminUsingPUT: async (userId: number, request: ResetUserPasswordRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling resetUserPasswordByAdminUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling resetUserPasswordByAdminUsingPUT.');
            }
            const localVarPath = `/api/v1/users/{userId}/password`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resetUserPassword
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordUsingPOST: async (request: ResetUserPasswordRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling resetUserPasswordUsingPOST.');
            }
            const localVarPath = `/api/v1/user/p/reset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendAccountVerificationCode
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAccountVerificationCodeUsingPOST: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling sendAccountVerificationCodeUsingPOST.');
            }
            const localVarPath = `/api/v1/users/send-verification-code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendResetPasswordToken
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordTokenUsingPOST: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sendResetPasswordTokenUsingPOST.');
            }
            const localVarPath = `/api/v1/user/password/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary verifyPwdResetToken
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPwdResetTokenUsingGET: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling verifyPwdResetTokenUsingGET.');
            }
            const localVarPath = `/api/v1/user/password/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary verifyUserAccount
         * @param {string} code code
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserAccountUsingPUT: async (code: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling verifyUserAccountUsingPUT.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling verifyUserAccountUsingPUT.');
            }
            const localVarPath = `/api/v1/users/verify-account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserPasswordControllerApi - functional programming interface
 * @export
 */
export const UserPasswordControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary changeUserPassword
         * @param {ChangeUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUserPasswordUsingPUT(request: ChangeUserPasswordRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await UserPasswordControllerApiAxiosParamCreator(configuration).changeUserPasswordUsingPUT(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary resetUserPasswordByAdmin
         * @param {number} userId userId
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetUserPasswordByAdminUsingPUT(userId: number, request: ResetUserPasswordRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await UserPasswordControllerApiAxiosParamCreator(configuration).resetUserPasswordByAdminUsingPUT(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary resetUserPassword
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetUserPasswordUsingPOST(request: ResetUserPasswordRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserPasswordControllerApiAxiosParamCreator(configuration).resetUserPasswordUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendAccountVerificationCode
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAccountVerificationCodeUsingPOST(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserPasswordControllerApiAxiosParamCreator(configuration).sendAccountVerificationCodeUsingPOST(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sendResetPasswordToken
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendResetPasswordTokenUsingPOST(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await UserPasswordControllerApiAxiosParamCreator(configuration).sendResetPasswordTokenUsingPOST(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary verifyPwdResetToken
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyPwdResetTokenUsingGET(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyPasswordResetTokenResponse>> {
            const localVarAxiosArgs = await UserPasswordControllerApiAxiosParamCreator(configuration).verifyPwdResetTokenUsingGET(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary verifyUserAccount
         * @param {string} code code
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUserAccountUsingPUT(code: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyUserAccountResponse>> {
            const localVarAxiosArgs = await UserPasswordControllerApiAxiosParamCreator(configuration).verifyUserAccountUsingPUT(code, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserPasswordControllerApi - factory interface
 * @export
 */
export const UserPasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary changeUserPassword
         * @param {ChangeUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPasswordUsingPUT(request: ChangeUserPasswordRequest, options?: any): AxiosPromise<object> {
            return UserPasswordControllerApiFp(configuration).changeUserPasswordUsingPUT(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary resetUserPasswordByAdmin
         * @param {number} userId userId
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordByAdminUsingPUT(userId: number, request: ResetUserPasswordRequest, options?: any): AxiosPromise<object> {
            return UserPasswordControllerApiFp(configuration).resetUserPasswordByAdminUsingPUT(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary resetUserPassword
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordUsingPOST(request: ResetUserPasswordRequest, options?: any): AxiosPromise<void> {
            return UserPasswordControllerApiFp(configuration).resetUserPasswordUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendAccountVerificationCode
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAccountVerificationCodeUsingPOST(userId: string, options?: any): AxiosPromise<void> {
            return UserPasswordControllerApiFp(configuration).sendAccountVerificationCodeUsingPOST(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendResetPasswordToken
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordTokenUsingPOST(email: string, options?: any): AxiosPromise<object> {
            return UserPasswordControllerApiFp(configuration).sendResetPasswordTokenUsingPOST(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary verifyPwdResetToken
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPwdResetTokenUsingGET(token: string, options?: any): AxiosPromise<VerifyPasswordResetTokenResponse> {
            return UserPasswordControllerApiFp(configuration).verifyPwdResetTokenUsingGET(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary verifyUserAccount
         * @param {string} code code
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserAccountUsingPUT(code: string, userId: string, options?: any): AxiosPromise<VerifyUserAccountResponse> {
            return UserPasswordControllerApiFp(configuration).verifyUserAccountUsingPUT(code, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserPasswordControllerApi - object-oriented interface
 * @export
 * @class UserPasswordControllerApi
 * @extends {BaseAPI}
 */
export class UserPasswordControllerApi extends BaseAPI {
    /**
     * 
     * @summary changeUserPassword
     * @param {ChangeUserPasswordRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    public changeUserPasswordUsingPUT(request: ChangeUserPasswordRequest, options?: any) {
        return UserPasswordControllerApiFp(this.configuration).changeUserPasswordUsingPUT(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary resetUserPasswordByAdmin
     * @param {number} userId userId
     * @param {ResetUserPasswordRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    public resetUserPasswordByAdminUsingPUT(userId: number, request: ResetUserPasswordRequest, options?: any) {
        return UserPasswordControllerApiFp(this.configuration).resetUserPasswordByAdminUsingPUT(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary resetUserPassword
     * @param {ResetUserPasswordRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    public resetUserPasswordUsingPOST(request: ResetUserPasswordRequest, options?: any) {
        return UserPasswordControllerApiFp(this.configuration).resetUserPasswordUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendAccountVerificationCode
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    public sendAccountVerificationCodeUsingPOST(userId: string, options?: any) {
        return UserPasswordControllerApiFp(this.configuration).sendAccountVerificationCodeUsingPOST(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendResetPasswordToken
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    public sendResetPasswordTokenUsingPOST(email: string, options?: any) {
        return UserPasswordControllerApiFp(this.configuration).sendResetPasswordTokenUsingPOST(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary verifyPwdResetToken
     * @param {string} token token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    public verifyPwdResetTokenUsingGET(token: string, options?: any) {
        return UserPasswordControllerApiFp(this.configuration).verifyPwdResetTokenUsingGET(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary verifyUserAccount
     * @param {string} code code
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    public verifyUserAccountUsingPUT(code: string, userId: string, options?: any) {
        return UserPasswordControllerApiFp(this.configuration).verifyUserAccountUsingPUT(code, userId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserProfileControllerApi - axios parameter creator
 * @export
 */
export const UserProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addUserAddress
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserAddressUsingPOST: async (userId: number, request: UpsertAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addUserAddressUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addUserAddressUsingPOST.');
            }
            const localVarPath = `/api/v1/users/{userId}/addresses`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addUserPhoneNumber
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPhoneNumberUsingPOST: async (userId: number, request: UpdateUserPhoneNumberRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addUserPhoneNumberUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addUserPhoneNumberUsingPOST.');
            }
            const localVarPath = `/api/v1/users/{userId}/phone-numbers`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPhoneNumberUsingDELETE: async (phoneNumberId: number, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberId' is not null or undefined
            if (phoneNumberId === null || phoneNumberId === undefined) {
                throw new RequiredError('phoneNumberId','Required parameter phoneNumberId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
            }
            const localVarPath = `/api/v1/users/{userId}/phone-numbers/{phoneNumberId}`
                .replace(`{${"phoneNumberId"}}`, encodeURIComponent(String(phoneNumberId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUserAddresses
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAddressesUsingGET: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserAddressesUsingGET.');
            }
            const localVarPath = `/api/v1/users/{userId}/addresses`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary mergeUser
         * @param {string} primaryUserId primaryUserId
         * @param {MergeUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeUserUsingPOST: async (primaryUserId: string, request: MergeUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'primaryUserId' is not null or undefined
            if (primaryUserId === null || primaryUserId === undefined) {
                throw new RequiredError('primaryUserId','Required parameter primaryUserId was null or undefined when calling mergeUserUsingPOST.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling mergeUserUsingPOST.');
            }
            const localVarPath = `/api/v1/users/{primaryUserId}/merge`
                .replace(`{${"primaryUserId"}}`, encodeURIComponent(String(primaryUserId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateProfilePicture
         * @param {number} userId userId
         * @param {UpdateProfilePictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePictureUsingPUT: async (userId: number, request: UpdateProfilePictureRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateProfilePictureUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateProfilePictureUsingPUT.');
            }
            const localVarPath = `/api/v1/users/{userId}/profile-picture`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateUserAddress
         * @param {number} addressId addressId
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAddressUsingPUT: async (addressId: number, userId: number, request: UpsertAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            if (addressId === null || addressId === undefined) {
                throw new RequiredError('addressId','Required parameter addressId was null or undefined when calling updateUserAddressUsingPUT.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUserAddressUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateUserAddressUsingPUT.');
            }
            const localVarPath = `/api/v1/users/{userId}/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhoneNumberUsingPUT: async (phoneNumberId: number, userId: number, request: UpdateUserPhoneNumberRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberId' is not null or undefined
            if (phoneNumberId === null || phoneNumberId === undefined) {
                throw new RequiredError('phoneNumberId','Required parameter phoneNumberId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling updateUserPhoneNumberUsingPUT.');
            }
            const localVarPath = `/api/v1/users/{userId}/phone-numbers/{phoneNumberId}`
                .replace(`{${"phoneNumberId"}}`, encodeURIComponent(String(phoneNumberId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserProfileControllerApi - functional programming interface
 * @export
 */
export const UserProfileControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addUserAddress
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserAddressUsingPOST(userId: number, request: UpsertAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).addUserAddressUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary addUserPhoneNumber
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserPhoneNumberUsingPOST(userId: number, request: UpdateUserPhoneNumberRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserDetailsResponse>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).addUserPhoneNumberUsingPOST(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserPhoneNumberUsingDELETE(phoneNumberId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserDetailsResponse>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).deleteUserPhoneNumberUsingDELETE(phoneNumberId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getUserAddresses
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAddressesUsingGET(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserAddressesResponse>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).getUserAddressesUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary mergeUser
         * @param {string} primaryUserId primaryUserId
         * @param {MergeUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeUserUsingPOST(primaryUserId: string, request: MergeUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeUserResponse>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).mergeUserUsingPOST(primaryUserId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateProfilePicture
         * @param {number} userId userId
         * @param {UpdateProfilePictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfilePictureUsingPUT(userId: number, request: UpdateProfilePictureRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).updateProfilePictureUsingPUT(userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateUserAddress
         * @param {number} addressId addressId
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserAddressUsingPUT(addressId: number, userId: number, request: UpsertAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).updateUserAddressUsingPUT(addressId, userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPhoneNumberUsingPUT(phoneNumberId: number, userId: number, request: UpdateUserPhoneNumberRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserDetailsResponse>> {
            const localVarAxiosArgs = await UserProfileControllerApiAxiosParamCreator(configuration).updateUserPhoneNumberUsingPUT(phoneNumberId, userId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserProfileControllerApi - factory interface
 * @export
 */
export const UserProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addUserAddress
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserAddressUsingPOST(userId: number, request: UpsertAddressRequest, options?: any): AxiosPromise<void> {
            return UserProfileControllerApiFp(configuration).addUserAddressUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addUserPhoneNumber
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPhoneNumberUsingPOST(userId: number, request: UpdateUserPhoneNumberRequest, options?: any): AxiosPromise<UpdateUserDetailsResponse> {
            return UserProfileControllerApiFp(configuration).addUserPhoneNumberUsingPOST(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPhoneNumberUsingDELETE(phoneNumberId: number, userId: number, options?: any): AxiosPromise<UpdateUserDetailsResponse> {
            return UserProfileControllerApiFp(configuration).deleteUserPhoneNumberUsingDELETE(phoneNumberId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUserAddresses
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAddressesUsingGET(userId: number, options?: any): AxiosPromise<GetUserAddressesResponse> {
            return UserProfileControllerApiFp(configuration).getUserAddressesUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary mergeUser
         * @param {string} primaryUserId primaryUserId
         * @param {MergeUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeUserUsingPOST(primaryUserId: string, request: MergeUserRequest, options?: any): AxiosPromise<MergeUserResponse> {
            return UserProfileControllerApiFp(configuration).mergeUserUsingPOST(primaryUserId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateProfilePicture
         * @param {number} userId userId
         * @param {UpdateProfilePictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePictureUsingPUT(userId: number, request: UpdateProfilePictureRequest, options?: any): AxiosPromise<void> {
            return UserProfileControllerApiFp(configuration).updateProfilePictureUsingPUT(userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateUserAddress
         * @param {number} addressId addressId
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAddressUsingPUT(addressId: number, userId: number, request: UpsertAddressRequest, options?: any): AxiosPromise<void> {
            return UserProfileControllerApiFp(configuration).updateUserAddressUsingPUT(addressId, userId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhoneNumberUsingPUT(phoneNumberId: number, userId: number, request: UpdateUserPhoneNumberRequest, options?: any): AxiosPromise<UpdateUserDetailsResponse> {
            return UserProfileControllerApiFp(configuration).updateUserPhoneNumberUsingPUT(phoneNumberId, userId, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserProfileControllerApi - object-oriented interface
 * @export
 * @class UserProfileControllerApi
 * @extends {BaseAPI}
 */
export class UserProfileControllerApi extends BaseAPI {
    /**
     * 
     * @summary addUserAddress
     * @param {number} userId userId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public addUserAddressUsingPOST(userId: number, request: UpsertAddressRequest, options?: any) {
        return UserProfileControllerApiFp(this.configuration).addUserAddressUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addUserPhoneNumber
     * @param {number} userId userId
     * @param {UpdateUserPhoneNumberRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public addUserPhoneNumberUsingPOST(userId: number, request: UpdateUserPhoneNumberRequest, options?: any) {
        return UserProfileControllerApiFp(this.configuration).addUserPhoneNumberUsingPOST(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteUserPhoneNumber
     * @param {number} phoneNumberId phoneNumberId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public deleteUserPhoneNumberUsingDELETE(phoneNumberId: number, userId: number, options?: any) {
        return UserProfileControllerApiFp(this.configuration).deleteUserPhoneNumberUsingDELETE(phoneNumberId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUserAddresses
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public getUserAddressesUsingGET(userId: number, options?: any) {
        return UserProfileControllerApiFp(this.configuration).getUserAddressesUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary mergeUser
     * @param {string} primaryUserId primaryUserId
     * @param {MergeUserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public mergeUserUsingPOST(primaryUserId: string, request: MergeUserRequest, options?: any) {
        return UserProfileControllerApiFp(this.configuration).mergeUserUsingPOST(primaryUserId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateProfilePicture
     * @param {number} userId userId
     * @param {UpdateProfilePictureRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public updateProfilePictureUsingPUT(userId: number, request: UpdateProfilePictureRequest, options?: any) {
        return UserProfileControllerApiFp(this.configuration).updateProfilePictureUsingPUT(userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateUserAddress
     * @param {number} addressId addressId
     * @param {number} userId userId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public updateUserAddressUsingPUT(addressId: number, userId: number, request: UpsertAddressRequest, options?: any) {
        return UserProfileControllerApiFp(this.configuration).updateUserAddressUsingPUT(addressId, userId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateUserPhoneNumber
     * @param {number} phoneNumberId phoneNumberId
     * @param {number} userId userId
     * @param {UpdateUserPhoneNumberRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    public updateUserPhoneNumberUsingPUT(phoneNumberId: number, userId: number, request: UpdateUserPhoneNumberRequest, options?: any) {
        return UserProfileControllerApiFp(this.configuration).updateUserPhoneNumberUsingPUT(phoneNumberId, userId, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserSearchControllerApi - axios parameter creator
 * @export
 */
export const UserSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary findMatchingUsers
         * @param {FindMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMatchingUsersUsingPOST: async (request: FindMatchingUsersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling findMatchingUsersUsingPOST.');
            }
            const localVarPath = `/api/v1/users/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCountOfMatchingUsers
         * @param {GetCountOfMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountOfMatchingUsersUsingPOST: async (request: GetCountOfMatchingUsersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getCountOfMatchingUsersUsingPOST.');
            }
            const localVarPath = `/api/v1/users/matches`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserSearchControllerApi - functional programming interface
 * @export
 */
export const UserSearchControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary findMatchingUsers
         * @param {FindMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMatchingUsersUsingPOST(request: FindMatchingUsersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindMatchingUsersResponse>> {
            const localVarAxiosArgs = await UserSearchControllerApiAxiosParamCreator(configuration).findMatchingUsersUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCountOfMatchingUsers
         * @param {GetCountOfMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountOfMatchingUsersUsingPOST(request: GetCountOfMatchingUsersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCountOfMatchingUsersResponse>> {
            const localVarAxiosArgs = await UserSearchControllerApiAxiosParamCreator(configuration).getCountOfMatchingUsersUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserSearchControllerApi - factory interface
 * @export
 */
export const UserSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary findMatchingUsers
         * @param {FindMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMatchingUsersUsingPOST(request: FindMatchingUsersRequest, options?: any): AxiosPromise<FindMatchingUsersResponse> {
            return UserSearchControllerApiFp(configuration).findMatchingUsersUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCountOfMatchingUsers
         * @param {GetCountOfMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountOfMatchingUsersUsingPOST(request: GetCountOfMatchingUsersRequest, options?: any): AxiosPromise<GetCountOfMatchingUsersResponse> {
            return UserSearchControllerApiFp(configuration).getCountOfMatchingUsersUsingPOST(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserSearchControllerApi - object-oriented interface
 * @export
 * @class UserSearchControllerApi
 * @extends {BaseAPI}
 */
export class UserSearchControllerApi extends BaseAPI {
    /**
     * 
     * @summary findMatchingUsers
     * @param {FindMatchingUsersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchControllerApi
     */
    public findMatchingUsersUsingPOST(request: FindMatchingUsersRequest, options?: any) {
        return UserSearchControllerApiFp(this.configuration).findMatchingUsersUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCountOfMatchingUsers
     * @param {GetCountOfMatchingUsersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchControllerApi
     */
    public getCountOfMatchingUsersUsingPOST(request: GetCountOfMatchingUsersRequest, options?: any) {
        return UserSearchControllerApiFp(this.configuration).getCountOfMatchingUsersUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UtilityControllerApi - axios parameter creator
 * @export
 */
export const UtilityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary backfillLawfirmTransactionRecords
         * @param {BackfillLawfirmTransactionRecordsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backfillLawfirmTransactionRecordsUsingPOST: async (request: BackfillLawfirmTransactionRecordsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling backfillLawfirmTransactionRecordsUsingPOST.');
            }
            const localVarPath = `/api/v1/utility/backfill-lawfirm-transaction-records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utility/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary setStatus
         * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
         * @param {boolean} [syncStatus] syncStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatusUsingPOST: async (lawfirmTransactionsStatus?: boolean, syncStatus?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utility/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lawfirmTransactionsStatus !== undefined) {
                localVarQueryParameter['lawfirmTransactionsStatus'] = lawfirmTransactionsStatus;
            }

            if (syncStatus !== undefined) {
                localVarQueryParameter['syncStatus'] = syncStatus;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilityControllerApi - functional programming interface
 * @export
 */
export const UtilityControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary backfillLawfirmTransactionRecords
         * @param {BackfillLawfirmTransactionRecordsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backfillLawfirmTransactionRecordsUsingPOST(request: BackfillLawfirmTransactionRecordsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackfillLawfirmTransactionRecordsResponse>> {
            const localVarAxiosArgs = await UtilityControllerApiAxiosParamCreator(configuration).backfillLawfirmTransactionRecordsUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatusUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: boolean; }>> {
            const localVarAxiosArgs = await UtilityControllerApiAxiosParamCreator(configuration).getStatusUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary setStatus
         * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
         * @param {boolean} [syncStatus] syncStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStatusUsingPOST(lawfirmTransactionsStatus?: boolean, syncStatus?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: boolean; }>> {
            const localVarAxiosArgs = await UtilityControllerApiAxiosParamCreator(configuration).setStatusUsingPOST(lawfirmTransactionsStatus, syncStatus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UtilityControllerApi - factory interface
 * @export
 */
export const UtilityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary backfillLawfirmTransactionRecords
         * @param {BackfillLawfirmTransactionRecordsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backfillLawfirmTransactionRecordsUsingPOST(request: BackfillLawfirmTransactionRecordsRequest, options?: any): AxiosPromise<BackfillLawfirmTransactionRecordsResponse> {
            return UtilityControllerApiFp(configuration).backfillLawfirmTransactionRecordsUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusUsingGET(options?: any): AxiosPromise<{ [key: string]: boolean; }> {
            return UtilityControllerApiFp(configuration).getStatusUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary setStatus
         * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
         * @param {boolean} [syncStatus] syncStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatusUsingPOST(lawfirmTransactionsStatus?: boolean, syncStatus?: boolean, options?: any): AxiosPromise<{ [key: string]: boolean; }> {
            return UtilityControllerApiFp(configuration).setStatusUsingPOST(lawfirmTransactionsStatus, syncStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilityControllerApi - object-oriented interface
 * @export
 * @class UtilityControllerApi
 * @extends {BaseAPI}
 */
export class UtilityControllerApi extends BaseAPI {
    /**
     * 
     * @summary backfillLawfirmTransactionRecords
     * @param {BackfillLawfirmTransactionRecordsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityControllerApi
     */
    public backfillLawfirmTransactionRecordsUsingPOST(request: BackfillLawfirmTransactionRecordsRequest, options?: any) {
        return UtilityControllerApiFp(this.configuration).backfillLawfirmTransactionRecordsUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityControllerApi
     */
    public getStatusUsingGET(options?: any) {
        return UtilityControllerApiFp(this.configuration).getStatusUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary setStatus
     * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
     * @param {boolean} [syncStatus] syncStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityControllerApi
     */
    public setStatusUsingPOST(lawfirmTransactionsStatus?: boolean, syncStatus?: boolean, options?: any) {
        return UtilityControllerApiFp(this.configuration).setStatusUsingPOST(lawfirmTransactionsStatus, syncStatus, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ValidationControllerApi - axios parameter creator
 * @export
 */
export const ValidationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary validateEmailAddress
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailAddressUsingGET: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling validateEmailAddressUsingGET.');
            }
            const localVarPath = `/api/v1/validate/email`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValidationControllerApi - functional programming interface
 * @export
 */
export const ValidationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary validateEmailAddress
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateEmailAddressUsingGET(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await ValidationControllerApiAxiosParamCreator(configuration).validateEmailAddressUsingGET(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ValidationControllerApi - factory interface
 * @export
 */
export const ValidationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary validateEmailAddress
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailAddressUsingGET(email: string, options?: any): AxiosPromise<boolean> {
            return ValidationControllerApiFp(configuration).validateEmailAddressUsingGET(email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValidationControllerApi - object-oriented interface
 * @export
 * @class ValidationControllerApi
 * @extends {BaseAPI}
 */
export class ValidationControllerApi extends BaseAPI {
    /**
     * 
     * @summary validateEmailAddress
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidationControllerApi
     */
    public validateEmailAddressUsingGET(email: string, options?: any) {
        return ValidationControllerApiFp(this.configuration).validateEmailAddressUsingGET(email, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ViolationPenaltyControllerApi - axios parameter creator
 * @export
 */
export const ViolationPenaltyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getPenaltiesByViolation
         * @param {string} violationId violationId
         * @param {'ALL' | 'SHORT'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltiesByViolationUsingGET: async (violationId: string, flavor?: 'ALL' | 'SHORT', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'violationId' is not null or undefined
            if (violationId === null || violationId === undefined) {
                throw new RequiredError('violationId','Required parameter violationId was null or undefined when calling getPenaltiesByViolationUsingGET.');
            }
            const localVarPath = `/api/v1/violations/{violationId}/penalties`
                .replace(`{${"violationId"}}`, encodeURIComponent(String(violationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flavor !== undefined) {
                localVarQueryParameter['flavor'] = flavor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPenaltyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltyTypesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/violations/penalties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removePenalty
         * @param {string} penaltyTypeId penaltyTypeId
         * @param {string} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePenaltyUsingDELETE: async (penaltyTypeId: string, violationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'penaltyTypeId' is not null or undefined
            if (penaltyTypeId === null || penaltyTypeId === undefined) {
                throw new RequiredError('penaltyTypeId','Required parameter penaltyTypeId was null or undefined when calling removePenaltyUsingDELETE.');
            }
            // verify required parameter 'violationId' is not null or undefined
            if (violationId === null || violationId === undefined) {
                throw new RequiredError('violationId','Required parameter violationId was null or undefined when calling removePenaltyUsingDELETE.');
            }
            const localVarPath = `/api/v1/violations/{violationId}/penalties/{penaltyTypeId}`
                .replace(`{${"penaltyTypeId"}}`, encodeURIComponent(String(penaltyTypeId)))
                .replace(`{${"violationId"}}`, encodeURIComponent(String(violationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upsertPenalty
         * @param {string} violationId violationId
         * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertPenaltyUsingPOST: async (violationId: string, penaltyToAdd: AddPenaltyRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'violationId' is not null or undefined
            if (violationId === null || violationId === undefined) {
                throw new RequiredError('violationId','Required parameter violationId was null or undefined when calling upsertPenaltyUsingPOST.');
            }
            // verify required parameter 'penaltyToAdd' is not null or undefined
            if (penaltyToAdd === null || penaltyToAdd === undefined) {
                throw new RequiredError('penaltyToAdd','Required parameter penaltyToAdd was null or undefined when calling upsertPenaltyUsingPOST.');
            }
            const localVarPath = `/api/v1/violations/{violationId}/penalties`
                .replace(`{${"violationId"}}`, encodeURIComponent(String(violationId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof penaltyToAdd !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(penaltyToAdd !== undefined ? penaltyToAdd : {}) : (penaltyToAdd || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViolationPenaltyControllerApi - functional programming interface
 * @export
 */
export const ViolationPenaltyControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getPenaltiesByViolation
         * @param {string} violationId violationId
         * @param {'ALL' | 'SHORT'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPenaltiesByViolationUsingGET(violationId: string, flavor?: 'ALL' | 'SHORT', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViolationPenaltyResponse>> {
            const localVarAxiosArgs = await ViolationPenaltyControllerApiAxiosParamCreator(configuration).getPenaltiesByViolationUsingGET(violationId, flavor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPenaltyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPenaltyTypesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPenaltyTypesResponse>> {
            const localVarAxiosArgs = await ViolationPenaltyControllerApiAxiosParamCreator(configuration).getPenaltyTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removePenalty
         * @param {string} penaltyTypeId penaltyTypeId
         * @param {string} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePenaltyUsingDELETE(penaltyTypeId: string, violationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ViolationPenaltyControllerApiAxiosParamCreator(configuration).removePenaltyUsingDELETE(penaltyTypeId, violationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary upsertPenalty
         * @param {string} violationId violationId
         * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertPenaltyUsingPOST(violationId: string, penaltyToAdd: AddPenaltyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ViolationPenaltyControllerApiAxiosParamCreator(configuration).upsertPenaltyUsingPOST(violationId, penaltyToAdd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ViolationPenaltyControllerApi - factory interface
 * @export
 */
export const ViolationPenaltyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getPenaltiesByViolation
         * @param {string} violationId violationId
         * @param {'ALL' | 'SHORT'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltiesByViolationUsingGET(violationId: string, flavor?: 'ALL' | 'SHORT', options?: any): AxiosPromise<ViolationPenaltyResponse> {
            return ViolationPenaltyControllerApiFp(configuration).getPenaltiesByViolationUsingGET(violationId, flavor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPenaltyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltyTypesUsingGET(options?: any): AxiosPromise<GetPenaltyTypesResponse> {
            return ViolationPenaltyControllerApiFp(configuration).getPenaltyTypesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary removePenalty
         * @param {string} penaltyTypeId penaltyTypeId
         * @param {string} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePenaltyUsingDELETE(penaltyTypeId: string, violationId: string, options?: any): AxiosPromise<void> {
            return ViolationPenaltyControllerApiFp(configuration).removePenaltyUsingDELETE(penaltyTypeId, violationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary upsertPenalty
         * @param {string} violationId violationId
         * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertPenaltyUsingPOST(violationId: string, penaltyToAdd: AddPenaltyRequest, options?: any): AxiosPromise<void> {
            return ViolationPenaltyControllerApiFp(configuration).upsertPenaltyUsingPOST(violationId, penaltyToAdd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViolationPenaltyControllerApi - object-oriented interface
 * @export
 * @class ViolationPenaltyControllerApi
 * @extends {BaseAPI}
 */
export class ViolationPenaltyControllerApi extends BaseAPI {
    /**
     * 
     * @summary getPenaltiesByViolation
     * @param {string} violationId violationId
     * @param {'ALL' | 'SHORT'} [flavor] flavor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    public getPenaltiesByViolationUsingGET(violationId: string, flavor?: 'ALL' | 'SHORT', options?: any) {
        return ViolationPenaltyControllerApiFp(this.configuration).getPenaltiesByViolationUsingGET(violationId, flavor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPenaltyTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    public getPenaltyTypesUsingGET(options?: any) {
        return ViolationPenaltyControllerApiFp(this.configuration).getPenaltyTypesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary removePenalty
     * @param {string} penaltyTypeId penaltyTypeId
     * @param {string} violationId violationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    public removePenaltyUsingDELETE(penaltyTypeId: string, violationId: string, options?: any) {
        return ViolationPenaltyControllerApiFp(this.configuration).removePenaltyUsingDELETE(penaltyTypeId, violationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary upsertPenalty
     * @param {string} violationId violationId
     * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    public upsertPenaltyUsingPOST(violationId: string, penaltyToAdd: AddPenaltyRequest, options?: any) {
        return ViolationPenaltyControllerApiFp(this.configuration).upsertPenaltyUsingPOST(violationId, penaltyToAdd, options).then((request) => request(this.axios, this.basePath));
    }

}


