"use strict";
// tslint:disable
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaseAlertAlertTypeEnum = exports.CaseAlertActionTypeEnum = exports.CaseActionDomainResActionTypeEnum = exports.CaseActionDomainReqActionTypeEnum = exports.CaseActionDomainActionTypeEnum = exports.CancelCaseRequestCancelationStatusEnum = exports.CancelBillingSubscriptionResponseStatusEnum = exports.CallContactIntegratedResourceTypeEnum = exports.CallContactCallStatusEnum = exports.CallContactCallDirectionEnum = exports.BookingCancelationStateEnum = exports.BookingCancelationCaseStatusEnum = exports.BookingStateEnum = exports.BookingCaseStatusEnum = exports.BillingSubscriptionModelStatusEnum = exports.BillingSubscriptionItemModelUsageTypeEnum = exports.BillingSubscriptionItemModelTiersModeEnum = exports.BillingSubscriptionItemModelIntervalEnum = exports.BillingSubscriptionItemModelBillingSchemeEnum = exports.BillingPriceModelIntervalEnum = exports.BillingPriceModelBillingSchemeEnum = exports.BillingInvoiceModelStatusEnum = exports.AwsCredentialsRequestKeyNameEnum = exports.AvailablePaymentPlanPaymentPlanTypeEnum = exports.AuthorModelUserRoleEnum = exports.AppEventCreateRequestAppEventNameEnum = exports.AlertAlertTypeEnum = exports.AlertActionTypeEnum = exports.AggregateBySourceReviewSourceEnum = exports.AddressDomainResStateEnum = exports.AddressDomainResEntityTypeEnum = exports.AddressDomainReqStateEnum = exports.AddressDomainReqEntityTypeEnum = exports.AddressDomainStateEnum = exports.AddressDomainEntityTypeEnum = exports.AddViolationResponseViolationClassificationEnum = exports.AddViolationRequestViolationClassificationEnum = exports.AddReviewRequestSourceEnum = exports.AddReviewRequestPrivacyModeEnum = exports.AddRedirectUrlRequestRedirectTypeEnum = exports.AddRedirectUrlRequestPageTypeEnum = exports.AddNoteToPhoneLeadRequestEntityTypeEnum = exports.AddInnerCourtCourtTypeEnum = exports.AddCourtCoverageRequestRefundEligibilityEnum = exports.ActivityFeedModelPrivacyModeEnum = exports.ActivityFeedModelActivityTypeEnum = exports.AccountLevelFeeToSaveRefundEligibilityEnum = exports.AccountLevelFeeToSaveClassificationEnum = exports.AccountLevelFeeRefundEligibilityEnum = exports.AccountLevelFeeClassificationEnum = void 0;
exports.CreateBillingSubscriptionResponseStatusEnum = exports.CreateBillingSubscriptionItemModelUsageTypeEnum = exports.CreateBillingSubscriptionItemModelTiersModeEnum = exports.CreateBillingSubscriptionItemModelIntervalEnum = exports.CreateBillingSubscriptionItemModelBillingSchemeEnum = exports.CourtResponseModelCourtTypeEnum = exports.CourtDomainResCourtTypeEnum = exports.CourtDomainReqCourtTypeEnum = exports.CourtDomainCourtTypeEnum = exports.CountyDomainStateCodeEnum = exports.ClientActionRequiredRequestCaseActionItemEnum = exports.CitationWithMissingCourtStateEnum = exports.CitationInputRequestStateEnum = exports.CitationInputRequestCdlStatusEnum = exports.CitationDomainResStateEnum = exports.CitationDomainResClientTypeEnum = exports.CitationDomainResCdlStatusEnum = exports.CitationDomainReqStateEnum = exports.CitationDomainReqClientTypeEnum = exports.CitationDomainReqCdlStatusEnum = exports.CitationDomainStateEnum = exports.CitationDomainClientTypeEnum = exports.CitationDomainCdlStatusEnum = exports.ChargeFeeToLawfirmRequestTransactionMethodEnum = exports.CaseWithCoverageObtainedCaseClassificationEnum = exports.CaseViolationPenaltyPenaltyTypeEnum = exports.CaseTransferHistoryRefundOwnerEnum = exports.CaseTransferHistoryDecisionStatusEnum = exports.CaseSummaryDomainCaseDecisionStatusEnum = exports.CaseStatusDomainStatusCategoryEnum = exports.CaseStatusDomainCaseStatusEnum = exports.CaseStatusDetailsResponseStatusEnum = exports.CaseStatusDetailsResponseCategoryEnum = exports.CasePaymentDomainTransactionMethodEnum = exports.CasePaymentDomainRecipientEnum = exports.CaseMessageDomainMediaTypeEnum = exports.CaseMessageDomainAuthorRoleTypeEnum = exports.CaseLineItemDomainResLineItemTypeEnum = exports.CaseLineItemDomainResLineItemOwnerEnum = exports.CaseLineItemDomainReqLineItemTypeEnum = exports.CaseLineItemDomainReqLineItemOwnerEnum = exports.CaseDomainResRefundEligibilityEnum = exports.CaseDomainResCaseStatusCategoryEnum = exports.CaseDomainResCaseStatusEnum = exports.CaseDomainReqRefundEligibilityEnum = exports.CaseDomainReqCaseStatusCategoryEnum = exports.CaseDomainReqCaseStatusEnum = exports.CaseDomainRefundEligibilityEnum = exports.CaseDomainCaseStatusCategoryEnum = exports.CaseDomainCaseStatusEnum = void 0;
exports.GetLawfirmModelLawfirmPaymentModelEnum = exports.GetLawfirmJobTitleResponseJobTitlesEnum = exports.GetLawfirmFeeModelRefundEligibilityEnum = exports.GetLawfirmFeeModelClassificationEnum = exports.GetHouseHoldMateModelRelationshipTypeEnum = exports.GetHouseHoldMateModelInviteStatusEnum = exports.GetCaseActionTypesResponseCaseActionTypesEnum = exports.GeoRatesRequestCdlStatusEnum = exports.GenerateTemplateRequestEmailTemplateIdEnum = exports.FuturePaymentPaymentStatusEnum = exports.FreshdeskTicketReferenceDomainTicketTypeEnum = exports.FreshdeskTicketReferenceDomainReferenceEntityTypeEnum = exports.FreshDeskTicketResStatusTypeEnum = exports.FreshDeskTicketResPriorityTypeEnum = exports.FreshDeskTicketReqStatusTypeEnum = exports.FreshDeskTicketReqPriorityTypeEnum = exports.FreshDeskTicketStatusTypeEnum = exports.FreshDeskTicketPriorityTypeEnum = exports.FindMatchingUserLoginProviderEnum = exports.FinancialTransactionTransactionTypeEnum = exports.FinancialTransactionTransactionMethodEnum = exports.FinancialTransactionTaskStatusEnum = exports.EstimateInsuranceSavingsRequestStateEnum = exports.EnableViolationModelViolationClassEnum = exports.DripRemoveRequestDripActionEnum = exports.DismissPhoneLeadRequestEntityTypeEnum = exports.DirectMailTemplateToAddMailTypeEnum = exports.DirectMailTemplateMailTypeEnum = exports.DirectMailSendRequestReconcileTypeEnum = exports.DirectMailContactTrackingStatusEnum = exports.DirectMailContactMailTypeEnum = exports.DeleteNotificationEventRequestPageTypeEnum = exports.DeleteNotificationByPagesRequestPageTypesEnum = exports.DefaultClassModelClassificationEnum = exports.DashboardStatusModelStatusCategoryEnum = exports.DashboardStatusModelCaseStatusEnum = exports.DashboardCitationModelCdlStatusEnum = exports.CustomerReviewSourceEnum = exports.CustomerReviewNameSettingEnum = exports.CustomerReviewLoggedInUserVoteEnum = exports.CustomerLeadStateEnum = exports.CustomerLeadChannelEnum = exports.CreateStripeConnectAccountRequestAccountTypeEnum = exports.CreateReferralCodeRequestReferrerCreditTypeEnum = exports.CreateReferralCodeRequestRefereeCreditTypeEnum = exports.CreateNoteInputNoteTypeEnum = exports.CreateLawfirmModelLawfirmStateEnum = exports.CreateLawfirmModelLawfirmPaymentModelEnum = exports.CreateCitationRequestClientTypeEnum = exports.CreateCitationRequestCitationStateEnum = void 0;
exports.LineItemRequestLineItemOwnerEnum = exports.LineItemModelLineItemTypeEnum = exports.LineItemModelLineItemOwnerEnum = exports.LineItemLineItemEnum = exports.LawyerModelJobTitleEnum = exports.LawyerLicenseModelRegionCodeEnum = exports.LawyerLicenseModelLicenseTypeEnum = exports.LawfirmStorefrontModelLawfirmStateEnum = exports.LawfirmSettingsDomainResReferralFeeTypeEnum = exports.LawfirmSettingsDomainReqReferralFeeTypeEnum = exports.LawfirmRedirectModelLandingPageTypeEnum = exports.LawfirmRatesResponseIneligibleMatchReasonsEnum = exports.LawfirmRatesResponseFeeLevelEnum = exports.LawfirmPayoutDomainTransactionMethodEnum = exports.LawfirmLeadDomainLawfirmStateEnum = exports.LawfirmLeadDomainLawfirmAddressStateEnum = exports.LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum = exports.LawfirmInboxMessageDomainCaseStatusCategoryEnum = exports.LawfirmInboxMessageDomainCaseStatusEnum = exports.LawfirmFeeDomainTransactionMethodEnum = exports.LawfirmDocumentTemplateDocTypeEnum = exports.LawfirmDocumentTemplateClientDocRequirementEnum = exports.LawfirmDocumentDocTypeEnum = exports.LawfirmDocumentClientDocRequirementEnum = exports.LawfirmCaseDomainResRefundOwnerEnum = exports.LawfirmCaseDomainResCaseDecisionStatusEnum = exports.LawfirmCaseDomainReqRefundOwnerEnum = exports.LawfirmCaseDomainReqCaseDecisionStatusEnum = exports.LawfirmCaseDomainRefundOwnerEnum = exports.LawfirmCaseDomainCaseDecisionStatusEnum = exports.LawfirmCaseDocumentDocTypeEnum = exports.LawfirmCaseDocumentClientDocRequirementEnum = exports.LawfirmBookingSummaryStateEnum = exports.LawfirmAuditEventModelEventEnum = exports.LawfirmAuditEventModelClientTypeEnum = exports.IsRefundEligibleResponseRefundEligibilityTypeEnum = exports.InviteHouseholdMateRequestRelationshipTypeEnum = exports.InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum = exports.GraphRequestCaseStatuesEnum = exports.GetTrafficViolationModelViolationClassificationEnum = exports.GetReferralCodeResponseRefereeCreditTypeEnum = exports.GetReferralCodeResponseOwnerTypeEnum = exports.GetPenaltyTypeTypeEnum = exports.GetPaymentModelTypesResponseModelsEnum = exports.GetLineItemTypesResponseLineItemTypesEnum = exports.GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum = exports.GetLawfirmSummaryCaseRequestCaseStatusesEnum = exports.GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum = exports.GetLawfirmModelSupportedStatesEnum = exports.GetLawfirmModelLawfirmStateEnum = void 0;
exports.ResetViolationModelViolationClassEnum = exports.ReplyToTicketRequestNewTicketStatusEnum = exports.RegisterNewUserRequestRoleTypeEnum = exports.RegisterNewUserRequestClientTypeEnum = exports.RefundLawfirmFeeRequestRefundReasonEnum = exports.RefundCasePaymentRequestRefundReasonTypeEnum = exports.ReferralResponseByUserLatestCreditStatusEnum = exports.ReferralResponseReferralSourceTypeEnum = exports.ReferralResponseReferralPaymentStatusEnum = exports.ReferralResponseReferralEventEnum = exports.ReferralResponseReferralCreditTypeEnum = exports.ReferralResponseReferralCreditStatusEnum = exports.ReferralContactStatusErrorTypeEnum = exports.PutDocumentRequestDocTypeEnum = exports.PutDocumentRequestClientDocReqEnum = exports.PushNotificationRequestPlatformTypeEnum = exports.PushNotificationRequestPageTypeEnum = exports.PushNotificationRegistrationRequestPlatformTypeEnum = exports.PriceMatchResponsePriceMatchStatusEnum = exports.PotentialCustomerDomainCitationStateEnum = exports.PotentialCustomerDomainCaseStatusEnum = exports.PhoneNumberDomainResTypeEnum = exports.PhoneNumberDomainResEntityTypeEnum = exports.PhoneNumberDomainReqTypeEnum = exports.PhoneNumberDomainReqEntityTypeEnum = exports.PhoneNumberDomainTypeEnum = exports.PhoneNumberDomainEntityTypeEnum = exports.PersistTicketEvaluationRequestSourceEnum = exports.PenaltyModelPenaltyTypeEnum = exports.PenaltyPenaltyTypeEnum = exports.NoteDomainNoteTypeEnum = exports.NoViolationCitationCaseStatusEnum = exports.NewUserLoginProviderEnum = exports.MissingPaymentDomainCaseStatusEnum = exports.MissingLawfirmPayoutResultStateEnum = exports.MissingLawfirmPayoutResultCaseStatusEnum = exports.MessageInputModelMediaTypeEnum = exports.MessageInputModelAuthorEnum = exports.MatchInnerCaseResponseRefundEligibilityEnum = exports.MatchInnerCaseResponseReferralCodeOwnerEnum = exports.MarkCaseAsResolvedResponseStatusCategoryEnum = exports.MarkCaseAsResolvedResponseCaseStatusEnum = exports.MarkCaseAsResolvedRequestResolutionStatusEnum = exports.LostCaseWithTransferNotReversedRefundOwnerEnum = exports.ListLawfirmSurchargeTypeModelTypeEnum = exports.ListLawfirmSurchargeModelRefundEligibilityEnum = exports.ListLawfirmSurchargeModelFeeTypeEnum = exports.ListLawfirmSurchargeModelFeatureEnum = exports.ListEligibleStatusResponseStatusesEnum = exports.LineItemRequestLineItemTypeEnum = void 0;
exports.UserDomainPrivacyModeEnum = exports.UserDomainLoginProviderEnum = exports.UserDomainLawyerJobTitleEnum = exports.UserAccountModelLoginProviderEnum = exports.UpdateViolationRequestClassificationEnum = exports.UpdateUserRolesRequestRolesEnum = exports.UpdateUserModelPrivacyModeEnum = exports.UpdateUserModelLoginProviderEnum = exports.UpdateRefundEligibilityForCaseRequestRefundOwnerEnum = exports.UpdatePhoneNumberTypeEnum = exports.UpdatePhoneNumberEntityTypeEnum = exports.UpdateLawfirmPayoutRequestTransactionMethodEnum = exports.UpdateLawfirmPaymentModelRequestPaymentModelEnum = exports.UpdateLawfirmModelLawfirmStateEnum = exports.UpdateLawfirmModelLawfirmPaymentModelEnum = exports.UpdateLawfirmFeeRequestTransactionMethodEnum = exports.UpdateCasePaymentRequestTransactionMethodEnum = exports.UpdateCasePaymentRequestRecipientEnum = exports.TrafficViolationTypeDomainViolationClassificationEnum = exports.TicketReviewRequestResSourceEnum = exports.TicketReviewRequestReqSourceEnum = exports.TicketReviewRequestSourceEnum = exports.TicketLeadDomainClassificationEnum = exports.SubscriberDomainSubscriptionTypeEnum = exports.StripeDisputeDomainPaymentRecipientEnum = exports.StripeDisputeDomainCaseStatusEnum = exports.StripeCustomerAccountDomainEntityTypeEnum = exports.StripeConnectedAccountDomainAccountTypeEnum = exports.SocialPhoneNumberTypeEnum = exports.SocialLoginRequestClientTypeEnum = exports.SetReferralSourceRequestClientTypeEnum = exports.SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum = exports.SendPayoutToLawfirmRequestTransactionMethodEnum = exports.SendEmailToUsersRequestEmailTemplateIdEnum = exports.SendEmailToUserRequestReviewPlatformEnum = exports.SendEmailToUserRequestEmailTemplateIdEnum = exports.SendConsolidatedEmailToUserEmailTemplateIdEnum = exports.ScheduledTaskResponseTaskTypeEnum = exports.ScheduledTaskResponseTaskStatusEnum = exports.ScheduleNewPaymentRequestTransactionMethodEnum = exports.ScheduleNewPaymentRequestRecipientEnum = exports.SaveLawyerRequestJobTitleEnum = exports.SaveLawyerLicenseModelTypeEnum = exports.SaveLawyerLicenseModelRegionCodeEnum = exports.SaveLawyerLeadRequestLeadProvidedSourceEnum = exports.SaveLawfirmSurchargeModelSurchargeTypeEnum = exports.SaveLawfirmSurchargeModelRefundEligibilityEnum = exports.SaveLawfirmSurchargeModelFeeTypeEnum = exports.SaveLawfirmSurchargeModelFeatureTypeEnum = exports.ReverseLawfirmPayoutRequestReversalReasonEnum = void 0;
exports.BlogWebhookControllerApiFp = exports.BlogWebhookControllerApiAxiosParamCreator = exports.AwsCredentialsControllerApi = exports.AwsCredentialsControllerApiFactory = exports.AwsCredentialsControllerApiFp = exports.AwsCredentialsControllerApiAxiosParamCreator = exports.AuthenticationControllerApi = exports.AuthenticationControllerApiFactory = exports.AuthenticationControllerApiFp = exports.AuthenticationControllerApiAxiosParamCreator = exports.AuditLawfirmEventsControllerApi = exports.AuditLawfirmEventsControllerApiFactory = exports.AuditLawfirmEventsControllerApiFp = exports.AuditLawfirmEventsControllerApiAxiosParamCreator = exports.AppEventsControllerApi = exports.AppEventsControllerApiFactory = exports.AppEventsControllerApiFp = exports.AppEventsControllerApiAxiosParamCreator = exports.AlertNotificationControllerApi = exports.AlertNotificationControllerApiFactory = exports.AlertNotificationControllerApiFp = exports.AlertNotificationControllerApiAxiosParamCreator = exports.AddressControllerApi = exports.AddressControllerApiFactory = exports.AddressControllerApiFp = exports.AddressControllerApiAxiosParamCreator = exports.ActivityFeedControllerApi = exports.ActivityFeedControllerApiFactory = exports.ActivityFeedControllerApiFp = exports.ActivityFeedControllerApiAxiosParamCreator = exports.ActionRequiredControllerApi = exports.ActionRequiredControllerApiFactory = exports.ActionRequiredControllerApiFp = exports.ActionRequiredControllerApiAxiosParamCreator = exports.ZoneOffsetTransitionRuleTimeDefinitionEnum = exports.ZoneOffsetTransitionRuleMonthEnum = exports.ZoneOffsetTransitionRuleDayOfWeekEnum = exports.ViolationResponseViolationClassificationEnum = exports.ViolationClassificationModelClassificationEnum = exports.ValidateDirectMailResponseOtrErrorEnum = exports.UserSubscriptionPlanModelResSubscriptionStatusEnum = exports.UserSubscriptionPlanModelReqSubscriptionStatusEnum = exports.UserSubscriptionPlanModelSubscriptionStatusEnum = exports.UserRoleDomainRoleTypeEnum = exports.UserDomainResPrivacyModeEnum = exports.UserDomainResLoginProviderEnum = exports.UserDomainResLawyerJobTitleEnum = exports.UserDomainReqPrivacyModeEnum = exports.UserDomainReqLoginProviderEnum = exports.UserDomainReqLawyerJobTitleEnum = void 0;
exports.CertificateControllerApi = exports.CertificateControllerApiFactory = exports.CertificateControllerApiFp = exports.CertificateControllerApiAxiosParamCreator = exports.CatchAllControllerApi = exports.CatchAllControllerApiFactory = exports.CatchAllControllerApiFp = exports.CatchAllControllerApiAxiosParamCreator = exports.CaseTransferControllerApi = exports.CaseTransferControllerApiFactory = exports.CaseTransferControllerApiFp = exports.CaseTransferControllerApiAxiosParamCreator = exports.CaseStatusControllerApi = exports.CaseStatusControllerApiFactory = exports.CaseStatusControllerApiFp = exports.CaseStatusControllerApiAxiosParamCreator = exports.CaseRefundControllerApi = exports.CaseRefundControllerApiFactory = exports.CaseRefundControllerApiFp = exports.CaseRefundControllerApiAxiosParamCreator = exports.CaseReferralCodeControllerApi = exports.CaseReferralCodeControllerApiFactory = exports.CaseReferralCodeControllerApiFp = exports.CaseReferralCodeControllerApiAxiosParamCreator = exports.CasePaymentControllerApi = exports.CasePaymentControllerApiFactory = exports.CasePaymentControllerApiFp = exports.CasePaymentControllerApiAxiosParamCreator = exports.CaseNotesControllerApi = exports.CaseNotesControllerApiFactory = exports.CaseNotesControllerApiFp = exports.CaseNotesControllerApiAxiosParamCreator = exports.CaseCreationControllerApi = exports.CaseCreationControllerApiFactory = exports.CaseCreationControllerApiFp = exports.CaseCreationControllerApiAxiosParamCreator = exports.CaseControllerApi = exports.CaseControllerApiFactory = exports.CaseControllerApiFp = exports.CaseControllerApiAxiosParamCreator = exports.CaseActionsControllerApi = exports.CaseActionsControllerApiFactory = exports.CaseActionsControllerApiFp = exports.CaseActionsControllerApiAxiosParamCreator = exports.BranchLinkControllerApi = exports.BranchLinkControllerApiFactory = exports.BranchLinkControllerApiFp = exports.BranchLinkControllerApiAxiosParamCreator = exports.BlogWebhookControllerApi = exports.BlogWebhookControllerApiFactory = void 0;
exports.DripControllerApiFp = exports.DripControllerApiAxiosParamCreator = exports.DirectMailControllerApi = exports.DirectMailControllerApiFactory = exports.DirectMailControllerApiFp = exports.DirectMailControllerApiAxiosParamCreator = exports.DashboardControllerApi = exports.DashboardControllerApiFactory = exports.DashboardControllerApiFp = exports.DashboardControllerApiAxiosParamCreator = exports.CustomerReviewControllerApi = exports.CustomerReviewControllerApiFactory = exports.CustomerReviewControllerApiFp = exports.CustomerReviewControllerApiAxiosParamCreator = exports.CustomerLeadControllerApi = exports.CustomerLeadControllerApiFactory = exports.CustomerLeadControllerApiFp = exports.CustomerLeadControllerApiAxiosParamCreator = exports.CrmControllerApi = exports.CrmControllerApiFactory = exports.CrmControllerApiFp = exports.CrmControllerApiAxiosParamCreator = exports.CourtControllerApi = exports.CourtControllerApiFactory = exports.CourtControllerApiFp = exports.CourtControllerApiAxiosParamCreator = exports.CountyControllerApi = exports.CountyControllerApiFactory = exports.CountyControllerApiFp = exports.CountyControllerApiAxiosParamCreator = exports.ConversationControllerApi = exports.ConversationControllerApiFactory = exports.ConversationControllerApiFp = exports.ConversationControllerApiAxiosParamCreator = exports.ContactTimelineControllerApi = exports.ContactTimelineControllerApiFactory = exports.ContactTimelineControllerApiFp = exports.ContactTimelineControllerApiAxiosParamCreator = exports.ConsoleListControllerApi = exports.ConsoleListControllerApiFactory = exports.ConsoleListControllerApiFp = exports.ConsoleListControllerApiAxiosParamCreator = exports.ConfigurationControllerApi = exports.ConfigurationControllerApiFactory = exports.ConfigurationControllerApiFp = exports.ConfigurationControllerApiAxiosParamCreator = exports.CitationControllerApi = exports.CitationControllerApiFactory = exports.CitationControllerApiFp = exports.CitationControllerApiAxiosParamCreator = void 0;
exports.LawfirmDocumentControllerApi = exports.LawfirmDocumentControllerApiFactory = exports.LawfirmDocumentControllerApiFp = exports.LawfirmDocumentControllerApiAxiosParamCreator = exports.LawfirmControllerApi = exports.LawfirmControllerApiFactory = exports.LawfirmControllerApiFp = exports.LawfirmControllerApiAxiosParamCreator = exports.LawfirmCasesControllerApi = exports.LawfirmCasesControllerApiFactory = exports.LawfirmCasesControllerApiFp = exports.LawfirmCasesControllerApiAxiosParamCreator = exports.LawfirmCaseDecisionControllerApi = exports.LawfirmCaseDecisionControllerApiFactory = exports.LawfirmCaseDecisionControllerApiFp = exports.LawfirmCaseDecisionControllerApiAxiosParamCreator = exports.InsuranceCalculatorControllerApi = exports.InsuranceCalculatorControllerApiFactory = exports.InsuranceCalculatorControllerApiFp = exports.InsuranceCalculatorControllerApiAxiosParamCreator = exports.HouseholdMateControllerApi = exports.HouseholdMateControllerApiFactory = exports.HouseholdMateControllerApiFp = exports.HouseholdMateControllerApiAxiosParamCreator = exports.GetCaseControllerApi = exports.GetCaseControllerApiFactory = exports.GetCaseControllerApiFp = exports.GetCaseControllerApiAxiosParamCreator = exports.FreshdeskTicketControllerApi = exports.FreshdeskTicketControllerApiFactory = exports.FreshdeskTicketControllerApiFp = exports.FreshdeskTicketControllerApiAxiosParamCreator = exports.FreshcallerControllerApi = exports.FreshcallerControllerApiFactory = exports.FreshcallerControllerApiFp = exports.FreshcallerControllerApiAxiosParamCreator = exports.FeedbackControllerApi = exports.FeedbackControllerApiFactory = exports.FeedbackControllerApiFp = exports.FeedbackControllerApiAxiosParamCreator = exports.EmailSubscriptionControllerApi = exports.EmailSubscriptionControllerApiFactory = exports.EmailSubscriptionControllerApiFp = exports.EmailSubscriptionControllerApiAxiosParamCreator = exports.DripWebhooksControllerApi = exports.DripWebhooksControllerApiFactory = exports.DripWebhooksControllerApiFp = exports.DripWebhooksControllerApiAxiosParamCreator = exports.DripControllerApi = exports.DripControllerApiFactory = void 0;
exports.PhoneLeadsControllerApiFp = exports.PhoneLeadsControllerApiAxiosParamCreator = exports.OneTimePasswordControllerApi = exports.OneTimePasswordControllerApiFactory = exports.OneTimePasswordControllerApiFp = exports.OneTimePasswordControllerApiAxiosParamCreator = exports.OnDemandRequestControllerApi = exports.OnDemandRequestControllerApiFactory = exports.OnDemandRequestControllerApiFp = exports.OnDemandRequestControllerApiAxiosParamCreator = exports.NotesControllerApi = exports.NotesControllerApiFactory = exports.NotesControllerApiFp = exports.NotesControllerApiAxiosParamCreator = exports.ListCasesControllerApi = exports.ListCasesControllerApiFactory = exports.ListCasesControllerApiFp = exports.ListCasesControllerApiAxiosParamCreator = exports.LineItemControllerApi = exports.LineItemControllerApiFactory = exports.LineItemControllerApiFp = exports.LineItemControllerApiAxiosParamCreator = exports.LawyerControllerApi = exports.LawyerControllerApiFactory = exports.LawyerControllerApiFp = exports.LawyerControllerApiAxiosParamCreator = exports.LawfirmTransactionsControllerApi = exports.LawfirmTransactionsControllerApiFactory = exports.LawfirmTransactionsControllerApiFp = exports.LawfirmTransactionsControllerApiAxiosParamCreator = exports.LawfirmSurchargeControllerApi = exports.LawfirmSurchargeControllerApiFactory = exports.LawfirmSurchargeControllerApiFp = exports.LawfirmSurchargeControllerApiAxiosParamCreator = exports.LawfirmStorefrontControllerApi = exports.LawfirmStorefrontControllerApiFactory = exports.LawfirmStorefrontControllerApiFp = exports.LawfirmStorefrontControllerApiAxiosParamCreator = exports.LawfirmRatesControllerApi = exports.LawfirmRatesControllerApiFactory = exports.LawfirmRatesControllerApiFp = exports.LawfirmRatesControllerApiAxiosParamCreator = exports.LawfirmPaymentModelControllerApi = exports.LawfirmPaymentModelControllerApiFactory = exports.LawfirmPaymentModelControllerApiFp = exports.LawfirmPaymentModelControllerApiAxiosParamCreator = exports.LawfirmFeeCoverageControllerApi = exports.LawfirmFeeCoverageControllerApiFactory = exports.LawfirmFeeCoverageControllerApiFp = exports.LawfirmFeeCoverageControllerApiAxiosParamCreator = void 0;
exports.SocialLoginControllerApi = exports.SocialLoginControllerApiFactory = exports.SocialLoginControllerApiFp = exports.SocialLoginControllerApiAxiosParamCreator = exports.SnsListenerControllerApi = exports.SnsListenerControllerApiFactory = exports.SnsListenerControllerApiFp = exports.SnsListenerControllerApiAxiosParamCreator = exports.ScheduledTaskControllerApi = exports.ScheduledTaskControllerApiFactory = exports.ScheduledTaskControllerApiFp = exports.ScheduledTaskControllerApiAxiosParamCreator = exports.ReportingControllerApi = exports.ReportingControllerApiFactory = exports.ReportingControllerApiFp = exports.ReportingControllerApiAxiosParamCreator = exports.RegistrationControllerApi = exports.RegistrationControllerApiFactory = exports.RegistrationControllerApiFp = exports.RegistrationControllerApiAxiosParamCreator = exports.RefundEligibilityControllerApi = exports.RefundEligibilityControllerApiFactory = exports.RefundEligibilityControllerApiFp = exports.RefundEligibilityControllerApiAxiosParamCreator = exports.ReferralSourceControllerApi = exports.ReferralSourceControllerApiFactory = exports.ReferralSourceControllerApiFp = exports.ReferralSourceControllerApiAxiosParamCreator = exports.ReferralControllerApi = exports.ReferralControllerApiFactory = exports.ReferralControllerApiFp = exports.ReferralControllerApiAxiosParamCreator = exports.ReferralCodeControllerApi = exports.ReferralCodeControllerApiFactory = exports.ReferralCodeControllerApiFp = exports.ReferralCodeControllerApiAxiosParamCreator = exports.RefLinkControllerApi = exports.RefLinkControllerApiFactory = exports.RefLinkControllerApiFp = exports.RefLinkControllerApiAxiosParamCreator = exports.RecurringBillingControllerApi = exports.RecurringBillingControllerApiFactory = exports.RecurringBillingControllerApiFp = exports.RecurringBillingControllerApiAxiosParamCreator = exports.PushNotificationControllerApi = exports.PushNotificationControllerApiFactory = exports.PushNotificationControllerApiFp = exports.PushNotificationControllerApiAxiosParamCreator = exports.PhoneLeadsControllerApi = exports.PhoneLeadsControllerApiFactory = void 0;
exports.UtilityControllerApiFp = exports.UtilityControllerApiAxiosParamCreator = exports.UserSearchControllerApi = exports.UserSearchControllerApiFactory = exports.UserSearchControllerApiFp = exports.UserSearchControllerApiAxiosParamCreator = exports.UserProfileControllerApi = exports.UserProfileControllerApiFactory = exports.UserProfileControllerApiFp = exports.UserProfileControllerApiAxiosParamCreator = exports.UserPasswordControllerApi = exports.UserPasswordControllerApiFactory = exports.UserPasswordControllerApiFp = exports.UserPasswordControllerApiAxiosParamCreator = exports.UserControllerApi = exports.UserControllerApiFactory = exports.UserControllerApiFp = exports.UserControllerApiAxiosParamCreator = exports.UserAccountControllerApi = exports.UserAccountControllerApiFactory = exports.UserAccountControllerApiFp = exports.UserAccountControllerApiAxiosParamCreator = exports.UrlRedirectControllerApi = exports.UrlRedirectControllerApiFactory = exports.UrlRedirectControllerApiFp = exports.UrlRedirectControllerApiAxiosParamCreator = exports.TrafficViolationControllerApi = exports.TrafficViolationControllerApiFactory = exports.TrafficViolationControllerApiFp = exports.TrafficViolationControllerApiAxiosParamCreator = exports.TicketReviewControllerApi = exports.TicketReviewControllerApiFactory = exports.TicketReviewControllerApiFp = exports.TicketReviewControllerApiAxiosParamCreator = exports.StripeWebhookControllerApi = exports.StripeWebhookControllerApiFactory = exports.StripeWebhookControllerApiFp = exports.StripeWebhookControllerApiAxiosParamCreator = exports.StripeSyncControllerApi = exports.StripeSyncControllerApiFactory = exports.StripeSyncControllerApiFp = exports.StripeSyncControllerApiAxiosParamCreator = exports.StripeControllerApi = exports.StripeControllerApiFactory = exports.StripeControllerApiFp = exports.StripeControllerApiAxiosParamCreator = exports.StripeCardControllerApi = exports.StripeCardControllerApiFactory = exports.StripeCardControllerApiFp = exports.StripeCardControllerApiAxiosParamCreator = void 0;
exports.ViolationPenaltyControllerApi = exports.ViolationPenaltyControllerApiFactory = exports.ViolationPenaltyControllerApiFp = exports.ViolationPenaltyControllerApiAxiosParamCreator = exports.ValidationControllerApi = exports.ValidationControllerApiFactory = exports.ValidationControllerApiFp = exports.ValidationControllerApiAxiosParamCreator = exports.UtilityControllerApi = exports.UtilityControllerApiFactory = void 0;
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var AccountLevelFeeClassificationEnum;
(function (AccountLevelFeeClassificationEnum) {
    AccountLevelFeeClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    AccountLevelFeeClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    AccountLevelFeeClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    AccountLevelFeeClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    AccountLevelFeeClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    AccountLevelFeeClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    AccountLevelFeeClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    AccountLevelFeeClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    AccountLevelFeeClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    AccountLevelFeeClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    AccountLevelFeeClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    AccountLevelFeeClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    AccountLevelFeeClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    AccountLevelFeeClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    AccountLevelFeeClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    AccountLevelFeeClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    AccountLevelFeeClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    AccountLevelFeeClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    AccountLevelFeeClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    AccountLevelFeeClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    AccountLevelFeeClassificationEnum["FELONY"] = "FELONY";
    AccountLevelFeeClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    AccountLevelFeeClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    AccountLevelFeeClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    AccountLevelFeeClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    AccountLevelFeeClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    AccountLevelFeeClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["INFRACTION"] = "INFRACTION";
    AccountLevelFeeClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    AccountLevelFeeClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    AccountLevelFeeClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    AccountLevelFeeClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    AccountLevelFeeClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    AccountLevelFeeClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    AccountLevelFeeClassificationEnum["NONMOVING"] = "NON_MOVING";
    AccountLevelFeeClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    AccountLevelFeeClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    AccountLevelFeeClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    AccountLevelFeeClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    AccountLevelFeeClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    AccountLevelFeeClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    AccountLevelFeeClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(AccountLevelFeeClassificationEnum = exports.AccountLevelFeeClassificationEnum || (exports.AccountLevelFeeClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AccountLevelFeeRefundEligibilityEnum;
(function (AccountLevelFeeRefundEligibilityEnum) {
    AccountLevelFeeRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    AccountLevelFeeRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    AccountLevelFeeRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(AccountLevelFeeRefundEligibilityEnum = exports.AccountLevelFeeRefundEligibilityEnum || (exports.AccountLevelFeeRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AccountLevelFeeToSaveClassificationEnum;
(function (AccountLevelFeeToSaveClassificationEnum) {
    AccountLevelFeeToSaveClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    AccountLevelFeeToSaveClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    AccountLevelFeeToSaveClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    AccountLevelFeeToSaveClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    AccountLevelFeeToSaveClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    AccountLevelFeeToSaveClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    AccountLevelFeeToSaveClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    AccountLevelFeeToSaveClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    AccountLevelFeeToSaveClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    AccountLevelFeeToSaveClassificationEnum["FELONY"] = "FELONY";
    AccountLevelFeeToSaveClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["INFRACTION"] = "INFRACTION";
    AccountLevelFeeToSaveClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    AccountLevelFeeToSaveClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    AccountLevelFeeToSaveClassificationEnum["NONMOVING"] = "NON_MOVING";
    AccountLevelFeeToSaveClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    AccountLevelFeeToSaveClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    AccountLevelFeeToSaveClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    AccountLevelFeeToSaveClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    AccountLevelFeeToSaveClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    AccountLevelFeeToSaveClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    AccountLevelFeeToSaveClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(AccountLevelFeeToSaveClassificationEnum = exports.AccountLevelFeeToSaveClassificationEnum || (exports.AccountLevelFeeToSaveClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AccountLevelFeeToSaveRefundEligibilityEnum;
(function (AccountLevelFeeToSaveRefundEligibilityEnum) {
    AccountLevelFeeToSaveRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    AccountLevelFeeToSaveRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    AccountLevelFeeToSaveRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(AccountLevelFeeToSaveRefundEligibilityEnum = exports.AccountLevelFeeToSaveRefundEligibilityEnum || (exports.AccountLevelFeeToSaveRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ActivityFeedModelActivityTypeEnum;
(function (ActivityFeedModelActivityTypeEnum) {
    ActivityFeedModelActivityTypeEnum["PURCHASE"] = "PURCHASE";
    ActivityFeedModelActivityTypeEnum["REFERRAL"] = "REFERRAL";
    ActivityFeedModelActivityTypeEnum["REFUND"] = "REFUND";
    ActivityFeedModelActivityTypeEnum["RESOLUTION"] = "RESOLUTION";
    ActivityFeedModelActivityTypeEnum["TICKETREVIEW"] = "TICKET_REVIEW";
})(ActivityFeedModelActivityTypeEnum = exports.ActivityFeedModelActivityTypeEnum || (exports.ActivityFeedModelActivityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ActivityFeedModelPrivacyModeEnum;
(function (ActivityFeedModelPrivacyModeEnum) {
    ActivityFeedModelPrivacyModeEnum["FRIENDS"] = "FRIENDS";
    ActivityFeedModelPrivacyModeEnum["PRIVATE"] = "PRIVATE";
    ActivityFeedModelPrivacyModeEnum["PUBLIC"] = "PUBLIC";
    ActivityFeedModelPrivacyModeEnum["SEMIPUBLIC"] = "SEMI_PUBLIC";
})(ActivityFeedModelPrivacyModeEnum = exports.ActivityFeedModelPrivacyModeEnum || (exports.ActivityFeedModelPrivacyModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddCourtCoverageRequestRefundEligibilityEnum;
(function (AddCourtCoverageRequestRefundEligibilityEnum) {
    AddCourtCoverageRequestRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    AddCourtCoverageRequestRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    AddCourtCoverageRequestRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(AddCourtCoverageRequestRefundEligibilityEnum = exports.AddCourtCoverageRequestRefundEligibilityEnum || (exports.AddCourtCoverageRequestRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddInnerCourtCourtTypeEnum;
(function (AddInnerCourtCourtTypeEnum) {
    AddInnerCourtCourtTypeEnum["CIRCUIT"] = "CIRCUIT";
    AddInnerCourtCourtTypeEnum["COUNTYCLERK"] = "COUNTY_CLERK";
    AddInnerCourtCourtTypeEnum["DISTRICT"] = "DISTRICT";
    AddInnerCourtCourtTypeEnum["JUVENILE"] = "JUVENILE";
    AddInnerCourtCourtTypeEnum["MUNICIPAL"] = "MUNICIPAL";
    AddInnerCourtCourtTypeEnum["PROBATION"] = "PROBATION";
    AddInnerCourtCourtTypeEnum["SUPERIOR"] = "SUPERIOR";
    AddInnerCourtCourtTypeEnum["VIOLATIONSBUREAU"] = "VIOLATIONS_BUREAU";
})(AddInnerCourtCourtTypeEnum = exports.AddInnerCourtCourtTypeEnum || (exports.AddInnerCourtCourtTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddNoteToPhoneLeadRequestEntityTypeEnum;
(function (AddNoteToPhoneLeadRequestEntityTypeEnum) {
    AddNoteToPhoneLeadRequestEntityTypeEnum["CASE"] = "CASE";
    AddNoteToPhoneLeadRequestEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    AddNoteToPhoneLeadRequestEntityTypeEnum["CITATION"] = "CITATION";
    AddNoteToPhoneLeadRequestEntityTypeEnum["COURT"] = "COURT";
    AddNoteToPhoneLeadRequestEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    AddNoteToPhoneLeadRequestEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    AddNoteToPhoneLeadRequestEntityTypeEnum["LAWYER"] = "LAWYER";
    AddNoteToPhoneLeadRequestEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    AddNoteToPhoneLeadRequestEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    AddNoteToPhoneLeadRequestEntityTypeEnum["USER"] = "USER";
})(AddNoteToPhoneLeadRequestEntityTypeEnum = exports.AddNoteToPhoneLeadRequestEntityTypeEnum || (exports.AddNoteToPhoneLeadRequestEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddRedirectUrlRequestPageTypeEnum;
(function (AddRedirectUrlRequestPageTypeEnum) {
    AddRedirectUrlRequestPageTypeEnum["DEBUG"] = "DEBUG";
    AddRedirectUrlRequestPageTypeEnum["SEO"] = "SEO";
    AddRedirectUrlRequestPageTypeEnum["VANITY"] = "VANITY";
})(AddRedirectUrlRequestPageTypeEnum = exports.AddRedirectUrlRequestPageTypeEnum || (exports.AddRedirectUrlRequestPageTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddRedirectUrlRequestRedirectTypeEnum;
(function (AddRedirectUrlRequestRedirectTypeEnum) {
    AddRedirectUrlRequestRedirectTypeEnum["PERMANENT"] = "PERMANENT";
    AddRedirectUrlRequestRedirectTypeEnum["TEMPORARY"] = "TEMPORARY";
})(AddRedirectUrlRequestRedirectTypeEnum = exports.AddRedirectUrlRequestRedirectTypeEnum || (exports.AddRedirectUrlRequestRedirectTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddReviewRequestPrivacyModeEnum;
(function (AddReviewRequestPrivacyModeEnum) {
    AddReviewRequestPrivacyModeEnum["FRIENDS"] = "FRIENDS";
    AddReviewRequestPrivacyModeEnum["PRIVATE"] = "PRIVATE";
    AddReviewRequestPrivacyModeEnum["PUBLIC"] = "PUBLIC";
    AddReviewRequestPrivacyModeEnum["SEMIPUBLIC"] = "SEMI_PUBLIC";
})(AddReviewRequestPrivacyModeEnum = exports.AddReviewRequestPrivacyModeEnum || (exports.AddReviewRequestPrivacyModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddReviewRequestSourceEnum;
(function (AddReviewRequestSourceEnum) {
    AddReviewRequestSourceEnum["ANDROID"] = "ANDROID";
    AddReviewRequestSourceEnum["APPLE"] = "APPLE";
    AddReviewRequestSourceEnum["FACEBOOK"] = "FACEBOOK";
    AddReviewRequestSourceEnum["GOOGLEBUSINESS"] = "GOOGLE_BUSINESS";
    AddReviewRequestSourceEnum["OTR"] = "OTR";
    AddReviewRequestSourceEnum["REVIEWSIO"] = "REVIEWS_IO";
})(AddReviewRequestSourceEnum = exports.AddReviewRequestSourceEnum || (exports.AddReviewRequestSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddViolationRequestViolationClassificationEnum;
(function (AddViolationRequestViolationClassificationEnum) {
    AddViolationRequestViolationClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    AddViolationRequestViolationClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    AddViolationRequestViolationClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    AddViolationRequestViolationClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    AddViolationRequestViolationClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    AddViolationRequestViolationClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    AddViolationRequestViolationClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    AddViolationRequestViolationClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    AddViolationRequestViolationClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    AddViolationRequestViolationClassificationEnum["FELONY"] = "FELONY";
    AddViolationRequestViolationClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    AddViolationRequestViolationClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    AddViolationRequestViolationClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    AddViolationRequestViolationClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    AddViolationRequestViolationClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    AddViolationRequestViolationClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["INFRACTION"] = "INFRACTION";
    AddViolationRequestViolationClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    AddViolationRequestViolationClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    AddViolationRequestViolationClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    AddViolationRequestViolationClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    AddViolationRequestViolationClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    AddViolationRequestViolationClassificationEnum["NONMOVING"] = "NON_MOVING";
    AddViolationRequestViolationClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    AddViolationRequestViolationClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    AddViolationRequestViolationClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    AddViolationRequestViolationClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    AddViolationRequestViolationClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    AddViolationRequestViolationClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    AddViolationRequestViolationClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(AddViolationRequestViolationClassificationEnum = exports.AddViolationRequestViolationClassificationEnum || (exports.AddViolationRequestViolationClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddViolationResponseViolationClassificationEnum;
(function (AddViolationResponseViolationClassificationEnum) {
    AddViolationResponseViolationClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    AddViolationResponseViolationClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    AddViolationResponseViolationClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    AddViolationResponseViolationClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    AddViolationResponseViolationClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    AddViolationResponseViolationClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    AddViolationResponseViolationClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    AddViolationResponseViolationClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    AddViolationResponseViolationClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    AddViolationResponseViolationClassificationEnum["FELONY"] = "FELONY";
    AddViolationResponseViolationClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    AddViolationResponseViolationClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    AddViolationResponseViolationClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    AddViolationResponseViolationClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    AddViolationResponseViolationClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    AddViolationResponseViolationClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["INFRACTION"] = "INFRACTION";
    AddViolationResponseViolationClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    AddViolationResponseViolationClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    AddViolationResponseViolationClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    AddViolationResponseViolationClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    AddViolationResponseViolationClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    AddViolationResponseViolationClassificationEnum["NONMOVING"] = "NON_MOVING";
    AddViolationResponseViolationClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    AddViolationResponseViolationClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    AddViolationResponseViolationClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    AddViolationResponseViolationClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    AddViolationResponseViolationClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    AddViolationResponseViolationClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    AddViolationResponseViolationClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(AddViolationResponseViolationClassificationEnum = exports.AddViolationResponseViolationClassificationEnum || (exports.AddViolationResponseViolationClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddressDomainEntityTypeEnum;
(function (AddressDomainEntityTypeEnum) {
    AddressDomainEntityTypeEnum["CASE"] = "CASE";
    AddressDomainEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    AddressDomainEntityTypeEnum["CITATION"] = "CITATION";
    AddressDomainEntityTypeEnum["COURT"] = "COURT";
    AddressDomainEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    AddressDomainEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    AddressDomainEntityTypeEnum["LAWYER"] = "LAWYER";
    AddressDomainEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    AddressDomainEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    AddressDomainEntityTypeEnum["USER"] = "USER";
})(AddressDomainEntityTypeEnum = exports.AddressDomainEntityTypeEnum || (exports.AddressDomainEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddressDomainStateEnum;
(function (AddressDomainStateEnum) {
    AddressDomainStateEnum["AK"] = "AK";
    AddressDomainStateEnum["AL"] = "AL";
    AddressDomainStateEnum["AR"] = "AR";
    AddressDomainStateEnum["AZ"] = "AZ";
    AddressDomainStateEnum["CA"] = "CA";
    AddressDomainStateEnum["CO"] = "CO";
    AddressDomainStateEnum["CT"] = "CT";
    AddressDomainStateEnum["DC"] = "DC";
    AddressDomainStateEnum["DE"] = "DE";
    AddressDomainStateEnum["FL"] = "FL";
    AddressDomainStateEnum["GA"] = "GA";
    AddressDomainStateEnum["HI"] = "HI";
    AddressDomainStateEnum["IA"] = "IA";
    AddressDomainStateEnum["ID"] = "ID";
    AddressDomainStateEnum["IL"] = "IL";
    AddressDomainStateEnum["IN"] = "IN";
    AddressDomainStateEnum["KS"] = "KS";
    AddressDomainStateEnum["KY"] = "KY";
    AddressDomainStateEnum["LA"] = "LA";
    AddressDomainStateEnum["MA"] = "MA";
    AddressDomainStateEnum["MD"] = "MD";
    AddressDomainStateEnum["ME"] = "ME";
    AddressDomainStateEnum["MI"] = "MI";
    AddressDomainStateEnum["MN"] = "MN";
    AddressDomainStateEnum["MO"] = "MO";
    AddressDomainStateEnum["MS"] = "MS";
    AddressDomainStateEnum["MT"] = "MT";
    AddressDomainStateEnum["NC"] = "NC";
    AddressDomainStateEnum["ND"] = "ND";
    AddressDomainStateEnum["NE"] = "NE";
    AddressDomainStateEnum["NH"] = "NH";
    AddressDomainStateEnum["NJ"] = "NJ";
    AddressDomainStateEnum["NM"] = "NM";
    AddressDomainStateEnum["NV"] = "NV";
    AddressDomainStateEnum["NY"] = "NY";
    AddressDomainStateEnum["OH"] = "OH";
    AddressDomainStateEnum["OK"] = "OK";
    AddressDomainStateEnum["OR"] = "OR";
    AddressDomainStateEnum["PA"] = "PA";
    AddressDomainStateEnum["RI"] = "RI";
    AddressDomainStateEnum["SC"] = "SC";
    AddressDomainStateEnum["SD"] = "SD";
    AddressDomainStateEnum["TN"] = "TN";
    AddressDomainStateEnum["TX"] = "TX";
    AddressDomainStateEnum["UT"] = "UT";
    AddressDomainStateEnum["VA"] = "VA";
    AddressDomainStateEnum["VT"] = "VT";
    AddressDomainStateEnum["WA"] = "WA";
    AddressDomainStateEnum["WI"] = "WI";
    AddressDomainStateEnum["WV"] = "WV";
    AddressDomainStateEnum["WY"] = "WY";
})(AddressDomainStateEnum = exports.AddressDomainStateEnum || (exports.AddressDomainStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddressDomainReqEntityTypeEnum;
(function (AddressDomainReqEntityTypeEnum) {
    AddressDomainReqEntityTypeEnum["CASE"] = "CASE";
    AddressDomainReqEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    AddressDomainReqEntityTypeEnum["CITATION"] = "CITATION";
    AddressDomainReqEntityTypeEnum["COURT"] = "COURT";
    AddressDomainReqEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    AddressDomainReqEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    AddressDomainReqEntityTypeEnum["LAWYER"] = "LAWYER";
    AddressDomainReqEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    AddressDomainReqEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    AddressDomainReqEntityTypeEnum["USER"] = "USER";
})(AddressDomainReqEntityTypeEnum = exports.AddressDomainReqEntityTypeEnum || (exports.AddressDomainReqEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddressDomainReqStateEnum;
(function (AddressDomainReqStateEnum) {
    AddressDomainReqStateEnum["AK"] = "AK";
    AddressDomainReqStateEnum["AL"] = "AL";
    AddressDomainReqStateEnum["AR"] = "AR";
    AddressDomainReqStateEnum["AZ"] = "AZ";
    AddressDomainReqStateEnum["CA"] = "CA";
    AddressDomainReqStateEnum["CO"] = "CO";
    AddressDomainReqStateEnum["CT"] = "CT";
    AddressDomainReqStateEnum["DC"] = "DC";
    AddressDomainReqStateEnum["DE"] = "DE";
    AddressDomainReqStateEnum["FL"] = "FL";
    AddressDomainReqStateEnum["GA"] = "GA";
    AddressDomainReqStateEnum["HI"] = "HI";
    AddressDomainReqStateEnum["IA"] = "IA";
    AddressDomainReqStateEnum["ID"] = "ID";
    AddressDomainReqStateEnum["IL"] = "IL";
    AddressDomainReqStateEnum["IN"] = "IN";
    AddressDomainReqStateEnum["KS"] = "KS";
    AddressDomainReqStateEnum["KY"] = "KY";
    AddressDomainReqStateEnum["LA"] = "LA";
    AddressDomainReqStateEnum["MA"] = "MA";
    AddressDomainReqStateEnum["MD"] = "MD";
    AddressDomainReqStateEnum["ME"] = "ME";
    AddressDomainReqStateEnum["MI"] = "MI";
    AddressDomainReqStateEnum["MN"] = "MN";
    AddressDomainReqStateEnum["MO"] = "MO";
    AddressDomainReqStateEnum["MS"] = "MS";
    AddressDomainReqStateEnum["MT"] = "MT";
    AddressDomainReqStateEnum["NC"] = "NC";
    AddressDomainReqStateEnum["ND"] = "ND";
    AddressDomainReqStateEnum["NE"] = "NE";
    AddressDomainReqStateEnum["NH"] = "NH";
    AddressDomainReqStateEnum["NJ"] = "NJ";
    AddressDomainReqStateEnum["NM"] = "NM";
    AddressDomainReqStateEnum["NV"] = "NV";
    AddressDomainReqStateEnum["NY"] = "NY";
    AddressDomainReqStateEnum["OH"] = "OH";
    AddressDomainReqStateEnum["OK"] = "OK";
    AddressDomainReqStateEnum["OR"] = "OR";
    AddressDomainReqStateEnum["PA"] = "PA";
    AddressDomainReqStateEnum["RI"] = "RI";
    AddressDomainReqStateEnum["SC"] = "SC";
    AddressDomainReqStateEnum["SD"] = "SD";
    AddressDomainReqStateEnum["TN"] = "TN";
    AddressDomainReqStateEnum["TX"] = "TX";
    AddressDomainReqStateEnum["UT"] = "UT";
    AddressDomainReqStateEnum["VA"] = "VA";
    AddressDomainReqStateEnum["VT"] = "VT";
    AddressDomainReqStateEnum["WA"] = "WA";
    AddressDomainReqStateEnum["WI"] = "WI";
    AddressDomainReqStateEnum["WV"] = "WV";
    AddressDomainReqStateEnum["WY"] = "WY";
})(AddressDomainReqStateEnum = exports.AddressDomainReqStateEnum || (exports.AddressDomainReqStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddressDomainResEntityTypeEnum;
(function (AddressDomainResEntityTypeEnum) {
    AddressDomainResEntityTypeEnum["CASE"] = "CASE";
    AddressDomainResEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    AddressDomainResEntityTypeEnum["CITATION"] = "CITATION";
    AddressDomainResEntityTypeEnum["COURT"] = "COURT";
    AddressDomainResEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    AddressDomainResEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    AddressDomainResEntityTypeEnum["LAWYER"] = "LAWYER";
    AddressDomainResEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    AddressDomainResEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    AddressDomainResEntityTypeEnum["USER"] = "USER";
})(AddressDomainResEntityTypeEnum = exports.AddressDomainResEntityTypeEnum || (exports.AddressDomainResEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AddressDomainResStateEnum;
(function (AddressDomainResStateEnum) {
    AddressDomainResStateEnum["AK"] = "AK";
    AddressDomainResStateEnum["AL"] = "AL";
    AddressDomainResStateEnum["AR"] = "AR";
    AddressDomainResStateEnum["AZ"] = "AZ";
    AddressDomainResStateEnum["CA"] = "CA";
    AddressDomainResStateEnum["CO"] = "CO";
    AddressDomainResStateEnum["CT"] = "CT";
    AddressDomainResStateEnum["DC"] = "DC";
    AddressDomainResStateEnum["DE"] = "DE";
    AddressDomainResStateEnum["FL"] = "FL";
    AddressDomainResStateEnum["GA"] = "GA";
    AddressDomainResStateEnum["HI"] = "HI";
    AddressDomainResStateEnum["IA"] = "IA";
    AddressDomainResStateEnum["ID"] = "ID";
    AddressDomainResStateEnum["IL"] = "IL";
    AddressDomainResStateEnum["IN"] = "IN";
    AddressDomainResStateEnum["KS"] = "KS";
    AddressDomainResStateEnum["KY"] = "KY";
    AddressDomainResStateEnum["LA"] = "LA";
    AddressDomainResStateEnum["MA"] = "MA";
    AddressDomainResStateEnum["MD"] = "MD";
    AddressDomainResStateEnum["ME"] = "ME";
    AddressDomainResStateEnum["MI"] = "MI";
    AddressDomainResStateEnum["MN"] = "MN";
    AddressDomainResStateEnum["MO"] = "MO";
    AddressDomainResStateEnum["MS"] = "MS";
    AddressDomainResStateEnum["MT"] = "MT";
    AddressDomainResStateEnum["NC"] = "NC";
    AddressDomainResStateEnum["ND"] = "ND";
    AddressDomainResStateEnum["NE"] = "NE";
    AddressDomainResStateEnum["NH"] = "NH";
    AddressDomainResStateEnum["NJ"] = "NJ";
    AddressDomainResStateEnum["NM"] = "NM";
    AddressDomainResStateEnum["NV"] = "NV";
    AddressDomainResStateEnum["NY"] = "NY";
    AddressDomainResStateEnum["OH"] = "OH";
    AddressDomainResStateEnum["OK"] = "OK";
    AddressDomainResStateEnum["OR"] = "OR";
    AddressDomainResStateEnum["PA"] = "PA";
    AddressDomainResStateEnum["RI"] = "RI";
    AddressDomainResStateEnum["SC"] = "SC";
    AddressDomainResStateEnum["SD"] = "SD";
    AddressDomainResStateEnum["TN"] = "TN";
    AddressDomainResStateEnum["TX"] = "TX";
    AddressDomainResStateEnum["UT"] = "UT";
    AddressDomainResStateEnum["VA"] = "VA";
    AddressDomainResStateEnum["VT"] = "VT";
    AddressDomainResStateEnum["WA"] = "WA";
    AddressDomainResStateEnum["WI"] = "WI";
    AddressDomainResStateEnum["WV"] = "WV";
    AddressDomainResStateEnum["WY"] = "WY";
})(AddressDomainResStateEnum = exports.AddressDomainResStateEnum || (exports.AddressDomainResStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AggregateBySourceReviewSourceEnum;
(function (AggregateBySourceReviewSourceEnum) {
    AggregateBySourceReviewSourceEnum["ANDROID"] = "ANDROID";
    AggregateBySourceReviewSourceEnum["APPLE"] = "APPLE";
    AggregateBySourceReviewSourceEnum["FACEBOOK"] = "FACEBOOK";
    AggregateBySourceReviewSourceEnum["GOOGLEBUSINESS"] = "GOOGLE_BUSINESS";
    AggregateBySourceReviewSourceEnum["OTR"] = "OTR";
    AggregateBySourceReviewSourceEnum["REVIEWSIO"] = "REVIEWS_IO";
})(AggregateBySourceReviewSourceEnum = exports.AggregateBySourceReviewSourceEnum || (exports.AggregateBySourceReviewSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AlertActionTypeEnum;
(function (AlertActionTypeEnum) {
    AlertActionTypeEnum["ANNOUNCEMENT"] = "ANNOUNCEMENT";
    AlertActionTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
})(AlertActionTypeEnum = exports.AlertActionTypeEnum || (exports.AlertActionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AlertAlertTypeEnum;
(function (AlertAlertTypeEnum) {
    AlertAlertTypeEnum["ERROR"] = "ERROR";
    AlertAlertTypeEnum["INFO"] = "INFO";
    AlertAlertTypeEnum["SUCCESS"] = "SUCCESS";
    AlertAlertTypeEnum["WARNING"] = "WARNING";
})(AlertAlertTypeEnum = exports.AlertAlertTypeEnum || (exports.AlertAlertTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AppEventCreateRequestAppEventNameEnum;
(function (AppEventCreateRequestAppEventNameEnum) {
    AppEventCreateRequestAppEventNameEnum["FIRSTOPEN"] = "FIRST_OPEN";
    AppEventCreateRequestAppEventNameEnum["INSTALL"] = "INSTALL";
    AppEventCreateRequestAppEventNameEnum["PREINSTALLENGAGEMENT"] = "PRE_INSTALL_ENGAGEMENT";
})(AppEventCreateRequestAppEventNameEnum = exports.AppEventCreateRequestAppEventNameEnum || (exports.AppEventCreateRequestAppEventNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthorModelUserRoleEnum;
(function (AuthorModelUserRoleEnum) {
    AuthorModelUserRoleEnum["ADMIN"] = "ADMIN";
    AuthorModelUserRoleEnum["DEFENDANT"] = "DEFENDANT";
    AuthorModelUserRoleEnum["LAWYER"] = "LAWYER";
    AuthorModelUserRoleEnum["PARTNER"] = "PARTNER";
    AuthorModelUserRoleEnum["UNKNOWN"] = "UNKNOWN";
})(AuthorModelUserRoleEnum = exports.AuthorModelUserRoleEnum || (exports.AuthorModelUserRoleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AvailablePaymentPlanPaymentPlanTypeEnum;
(function (AvailablePaymentPlanPaymentPlanTypeEnum) {
    AvailablePaymentPlanPaymentPlanTypeEnum["ALLUPFRONT"] = "ALL_UPFRONT";
    AvailablePaymentPlanPaymentPlanTypeEnum["THREEPAYMENTSHALFFIRST"] = "THREE_PAYMENTS_HALF_FIRST";
    AvailablePaymentPlanPaymentPlanTypeEnum["TWOPAYMENTSMONTHLY"] = "TWO_PAYMENTS_MONTHLY";
})(AvailablePaymentPlanPaymentPlanTypeEnum = exports.AvailablePaymentPlanPaymentPlanTypeEnum || (exports.AvailablePaymentPlanPaymentPlanTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AwsCredentialsRequestKeyNameEnum;
(function (AwsCredentialsRequestKeyNameEnum) {
    AwsCredentialsRequestKeyNameEnum["S3CITATIONIMAGESRO"] = "S3_CITATION_IMAGES_RO";
})(AwsCredentialsRequestKeyNameEnum = exports.AwsCredentialsRequestKeyNameEnum || (exports.AwsCredentialsRequestKeyNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingInvoiceModelStatusEnum;
(function (BillingInvoiceModelStatusEnum) {
    BillingInvoiceModelStatusEnum["DRAFT"] = "DRAFT";
    BillingInvoiceModelStatusEnum["OPEN"] = "OPEN";
    BillingInvoiceModelStatusEnum["PAID"] = "PAID";
    BillingInvoiceModelStatusEnum["UNCOLLECTIBLE"] = "UNCOLLECTIBLE";
    BillingInvoiceModelStatusEnum["VOID"] = "VOID";
})(BillingInvoiceModelStatusEnum = exports.BillingInvoiceModelStatusEnum || (exports.BillingInvoiceModelStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingPriceModelBillingSchemeEnum;
(function (BillingPriceModelBillingSchemeEnum) {
    BillingPriceModelBillingSchemeEnum["PERUNIT"] = "PER_UNIT";
    BillingPriceModelBillingSchemeEnum["TIERED"] = "TIERED";
    BillingPriceModelBillingSchemeEnum["UNKNOWN"] = "UNKNOWN";
})(BillingPriceModelBillingSchemeEnum = exports.BillingPriceModelBillingSchemeEnum || (exports.BillingPriceModelBillingSchemeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingPriceModelIntervalEnum;
(function (BillingPriceModelIntervalEnum) {
    BillingPriceModelIntervalEnum["DAILY"] = "DAILY";
    BillingPriceModelIntervalEnum["MONTHLY"] = "MONTHLY";
    BillingPriceModelIntervalEnum["QUARTERLY"] = "QUARTERLY";
    BillingPriceModelIntervalEnum["WEEKLY"] = "WEEKLY";
    BillingPriceModelIntervalEnum["YEARLY"] = "YEARLY";
})(BillingPriceModelIntervalEnum = exports.BillingPriceModelIntervalEnum || (exports.BillingPriceModelIntervalEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingSubscriptionItemModelBillingSchemeEnum;
(function (BillingSubscriptionItemModelBillingSchemeEnum) {
    BillingSubscriptionItemModelBillingSchemeEnum["PERUNIT"] = "PER_UNIT";
    BillingSubscriptionItemModelBillingSchemeEnum["TIERED"] = "TIERED";
    BillingSubscriptionItemModelBillingSchemeEnum["UNKNOWN"] = "UNKNOWN";
})(BillingSubscriptionItemModelBillingSchemeEnum = exports.BillingSubscriptionItemModelBillingSchemeEnum || (exports.BillingSubscriptionItemModelBillingSchemeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingSubscriptionItemModelIntervalEnum;
(function (BillingSubscriptionItemModelIntervalEnum) {
    BillingSubscriptionItemModelIntervalEnum["DAILY"] = "DAILY";
    BillingSubscriptionItemModelIntervalEnum["MONTHLY"] = "MONTHLY";
    BillingSubscriptionItemModelIntervalEnum["QUARTERLY"] = "QUARTERLY";
    BillingSubscriptionItemModelIntervalEnum["WEEKLY"] = "WEEKLY";
    BillingSubscriptionItemModelIntervalEnum["YEARLY"] = "YEARLY";
})(BillingSubscriptionItemModelIntervalEnum = exports.BillingSubscriptionItemModelIntervalEnum || (exports.BillingSubscriptionItemModelIntervalEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingSubscriptionItemModelTiersModeEnum;
(function (BillingSubscriptionItemModelTiersModeEnum) {
    BillingSubscriptionItemModelTiersModeEnum["GRADUATED"] = "GRADUATED";
    BillingSubscriptionItemModelTiersModeEnum["VOLUME"] = "VOLUME";
})(BillingSubscriptionItemModelTiersModeEnum = exports.BillingSubscriptionItemModelTiersModeEnum || (exports.BillingSubscriptionItemModelTiersModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingSubscriptionItemModelUsageTypeEnum;
(function (BillingSubscriptionItemModelUsageTypeEnum) {
    BillingSubscriptionItemModelUsageTypeEnum["LICENSED"] = "LICENSED";
    BillingSubscriptionItemModelUsageTypeEnum["METERED"] = "METERED";
})(BillingSubscriptionItemModelUsageTypeEnum = exports.BillingSubscriptionItemModelUsageTypeEnum || (exports.BillingSubscriptionItemModelUsageTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BillingSubscriptionModelStatusEnum;
(function (BillingSubscriptionModelStatusEnum) {
    BillingSubscriptionModelStatusEnum["ACTIVE"] = "ACTIVE";
    BillingSubscriptionModelStatusEnum["CANCELED"] = "CANCELED";
    BillingSubscriptionModelStatusEnum["INCOMPLETE"] = "INCOMPLETE";
    BillingSubscriptionModelStatusEnum["INCOMPLETEEXPIRED"] = "INCOMPLETE_EXPIRED";
    BillingSubscriptionModelStatusEnum["INTRIALPERIOD"] = "IN_TRIAL_PERIOD";
    BillingSubscriptionModelStatusEnum["PASTDUE"] = "PAST_DUE";
    BillingSubscriptionModelStatusEnum["UNKNOWN"] = "UNKNOWN";
    BillingSubscriptionModelStatusEnum["UNPAID"] = "UNPAID";
})(BillingSubscriptionModelStatusEnum = exports.BillingSubscriptionModelStatusEnum || (exports.BillingSubscriptionModelStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BookingCaseStatusEnum;
(function (BookingCaseStatusEnum) {
    BookingCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    BookingCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    BookingCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    BookingCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    BookingCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    BookingCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    BookingCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    BookingCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    BookingCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    BookingCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    BookingCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    BookingCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    BookingCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    BookingCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    BookingCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    BookingCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    BookingCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    BookingCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    BookingCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    BookingCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    BookingCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    BookingCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    BookingCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    BookingCaseStatusEnum["DEFERRED"] = "DEFERRED";
    BookingCaseStatusEnum["DISMISSED"] = "DISMISSED";
    BookingCaseStatusEnum["DIVERSION"] = "DIVERSION";
    BookingCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    BookingCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    BookingCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    BookingCaseStatusEnum["LOST"] = "LOST";
    BookingCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    BookingCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    BookingCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    BookingCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    BookingCaseStatusEnum["STALE"] = "STALE";
    BookingCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    BookingCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(BookingCaseStatusEnum = exports.BookingCaseStatusEnum || (exports.BookingCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BookingStateEnum;
(function (BookingStateEnum) {
    BookingStateEnum["AK"] = "AK";
    BookingStateEnum["AL"] = "AL";
    BookingStateEnum["AR"] = "AR";
    BookingStateEnum["AZ"] = "AZ";
    BookingStateEnum["CA"] = "CA";
    BookingStateEnum["CO"] = "CO";
    BookingStateEnum["CT"] = "CT";
    BookingStateEnum["DC"] = "DC";
    BookingStateEnum["DE"] = "DE";
    BookingStateEnum["FL"] = "FL";
    BookingStateEnum["GA"] = "GA";
    BookingStateEnum["HI"] = "HI";
    BookingStateEnum["IA"] = "IA";
    BookingStateEnum["ID"] = "ID";
    BookingStateEnum["IL"] = "IL";
    BookingStateEnum["IN"] = "IN";
    BookingStateEnum["KS"] = "KS";
    BookingStateEnum["KY"] = "KY";
    BookingStateEnum["LA"] = "LA";
    BookingStateEnum["MA"] = "MA";
    BookingStateEnum["MD"] = "MD";
    BookingStateEnum["ME"] = "ME";
    BookingStateEnum["MI"] = "MI";
    BookingStateEnum["MN"] = "MN";
    BookingStateEnum["MO"] = "MO";
    BookingStateEnum["MS"] = "MS";
    BookingStateEnum["MT"] = "MT";
    BookingStateEnum["NC"] = "NC";
    BookingStateEnum["ND"] = "ND";
    BookingStateEnum["NE"] = "NE";
    BookingStateEnum["NH"] = "NH";
    BookingStateEnum["NJ"] = "NJ";
    BookingStateEnum["NM"] = "NM";
    BookingStateEnum["NV"] = "NV";
    BookingStateEnum["NY"] = "NY";
    BookingStateEnum["OH"] = "OH";
    BookingStateEnum["OK"] = "OK";
    BookingStateEnum["OR"] = "OR";
    BookingStateEnum["PA"] = "PA";
    BookingStateEnum["RI"] = "RI";
    BookingStateEnum["SC"] = "SC";
    BookingStateEnum["SD"] = "SD";
    BookingStateEnum["TN"] = "TN";
    BookingStateEnum["TX"] = "TX";
    BookingStateEnum["UT"] = "UT";
    BookingStateEnum["VA"] = "VA";
    BookingStateEnum["VT"] = "VT";
    BookingStateEnum["WA"] = "WA";
    BookingStateEnum["WI"] = "WI";
    BookingStateEnum["WV"] = "WV";
    BookingStateEnum["WY"] = "WY";
})(BookingStateEnum = exports.BookingStateEnum || (exports.BookingStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BookingCancelationCaseStatusEnum;
(function (BookingCancelationCaseStatusEnum) {
    BookingCancelationCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    BookingCancelationCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    BookingCancelationCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    BookingCancelationCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    BookingCancelationCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    BookingCancelationCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    BookingCancelationCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    BookingCancelationCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    BookingCancelationCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    BookingCancelationCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    BookingCancelationCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    BookingCancelationCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    BookingCancelationCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    BookingCancelationCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    BookingCancelationCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    BookingCancelationCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    BookingCancelationCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    BookingCancelationCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    BookingCancelationCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    BookingCancelationCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    BookingCancelationCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    BookingCancelationCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    BookingCancelationCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    BookingCancelationCaseStatusEnum["DEFERRED"] = "DEFERRED";
    BookingCancelationCaseStatusEnum["DISMISSED"] = "DISMISSED";
    BookingCancelationCaseStatusEnum["DIVERSION"] = "DIVERSION";
    BookingCancelationCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    BookingCancelationCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    BookingCancelationCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    BookingCancelationCaseStatusEnum["LOST"] = "LOST";
    BookingCancelationCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    BookingCancelationCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    BookingCancelationCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    BookingCancelationCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    BookingCancelationCaseStatusEnum["STALE"] = "STALE";
    BookingCancelationCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    BookingCancelationCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(BookingCancelationCaseStatusEnum = exports.BookingCancelationCaseStatusEnum || (exports.BookingCancelationCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var BookingCancelationStateEnum;
(function (BookingCancelationStateEnum) {
    BookingCancelationStateEnum["AK"] = "AK";
    BookingCancelationStateEnum["AL"] = "AL";
    BookingCancelationStateEnum["AR"] = "AR";
    BookingCancelationStateEnum["AZ"] = "AZ";
    BookingCancelationStateEnum["CA"] = "CA";
    BookingCancelationStateEnum["CO"] = "CO";
    BookingCancelationStateEnum["CT"] = "CT";
    BookingCancelationStateEnum["DC"] = "DC";
    BookingCancelationStateEnum["DE"] = "DE";
    BookingCancelationStateEnum["FL"] = "FL";
    BookingCancelationStateEnum["GA"] = "GA";
    BookingCancelationStateEnum["HI"] = "HI";
    BookingCancelationStateEnum["IA"] = "IA";
    BookingCancelationStateEnum["ID"] = "ID";
    BookingCancelationStateEnum["IL"] = "IL";
    BookingCancelationStateEnum["IN"] = "IN";
    BookingCancelationStateEnum["KS"] = "KS";
    BookingCancelationStateEnum["KY"] = "KY";
    BookingCancelationStateEnum["LA"] = "LA";
    BookingCancelationStateEnum["MA"] = "MA";
    BookingCancelationStateEnum["MD"] = "MD";
    BookingCancelationStateEnum["ME"] = "ME";
    BookingCancelationStateEnum["MI"] = "MI";
    BookingCancelationStateEnum["MN"] = "MN";
    BookingCancelationStateEnum["MO"] = "MO";
    BookingCancelationStateEnum["MS"] = "MS";
    BookingCancelationStateEnum["MT"] = "MT";
    BookingCancelationStateEnum["NC"] = "NC";
    BookingCancelationStateEnum["ND"] = "ND";
    BookingCancelationStateEnum["NE"] = "NE";
    BookingCancelationStateEnum["NH"] = "NH";
    BookingCancelationStateEnum["NJ"] = "NJ";
    BookingCancelationStateEnum["NM"] = "NM";
    BookingCancelationStateEnum["NV"] = "NV";
    BookingCancelationStateEnum["NY"] = "NY";
    BookingCancelationStateEnum["OH"] = "OH";
    BookingCancelationStateEnum["OK"] = "OK";
    BookingCancelationStateEnum["OR"] = "OR";
    BookingCancelationStateEnum["PA"] = "PA";
    BookingCancelationStateEnum["RI"] = "RI";
    BookingCancelationStateEnum["SC"] = "SC";
    BookingCancelationStateEnum["SD"] = "SD";
    BookingCancelationStateEnum["TN"] = "TN";
    BookingCancelationStateEnum["TX"] = "TX";
    BookingCancelationStateEnum["UT"] = "UT";
    BookingCancelationStateEnum["VA"] = "VA";
    BookingCancelationStateEnum["VT"] = "VT";
    BookingCancelationStateEnum["WA"] = "WA";
    BookingCancelationStateEnum["WI"] = "WI";
    BookingCancelationStateEnum["WV"] = "WV";
    BookingCancelationStateEnum["WY"] = "WY";
})(BookingCancelationStateEnum = exports.BookingCancelationStateEnum || (exports.BookingCancelationStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CallContactCallDirectionEnum;
(function (CallContactCallDirectionEnum) {
    CallContactCallDirectionEnum["INCOMING"] = "INCOMING";
    CallContactCallDirectionEnum["OUTGOING"] = "OUTGOING";
})(CallContactCallDirectionEnum = exports.CallContactCallDirectionEnum || (exports.CallContactCallDirectionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CallContactCallStatusEnum;
(function (CallContactCallStatusEnum) {
    CallContactCallStatusEnum["BLOCKED"] = "BLOCKED";
    CallContactCallStatusEnum["BUSY"] = "BUSY";
    CallContactCallStatusEnum["COMPLETED"] = "COMPLETED";
    CallContactCallStatusEnum["CONNECTING"] = "CONNECTING";
    CallContactCallStatusEnum["CONNECTIONFAILED"] = "CONNECTION_FAILED";
    CallContactCallStatusEnum["DISCONNECTED"] = "DISCONNECTED";
    CallContactCallStatusEnum["ENQUEUED"] = "ENQUEUED";
    CallContactCallStatusEnum["INPROGRESS"] = "IN_PROGRESS";
    CallContactCallStatusEnum["MISSEDCALL"] = "MISSED_CALL";
    CallContactCallStatusEnum["ONHOLD"] = "ON_HOLD";
    CallContactCallStatusEnum["RECENTLYCOMPLETED"] = "RECENTLY_COMPLETED";
    CallContactCallStatusEnum["RESTRICTED"] = "RESTRICTED";
    CallContactCallStatusEnum["UNKNOWN"] = "UNKNOWN";
    CallContactCallStatusEnum["VOICEMAIL"] = "VOICEMAIL";
    CallContactCallStatusEnum["VOICEMAILRECORDINGINPROGRESS"] = "VOICEMAIL_RECORDING_IN_PROGRESS";
})(CallContactCallStatusEnum = exports.CallContactCallStatusEnum || (exports.CallContactCallStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CallContactIntegratedResourceTypeEnum;
(function (CallContactIntegratedResourceTypeEnum) {
    CallContactIntegratedResourceTypeEnum["FRESHDESK"] = "FRESHDESK";
    CallContactIntegratedResourceTypeEnum["UNKNOWN"] = "UNKNOWN";
})(CallContactIntegratedResourceTypeEnum = exports.CallContactIntegratedResourceTypeEnum || (exports.CallContactIntegratedResourceTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CancelBillingSubscriptionResponseStatusEnum;
(function (CancelBillingSubscriptionResponseStatusEnum) {
    CancelBillingSubscriptionResponseStatusEnum["ACTIVE"] = "ACTIVE";
    CancelBillingSubscriptionResponseStatusEnum["CANCELED"] = "CANCELED";
    CancelBillingSubscriptionResponseStatusEnum["INCOMPLETE"] = "INCOMPLETE";
    CancelBillingSubscriptionResponseStatusEnum["INCOMPLETEEXPIRED"] = "INCOMPLETE_EXPIRED";
    CancelBillingSubscriptionResponseStatusEnum["INTRIALPERIOD"] = "IN_TRIAL_PERIOD";
    CancelBillingSubscriptionResponseStatusEnum["PASTDUE"] = "PAST_DUE";
    CancelBillingSubscriptionResponseStatusEnum["UNKNOWN"] = "UNKNOWN";
    CancelBillingSubscriptionResponseStatusEnum["UNPAID"] = "UNPAID";
})(CancelBillingSubscriptionResponseStatusEnum = exports.CancelBillingSubscriptionResponseStatusEnum || (exports.CancelBillingSubscriptionResponseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CancelCaseRequestCancelationStatusEnum;
(function (CancelCaseRequestCancelationStatusEnum) {
    CancelCaseRequestCancelationStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    CancelCaseRequestCancelationStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    CancelCaseRequestCancelationStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    CancelCaseRequestCancelationStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    CancelCaseRequestCancelationStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    CancelCaseRequestCancelationStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    CancelCaseRequestCancelationStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    CancelCaseRequestCancelationStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    CancelCaseRequestCancelationStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    CancelCaseRequestCancelationStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    CancelCaseRequestCancelationStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    CancelCaseRequestCancelationStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    CancelCaseRequestCancelationStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    CancelCaseRequestCancelationStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    CancelCaseRequestCancelationStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    CancelCaseRequestCancelationStatusEnum["DEFERRED"] = "DEFERRED";
    CancelCaseRequestCancelationStatusEnum["DISMISSED"] = "DISMISSED";
    CancelCaseRequestCancelationStatusEnum["DIVERSION"] = "DIVERSION";
    CancelCaseRequestCancelationStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    CancelCaseRequestCancelationStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    CancelCaseRequestCancelationStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    CancelCaseRequestCancelationStatusEnum["LOST"] = "LOST";
    CancelCaseRequestCancelationStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    CancelCaseRequestCancelationStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    CancelCaseRequestCancelationStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    CancelCaseRequestCancelationStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    CancelCaseRequestCancelationStatusEnum["STALE"] = "STALE";
    CancelCaseRequestCancelationStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    CancelCaseRequestCancelationStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CancelCaseRequestCancelationStatusEnum = exports.CancelCaseRequestCancelationStatusEnum || (exports.CancelCaseRequestCancelationStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseActionDomainActionTypeEnum;
(function (CaseActionDomainActionTypeEnum) {
    CaseActionDomainActionTypeEnum["CITATIONDATAEXTRACTED"] = "CITATION_DATA_EXTRACTED";
    CaseActionDomainActionTypeEnum["COURTDATEREMOVED"] = "COURT_DATE_REMOVED";
    CaseActionDomainActionTypeEnum["COURTDATESCHEDULED"] = "COURT_DATE_SCHEDULED";
    CaseActionDomainActionTypeEnum["DISCOVERYRECEIVED"] = "DISCOVERY_RECEIVED";
    CaseActionDomainActionTypeEnum["DISCOVERYREQUESTED"] = "DISCOVERY_REQUESTED";
    CaseActionDomainActionTypeEnum["FAILEDPAYMENTATTEMPT"] = "FAILED_PAYMENT_ATTEMPT";
    CaseActionDomainActionTypeEnum["NOTICEOFAPPEARANCEFILED"] = "NOTICE_OF_APPEARANCE_FILED";
    CaseActionDomainActionTypeEnum["OTHER"] = "OTHER";
    CaseActionDomainActionTypeEnum["REVIEWEDBYLAWFIRM"] = "REVIEWED_BY_LAWFIRM";
    CaseActionDomainActionTypeEnum["TICKETMAILEDTOCOURT"] = "TICKET_MAILED_TO_COURT";
})(CaseActionDomainActionTypeEnum = exports.CaseActionDomainActionTypeEnum || (exports.CaseActionDomainActionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseActionDomainReqActionTypeEnum;
(function (CaseActionDomainReqActionTypeEnum) {
    CaseActionDomainReqActionTypeEnum["CITATIONDATAEXTRACTED"] = "CITATION_DATA_EXTRACTED";
    CaseActionDomainReqActionTypeEnum["COURTDATEREMOVED"] = "COURT_DATE_REMOVED";
    CaseActionDomainReqActionTypeEnum["COURTDATESCHEDULED"] = "COURT_DATE_SCHEDULED";
    CaseActionDomainReqActionTypeEnum["DISCOVERYRECEIVED"] = "DISCOVERY_RECEIVED";
    CaseActionDomainReqActionTypeEnum["DISCOVERYREQUESTED"] = "DISCOVERY_REQUESTED";
    CaseActionDomainReqActionTypeEnum["FAILEDPAYMENTATTEMPT"] = "FAILED_PAYMENT_ATTEMPT";
    CaseActionDomainReqActionTypeEnum["NOTICEOFAPPEARANCEFILED"] = "NOTICE_OF_APPEARANCE_FILED";
    CaseActionDomainReqActionTypeEnum["OTHER"] = "OTHER";
    CaseActionDomainReqActionTypeEnum["REVIEWEDBYLAWFIRM"] = "REVIEWED_BY_LAWFIRM";
    CaseActionDomainReqActionTypeEnum["TICKETMAILEDTOCOURT"] = "TICKET_MAILED_TO_COURT";
})(CaseActionDomainReqActionTypeEnum = exports.CaseActionDomainReqActionTypeEnum || (exports.CaseActionDomainReqActionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseActionDomainResActionTypeEnum;
(function (CaseActionDomainResActionTypeEnum) {
    CaseActionDomainResActionTypeEnum["CITATIONDATAEXTRACTED"] = "CITATION_DATA_EXTRACTED";
    CaseActionDomainResActionTypeEnum["COURTDATEREMOVED"] = "COURT_DATE_REMOVED";
    CaseActionDomainResActionTypeEnum["COURTDATESCHEDULED"] = "COURT_DATE_SCHEDULED";
    CaseActionDomainResActionTypeEnum["DISCOVERYRECEIVED"] = "DISCOVERY_RECEIVED";
    CaseActionDomainResActionTypeEnum["DISCOVERYREQUESTED"] = "DISCOVERY_REQUESTED";
    CaseActionDomainResActionTypeEnum["FAILEDPAYMENTATTEMPT"] = "FAILED_PAYMENT_ATTEMPT";
    CaseActionDomainResActionTypeEnum["NOTICEOFAPPEARANCEFILED"] = "NOTICE_OF_APPEARANCE_FILED";
    CaseActionDomainResActionTypeEnum["OTHER"] = "OTHER";
    CaseActionDomainResActionTypeEnum["REVIEWEDBYLAWFIRM"] = "REVIEWED_BY_LAWFIRM";
    CaseActionDomainResActionTypeEnum["TICKETMAILEDTOCOURT"] = "TICKET_MAILED_TO_COURT";
})(CaseActionDomainResActionTypeEnum = exports.CaseActionDomainResActionTypeEnum || (exports.CaseActionDomainResActionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseAlertActionTypeEnum;
(function (CaseAlertActionTypeEnum) {
    CaseAlertActionTypeEnum["ANNOUNCEMENT"] = "ANNOUNCEMENT";
    CaseAlertActionTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
})(CaseAlertActionTypeEnum = exports.CaseAlertActionTypeEnum || (exports.CaseAlertActionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseAlertAlertTypeEnum;
(function (CaseAlertAlertTypeEnum) {
    CaseAlertAlertTypeEnum["ERROR"] = "ERROR";
    CaseAlertAlertTypeEnum["INFO"] = "INFO";
    CaseAlertAlertTypeEnum["SUCCESS"] = "SUCCESS";
    CaseAlertAlertTypeEnum["WARNING"] = "WARNING";
})(CaseAlertAlertTypeEnum = exports.CaseAlertAlertTypeEnum || (exports.CaseAlertAlertTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainCaseStatusEnum;
(function (CaseDomainCaseStatusEnum) {
    CaseDomainCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    CaseDomainCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    CaseDomainCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    CaseDomainCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    CaseDomainCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    CaseDomainCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    CaseDomainCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    CaseDomainCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    CaseDomainCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    CaseDomainCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    CaseDomainCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    CaseDomainCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    CaseDomainCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    CaseDomainCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    CaseDomainCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    CaseDomainCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    CaseDomainCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    CaseDomainCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    CaseDomainCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    CaseDomainCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    CaseDomainCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    CaseDomainCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    CaseDomainCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    CaseDomainCaseStatusEnum["DEFERRED"] = "DEFERRED";
    CaseDomainCaseStatusEnum["DISMISSED"] = "DISMISSED";
    CaseDomainCaseStatusEnum["DIVERSION"] = "DIVERSION";
    CaseDomainCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    CaseDomainCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    CaseDomainCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    CaseDomainCaseStatusEnum["LOST"] = "LOST";
    CaseDomainCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    CaseDomainCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    CaseDomainCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    CaseDomainCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    CaseDomainCaseStatusEnum["STALE"] = "STALE";
    CaseDomainCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    CaseDomainCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseDomainCaseStatusEnum = exports.CaseDomainCaseStatusEnum || (exports.CaseDomainCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainCaseStatusCategoryEnum;
(function (CaseDomainCaseStatusCategoryEnum) {
    CaseDomainCaseStatusCategoryEnum["ACTIVE"] = "ACTIVE";
    CaseDomainCaseStatusCategoryEnum["CANCELLED"] = "CANCELLED";
    CaseDomainCaseStatusCategoryEnum["RESOLVED"] = "RESOLVED";
    CaseDomainCaseStatusCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseDomainCaseStatusCategoryEnum = exports.CaseDomainCaseStatusCategoryEnum || (exports.CaseDomainCaseStatusCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainRefundEligibilityEnum;
(function (CaseDomainRefundEligibilityEnum) {
    CaseDomainRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    CaseDomainRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    CaseDomainRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(CaseDomainRefundEligibilityEnum = exports.CaseDomainRefundEligibilityEnum || (exports.CaseDomainRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainReqCaseStatusEnum;
(function (CaseDomainReqCaseStatusEnum) {
    CaseDomainReqCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    CaseDomainReqCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    CaseDomainReqCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    CaseDomainReqCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    CaseDomainReqCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    CaseDomainReqCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    CaseDomainReqCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    CaseDomainReqCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    CaseDomainReqCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    CaseDomainReqCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    CaseDomainReqCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    CaseDomainReqCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    CaseDomainReqCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    CaseDomainReqCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    CaseDomainReqCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    CaseDomainReqCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    CaseDomainReqCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    CaseDomainReqCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    CaseDomainReqCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    CaseDomainReqCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    CaseDomainReqCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    CaseDomainReqCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    CaseDomainReqCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    CaseDomainReqCaseStatusEnum["DEFERRED"] = "DEFERRED";
    CaseDomainReqCaseStatusEnum["DISMISSED"] = "DISMISSED";
    CaseDomainReqCaseStatusEnum["DIVERSION"] = "DIVERSION";
    CaseDomainReqCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    CaseDomainReqCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    CaseDomainReqCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    CaseDomainReqCaseStatusEnum["LOST"] = "LOST";
    CaseDomainReqCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    CaseDomainReqCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    CaseDomainReqCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    CaseDomainReqCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    CaseDomainReqCaseStatusEnum["STALE"] = "STALE";
    CaseDomainReqCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    CaseDomainReqCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseDomainReqCaseStatusEnum = exports.CaseDomainReqCaseStatusEnum || (exports.CaseDomainReqCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainReqCaseStatusCategoryEnum;
(function (CaseDomainReqCaseStatusCategoryEnum) {
    CaseDomainReqCaseStatusCategoryEnum["ACTIVE"] = "ACTIVE";
    CaseDomainReqCaseStatusCategoryEnum["CANCELLED"] = "CANCELLED";
    CaseDomainReqCaseStatusCategoryEnum["RESOLVED"] = "RESOLVED";
    CaseDomainReqCaseStatusCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseDomainReqCaseStatusCategoryEnum = exports.CaseDomainReqCaseStatusCategoryEnum || (exports.CaseDomainReqCaseStatusCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainReqRefundEligibilityEnum;
(function (CaseDomainReqRefundEligibilityEnum) {
    CaseDomainReqRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    CaseDomainReqRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    CaseDomainReqRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(CaseDomainReqRefundEligibilityEnum = exports.CaseDomainReqRefundEligibilityEnum || (exports.CaseDomainReqRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainResCaseStatusEnum;
(function (CaseDomainResCaseStatusEnum) {
    CaseDomainResCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    CaseDomainResCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    CaseDomainResCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    CaseDomainResCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    CaseDomainResCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    CaseDomainResCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    CaseDomainResCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    CaseDomainResCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    CaseDomainResCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    CaseDomainResCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    CaseDomainResCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    CaseDomainResCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    CaseDomainResCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    CaseDomainResCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    CaseDomainResCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    CaseDomainResCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    CaseDomainResCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    CaseDomainResCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    CaseDomainResCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    CaseDomainResCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    CaseDomainResCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    CaseDomainResCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    CaseDomainResCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    CaseDomainResCaseStatusEnum["DEFERRED"] = "DEFERRED";
    CaseDomainResCaseStatusEnum["DISMISSED"] = "DISMISSED";
    CaseDomainResCaseStatusEnum["DIVERSION"] = "DIVERSION";
    CaseDomainResCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    CaseDomainResCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    CaseDomainResCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    CaseDomainResCaseStatusEnum["LOST"] = "LOST";
    CaseDomainResCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    CaseDomainResCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    CaseDomainResCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    CaseDomainResCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    CaseDomainResCaseStatusEnum["STALE"] = "STALE";
    CaseDomainResCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    CaseDomainResCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseDomainResCaseStatusEnum = exports.CaseDomainResCaseStatusEnum || (exports.CaseDomainResCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainResCaseStatusCategoryEnum;
(function (CaseDomainResCaseStatusCategoryEnum) {
    CaseDomainResCaseStatusCategoryEnum["ACTIVE"] = "ACTIVE";
    CaseDomainResCaseStatusCategoryEnum["CANCELLED"] = "CANCELLED";
    CaseDomainResCaseStatusCategoryEnum["RESOLVED"] = "RESOLVED";
    CaseDomainResCaseStatusCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseDomainResCaseStatusCategoryEnum = exports.CaseDomainResCaseStatusCategoryEnum || (exports.CaseDomainResCaseStatusCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseDomainResRefundEligibilityEnum;
(function (CaseDomainResRefundEligibilityEnum) {
    CaseDomainResRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    CaseDomainResRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    CaseDomainResRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(CaseDomainResRefundEligibilityEnum = exports.CaseDomainResRefundEligibilityEnum || (exports.CaseDomainResRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseLineItemDomainReqLineItemOwnerEnum;
(function (CaseLineItemDomainReqLineItemOwnerEnum) {
    CaseLineItemDomainReqLineItemOwnerEnum["LAWFIRM"] = "LAWFIRM";
    CaseLineItemDomainReqLineItemOwnerEnum["OTR"] = "OTR";
})(CaseLineItemDomainReqLineItemOwnerEnum = exports.CaseLineItemDomainReqLineItemOwnerEnum || (exports.CaseLineItemDomainReqLineItemOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseLineItemDomainReqLineItemTypeEnum;
(function (CaseLineItemDomainReqLineItemTypeEnum) {
    CaseLineItemDomainReqLineItemTypeEnum["ACCIDENTFEE"] = "ACCIDENT_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["BASELEGALFEE"] = "BASE_LEGAL_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["BONDFEE"] = "BOND_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["BOOKINGFEE"] = "BOOKING_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["CDLFEE"] = "CDL_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["DISPUTEFEE"] = "DISPUTE_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["FINEPAYMENT"] = "FINE_PAYMENT";
    CaseLineItemDomainReqLineItemTypeEnum["FTAFEE"] = "FTA_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["LATEFEE"] = "LATE_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["MBGREFUND"] = "MBG_REFUND";
    CaseLineItemDomainReqLineItemTypeEnum["MVSFEE"] = "MVS_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["OTHER"] = "OTHER";
    CaseLineItemDomainReqLineItemTypeEnum["OTRCREDIT"] = "OTR_CREDIT";
    CaseLineItemDomainReqLineItemTypeEnum["PAYMENTPLANSERVICEFEE"] = "PAYMENT_PLAN_SERVICE_FEE";
    CaseLineItemDomainReqLineItemTypeEnum["WARRANTFEE"] = "WARRANT_FEE";
})(CaseLineItemDomainReqLineItemTypeEnum = exports.CaseLineItemDomainReqLineItemTypeEnum || (exports.CaseLineItemDomainReqLineItemTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseLineItemDomainResLineItemOwnerEnum;
(function (CaseLineItemDomainResLineItemOwnerEnum) {
    CaseLineItemDomainResLineItemOwnerEnum["LAWFIRM"] = "LAWFIRM";
    CaseLineItemDomainResLineItemOwnerEnum["OTR"] = "OTR";
})(CaseLineItemDomainResLineItemOwnerEnum = exports.CaseLineItemDomainResLineItemOwnerEnum || (exports.CaseLineItemDomainResLineItemOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseLineItemDomainResLineItemTypeEnum;
(function (CaseLineItemDomainResLineItemTypeEnum) {
    CaseLineItemDomainResLineItemTypeEnum["ACCIDENTFEE"] = "ACCIDENT_FEE";
    CaseLineItemDomainResLineItemTypeEnum["BASELEGALFEE"] = "BASE_LEGAL_FEE";
    CaseLineItemDomainResLineItemTypeEnum["BONDFEE"] = "BOND_FEE";
    CaseLineItemDomainResLineItemTypeEnum["BOOKINGFEE"] = "BOOKING_FEE";
    CaseLineItemDomainResLineItemTypeEnum["CDLFEE"] = "CDL_FEE";
    CaseLineItemDomainResLineItemTypeEnum["DISPUTEFEE"] = "DISPUTE_FEE";
    CaseLineItemDomainResLineItemTypeEnum["FINEPAYMENT"] = "FINE_PAYMENT";
    CaseLineItemDomainResLineItemTypeEnum["FTAFEE"] = "FTA_FEE";
    CaseLineItemDomainResLineItemTypeEnum["LATEFEE"] = "LATE_FEE";
    CaseLineItemDomainResLineItemTypeEnum["MBGREFUND"] = "MBG_REFUND";
    CaseLineItemDomainResLineItemTypeEnum["MVSFEE"] = "MVS_FEE";
    CaseLineItemDomainResLineItemTypeEnum["OTHER"] = "OTHER";
    CaseLineItemDomainResLineItemTypeEnum["OTRCREDIT"] = "OTR_CREDIT";
    CaseLineItemDomainResLineItemTypeEnum["PAYMENTPLANSERVICEFEE"] = "PAYMENT_PLAN_SERVICE_FEE";
    CaseLineItemDomainResLineItemTypeEnum["WARRANTFEE"] = "WARRANT_FEE";
})(CaseLineItemDomainResLineItemTypeEnum = exports.CaseLineItemDomainResLineItemTypeEnum || (exports.CaseLineItemDomainResLineItemTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseMessageDomainAuthorRoleTypeEnum;
(function (CaseMessageDomainAuthorRoleTypeEnum) {
    CaseMessageDomainAuthorRoleTypeEnum["ADMIN"] = "ADMIN";
    CaseMessageDomainAuthorRoleTypeEnum["DEFENDANT"] = "DEFENDANT";
    CaseMessageDomainAuthorRoleTypeEnum["LAWYER"] = "LAWYER";
    CaseMessageDomainAuthorRoleTypeEnum["PARTNER"] = "PARTNER";
    CaseMessageDomainAuthorRoleTypeEnum["UNKNOWN"] = "UNKNOWN";
})(CaseMessageDomainAuthorRoleTypeEnum = exports.CaseMessageDomainAuthorRoleTypeEnum || (exports.CaseMessageDomainAuthorRoleTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseMessageDomainMediaTypeEnum;
(function (CaseMessageDomainMediaTypeEnum) {
    CaseMessageDomainMediaTypeEnum["IMAGE"] = "IMAGE";
    CaseMessageDomainMediaTypeEnum["PDF"] = "PDF";
})(CaseMessageDomainMediaTypeEnum = exports.CaseMessageDomainMediaTypeEnum || (exports.CaseMessageDomainMediaTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CasePaymentDomainRecipientEnum;
(function (CasePaymentDomainRecipientEnum) {
    CasePaymentDomainRecipientEnum["LAWFIRM"] = "LAWFIRM";
    CasePaymentDomainRecipientEnum["OTR"] = "OTR";
})(CasePaymentDomainRecipientEnum = exports.CasePaymentDomainRecipientEnum || (exports.CasePaymentDomainRecipientEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CasePaymentDomainTransactionMethodEnum;
(function (CasePaymentDomainTransactionMethodEnum) {
    CasePaymentDomainTransactionMethodEnum["CHECK"] = "CHECK";
    CasePaymentDomainTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    CasePaymentDomainTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    CasePaymentDomainTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    CasePaymentDomainTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    CasePaymentDomainTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    CasePaymentDomainTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    CasePaymentDomainTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    CasePaymentDomainTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    CasePaymentDomainTransactionMethodEnum["VENMO"] = "VENMO";
    CasePaymentDomainTransactionMethodEnum["ZELLE"] = "ZELLE";
})(CasePaymentDomainTransactionMethodEnum = exports.CasePaymentDomainTransactionMethodEnum || (exports.CasePaymentDomainTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseStatusDetailsResponseCategoryEnum;
(function (CaseStatusDetailsResponseCategoryEnum) {
    CaseStatusDetailsResponseCategoryEnum["ACTIVE"] = "ACTIVE";
    CaseStatusDetailsResponseCategoryEnum["CANCELLED"] = "CANCELLED";
    CaseStatusDetailsResponseCategoryEnum["RESOLVED"] = "RESOLVED";
    CaseStatusDetailsResponseCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseStatusDetailsResponseCategoryEnum = exports.CaseStatusDetailsResponseCategoryEnum || (exports.CaseStatusDetailsResponseCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseStatusDetailsResponseStatusEnum;
(function (CaseStatusDetailsResponseStatusEnum) {
    CaseStatusDetailsResponseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    CaseStatusDetailsResponseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    CaseStatusDetailsResponseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    CaseStatusDetailsResponseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    CaseStatusDetailsResponseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    CaseStatusDetailsResponseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    CaseStatusDetailsResponseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    CaseStatusDetailsResponseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    CaseStatusDetailsResponseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    CaseStatusDetailsResponseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    CaseStatusDetailsResponseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    CaseStatusDetailsResponseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    CaseStatusDetailsResponseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    CaseStatusDetailsResponseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    CaseStatusDetailsResponseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    CaseStatusDetailsResponseStatusEnum["DEFERRED"] = "DEFERRED";
    CaseStatusDetailsResponseStatusEnum["DISMISSED"] = "DISMISSED";
    CaseStatusDetailsResponseStatusEnum["DIVERSION"] = "DIVERSION";
    CaseStatusDetailsResponseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    CaseStatusDetailsResponseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    CaseStatusDetailsResponseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    CaseStatusDetailsResponseStatusEnum["LOST"] = "LOST";
    CaseStatusDetailsResponseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    CaseStatusDetailsResponseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    CaseStatusDetailsResponseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    CaseStatusDetailsResponseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    CaseStatusDetailsResponseStatusEnum["STALE"] = "STALE";
    CaseStatusDetailsResponseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    CaseStatusDetailsResponseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseStatusDetailsResponseStatusEnum = exports.CaseStatusDetailsResponseStatusEnum || (exports.CaseStatusDetailsResponseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseStatusDomainCaseStatusEnum;
(function (CaseStatusDomainCaseStatusEnum) {
    CaseStatusDomainCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    CaseStatusDomainCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    CaseStatusDomainCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    CaseStatusDomainCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    CaseStatusDomainCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    CaseStatusDomainCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    CaseStatusDomainCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    CaseStatusDomainCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    CaseStatusDomainCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    CaseStatusDomainCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    CaseStatusDomainCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    CaseStatusDomainCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    CaseStatusDomainCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    CaseStatusDomainCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    CaseStatusDomainCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    CaseStatusDomainCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    CaseStatusDomainCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    CaseStatusDomainCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    CaseStatusDomainCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    CaseStatusDomainCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    CaseStatusDomainCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    CaseStatusDomainCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    CaseStatusDomainCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    CaseStatusDomainCaseStatusEnum["DEFERRED"] = "DEFERRED";
    CaseStatusDomainCaseStatusEnum["DISMISSED"] = "DISMISSED";
    CaseStatusDomainCaseStatusEnum["DIVERSION"] = "DIVERSION";
    CaseStatusDomainCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    CaseStatusDomainCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    CaseStatusDomainCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    CaseStatusDomainCaseStatusEnum["LOST"] = "LOST";
    CaseStatusDomainCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    CaseStatusDomainCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    CaseStatusDomainCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    CaseStatusDomainCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    CaseStatusDomainCaseStatusEnum["STALE"] = "STALE";
    CaseStatusDomainCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    CaseStatusDomainCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseStatusDomainCaseStatusEnum = exports.CaseStatusDomainCaseStatusEnum || (exports.CaseStatusDomainCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseStatusDomainStatusCategoryEnum;
(function (CaseStatusDomainStatusCategoryEnum) {
    CaseStatusDomainStatusCategoryEnum["ACTIVE"] = "ACTIVE";
    CaseStatusDomainStatusCategoryEnum["CANCELLED"] = "CANCELLED";
    CaseStatusDomainStatusCategoryEnum["RESOLVED"] = "RESOLVED";
    CaseStatusDomainStatusCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(CaseStatusDomainStatusCategoryEnum = exports.CaseStatusDomainStatusCategoryEnum || (exports.CaseStatusDomainStatusCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseSummaryDomainCaseDecisionStatusEnum;
(function (CaseSummaryDomainCaseDecisionStatusEnum) {
    CaseSummaryDomainCaseDecisionStatusEnum["ACCEPTED"] = "ACCEPTED";
    CaseSummaryDomainCaseDecisionStatusEnum["CREATED"] = "CREATED";
    CaseSummaryDomainCaseDecisionStatusEnum["DECLINED"] = "DECLINED";
    CaseSummaryDomainCaseDecisionStatusEnum["EXPIRED"] = "EXPIRED";
    CaseSummaryDomainCaseDecisionStatusEnum["PENDING"] = "PENDING";
    CaseSummaryDomainCaseDecisionStatusEnum["REMATCHED"] = "REMATCHED";
    CaseSummaryDomainCaseDecisionStatusEnum["REMATCHEDREFERRAL"] = "REMATCHED_REFERRAL";
})(CaseSummaryDomainCaseDecisionStatusEnum = exports.CaseSummaryDomainCaseDecisionStatusEnum || (exports.CaseSummaryDomainCaseDecisionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseTransferHistoryDecisionStatusEnum;
(function (CaseTransferHistoryDecisionStatusEnum) {
    CaseTransferHistoryDecisionStatusEnum["ACCEPTED"] = "ACCEPTED";
    CaseTransferHistoryDecisionStatusEnum["CREATED"] = "CREATED";
    CaseTransferHistoryDecisionStatusEnum["DECLINED"] = "DECLINED";
    CaseTransferHistoryDecisionStatusEnum["EXPIRED"] = "EXPIRED";
    CaseTransferHistoryDecisionStatusEnum["PENDING"] = "PENDING";
    CaseTransferHistoryDecisionStatusEnum["REMATCHED"] = "REMATCHED";
    CaseTransferHistoryDecisionStatusEnum["REMATCHEDREFERRAL"] = "REMATCHED_REFERRAL";
})(CaseTransferHistoryDecisionStatusEnum = exports.CaseTransferHistoryDecisionStatusEnum || (exports.CaseTransferHistoryDecisionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseTransferHistoryRefundOwnerEnum;
(function (CaseTransferHistoryRefundOwnerEnum) {
    CaseTransferHistoryRefundOwnerEnum["LAWFIRM"] = "LAWFIRM";
    CaseTransferHistoryRefundOwnerEnum["NONE"] = "NONE";
    CaseTransferHistoryRefundOwnerEnum["OTR"] = "OTR";
})(CaseTransferHistoryRefundOwnerEnum = exports.CaseTransferHistoryRefundOwnerEnum || (exports.CaseTransferHistoryRefundOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseViolationPenaltyPenaltyTypeEnum;
(function (CaseViolationPenaltyPenaltyTypeEnum) {
    CaseViolationPenaltyPenaltyTypeEnum["DEMERITPOINTS"] = "DEMERIT_POINTS";
    CaseViolationPenaltyPenaltyTypeEnum["INCARCERATIONMAXDAYS"] = "INCARCERATION_MAX_DAYS";
    CaseViolationPenaltyPenaltyTypeEnum["INCARCERATIONMINDAYS"] = "INCARCERATION_MIN_DAYS";
    CaseViolationPenaltyPenaltyTypeEnum["INSURANCEPOINTS"] = "INSURANCE_POINTS";
    CaseViolationPenaltyPenaltyTypeEnum["INSURANCERATEINCREASE"] = "INSURANCE_RATE_INCREASE";
    CaseViolationPenaltyPenaltyTypeEnum["LICENSEREVOCATIONMAXDAYS"] = "LICENSE_REVOCATION_MAX_DAYS";
    CaseViolationPenaltyPenaltyTypeEnum["LICENSEREVOCATIONMINDAYS"] = "LICENSE_REVOCATION_MIN_DAYS";
    CaseViolationPenaltyPenaltyTypeEnum["LICENSESUSPENSIONMAXDAYS"] = "LICENSE_SUSPENSION_MAX_DAYS";
    CaseViolationPenaltyPenaltyTypeEnum["LICENSESUSPENSIONMINDAYS"] = "LICENSE_SUSPENSION_MIN_DAYS";
    CaseViolationPenaltyPenaltyTypeEnum["MANDATORYCOURTAPPEARANCE"] = "MANDATORY_COURT_APPEARANCE";
    CaseViolationPenaltyPenaltyTypeEnum["MANDATORYCOURTAPPEARANCEWITHATTORNEY"] = "MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY";
    CaseViolationPenaltyPenaltyTypeEnum["MAXBAILAMOUNT"] = "MAX_BAIL_AMOUNT";
    CaseViolationPenaltyPenaltyTypeEnum["MINBAILAMOUNT"] = "MIN_BAIL_AMOUNT";
    CaseViolationPenaltyPenaltyTypeEnum["PROBATIONINDAYS"] = "PROBATION_IN_DAYS";
    CaseViolationPenaltyPenaltyTypeEnum["TOTALBAILAMOUNT"] = "TOTAL_BAIL_AMOUNT";
})(CaseViolationPenaltyPenaltyTypeEnum = exports.CaseViolationPenaltyPenaltyTypeEnum || (exports.CaseViolationPenaltyPenaltyTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CaseWithCoverageObtainedCaseClassificationEnum;
(function (CaseWithCoverageObtainedCaseClassificationEnum) {
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    CaseWithCoverageObtainedCaseClassificationEnum["FELONY"] = "FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["INFRACTION"] = "INFRACTION";
    CaseWithCoverageObtainedCaseClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    CaseWithCoverageObtainedCaseClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    CaseWithCoverageObtainedCaseClassificationEnum["NONMOVING"] = "NON_MOVING";
    CaseWithCoverageObtainedCaseClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    CaseWithCoverageObtainedCaseClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    CaseWithCoverageObtainedCaseClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    CaseWithCoverageObtainedCaseClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    CaseWithCoverageObtainedCaseClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    CaseWithCoverageObtainedCaseClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    CaseWithCoverageObtainedCaseClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(CaseWithCoverageObtainedCaseClassificationEnum = exports.CaseWithCoverageObtainedCaseClassificationEnum || (exports.CaseWithCoverageObtainedCaseClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ChargeFeeToLawfirmRequestTransactionMethodEnum;
(function (ChargeFeeToLawfirmRequestTransactionMethodEnum) {
    ChargeFeeToLawfirmRequestTransactionMethodEnum["CHECK"] = "CHECK";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["VENMO"] = "VENMO";
    ChargeFeeToLawfirmRequestTransactionMethodEnum["ZELLE"] = "ZELLE";
})(ChargeFeeToLawfirmRequestTransactionMethodEnum = exports.ChargeFeeToLawfirmRequestTransactionMethodEnum || (exports.ChargeFeeToLawfirmRequestTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainCdlStatusEnum;
(function (CitationDomainCdlStatusEnum) {
    CitationDomainCdlStatusEnum["CDLINCOMMERCIALVEHICLE"] = "CDL_IN_COMMERCIAL_VEHICLE";
    CitationDomainCdlStatusEnum["CDLINPERSONALVEHICLE"] = "CDL_IN_PERSONAL_VEHICLE";
    CitationDomainCdlStatusEnum["NOCDL"] = "NO_CDL";
})(CitationDomainCdlStatusEnum = exports.CitationDomainCdlStatusEnum || (exports.CitationDomainCdlStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainClientTypeEnum;
(function (CitationDomainClientTypeEnum) {
    CitationDomainClientTypeEnum["ANDROID"] = "ANDROID";
    CitationDomainClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    CitationDomainClientTypeEnum["DMVGO"] = "DMV_GO";
    CitationDomainClientTypeEnum["DMVORG"] = "DMV_ORG";
    CitationDomainClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    CitationDomainClientTypeEnum["IOS"] = "IOS";
    CitationDomainClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    CitationDomainClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    CitationDomainClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    CitationDomainClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    CitationDomainClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    CitationDomainClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    CitationDomainClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    CitationDomainClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    CitationDomainClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    CitationDomainClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    CitationDomainClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    CitationDomainClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    CitationDomainClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(CitationDomainClientTypeEnum = exports.CitationDomainClientTypeEnum || (exports.CitationDomainClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainStateEnum;
(function (CitationDomainStateEnum) {
    CitationDomainStateEnum["AK"] = "AK";
    CitationDomainStateEnum["AL"] = "AL";
    CitationDomainStateEnum["AR"] = "AR";
    CitationDomainStateEnum["AZ"] = "AZ";
    CitationDomainStateEnum["CA"] = "CA";
    CitationDomainStateEnum["CO"] = "CO";
    CitationDomainStateEnum["CT"] = "CT";
    CitationDomainStateEnum["DC"] = "DC";
    CitationDomainStateEnum["DE"] = "DE";
    CitationDomainStateEnum["FL"] = "FL";
    CitationDomainStateEnum["GA"] = "GA";
    CitationDomainStateEnum["HI"] = "HI";
    CitationDomainStateEnum["IA"] = "IA";
    CitationDomainStateEnum["ID"] = "ID";
    CitationDomainStateEnum["IL"] = "IL";
    CitationDomainStateEnum["IN"] = "IN";
    CitationDomainStateEnum["KS"] = "KS";
    CitationDomainStateEnum["KY"] = "KY";
    CitationDomainStateEnum["LA"] = "LA";
    CitationDomainStateEnum["MA"] = "MA";
    CitationDomainStateEnum["MD"] = "MD";
    CitationDomainStateEnum["ME"] = "ME";
    CitationDomainStateEnum["MI"] = "MI";
    CitationDomainStateEnum["MN"] = "MN";
    CitationDomainStateEnum["MO"] = "MO";
    CitationDomainStateEnum["MS"] = "MS";
    CitationDomainStateEnum["MT"] = "MT";
    CitationDomainStateEnum["NC"] = "NC";
    CitationDomainStateEnum["ND"] = "ND";
    CitationDomainStateEnum["NE"] = "NE";
    CitationDomainStateEnum["NH"] = "NH";
    CitationDomainStateEnum["NJ"] = "NJ";
    CitationDomainStateEnum["NM"] = "NM";
    CitationDomainStateEnum["NV"] = "NV";
    CitationDomainStateEnum["NY"] = "NY";
    CitationDomainStateEnum["OH"] = "OH";
    CitationDomainStateEnum["OK"] = "OK";
    CitationDomainStateEnum["OR"] = "OR";
    CitationDomainStateEnum["PA"] = "PA";
    CitationDomainStateEnum["RI"] = "RI";
    CitationDomainStateEnum["SC"] = "SC";
    CitationDomainStateEnum["SD"] = "SD";
    CitationDomainStateEnum["TN"] = "TN";
    CitationDomainStateEnum["TX"] = "TX";
    CitationDomainStateEnum["UT"] = "UT";
    CitationDomainStateEnum["VA"] = "VA";
    CitationDomainStateEnum["VT"] = "VT";
    CitationDomainStateEnum["WA"] = "WA";
    CitationDomainStateEnum["WI"] = "WI";
    CitationDomainStateEnum["WV"] = "WV";
    CitationDomainStateEnum["WY"] = "WY";
})(CitationDomainStateEnum = exports.CitationDomainStateEnum || (exports.CitationDomainStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainReqCdlStatusEnum;
(function (CitationDomainReqCdlStatusEnum) {
    CitationDomainReqCdlStatusEnum["CDLINCOMMERCIALVEHICLE"] = "CDL_IN_COMMERCIAL_VEHICLE";
    CitationDomainReqCdlStatusEnum["CDLINPERSONALVEHICLE"] = "CDL_IN_PERSONAL_VEHICLE";
    CitationDomainReqCdlStatusEnum["NOCDL"] = "NO_CDL";
})(CitationDomainReqCdlStatusEnum = exports.CitationDomainReqCdlStatusEnum || (exports.CitationDomainReqCdlStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainReqClientTypeEnum;
(function (CitationDomainReqClientTypeEnum) {
    CitationDomainReqClientTypeEnum["ANDROID"] = "ANDROID";
    CitationDomainReqClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    CitationDomainReqClientTypeEnum["DMVGO"] = "DMV_GO";
    CitationDomainReqClientTypeEnum["DMVORG"] = "DMV_ORG";
    CitationDomainReqClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    CitationDomainReqClientTypeEnum["IOS"] = "IOS";
    CitationDomainReqClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    CitationDomainReqClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    CitationDomainReqClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    CitationDomainReqClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    CitationDomainReqClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    CitationDomainReqClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    CitationDomainReqClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    CitationDomainReqClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    CitationDomainReqClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    CitationDomainReqClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    CitationDomainReqClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    CitationDomainReqClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    CitationDomainReqClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(CitationDomainReqClientTypeEnum = exports.CitationDomainReqClientTypeEnum || (exports.CitationDomainReqClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainReqStateEnum;
(function (CitationDomainReqStateEnum) {
    CitationDomainReqStateEnum["AK"] = "AK";
    CitationDomainReqStateEnum["AL"] = "AL";
    CitationDomainReqStateEnum["AR"] = "AR";
    CitationDomainReqStateEnum["AZ"] = "AZ";
    CitationDomainReqStateEnum["CA"] = "CA";
    CitationDomainReqStateEnum["CO"] = "CO";
    CitationDomainReqStateEnum["CT"] = "CT";
    CitationDomainReqStateEnum["DC"] = "DC";
    CitationDomainReqStateEnum["DE"] = "DE";
    CitationDomainReqStateEnum["FL"] = "FL";
    CitationDomainReqStateEnum["GA"] = "GA";
    CitationDomainReqStateEnum["HI"] = "HI";
    CitationDomainReqStateEnum["IA"] = "IA";
    CitationDomainReqStateEnum["ID"] = "ID";
    CitationDomainReqStateEnum["IL"] = "IL";
    CitationDomainReqStateEnum["IN"] = "IN";
    CitationDomainReqStateEnum["KS"] = "KS";
    CitationDomainReqStateEnum["KY"] = "KY";
    CitationDomainReqStateEnum["LA"] = "LA";
    CitationDomainReqStateEnum["MA"] = "MA";
    CitationDomainReqStateEnum["MD"] = "MD";
    CitationDomainReqStateEnum["ME"] = "ME";
    CitationDomainReqStateEnum["MI"] = "MI";
    CitationDomainReqStateEnum["MN"] = "MN";
    CitationDomainReqStateEnum["MO"] = "MO";
    CitationDomainReqStateEnum["MS"] = "MS";
    CitationDomainReqStateEnum["MT"] = "MT";
    CitationDomainReqStateEnum["NC"] = "NC";
    CitationDomainReqStateEnum["ND"] = "ND";
    CitationDomainReqStateEnum["NE"] = "NE";
    CitationDomainReqStateEnum["NH"] = "NH";
    CitationDomainReqStateEnum["NJ"] = "NJ";
    CitationDomainReqStateEnum["NM"] = "NM";
    CitationDomainReqStateEnum["NV"] = "NV";
    CitationDomainReqStateEnum["NY"] = "NY";
    CitationDomainReqStateEnum["OH"] = "OH";
    CitationDomainReqStateEnum["OK"] = "OK";
    CitationDomainReqStateEnum["OR"] = "OR";
    CitationDomainReqStateEnum["PA"] = "PA";
    CitationDomainReqStateEnum["RI"] = "RI";
    CitationDomainReqStateEnum["SC"] = "SC";
    CitationDomainReqStateEnum["SD"] = "SD";
    CitationDomainReqStateEnum["TN"] = "TN";
    CitationDomainReqStateEnum["TX"] = "TX";
    CitationDomainReqStateEnum["UT"] = "UT";
    CitationDomainReqStateEnum["VA"] = "VA";
    CitationDomainReqStateEnum["VT"] = "VT";
    CitationDomainReqStateEnum["WA"] = "WA";
    CitationDomainReqStateEnum["WI"] = "WI";
    CitationDomainReqStateEnum["WV"] = "WV";
    CitationDomainReqStateEnum["WY"] = "WY";
})(CitationDomainReqStateEnum = exports.CitationDomainReqStateEnum || (exports.CitationDomainReqStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainResCdlStatusEnum;
(function (CitationDomainResCdlStatusEnum) {
    CitationDomainResCdlStatusEnum["CDLINCOMMERCIALVEHICLE"] = "CDL_IN_COMMERCIAL_VEHICLE";
    CitationDomainResCdlStatusEnum["CDLINPERSONALVEHICLE"] = "CDL_IN_PERSONAL_VEHICLE";
    CitationDomainResCdlStatusEnum["NOCDL"] = "NO_CDL";
})(CitationDomainResCdlStatusEnum = exports.CitationDomainResCdlStatusEnum || (exports.CitationDomainResCdlStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainResClientTypeEnum;
(function (CitationDomainResClientTypeEnum) {
    CitationDomainResClientTypeEnum["ANDROID"] = "ANDROID";
    CitationDomainResClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    CitationDomainResClientTypeEnum["DMVGO"] = "DMV_GO";
    CitationDomainResClientTypeEnum["DMVORG"] = "DMV_ORG";
    CitationDomainResClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    CitationDomainResClientTypeEnum["IOS"] = "IOS";
    CitationDomainResClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    CitationDomainResClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    CitationDomainResClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    CitationDomainResClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    CitationDomainResClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    CitationDomainResClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    CitationDomainResClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    CitationDomainResClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    CitationDomainResClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    CitationDomainResClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    CitationDomainResClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    CitationDomainResClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    CitationDomainResClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(CitationDomainResClientTypeEnum = exports.CitationDomainResClientTypeEnum || (exports.CitationDomainResClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationDomainResStateEnum;
(function (CitationDomainResStateEnum) {
    CitationDomainResStateEnum["AK"] = "AK";
    CitationDomainResStateEnum["AL"] = "AL";
    CitationDomainResStateEnum["AR"] = "AR";
    CitationDomainResStateEnum["AZ"] = "AZ";
    CitationDomainResStateEnum["CA"] = "CA";
    CitationDomainResStateEnum["CO"] = "CO";
    CitationDomainResStateEnum["CT"] = "CT";
    CitationDomainResStateEnum["DC"] = "DC";
    CitationDomainResStateEnum["DE"] = "DE";
    CitationDomainResStateEnum["FL"] = "FL";
    CitationDomainResStateEnum["GA"] = "GA";
    CitationDomainResStateEnum["HI"] = "HI";
    CitationDomainResStateEnum["IA"] = "IA";
    CitationDomainResStateEnum["ID"] = "ID";
    CitationDomainResStateEnum["IL"] = "IL";
    CitationDomainResStateEnum["IN"] = "IN";
    CitationDomainResStateEnum["KS"] = "KS";
    CitationDomainResStateEnum["KY"] = "KY";
    CitationDomainResStateEnum["LA"] = "LA";
    CitationDomainResStateEnum["MA"] = "MA";
    CitationDomainResStateEnum["MD"] = "MD";
    CitationDomainResStateEnum["ME"] = "ME";
    CitationDomainResStateEnum["MI"] = "MI";
    CitationDomainResStateEnum["MN"] = "MN";
    CitationDomainResStateEnum["MO"] = "MO";
    CitationDomainResStateEnum["MS"] = "MS";
    CitationDomainResStateEnum["MT"] = "MT";
    CitationDomainResStateEnum["NC"] = "NC";
    CitationDomainResStateEnum["ND"] = "ND";
    CitationDomainResStateEnum["NE"] = "NE";
    CitationDomainResStateEnum["NH"] = "NH";
    CitationDomainResStateEnum["NJ"] = "NJ";
    CitationDomainResStateEnum["NM"] = "NM";
    CitationDomainResStateEnum["NV"] = "NV";
    CitationDomainResStateEnum["NY"] = "NY";
    CitationDomainResStateEnum["OH"] = "OH";
    CitationDomainResStateEnum["OK"] = "OK";
    CitationDomainResStateEnum["OR"] = "OR";
    CitationDomainResStateEnum["PA"] = "PA";
    CitationDomainResStateEnum["RI"] = "RI";
    CitationDomainResStateEnum["SC"] = "SC";
    CitationDomainResStateEnum["SD"] = "SD";
    CitationDomainResStateEnum["TN"] = "TN";
    CitationDomainResStateEnum["TX"] = "TX";
    CitationDomainResStateEnum["UT"] = "UT";
    CitationDomainResStateEnum["VA"] = "VA";
    CitationDomainResStateEnum["VT"] = "VT";
    CitationDomainResStateEnum["WA"] = "WA";
    CitationDomainResStateEnum["WI"] = "WI";
    CitationDomainResStateEnum["WV"] = "WV";
    CitationDomainResStateEnum["WY"] = "WY";
})(CitationDomainResStateEnum = exports.CitationDomainResStateEnum || (exports.CitationDomainResStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationInputRequestCdlStatusEnum;
(function (CitationInputRequestCdlStatusEnum) {
    CitationInputRequestCdlStatusEnum["CDLINCOMMERCIALVEHICLE"] = "CDL_IN_COMMERCIAL_VEHICLE";
    CitationInputRequestCdlStatusEnum["CDLINPERSONALVEHICLE"] = "CDL_IN_PERSONAL_VEHICLE";
    CitationInputRequestCdlStatusEnum["NOCDL"] = "NO_CDL";
})(CitationInputRequestCdlStatusEnum = exports.CitationInputRequestCdlStatusEnum || (exports.CitationInputRequestCdlStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationInputRequestStateEnum;
(function (CitationInputRequestStateEnum) {
    CitationInputRequestStateEnum["AK"] = "AK";
    CitationInputRequestStateEnum["AL"] = "AL";
    CitationInputRequestStateEnum["AR"] = "AR";
    CitationInputRequestStateEnum["AZ"] = "AZ";
    CitationInputRequestStateEnum["CA"] = "CA";
    CitationInputRequestStateEnum["CO"] = "CO";
    CitationInputRequestStateEnum["CT"] = "CT";
    CitationInputRequestStateEnum["DC"] = "DC";
    CitationInputRequestStateEnum["DE"] = "DE";
    CitationInputRequestStateEnum["FL"] = "FL";
    CitationInputRequestStateEnum["GA"] = "GA";
    CitationInputRequestStateEnum["HI"] = "HI";
    CitationInputRequestStateEnum["IA"] = "IA";
    CitationInputRequestStateEnum["ID"] = "ID";
    CitationInputRequestStateEnum["IL"] = "IL";
    CitationInputRequestStateEnum["IN"] = "IN";
    CitationInputRequestStateEnum["KS"] = "KS";
    CitationInputRequestStateEnum["KY"] = "KY";
    CitationInputRequestStateEnum["LA"] = "LA";
    CitationInputRequestStateEnum["MA"] = "MA";
    CitationInputRequestStateEnum["MD"] = "MD";
    CitationInputRequestStateEnum["ME"] = "ME";
    CitationInputRequestStateEnum["MI"] = "MI";
    CitationInputRequestStateEnum["MN"] = "MN";
    CitationInputRequestStateEnum["MO"] = "MO";
    CitationInputRequestStateEnum["MS"] = "MS";
    CitationInputRequestStateEnum["MT"] = "MT";
    CitationInputRequestStateEnum["NC"] = "NC";
    CitationInputRequestStateEnum["ND"] = "ND";
    CitationInputRequestStateEnum["NE"] = "NE";
    CitationInputRequestStateEnum["NH"] = "NH";
    CitationInputRequestStateEnum["NJ"] = "NJ";
    CitationInputRequestStateEnum["NM"] = "NM";
    CitationInputRequestStateEnum["NV"] = "NV";
    CitationInputRequestStateEnum["NY"] = "NY";
    CitationInputRequestStateEnum["OH"] = "OH";
    CitationInputRequestStateEnum["OK"] = "OK";
    CitationInputRequestStateEnum["OR"] = "OR";
    CitationInputRequestStateEnum["PA"] = "PA";
    CitationInputRequestStateEnum["RI"] = "RI";
    CitationInputRequestStateEnum["SC"] = "SC";
    CitationInputRequestStateEnum["SD"] = "SD";
    CitationInputRequestStateEnum["TN"] = "TN";
    CitationInputRequestStateEnum["TX"] = "TX";
    CitationInputRequestStateEnum["UT"] = "UT";
    CitationInputRequestStateEnum["VA"] = "VA";
    CitationInputRequestStateEnum["VT"] = "VT";
    CitationInputRequestStateEnum["WA"] = "WA";
    CitationInputRequestStateEnum["WI"] = "WI";
    CitationInputRequestStateEnum["WV"] = "WV";
    CitationInputRequestStateEnum["WY"] = "WY";
})(CitationInputRequestStateEnum = exports.CitationInputRequestStateEnum || (exports.CitationInputRequestStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CitationWithMissingCourtStateEnum;
(function (CitationWithMissingCourtStateEnum) {
    CitationWithMissingCourtStateEnum["AK"] = "AK";
    CitationWithMissingCourtStateEnum["AL"] = "AL";
    CitationWithMissingCourtStateEnum["AR"] = "AR";
    CitationWithMissingCourtStateEnum["AZ"] = "AZ";
    CitationWithMissingCourtStateEnum["CA"] = "CA";
    CitationWithMissingCourtStateEnum["CO"] = "CO";
    CitationWithMissingCourtStateEnum["CT"] = "CT";
    CitationWithMissingCourtStateEnum["DC"] = "DC";
    CitationWithMissingCourtStateEnum["DE"] = "DE";
    CitationWithMissingCourtStateEnum["FL"] = "FL";
    CitationWithMissingCourtStateEnum["GA"] = "GA";
    CitationWithMissingCourtStateEnum["HI"] = "HI";
    CitationWithMissingCourtStateEnum["IA"] = "IA";
    CitationWithMissingCourtStateEnum["ID"] = "ID";
    CitationWithMissingCourtStateEnum["IL"] = "IL";
    CitationWithMissingCourtStateEnum["IN"] = "IN";
    CitationWithMissingCourtStateEnum["KS"] = "KS";
    CitationWithMissingCourtStateEnum["KY"] = "KY";
    CitationWithMissingCourtStateEnum["LA"] = "LA";
    CitationWithMissingCourtStateEnum["MA"] = "MA";
    CitationWithMissingCourtStateEnum["MD"] = "MD";
    CitationWithMissingCourtStateEnum["ME"] = "ME";
    CitationWithMissingCourtStateEnum["MI"] = "MI";
    CitationWithMissingCourtStateEnum["MN"] = "MN";
    CitationWithMissingCourtStateEnum["MO"] = "MO";
    CitationWithMissingCourtStateEnum["MS"] = "MS";
    CitationWithMissingCourtStateEnum["MT"] = "MT";
    CitationWithMissingCourtStateEnum["NC"] = "NC";
    CitationWithMissingCourtStateEnum["ND"] = "ND";
    CitationWithMissingCourtStateEnum["NE"] = "NE";
    CitationWithMissingCourtStateEnum["NH"] = "NH";
    CitationWithMissingCourtStateEnum["NJ"] = "NJ";
    CitationWithMissingCourtStateEnum["NM"] = "NM";
    CitationWithMissingCourtStateEnum["NV"] = "NV";
    CitationWithMissingCourtStateEnum["NY"] = "NY";
    CitationWithMissingCourtStateEnum["OH"] = "OH";
    CitationWithMissingCourtStateEnum["OK"] = "OK";
    CitationWithMissingCourtStateEnum["OR"] = "OR";
    CitationWithMissingCourtStateEnum["PA"] = "PA";
    CitationWithMissingCourtStateEnum["RI"] = "RI";
    CitationWithMissingCourtStateEnum["SC"] = "SC";
    CitationWithMissingCourtStateEnum["SD"] = "SD";
    CitationWithMissingCourtStateEnum["TN"] = "TN";
    CitationWithMissingCourtStateEnum["TX"] = "TX";
    CitationWithMissingCourtStateEnum["UT"] = "UT";
    CitationWithMissingCourtStateEnum["VA"] = "VA";
    CitationWithMissingCourtStateEnum["VT"] = "VT";
    CitationWithMissingCourtStateEnum["WA"] = "WA";
    CitationWithMissingCourtStateEnum["WI"] = "WI";
    CitationWithMissingCourtStateEnum["WV"] = "WV";
    CitationWithMissingCourtStateEnum["WY"] = "WY";
})(CitationWithMissingCourtStateEnum = exports.CitationWithMissingCourtStateEnum || (exports.CitationWithMissingCourtStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ClientActionRequiredRequestCaseActionItemEnum;
(function (ClientActionRequiredRequestCaseActionItemEnum) {
    ClientActionRequiredRequestCaseActionItemEnum["FEEADJUSTMENT"] = "FEE_ADJUSTMENT";
    ClientActionRequiredRequestCaseActionItemEnum["NOREFUNDOFFERED"] = "NO_REFUND_OFFERED";
    ClientActionRequiredRequestCaseActionItemEnum["REQUESTCOURTEXTENSION"] = "REQUEST_COURT_EXTENSION";
})(ClientActionRequiredRequestCaseActionItemEnum = exports.ClientActionRequiredRequestCaseActionItemEnum || (exports.ClientActionRequiredRequestCaseActionItemEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CountyDomainStateCodeEnum;
(function (CountyDomainStateCodeEnum) {
    CountyDomainStateCodeEnum["AK"] = "AK";
    CountyDomainStateCodeEnum["AL"] = "AL";
    CountyDomainStateCodeEnum["AR"] = "AR";
    CountyDomainStateCodeEnum["AZ"] = "AZ";
    CountyDomainStateCodeEnum["CA"] = "CA";
    CountyDomainStateCodeEnum["CO"] = "CO";
    CountyDomainStateCodeEnum["CT"] = "CT";
    CountyDomainStateCodeEnum["DC"] = "DC";
    CountyDomainStateCodeEnum["DE"] = "DE";
    CountyDomainStateCodeEnum["FL"] = "FL";
    CountyDomainStateCodeEnum["GA"] = "GA";
    CountyDomainStateCodeEnum["HI"] = "HI";
    CountyDomainStateCodeEnum["IA"] = "IA";
    CountyDomainStateCodeEnum["ID"] = "ID";
    CountyDomainStateCodeEnum["IL"] = "IL";
    CountyDomainStateCodeEnum["IN"] = "IN";
    CountyDomainStateCodeEnum["KS"] = "KS";
    CountyDomainStateCodeEnum["KY"] = "KY";
    CountyDomainStateCodeEnum["LA"] = "LA";
    CountyDomainStateCodeEnum["MA"] = "MA";
    CountyDomainStateCodeEnum["MD"] = "MD";
    CountyDomainStateCodeEnum["ME"] = "ME";
    CountyDomainStateCodeEnum["MI"] = "MI";
    CountyDomainStateCodeEnum["MN"] = "MN";
    CountyDomainStateCodeEnum["MO"] = "MO";
    CountyDomainStateCodeEnum["MS"] = "MS";
    CountyDomainStateCodeEnum["MT"] = "MT";
    CountyDomainStateCodeEnum["NC"] = "NC";
    CountyDomainStateCodeEnum["ND"] = "ND";
    CountyDomainStateCodeEnum["NE"] = "NE";
    CountyDomainStateCodeEnum["NH"] = "NH";
    CountyDomainStateCodeEnum["NJ"] = "NJ";
    CountyDomainStateCodeEnum["NM"] = "NM";
    CountyDomainStateCodeEnum["NV"] = "NV";
    CountyDomainStateCodeEnum["NY"] = "NY";
    CountyDomainStateCodeEnum["OH"] = "OH";
    CountyDomainStateCodeEnum["OK"] = "OK";
    CountyDomainStateCodeEnum["OR"] = "OR";
    CountyDomainStateCodeEnum["PA"] = "PA";
    CountyDomainStateCodeEnum["RI"] = "RI";
    CountyDomainStateCodeEnum["SC"] = "SC";
    CountyDomainStateCodeEnum["SD"] = "SD";
    CountyDomainStateCodeEnum["TN"] = "TN";
    CountyDomainStateCodeEnum["TX"] = "TX";
    CountyDomainStateCodeEnum["UT"] = "UT";
    CountyDomainStateCodeEnum["VA"] = "VA";
    CountyDomainStateCodeEnum["VT"] = "VT";
    CountyDomainStateCodeEnum["WA"] = "WA";
    CountyDomainStateCodeEnum["WI"] = "WI";
    CountyDomainStateCodeEnum["WV"] = "WV";
    CountyDomainStateCodeEnum["WY"] = "WY";
})(CountyDomainStateCodeEnum = exports.CountyDomainStateCodeEnum || (exports.CountyDomainStateCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CourtDomainCourtTypeEnum;
(function (CourtDomainCourtTypeEnum) {
    CourtDomainCourtTypeEnum["CIRCUIT"] = "CIRCUIT";
    CourtDomainCourtTypeEnum["COUNTYCLERK"] = "COUNTY_CLERK";
    CourtDomainCourtTypeEnum["DISTRICT"] = "DISTRICT";
    CourtDomainCourtTypeEnum["JUVENILE"] = "JUVENILE";
    CourtDomainCourtTypeEnum["MUNICIPAL"] = "MUNICIPAL";
    CourtDomainCourtTypeEnum["PROBATION"] = "PROBATION";
    CourtDomainCourtTypeEnum["SUPERIOR"] = "SUPERIOR";
    CourtDomainCourtTypeEnum["VIOLATIONSBUREAU"] = "VIOLATIONS_BUREAU";
})(CourtDomainCourtTypeEnum = exports.CourtDomainCourtTypeEnum || (exports.CourtDomainCourtTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CourtDomainReqCourtTypeEnum;
(function (CourtDomainReqCourtTypeEnum) {
    CourtDomainReqCourtTypeEnum["CIRCUIT"] = "CIRCUIT";
    CourtDomainReqCourtTypeEnum["COUNTYCLERK"] = "COUNTY_CLERK";
    CourtDomainReqCourtTypeEnum["DISTRICT"] = "DISTRICT";
    CourtDomainReqCourtTypeEnum["JUVENILE"] = "JUVENILE";
    CourtDomainReqCourtTypeEnum["MUNICIPAL"] = "MUNICIPAL";
    CourtDomainReqCourtTypeEnum["PROBATION"] = "PROBATION";
    CourtDomainReqCourtTypeEnum["SUPERIOR"] = "SUPERIOR";
    CourtDomainReqCourtTypeEnum["VIOLATIONSBUREAU"] = "VIOLATIONS_BUREAU";
})(CourtDomainReqCourtTypeEnum = exports.CourtDomainReqCourtTypeEnum || (exports.CourtDomainReqCourtTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CourtDomainResCourtTypeEnum;
(function (CourtDomainResCourtTypeEnum) {
    CourtDomainResCourtTypeEnum["CIRCUIT"] = "CIRCUIT";
    CourtDomainResCourtTypeEnum["COUNTYCLERK"] = "COUNTY_CLERK";
    CourtDomainResCourtTypeEnum["DISTRICT"] = "DISTRICT";
    CourtDomainResCourtTypeEnum["JUVENILE"] = "JUVENILE";
    CourtDomainResCourtTypeEnum["MUNICIPAL"] = "MUNICIPAL";
    CourtDomainResCourtTypeEnum["PROBATION"] = "PROBATION";
    CourtDomainResCourtTypeEnum["SUPERIOR"] = "SUPERIOR";
    CourtDomainResCourtTypeEnum["VIOLATIONSBUREAU"] = "VIOLATIONS_BUREAU";
})(CourtDomainResCourtTypeEnum = exports.CourtDomainResCourtTypeEnum || (exports.CourtDomainResCourtTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CourtResponseModelCourtTypeEnum;
(function (CourtResponseModelCourtTypeEnum) {
    CourtResponseModelCourtTypeEnum["CIRCUIT"] = "CIRCUIT";
    CourtResponseModelCourtTypeEnum["COUNTYCLERK"] = "COUNTY_CLERK";
    CourtResponseModelCourtTypeEnum["DISTRICT"] = "DISTRICT";
    CourtResponseModelCourtTypeEnum["JUVENILE"] = "JUVENILE";
    CourtResponseModelCourtTypeEnum["MUNICIPAL"] = "MUNICIPAL";
    CourtResponseModelCourtTypeEnum["PROBATION"] = "PROBATION";
    CourtResponseModelCourtTypeEnum["SUPERIOR"] = "SUPERIOR";
    CourtResponseModelCourtTypeEnum["VIOLATIONSBUREAU"] = "VIOLATIONS_BUREAU";
})(CourtResponseModelCourtTypeEnum = exports.CourtResponseModelCourtTypeEnum || (exports.CourtResponseModelCourtTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateBillingSubscriptionItemModelBillingSchemeEnum;
(function (CreateBillingSubscriptionItemModelBillingSchemeEnum) {
    CreateBillingSubscriptionItemModelBillingSchemeEnum["PERUNIT"] = "PER_UNIT";
    CreateBillingSubscriptionItemModelBillingSchemeEnum["TIERED"] = "TIERED";
    CreateBillingSubscriptionItemModelBillingSchemeEnum["UNKNOWN"] = "UNKNOWN";
})(CreateBillingSubscriptionItemModelBillingSchemeEnum = exports.CreateBillingSubscriptionItemModelBillingSchemeEnum || (exports.CreateBillingSubscriptionItemModelBillingSchemeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateBillingSubscriptionItemModelIntervalEnum;
(function (CreateBillingSubscriptionItemModelIntervalEnum) {
    CreateBillingSubscriptionItemModelIntervalEnum["DAILY"] = "DAILY";
    CreateBillingSubscriptionItemModelIntervalEnum["MONTHLY"] = "MONTHLY";
    CreateBillingSubscriptionItemModelIntervalEnum["QUARTERLY"] = "QUARTERLY";
    CreateBillingSubscriptionItemModelIntervalEnum["WEEKLY"] = "WEEKLY";
    CreateBillingSubscriptionItemModelIntervalEnum["YEARLY"] = "YEARLY";
})(CreateBillingSubscriptionItemModelIntervalEnum = exports.CreateBillingSubscriptionItemModelIntervalEnum || (exports.CreateBillingSubscriptionItemModelIntervalEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateBillingSubscriptionItemModelTiersModeEnum;
(function (CreateBillingSubscriptionItemModelTiersModeEnum) {
    CreateBillingSubscriptionItemModelTiersModeEnum["GRADUATED"] = "GRADUATED";
    CreateBillingSubscriptionItemModelTiersModeEnum["VOLUME"] = "VOLUME";
})(CreateBillingSubscriptionItemModelTiersModeEnum = exports.CreateBillingSubscriptionItemModelTiersModeEnum || (exports.CreateBillingSubscriptionItemModelTiersModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateBillingSubscriptionItemModelUsageTypeEnum;
(function (CreateBillingSubscriptionItemModelUsageTypeEnum) {
    CreateBillingSubscriptionItemModelUsageTypeEnum["LICENSED"] = "LICENSED";
    CreateBillingSubscriptionItemModelUsageTypeEnum["METERED"] = "METERED";
})(CreateBillingSubscriptionItemModelUsageTypeEnum = exports.CreateBillingSubscriptionItemModelUsageTypeEnum || (exports.CreateBillingSubscriptionItemModelUsageTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateBillingSubscriptionResponseStatusEnum;
(function (CreateBillingSubscriptionResponseStatusEnum) {
    CreateBillingSubscriptionResponseStatusEnum["ACTIVE"] = "ACTIVE";
    CreateBillingSubscriptionResponseStatusEnum["CANCELED"] = "CANCELED";
    CreateBillingSubscriptionResponseStatusEnum["INCOMPLETE"] = "INCOMPLETE";
    CreateBillingSubscriptionResponseStatusEnum["INCOMPLETEEXPIRED"] = "INCOMPLETE_EXPIRED";
    CreateBillingSubscriptionResponseStatusEnum["INTRIALPERIOD"] = "IN_TRIAL_PERIOD";
    CreateBillingSubscriptionResponseStatusEnum["PASTDUE"] = "PAST_DUE";
    CreateBillingSubscriptionResponseStatusEnum["UNKNOWN"] = "UNKNOWN";
    CreateBillingSubscriptionResponseStatusEnum["UNPAID"] = "UNPAID";
})(CreateBillingSubscriptionResponseStatusEnum = exports.CreateBillingSubscriptionResponseStatusEnum || (exports.CreateBillingSubscriptionResponseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateCitationRequestCitationStateEnum;
(function (CreateCitationRequestCitationStateEnum) {
    CreateCitationRequestCitationStateEnum["AK"] = "AK";
    CreateCitationRequestCitationStateEnum["AL"] = "AL";
    CreateCitationRequestCitationStateEnum["AR"] = "AR";
    CreateCitationRequestCitationStateEnum["AZ"] = "AZ";
    CreateCitationRequestCitationStateEnum["CA"] = "CA";
    CreateCitationRequestCitationStateEnum["CO"] = "CO";
    CreateCitationRequestCitationStateEnum["CT"] = "CT";
    CreateCitationRequestCitationStateEnum["DC"] = "DC";
    CreateCitationRequestCitationStateEnum["DE"] = "DE";
    CreateCitationRequestCitationStateEnum["FL"] = "FL";
    CreateCitationRequestCitationStateEnum["GA"] = "GA";
    CreateCitationRequestCitationStateEnum["HI"] = "HI";
    CreateCitationRequestCitationStateEnum["IA"] = "IA";
    CreateCitationRequestCitationStateEnum["ID"] = "ID";
    CreateCitationRequestCitationStateEnum["IL"] = "IL";
    CreateCitationRequestCitationStateEnum["IN"] = "IN";
    CreateCitationRequestCitationStateEnum["KS"] = "KS";
    CreateCitationRequestCitationStateEnum["KY"] = "KY";
    CreateCitationRequestCitationStateEnum["LA"] = "LA";
    CreateCitationRequestCitationStateEnum["MA"] = "MA";
    CreateCitationRequestCitationStateEnum["MD"] = "MD";
    CreateCitationRequestCitationStateEnum["ME"] = "ME";
    CreateCitationRequestCitationStateEnum["MI"] = "MI";
    CreateCitationRequestCitationStateEnum["MN"] = "MN";
    CreateCitationRequestCitationStateEnum["MO"] = "MO";
    CreateCitationRequestCitationStateEnum["MS"] = "MS";
    CreateCitationRequestCitationStateEnum["MT"] = "MT";
    CreateCitationRequestCitationStateEnum["NC"] = "NC";
    CreateCitationRequestCitationStateEnum["ND"] = "ND";
    CreateCitationRequestCitationStateEnum["NE"] = "NE";
    CreateCitationRequestCitationStateEnum["NH"] = "NH";
    CreateCitationRequestCitationStateEnum["NJ"] = "NJ";
    CreateCitationRequestCitationStateEnum["NM"] = "NM";
    CreateCitationRequestCitationStateEnum["NV"] = "NV";
    CreateCitationRequestCitationStateEnum["NY"] = "NY";
    CreateCitationRequestCitationStateEnum["OH"] = "OH";
    CreateCitationRequestCitationStateEnum["OK"] = "OK";
    CreateCitationRequestCitationStateEnum["OR"] = "OR";
    CreateCitationRequestCitationStateEnum["PA"] = "PA";
    CreateCitationRequestCitationStateEnum["RI"] = "RI";
    CreateCitationRequestCitationStateEnum["SC"] = "SC";
    CreateCitationRequestCitationStateEnum["SD"] = "SD";
    CreateCitationRequestCitationStateEnum["TN"] = "TN";
    CreateCitationRequestCitationStateEnum["TX"] = "TX";
    CreateCitationRequestCitationStateEnum["UT"] = "UT";
    CreateCitationRequestCitationStateEnum["VA"] = "VA";
    CreateCitationRequestCitationStateEnum["VT"] = "VT";
    CreateCitationRequestCitationStateEnum["WA"] = "WA";
    CreateCitationRequestCitationStateEnum["WI"] = "WI";
    CreateCitationRequestCitationStateEnum["WV"] = "WV";
    CreateCitationRequestCitationStateEnum["WY"] = "WY";
})(CreateCitationRequestCitationStateEnum = exports.CreateCitationRequestCitationStateEnum || (exports.CreateCitationRequestCitationStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateCitationRequestClientTypeEnum;
(function (CreateCitationRequestClientTypeEnum) {
    CreateCitationRequestClientTypeEnum["ANDROID"] = "ANDROID";
    CreateCitationRequestClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    CreateCitationRequestClientTypeEnum["DMVGO"] = "DMV_GO";
    CreateCitationRequestClientTypeEnum["DMVORG"] = "DMV_ORG";
    CreateCitationRequestClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    CreateCitationRequestClientTypeEnum["IOS"] = "IOS";
    CreateCitationRequestClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    CreateCitationRequestClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    CreateCitationRequestClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    CreateCitationRequestClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    CreateCitationRequestClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    CreateCitationRequestClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    CreateCitationRequestClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    CreateCitationRequestClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    CreateCitationRequestClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    CreateCitationRequestClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    CreateCitationRequestClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    CreateCitationRequestClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    CreateCitationRequestClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(CreateCitationRequestClientTypeEnum = exports.CreateCitationRequestClientTypeEnum || (exports.CreateCitationRequestClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateLawfirmModelLawfirmPaymentModelEnum;
(function (CreateLawfirmModelLawfirmPaymentModelEnum) {
    CreateLawfirmModelLawfirmPaymentModelEnum["DESTINATIONACCOUNT"] = "DESTINATION_ACCOUNT";
    CreateLawfirmModelLawfirmPaymentModelEnum["SEPARATECHARGE"] = "SEPARATE_CHARGE";
    CreateLawfirmModelLawfirmPaymentModelEnum["TRANSFERDEDUCTION"] = "TRANSFER_DEDUCTION";
})(CreateLawfirmModelLawfirmPaymentModelEnum = exports.CreateLawfirmModelLawfirmPaymentModelEnum || (exports.CreateLawfirmModelLawfirmPaymentModelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateLawfirmModelLawfirmStateEnum;
(function (CreateLawfirmModelLawfirmStateEnum) {
    CreateLawfirmModelLawfirmStateEnum["ACCOUNTCLOSED"] = "ACCOUNT_CLOSED";
    CreateLawfirmModelLawfirmStateEnum["DUPLICATE"] = "DUPLICATE";
    CreateLawfirmModelLawfirmStateEnum["ESTABLISHED"] = "ESTABLISHED";
    CreateLawfirmModelLawfirmStateEnum["FUTURELEAD"] = "FUTURE_LEAD";
    CreateLawfirmModelLawfirmStateEnum["INTRIAL"] = "IN_TRIAL";
    CreateLawfirmModelLawfirmStateEnum["LAWFIRMINTERESTED"] = "LAWFIRM_INTERESTED";
    CreateLawfirmModelLawfirmStateEnum["LAWFIRMLEAD"] = "LAWFIRM_LEAD";
    CreateLawfirmModelLawfirmStateEnum["LAWFIRMNOTINTERESTED"] = "LAWFIRM_NOT_INTERESTED";
    CreateLawfirmModelLawfirmStateEnum["NOTINTERESTEDFEESPLITTINGETHICS"] = "NOT_INTERESTED_FEE_SPLITTING_ETHICS";
    CreateLawfirmModelLawfirmStateEnum["NOTINTERESTEDREFUNDETHICS"] = "NOT_INTERESTED_REFUND_ETHICS";
    CreateLawfirmModelLawfirmStateEnum["ONBOARDING"] = "ONBOARDING";
    CreateLawfirmModelLawfirmStateEnum["TEMPORARILYTURNEDOFF"] = "TEMPORARILY_TURNED_OFF";
    CreateLawfirmModelLawfirmStateEnum["TERMINATEDFRAUD"] = "TERMINATED_FRAUD";
    CreateLawfirmModelLawfirmStateEnum["TERMINATEDPOORSERVICE"] = "TERMINATED_POOR_SERVICE";
    CreateLawfirmModelLawfirmStateEnum["TERMINATEDPOORSUCCESS"] = "TERMINATED_POOR_SUCCESS";
    CreateLawfirmModelLawfirmStateEnum["UNDERREVIEW"] = "UNDER_REVIEW";
})(CreateLawfirmModelLawfirmStateEnum = exports.CreateLawfirmModelLawfirmStateEnum || (exports.CreateLawfirmModelLawfirmStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateNoteInputNoteTypeEnum;
(function (CreateNoteInputNoteTypeEnum) {
    CreateNoteInputNoteTypeEnum["PHONELEAD"] = "PHONE_LEAD";
})(CreateNoteInputNoteTypeEnum = exports.CreateNoteInputNoteTypeEnum || (exports.CreateNoteInputNoteTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateReferralCodeRequestRefereeCreditTypeEnum;
(function (CreateReferralCodeRequestRefereeCreditTypeEnum) {
    CreateReferralCodeRequestRefereeCreditTypeEnum["CENTSVALUE"] = "CENTS_VALUE";
    CreateReferralCodeRequestRefereeCreditTypeEnum["NOCREDIT"] = "NO_CREDIT";
    CreateReferralCodeRequestRefereeCreditTypeEnum["PERCENTAGEDISCOUNT"] = "PERCENTAGE_DISCOUNT";
})(CreateReferralCodeRequestRefereeCreditTypeEnum = exports.CreateReferralCodeRequestRefereeCreditTypeEnum || (exports.CreateReferralCodeRequestRefereeCreditTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateReferralCodeRequestReferrerCreditTypeEnum;
(function (CreateReferralCodeRequestReferrerCreditTypeEnum) {
    CreateReferralCodeRequestReferrerCreditTypeEnum["CENTSVALUE"] = "CENTS_VALUE";
    CreateReferralCodeRequestReferrerCreditTypeEnum["NOCREDIT"] = "NO_CREDIT";
    CreateReferralCodeRequestReferrerCreditTypeEnum["PERCENTAGEDISCOUNT"] = "PERCENTAGE_DISCOUNT";
})(CreateReferralCodeRequestReferrerCreditTypeEnum = exports.CreateReferralCodeRequestReferrerCreditTypeEnum || (exports.CreateReferralCodeRequestReferrerCreditTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CreateStripeConnectAccountRequestAccountTypeEnum;
(function (CreateStripeConnectAccountRequestAccountTypeEnum) {
    CreateStripeConnectAccountRequestAccountTypeEnum["EXPRESS"] = "EXPRESS";
    CreateStripeConnectAccountRequestAccountTypeEnum["STANDARD"] = "STANDARD";
})(CreateStripeConnectAccountRequestAccountTypeEnum = exports.CreateStripeConnectAccountRequestAccountTypeEnum || (exports.CreateStripeConnectAccountRequestAccountTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CustomerLeadChannelEnum;
(function (CustomerLeadChannelEnum) {
    CustomerLeadChannelEnum["DMVCOM"] = "DMV_COM";
    CustomerLeadChannelEnum["DMVORG"] = "DMV_ORG";
    CustomerLeadChannelEnum["EDUCATEDDRIVER"] = "EDUCATED_DRIVER";
    CustomerLeadChannelEnum["NOLO"] = "NOLO";
    CustomerLeadChannelEnum["PHOTOENFORCED"] = "PHOTO_ENFORCED";
    CustomerLeadChannelEnum["RIDESHAREGUY"] = "RIDE_SHARE_GUY";
    CustomerLeadChannelEnum["RIDESHARINGDRIVER"] = "RIDE_SHARING_DRIVER";
    CustomerLeadChannelEnum["UNKNOWN"] = "UNKNOWN";
    CustomerLeadChannelEnum["WTL"] = "WTL";
})(CustomerLeadChannelEnum = exports.CustomerLeadChannelEnum || (exports.CustomerLeadChannelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CustomerLeadStateEnum;
(function (CustomerLeadStateEnum) {
    CustomerLeadStateEnum["AK"] = "AK";
    CustomerLeadStateEnum["AL"] = "AL";
    CustomerLeadStateEnum["AR"] = "AR";
    CustomerLeadStateEnum["AZ"] = "AZ";
    CustomerLeadStateEnum["CA"] = "CA";
    CustomerLeadStateEnum["CO"] = "CO";
    CustomerLeadStateEnum["CT"] = "CT";
    CustomerLeadStateEnum["DC"] = "DC";
    CustomerLeadStateEnum["DE"] = "DE";
    CustomerLeadStateEnum["FL"] = "FL";
    CustomerLeadStateEnum["GA"] = "GA";
    CustomerLeadStateEnum["HI"] = "HI";
    CustomerLeadStateEnum["IA"] = "IA";
    CustomerLeadStateEnum["ID"] = "ID";
    CustomerLeadStateEnum["IL"] = "IL";
    CustomerLeadStateEnum["IN"] = "IN";
    CustomerLeadStateEnum["KS"] = "KS";
    CustomerLeadStateEnum["KY"] = "KY";
    CustomerLeadStateEnum["LA"] = "LA";
    CustomerLeadStateEnum["MA"] = "MA";
    CustomerLeadStateEnum["MD"] = "MD";
    CustomerLeadStateEnum["ME"] = "ME";
    CustomerLeadStateEnum["MI"] = "MI";
    CustomerLeadStateEnum["MN"] = "MN";
    CustomerLeadStateEnum["MO"] = "MO";
    CustomerLeadStateEnum["MS"] = "MS";
    CustomerLeadStateEnum["MT"] = "MT";
    CustomerLeadStateEnum["NC"] = "NC";
    CustomerLeadStateEnum["ND"] = "ND";
    CustomerLeadStateEnum["NE"] = "NE";
    CustomerLeadStateEnum["NH"] = "NH";
    CustomerLeadStateEnum["NJ"] = "NJ";
    CustomerLeadStateEnum["NM"] = "NM";
    CustomerLeadStateEnum["NV"] = "NV";
    CustomerLeadStateEnum["NY"] = "NY";
    CustomerLeadStateEnum["OH"] = "OH";
    CustomerLeadStateEnum["OK"] = "OK";
    CustomerLeadStateEnum["OR"] = "OR";
    CustomerLeadStateEnum["PA"] = "PA";
    CustomerLeadStateEnum["RI"] = "RI";
    CustomerLeadStateEnum["SC"] = "SC";
    CustomerLeadStateEnum["SD"] = "SD";
    CustomerLeadStateEnum["TN"] = "TN";
    CustomerLeadStateEnum["TX"] = "TX";
    CustomerLeadStateEnum["UT"] = "UT";
    CustomerLeadStateEnum["VA"] = "VA";
    CustomerLeadStateEnum["VT"] = "VT";
    CustomerLeadStateEnum["WA"] = "WA";
    CustomerLeadStateEnum["WI"] = "WI";
    CustomerLeadStateEnum["WV"] = "WV";
    CustomerLeadStateEnum["WY"] = "WY";
})(CustomerLeadStateEnum = exports.CustomerLeadStateEnum || (exports.CustomerLeadStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CustomerReviewLoggedInUserVoteEnum;
(function (CustomerReviewLoggedInUserVoteEnum) {
    CustomerReviewLoggedInUserVoteEnum["HELPFUL"] = "HELPFUL";
    CustomerReviewLoggedInUserVoteEnum["UNHELPFUL"] = "UNHELPFUL";
})(CustomerReviewLoggedInUserVoteEnum = exports.CustomerReviewLoggedInUserVoteEnum || (exports.CustomerReviewLoggedInUserVoteEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CustomerReviewNameSettingEnum;
(function (CustomerReviewNameSettingEnum) {
    CustomerReviewNameSettingEnum["ANONYMOUS"] = "ANONYMOUS";
    CustomerReviewNameSettingEnum["FIRSTNAMELASTINITIAL"] = "FIRST_NAME_LAST_INITIAL";
    CustomerReviewNameSettingEnum["FULLNAME"] = "FULL_NAME";
})(CustomerReviewNameSettingEnum = exports.CustomerReviewNameSettingEnum || (exports.CustomerReviewNameSettingEnum = {}));
/**
    * @export
    * @enum {string}
    */
var CustomerReviewSourceEnum;
(function (CustomerReviewSourceEnum) {
    CustomerReviewSourceEnum["ANDROID"] = "ANDROID";
    CustomerReviewSourceEnum["APPLE"] = "APPLE";
    CustomerReviewSourceEnum["FACEBOOK"] = "FACEBOOK";
    CustomerReviewSourceEnum["GOOGLEBUSINESS"] = "GOOGLE_BUSINESS";
    CustomerReviewSourceEnum["OTR"] = "OTR";
    CustomerReviewSourceEnum["REVIEWSIO"] = "REVIEWS_IO";
})(CustomerReviewSourceEnum = exports.CustomerReviewSourceEnum || (exports.CustomerReviewSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DashboardCitationModelCdlStatusEnum;
(function (DashboardCitationModelCdlStatusEnum) {
    DashboardCitationModelCdlStatusEnum["CDLINCOMMERCIALVEHICLE"] = "CDL_IN_COMMERCIAL_VEHICLE";
    DashboardCitationModelCdlStatusEnum["CDLINPERSONALVEHICLE"] = "CDL_IN_PERSONAL_VEHICLE";
    DashboardCitationModelCdlStatusEnum["NOCDL"] = "NO_CDL";
})(DashboardCitationModelCdlStatusEnum = exports.DashboardCitationModelCdlStatusEnum || (exports.DashboardCitationModelCdlStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DashboardStatusModelCaseStatusEnum;
(function (DashboardStatusModelCaseStatusEnum) {
    DashboardStatusModelCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    DashboardStatusModelCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    DashboardStatusModelCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    DashboardStatusModelCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    DashboardStatusModelCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    DashboardStatusModelCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    DashboardStatusModelCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    DashboardStatusModelCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    DashboardStatusModelCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    DashboardStatusModelCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    DashboardStatusModelCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    DashboardStatusModelCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    DashboardStatusModelCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    DashboardStatusModelCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    DashboardStatusModelCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    DashboardStatusModelCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    DashboardStatusModelCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    DashboardStatusModelCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    DashboardStatusModelCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    DashboardStatusModelCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    DashboardStatusModelCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    DashboardStatusModelCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    DashboardStatusModelCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    DashboardStatusModelCaseStatusEnum["DEFERRED"] = "DEFERRED";
    DashboardStatusModelCaseStatusEnum["DISMISSED"] = "DISMISSED";
    DashboardStatusModelCaseStatusEnum["DIVERSION"] = "DIVERSION";
    DashboardStatusModelCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    DashboardStatusModelCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    DashboardStatusModelCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    DashboardStatusModelCaseStatusEnum["LOST"] = "LOST";
    DashboardStatusModelCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    DashboardStatusModelCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    DashboardStatusModelCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    DashboardStatusModelCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    DashboardStatusModelCaseStatusEnum["STALE"] = "STALE";
    DashboardStatusModelCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    DashboardStatusModelCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(DashboardStatusModelCaseStatusEnum = exports.DashboardStatusModelCaseStatusEnum || (exports.DashboardStatusModelCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DashboardStatusModelStatusCategoryEnum;
(function (DashboardStatusModelStatusCategoryEnum) {
    DashboardStatusModelStatusCategoryEnum["ACTIVE"] = "ACTIVE";
    DashboardStatusModelStatusCategoryEnum["CANCELLED"] = "CANCELLED";
    DashboardStatusModelStatusCategoryEnum["RESOLVED"] = "RESOLVED";
    DashboardStatusModelStatusCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(DashboardStatusModelStatusCategoryEnum = exports.DashboardStatusModelStatusCategoryEnum || (exports.DashboardStatusModelStatusCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DefaultClassModelClassificationEnum;
(function (DefaultClassModelClassificationEnum) {
    DefaultClassModelClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    DefaultClassModelClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    DefaultClassModelClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    DefaultClassModelClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    DefaultClassModelClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    DefaultClassModelClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    DefaultClassModelClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    DefaultClassModelClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    DefaultClassModelClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    DefaultClassModelClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    DefaultClassModelClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    DefaultClassModelClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    DefaultClassModelClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    DefaultClassModelClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    DefaultClassModelClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    DefaultClassModelClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    DefaultClassModelClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    DefaultClassModelClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    DefaultClassModelClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    DefaultClassModelClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    DefaultClassModelClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    DefaultClassModelClassificationEnum["FELONY"] = "FELONY";
    DefaultClassModelClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    DefaultClassModelClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    DefaultClassModelClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    DefaultClassModelClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    DefaultClassModelClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    DefaultClassModelClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    DefaultClassModelClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    DefaultClassModelClassificationEnum["INFRACTION"] = "INFRACTION";
    DefaultClassModelClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    DefaultClassModelClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    DefaultClassModelClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    DefaultClassModelClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    DefaultClassModelClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    DefaultClassModelClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    DefaultClassModelClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    DefaultClassModelClassificationEnum["NONMOVING"] = "NON_MOVING";
    DefaultClassModelClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    DefaultClassModelClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    DefaultClassModelClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    DefaultClassModelClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    DefaultClassModelClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    DefaultClassModelClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    DefaultClassModelClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(DefaultClassModelClassificationEnum = exports.DefaultClassModelClassificationEnum || (exports.DefaultClassModelClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeleteNotificationByPagesRequestPageTypesEnum;
(function (DeleteNotificationByPagesRequestPageTypesEnum) {
    DeleteNotificationByPagesRequestPageTypesEnum["CASEACTION"] = "CASE_ACTION";
    DeleteNotificationByPagesRequestPageTypesEnum["CASEMESSAGES"] = "CASE_MESSAGES";
    DeleteNotificationByPagesRequestPageTypesEnum["CASESTATUS"] = "CASE_STATUS";
    DeleteNotificationByPagesRequestPageTypesEnum["COURTDATESCHEDULED"] = "COURT_DATE_SCHEDULED";
    DeleteNotificationByPagesRequestPageTypesEnum["NEWTICKET"] = "NEW_TICKET";
    DeleteNotificationByPagesRequestPageTypesEnum["PROFILE"] = "PROFILE";
})(DeleteNotificationByPagesRequestPageTypesEnum = exports.DeleteNotificationByPagesRequestPageTypesEnum || (exports.DeleteNotificationByPagesRequestPageTypesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DeleteNotificationEventRequestPageTypeEnum;
(function (DeleteNotificationEventRequestPageTypeEnum) {
    DeleteNotificationEventRequestPageTypeEnum["CASEACTION"] = "CASE_ACTION";
    DeleteNotificationEventRequestPageTypeEnum["CASEMESSAGES"] = "CASE_MESSAGES";
    DeleteNotificationEventRequestPageTypeEnum["CASESTATUS"] = "CASE_STATUS";
    DeleteNotificationEventRequestPageTypeEnum["COURTDATESCHEDULED"] = "COURT_DATE_SCHEDULED";
    DeleteNotificationEventRequestPageTypeEnum["NEWTICKET"] = "NEW_TICKET";
    DeleteNotificationEventRequestPageTypeEnum["PROFILE"] = "PROFILE";
})(DeleteNotificationEventRequestPageTypeEnum = exports.DeleteNotificationEventRequestPageTypeEnum || (exports.DeleteNotificationEventRequestPageTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DirectMailContactMailTypeEnum;
(function (DirectMailContactMailTypeEnum) {
    DirectMailContactMailTypeEnum["CHECK"] = "CHECK";
    DirectMailContactMailTypeEnum["LETTER"] = "LETTER";
    DirectMailContactMailTypeEnum["POSTCARD"] = "POST_CARD";
})(DirectMailContactMailTypeEnum = exports.DirectMailContactMailTypeEnum || (exports.DirectMailContactMailTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DirectMailContactTrackingStatusEnum;
(function (DirectMailContactTrackingStatusEnum) {
    DirectMailContactTrackingStatusEnum["CREATED"] = "CREATED";
    DirectMailContactTrackingStatusEnum["INLOCALAREA"] = "IN_LOCAL_AREA";
    DirectMailContactTrackingStatusEnum["INTRANSIT"] = "IN_TRANSIT";
    DirectMailContactTrackingStatusEnum["PROCESSEDFORDELIVERY"] = "PROCESSED_FOR_DELIVERY";
    DirectMailContactTrackingStatusEnum["RETURNEDTOSENDER"] = "RETURNED_TO_SENDER";
    DirectMailContactTrackingStatusEnum["REROUTED"] = "RE_ROUTED";
})(DirectMailContactTrackingStatusEnum = exports.DirectMailContactTrackingStatusEnum || (exports.DirectMailContactTrackingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DirectMailSendRequestReconcileTypeEnum;
(function (DirectMailSendRequestReconcileTypeEnum) {
    DirectMailSendRequestReconcileTypeEnum["OTRCITATIONID"] = "OTR_CITATION_ID";
    DirectMailSendRequestReconcileTypeEnum["OTRLAWFIRMID"] = "OTR_LAWFIRM_ID";
    DirectMailSendRequestReconcileTypeEnum["TICKETREFERENCEID"] = "TICKET_REFERENCE_ID";
})(DirectMailSendRequestReconcileTypeEnum = exports.DirectMailSendRequestReconcileTypeEnum || (exports.DirectMailSendRequestReconcileTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DirectMailTemplateMailTypeEnum;
(function (DirectMailTemplateMailTypeEnum) {
    DirectMailTemplateMailTypeEnum["CHECK"] = "CHECK";
    DirectMailTemplateMailTypeEnum["LETTER"] = "LETTER";
    DirectMailTemplateMailTypeEnum["POSTCARD"] = "POST_CARD";
})(DirectMailTemplateMailTypeEnum = exports.DirectMailTemplateMailTypeEnum || (exports.DirectMailTemplateMailTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DirectMailTemplateToAddMailTypeEnum;
(function (DirectMailTemplateToAddMailTypeEnum) {
    DirectMailTemplateToAddMailTypeEnum["CHECK"] = "CHECK";
    DirectMailTemplateToAddMailTypeEnum["LETTER"] = "LETTER";
    DirectMailTemplateToAddMailTypeEnum["POSTCARD"] = "POST_CARD";
})(DirectMailTemplateToAddMailTypeEnum = exports.DirectMailTemplateToAddMailTypeEnum || (exports.DirectMailTemplateToAddMailTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DismissPhoneLeadRequestEntityTypeEnum;
(function (DismissPhoneLeadRequestEntityTypeEnum) {
    DismissPhoneLeadRequestEntityTypeEnum["CASE"] = "CASE";
    DismissPhoneLeadRequestEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    DismissPhoneLeadRequestEntityTypeEnum["CITATION"] = "CITATION";
    DismissPhoneLeadRequestEntityTypeEnum["COURT"] = "COURT";
    DismissPhoneLeadRequestEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    DismissPhoneLeadRequestEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    DismissPhoneLeadRequestEntityTypeEnum["LAWYER"] = "LAWYER";
    DismissPhoneLeadRequestEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    DismissPhoneLeadRequestEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    DismissPhoneLeadRequestEntityTypeEnum["USER"] = "USER";
})(DismissPhoneLeadRequestEntityTypeEnum = exports.DismissPhoneLeadRequestEntityTypeEnum || (exports.DismissPhoneLeadRequestEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DripRemoveRequestDripActionEnum;
(function (DripRemoveRequestDripActionEnum) {
    DripRemoveRequestDripActionEnum["DELETE"] = "DELETE";
    DripRemoveRequestDripActionEnum["UNSUBSCRIBE"] = "UNSUBSCRIBE";
})(DripRemoveRequestDripActionEnum = exports.DripRemoveRequestDripActionEnum || (exports.DripRemoveRequestDripActionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var EnableViolationModelViolationClassEnum;
(function (EnableViolationModelViolationClassEnum) {
    EnableViolationModelViolationClassEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    EnableViolationModelViolationClassEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    EnableViolationModelViolationClassEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    EnableViolationModelViolationClassEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    EnableViolationModelViolationClassEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    EnableViolationModelViolationClassEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    EnableViolationModelViolationClassEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    EnableViolationModelViolationClassEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    EnableViolationModelViolationClassEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    EnableViolationModelViolationClassEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    EnableViolationModelViolationClassEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    EnableViolationModelViolationClassEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    EnableViolationModelViolationClassEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    EnableViolationModelViolationClassEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    EnableViolationModelViolationClassEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    EnableViolationModelViolationClassEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    EnableViolationModelViolationClassEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    EnableViolationModelViolationClassEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    EnableViolationModelViolationClassEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    EnableViolationModelViolationClassEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    EnableViolationModelViolationClassEnum["FELONY"] = "FELONY";
    EnableViolationModelViolationClassEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    EnableViolationModelViolationClassEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    EnableViolationModelViolationClassEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    EnableViolationModelViolationClassEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    EnableViolationModelViolationClassEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    EnableViolationModelViolationClassEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["INFRACTION"] = "INFRACTION";
    EnableViolationModelViolationClassEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["MISDEMEANOR"] = "MISDEMEANOR";
    EnableViolationModelViolationClassEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    EnableViolationModelViolationClassEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    EnableViolationModelViolationClassEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    EnableViolationModelViolationClassEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    EnableViolationModelViolationClassEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    EnableViolationModelViolationClassEnum["NONMOVING"] = "NON_MOVING";
    EnableViolationModelViolationClassEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    EnableViolationModelViolationClassEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    EnableViolationModelViolationClassEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    EnableViolationModelViolationClassEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    EnableViolationModelViolationClassEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    EnableViolationModelViolationClassEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    EnableViolationModelViolationClassEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(EnableViolationModelViolationClassEnum = exports.EnableViolationModelViolationClassEnum || (exports.EnableViolationModelViolationClassEnum = {}));
/**
    * @export
    * @enum {string}
    */
var EstimateInsuranceSavingsRequestStateEnum;
(function (EstimateInsuranceSavingsRequestStateEnum) {
    EstimateInsuranceSavingsRequestStateEnum["AK"] = "AK";
    EstimateInsuranceSavingsRequestStateEnum["AL"] = "AL";
    EstimateInsuranceSavingsRequestStateEnum["AR"] = "AR";
    EstimateInsuranceSavingsRequestStateEnum["AZ"] = "AZ";
    EstimateInsuranceSavingsRequestStateEnum["CA"] = "CA";
    EstimateInsuranceSavingsRequestStateEnum["CO"] = "CO";
    EstimateInsuranceSavingsRequestStateEnum["CT"] = "CT";
    EstimateInsuranceSavingsRequestStateEnum["DC"] = "DC";
    EstimateInsuranceSavingsRequestStateEnum["DE"] = "DE";
    EstimateInsuranceSavingsRequestStateEnum["FL"] = "FL";
    EstimateInsuranceSavingsRequestStateEnum["GA"] = "GA";
    EstimateInsuranceSavingsRequestStateEnum["HI"] = "HI";
    EstimateInsuranceSavingsRequestStateEnum["IA"] = "IA";
    EstimateInsuranceSavingsRequestStateEnum["ID"] = "ID";
    EstimateInsuranceSavingsRequestStateEnum["IL"] = "IL";
    EstimateInsuranceSavingsRequestStateEnum["IN"] = "IN";
    EstimateInsuranceSavingsRequestStateEnum["KS"] = "KS";
    EstimateInsuranceSavingsRequestStateEnum["KY"] = "KY";
    EstimateInsuranceSavingsRequestStateEnum["LA"] = "LA";
    EstimateInsuranceSavingsRequestStateEnum["MA"] = "MA";
    EstimateInsuranceSavingsRequestStateEnum["MD"] = "MD";
    EstimateInsuranceSavingsRequestStateEnum["ME"] = "ME";
    EstimateInsuranceSavingsRequestStateEnum["MI"] = "MI";
    EstimateInsuranceSavingsRequestStateEnum["MN"] = "MN";
    EstimateInsuranceSavingsRequestStateEnum["MO"] = "MO";
    EstimateInsuranceSavingsRequestStateEnum["MS"] = "MS";
    EstimateInsuranceSavingsRequestStateEnum["MT"] = "MT";
    EstimateInsuranceSavingsRequestStateEnum["NC"] = "NC";
    EstimateInsuranceSavingsRequestStateEnum["ND"] = "ND";
    EstimateInsuranceSavingsRequestStateEnum["NE"] = "NE";
    EstimateInsuranceSavingsRequestStateEnum["NH"] = "NH";
    EstimateInsuranceSavingsRequestStateEnum["NJ"] = "NJ";
    EstimateInsuranceSavingsRequestStateEnum["NM"] = "NM";
    EstimateInsuranceSavingsRequestStateEnum["NV"] = "NV";
    EstimateInsuranceSavingsRequestStateEnum["NY"] = "NY";
    EstimateInsuranceSavingsRequestStateEnum["OH"] = "OH";
    EstimateInsuranceSavingsRequestStateEnum["OK"] = "OK";
    EstimateInsuranceSavingsRequestStateEnum["OR"] = "OR";
    EstimateInsuranceSavingsRequestStateEnum["PA"] = "PA";
    EstimateInsuranceSavingsRequestStateEnum["RI"] = "RI";
    EstimateInsuranceSavingsRequestStateEnum["SC"] = "SC";
    EstimateInsuranceSavingsRequestStateEnum["SD"] = "SD";
    EstimateInsuranceSavingsRequestStateEnum["TN"] = "TN";
    EstimateInsuranceSavingsRequestStateEnum["TX"] = "TX";
    EstimateInsuranceSavingsRequestStateEnum["UT"] = "UT";
    EstimateInsuranceSavingsRequestStateEnum["VA"] = "VA";
    EstimateInsuranceSavingsRequestStateEnum["VT"] = "VT";
    EstimateInsuranceSavingsRequestStateEnum["WA"] = "WA";
    EstimateInsuranceSavingsRequestStateEnum["WI"] = "WI";
    EstimateInsuranceSavingsRequestStateEnum["WV"] = "WV";
    EstimateInsuranceSavingsRequestStateEnum["WY"] = "WY";
})(EstimateInsuranceSavingsRequestStateEnum = exports.EstimateInsuranceSavingsRequestStateEnum || (exports.EstimateInsuranceSavingsRequestStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FinancialTransactionTaskStatusEnum;
(function (FinancialTransactionTaskStatusEnum) {
    FinancialTransactionTaskStatusEnum["CANCELLED"] = "CANCELLED";
    FinancialTransactionTaskStatusEnum["COMPLETE"] = "COMPLETE";
    FinancialTransactionTaskStatusEnum["ERROR"] = "ERROR";
    FinancialTransactionTaskStatusEnum["INPROGRESS"] = "IN_PROGRESS";
    FinancialTransactionTaskStatusEnum["NOOPERATION"] = "NO_OPERATION";
    FinancialTransactionTaskStatusEnum["QUEUED"] = "QUEUED";
})(FinancialTransactionTaskStatusEnum = exports.FinancialTransactionTaskStatusEnum || (exports.FinancialTransactionTaskStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FinancialTransactionTransactionMethodEnum;
(function (FinancialTransactionTransactionMethodEnum) {
    FinancialTransactionTransactionMethodEnum["CHECK"] = "CHECK";
    FinancialTransactionTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    FinancialTransactionTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    FinancialTransactionTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    FinancialTransactionTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    FinancialTransactionTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    FinancialTransactionTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    FinancialTransactionTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    FinancialTransactionTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    FinancialTransactionTransactionMethodEnum["VENMO"] = "VENMO";
    FinancialTransactionTransactionMethodEnum["ZELLE"] = "ZELLE";
})(FinancialTransactionTransactionMethodEnum = exports.FinancialTransactionTransactionMethodEnum || (exports.FinancialTransactionTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FinancialTransactionTransactionTypeEnum;
(function (FinancialTransactionTransactionTypeEnum) {
    FinancialTransactionTransactionTypeEnum["FEE"] = "FEE";
    FinancialTransactionTransactionTypeEnum["FEEREFUND"] = "FEE_REFUND";
    FinancialTransactionTransactionTypeEnum["TRANSFER"] = "TRANSFER";
    FinancialTransactionTransactionTypeEnum["TRANSFERREVERSAL"] = "TRANSFER_REVERSAL";
})(FinancialTransactionTransactionTypeEnum = exports.FinancialTransactionTransactionTypeEnum || (exports.FinancialTransactionTransactionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FindMatchingUserLoginProviderEnum;
(function (FindMatchingUserLoginProviderEnum) {
    FindMatchingUserLoginProviderEnum["APPLE"] = "APPLE";
    FindMatchingUserLoginProviderEnum["EMAIL"] = "EMAIL";
    FindMatchingUserLoginProviderEnum["FACEBOOK"] = "FACEBOOK";
    FindMatchingUserLoginProviderEnum["GOOGLE"] = "GOOGLE";
    FindMatchingUserLoginProviderEnum["PHONE"] = "PHONE";
    FindMatchingUserLoginProviderEnum["TWITTER"] = "TWITTER";
})(FindMatchingUserLoginProviderEnum = exports.FindMatchingUserLoginProviderEnum || (exports.FindMatchingUserLoginProviderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshDeskTicketPriorityTypeEnum;
(function (FreshDeskTicketPriorityTypeEnum) {
    FreshDeskTicketPriorityTypeEnum["HIGH"] = "HIGH";
    FreshDeskTicketPriorityTypeEnum["LOW"] = "LOW";
    FreshDeskTicketPriorityTypeEnum["MEDIUM"] = "MEDIUM";
    FreshDeskTicketPriorityTypeEnum["UNKNOWN"] = "UNKNOWN";
    FreshDeskTicketPriorityTypeEnum["URGENT"] = "URGENT";
})(FreshDeskTicketPriorityTypeEnum = exports.FreshDeskTicketPriorityTypeEnum || (exports.FreshDeskTicketPriorityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshDeskTicketStatusTypeEnum;
(function (FreshDeskTicketStatusTypeEnum) {
    FreshDeskTicketStatusTypeEnum["CLOSED"] = "CLOSED";
    FreshDeskTicketStatusTypeEnum["OPEN"] = "OPEN";
    FreshDeskTicketStatusTypeEnum["PENDING"] = "PENDING";
    FreshDeskTicketStatusTypeEnum["PENDINGONEWEEK"] = "PENDING_ONE_WEEK";
    FreshDeskTicketStatusTypeEnum["PENDINGTWODAYS"] = "PENDING_TWO_DAYS";
    FreshDeskTicketStatusTypeEnum["QUEUEDFORAUTOMATION"] = "QUEUED_FOR_AUTOMATION";
    FreshDeskTicketStatusTypeEnum["RESOLVED"] = "RESOLVED";
    FreshDeskTicketStatusTypeEnum["UNKNOWN"] = "UNKNOWN";
    FreshDeskTicketStatusTypeEnum["WAITINGONATTORNEY"] = "WAITING_ON_ATTORNEY";
    FreshDeskTicketStatusTypeEnum["WAITINGONCUSTOMER"] = "WAITING_ON_CUSTOMER";
    FreshDeskTicketStatusTypeEnum["WAITINGONOTR"] = "WAITING_ON_OTR";
    FreshDeskTicketStatusTypeEnum["WAITINGONTHIRDPARTY"] = "WAITING_ON_THIRD_PARTY";
})(FreshDeskTicketStatusTypeEnum = exports.FreshDeskTicketStatusTypeEnum || (exports.FreshDeskTicketStatusTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshDeskTicketReqPriorityTypeEnum;
(function (FreshDeskTicketReqPriorityTypeEnum) {
    FreshDeskTicketReqPriorityTypeEnum["HIGH"] = "HIGH";
    FreshDeskTicketReqPriorityTypeEnum["LOW"] = "LOW";
    FreshDeskTicketReqPriorityTypeEnum["MEDIUM"] = "MEDIUM";
    FreshDeskTicketReqPriorityTypeEnum["UNKNOWN"] = "UNKNOWN";
    FreshDeskTicketReqPriorityTypeEnum["URGENT"] = "URGENT";
})(FreshDeskTicketReqPriorityTypeEnum = exports.FreshDeskTicketReqPriorityTypeEnum || (exports.FreshDeskTicketReqPriorityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshDeskTicketReqStatusTypeEnum;
(function (FreshDeskTicketReqStatusTypeEnum) {
    FreshDeskTicketReqStatusTypeEnum["CLOSED"] = "CLOSED";
    FreshDeskTicketReqStatusTypeEnum["OPEN"] = "OPEN";
    FreshDeskTicketReqStatusTypeEnum["PENDING"] = "PENDING";
    FreshDeskTicketReqStatusTypeEnum["PENDINGONEWEEK"] = "PENDING_ONE_WEEK";
    FreshDeskTicketReqStatusTypeEnum["PENDINGTWODAYS"] = "PENDING_TWO_DAYS";
    FreshDeskTicketReqStatusTypeEnum["QUEUEDFORAUTOMATION"] = "QUEUED_FOR_AUTOMATION";
    FreshDeskTicketReqStatusTypeEnum["RESOLVED"] = "RESOLVED";
    FreshDeskTicketReqStatusTypeEnum["UNKNOWN"] = "UNKNOWN";
    FreshDeskTicketReqStatusTypeEnum["WAITINGONATTORNEY"] = "WAITING_ON_ATTORNEY";
    FreshDeskTicketReqStatusTypeEnum["WAITINGONCUSTOMER"] = "WAITING_ON_CUSTOMER";
    FreshDeskTicketReqStatusTypeEnum["WAITINGONOTR"] = "WAITING_ON_OTR";
    FreshDeskTicketReqStatusTypeEnum["WAITINGONTHIRDPARTY"] = "WAITING_ON_THIRD_PARTY";
})(FreshDeskTicketReqStatusTypeEnum = exports.FreshDeskTicketReqStatusTypeEnum || (exports.FreshDeskTicketReqStatusTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshDeskTicketResPriorityTypeEnum;
(function (FreshDeskTicketResPriorityTypeEnum) {
    FreshDeskTicketResPriorityTypeEnum["HIGH"] = "HIGH";
    FreshDeskTicketResPriorityTypeEnum["LOW"] = "LOW";
    FreshDeskTicketResPriorityTypeEnum["MEDIUM"] = "MEDIUM";
    FreshDeskTicketResPriorityTypeEnum["UNKNOWN"] = "UNKNOWN";
    FreshDeskTicketResPriorityTypeEnum["URGENT"] = "URGENT";
})(FreshDeskTicketResPriorityTypeEnum = exports.FreshDeskTicketResPriorityTypeEnum || (exports.FreshDeskTicketResPriorityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshDeskTicketResStatusTypeEnum;
(function (FreshDeskTicketResStatusTypeEnum) {
    FreshDeskTicketResStatusTypeEnum["CLOSED"] = "CLOSED";
    FreshDeskTicketResStatusTypeEnum["OPEN"] = "OPEN";
    FreshDeskTicketResStatusTypeEnum["PENDING"] = "PENDING";
    FreshDeskTicketResStatusTypeEnum["PENDINGONEWEEK"] = "PENDING_ONE_WEEK";
    FreshDeskTicketResStatusTypeEnum["PENDINGTWODAYS"] = "PENDING_TWO_DAYS";
    FreshDeskTicketResStatusTypeEnum["QUEUEDFORAUTOMATION"] = "QUEUED_FOR_AUTOMATION";
    FreshDeskTicketResStatusTypeEnum["RESOLVED"] = "RESOLVED";
    FreshDeskTicketResStatusTypeEnum["UNKNOWN"] = "UNKNOWN";
    FreshDeskTicketResStatusTypeEnum["WAITINGONATTORNEY"] = "WAITING_ON_ATTORNEY";
    FreshDeskTicketResStatusTypeEnum["WAITINGONCUSTOMER"] = "WAITING_ON_CUSTOMER";
    FreshDeskTicketResStatusTypeEnum["WAITINGONOTR"] = "WAITING_ON_OTR";
    FreshDeskTicketResStatusTypeEnum["WAITINGONTHIRDPARTY"] = "WAITING_ON_THIRD_PARTY";
})(FreshDeskTicketResStatusTypeEnum = exports.FreshDeskTicketResStatusTypeEnum || (exports.FreshDeskTicketResStatusTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshdeskTicketReferenceDomainReferenceEntityTypeEnum;
(function (FreshdeskTicketReferenceDomainReferenceEntityTypeEnum) {
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["CASE"] = "CASE";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["CITATION"] = "CITATION";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["COURT"] = "COURT";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["LAWYER"] = "LAWYER";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    FreshdeskTicketReferenceDomainReferenceEntityTypeEnum["USER"] = "USER";
})(FreshdeskTicketReferenceDomainReferenceEntityTypeEnum = exports.FreshdeskTicketReferenceDomainReferenceEntityTypeEnum || (exports.FreshdeskTicketReferenceDomainReferenceEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FreshdeskTicketReferenceDomainTicketTypeEnum;
(function (FreshdeskTicketReferenceDomainTicketTypeEnum) {
    FreshdeskTicketReferenceDomainTicketTypeEnum["CARDPROBLEM"] = "CARD_PROBLEM";
    FreshdeskTicketReferenceDomainTicketTypeEnum["POSTBOOKINGPAYMENTFAILURE"] = "POST_BOOKING_PAYMENT_FAILURE";
    FreshdeskTicketReferenceDomainTicketTypeEnum["PREBOOKINGPAYMENTFAILURE"] = "PRE_BOOKING_PAYMENT_FAILURE";
})(FreshdeskTicketReferenceDomainTicketTypeEnum = exports.FreshdeskTicketReferenceDomainTicketTypeEnum || (exports.FreshdeskTicketReferenceDomainTicketTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var FuturePaymentPaymentStatusEnum;
(function (FuturePaymentPaymentStatusEnum) {
    FuturePaymentPaymentStatusEnum["AUTHORIZED"] = "AUTHORIZED";
    FuturePaymentPaymentStatusEnum["CANCELLED"] = "CANCELLED";
    FuturePaymentPaymentStatusEnum["ERROR"] = "ERROR";
    FuturePaymentPaymentStatusEnum["EXPIRED"] = "EXPIRED";
    FuturePaymentPaymentStatusEnum["PAID"] = "PAID";
    FuturePaymentPaymentStatusEnum["PENDINGLAWFIRMACCEPTANCE"] = "PENDING_LAWFIRM_ACCEPTANCE";
    FuturePaymentPaymentStatusEnum["REFUNDED"] = "REFUNDED";
    FuturePaymentPaymentStatusEnum["SCHEDULED"] = "SCHEDULED";
    FuturePaymentPaymentStatusEnum["UNKNOWN"] = "UNKNOWN";
})(FuturePaymentPaymentStatusEnum = exports.FuturePaymentPaymentStatusEnum || (exports.FuturePaymentPaymentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GenerateTemplateRequestEmailTemplateIdEnum;
(function (GenerateTemplateRequestEmailTemplateIdEnum) {
    GenerateTemplateRequestEmailTemplateIdEnum["AFTERNOONHELLO2"] = "AFTERNOON_HELLO_2";
    GenerateTemplateRequestEmailTemplateIdEnum["ATTICUSATTORNEYCONTACT1"] = "ATTICUS_ATTORNEY_CONTACT_1";
    GenerateTemplateRequestEmailTemplateIdEnum["CAMERATICKETNMV"] = "CAMERA_TICKET_NMV";
    GenerateTemplateRequestEmailTemplateIdEnum["CASECANCELLEDBYUSER"] = "CASE_CANCELLED_BY_USER";
    GenerateTemplateRequestEmailTemplateIdEnum["CASECANCELLEDDUPLICATE"] = "CASE_CANCELLED_DUPLICATE";
    GenerateTemplateRequestEmailTemplateIdEnum["CASECANCELLEDNMV"] = "CASE_CANCELLED_NMV";
    GenerateTemplateRequestEmailTemplateIdEnum["CASECANCELLEDNONPAYMENT"] = "CASE_CANCELLED_NON_PAYMENT";
    GenerateTemplateRequestEmailTemplateIdEnum["CASECANCELLEDNOLAWFIRM"] = "CASE_CANCELLED_NO_LAWFIRM";
    GenerateTemplateRequestEmailTemplateIdEnum["CASECANCELLEDOVERDUE"] = "CASE_CANCELLED_OVERDUE";
    GenerateTemplateRequestEmailTemplateIdEnum["CASECANCELLEDTOOSHORTNOTICE"] = "CASE_CANCELLED_TOO_SHORT_NOTICE";
    GenerateTemplateRequestEmailTemplateIdEnum["CASUALFIRSTV1"] = "CASUAL_FIRST_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["CASUALSECONDV1"] = "CASUAL_SECOND_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["FRIDAYINTRO"] = "FRIDAY_INTRO";
    GenerateTemplateRequestEmailTemplateIdEnum["INVALIDIMAGEUPLOAD1"] = "INVALID_IMAGE_UPLOAD_1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT10V1"] = "LAWFIRM_CONTACT_10_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT1V1"] = "LAWFIRM_CONTACT_1_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT2V1"] = "LAWFIRM_CONTACT_2_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT3V1"] = "LAWFIRM_CONTACT_3_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT4V1"] = "LAWFIRM_CONTACT_4_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT5V1"] = "LAWFIRM_CONTACT_5_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT6V1"] = "LAWFIRM_CONTACT_6_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT7V1"] = "LAWFIRM_CONTACT_7_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT8V1"] = "LAWFIRM_CONTACT_8_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWFIRMCONTACT9V1"] = "LAWFIRM_CONTACT_9_V1";
    GenerateTemplateRequestEmailTemplateIdEnum["LAWYERPOSTCOURTREMINDER"] = "LAWYER_POST_COURT_REMINDER";
    GenerateTemplateRequestEmailTemplateIdEnum["NOCOVERAGEAVAILABLE"] = "NO_COVERAGE_AVAILABLE";
    GenerateTemplateRequestEmailTemplateIdEnum["NOCOVERAGEAVAILABLEMISSINGCOURT"] = "NO_COVERAGE_AVAILABLE_MISSING_COURT";
    GenerateTemplateRequestEmailTemplateIdEnum["PARKINGTICKET"] = "PARKING_TICKET";
    GenerateTemplateRequestEmailTemplateIdEnum["POSTWIN"] = "POST_WIN";
    GenerateTemplateRequestEmailTemplateIdEnum["POSTWINLASTASK"] = "POST_WIN_LAST_ASK";
    GenerateTemplateRequestEmailTemplateIdEnum["POSTWINV2"] = "POST_WIN_V2";
    GenerateTemplateRequestEmailTemplateIdEnum["SUNDAYAFTERNOONHELLO"] = "SUNDAY_AFTERNOON_HELLO";
    GenerateTemplateRequestEmailTemplateIdEnum["TICKETDUEWA"] = "TICKET_DUE_WA";
    GenerateTemplateRequestEmailTemplateIdEnum["TICKETEVALWITHCITATION"] = "TICKET_EVAL_WITH_CITATION";
    GenerateTemplateRequestEmailTemplateIdEnum["TICKETEVALWITHCITATION2NDFOLLOWUP"] = "TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP";
    GenerateTemplateRequestEmailTemplateIdEnum["TICKETEVALWITHCITATIONCLOSEOUT"] = "TICKET_EVAL_WITH_CITATION_CLOSE_OUT";
})(GenerateTemplateRequestEmailTemplateIdEnum = exports.GenerateTemplateRequestEmailTemplateIdEnum || (exports.GenerateTemplateRequestEmailTemplateIdEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GeoRatesRequestCdlStatusEnum;
(function (GeoRatesRequestCdlStatusEnum) {
    GeoRatesRequestCdlStatusEnum["CDLINCOMMERCIALVEHICLE"] = "CDL_IN_COMMERCIAL_VEHICLE";
    GeoRatesRequestCdlStatusEnum["CDLINPERSONALVEHICLE"] = "CDL_IN_PERSONAL_VEHICLE";
    GeoRatesRequestCdlStatusEnum["NOCDL"] = "NO_CDL";
})(GeoRatesRequestCdlStatusEnum = exports.GeoRatesRequestCdlStatusEnum || (exports.GeoRatesRequestCdlStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetCaseActionTypesResponseCaseActionTypesEnum;
(function (GetCaseActionTypesResponseCaseActionTypesEnum) {
    GetCaseActionTypesResponseCaseActionTypesEnum["CITATIONDATAEXTRACTED"] = "CITATION_DATA_EXTRACTED";
    GetCaseActionTypesResponseCaseActionTypesEnum["COURTDATEREMOVED"] = "COURT_DATE_REMOVED";
    GetCaseActionTypesResponseCaseActionTypesEnum["COURTDATESCHEDULED"] = "COURT_DATE_SCHEDULED";
    GetCaseActionTypesResponseCaseActionTypesEnum["DISCOVERYRECEIVED"] = "DISCOVERY_RECEIVED";
    GetCaseActionTypesResponseCaseActionTypesEnum["DISCOVERYREQUESTED"] = "DISCOVERY_REQUESTED";
    GetCaseActionTypesResponseCaseActionTypesEnum["FAILEDPAYMENTATTEMPT"] = "FAILED_PAYMENT_ATTEMPT";
    GetCaseActionTypesResponseCaseActionTypesEnum["NOTICEOFAPPEARANCEFILED"] = "NOTICE_OF_APPEARANCE_FILED";
    GetCaseActionTypesResponseCaseActionTypesEnum["OTHER"] = "OTHER";
    GetCaseActionTypesResponseCaseActionTypesEnum["REVIEWEDBYLAWFIRM"] = "REVIEWED_BY_LAWFIRM";
    GetCaseActionTypesResponseCaseActionTypesEnum["TICKETMAILEDTOCOURT"] = "TICKET_MAILED_TO_COURT";
})(GetCaseActionTypesResponseCaseActionTypesEnum = exports.GetCaseActionTypesResponseCaseActionTypesEnum || (exports.GetCaseActionTypesResponseCaseActionTypesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetHouseHoldMateModelInviteStatusEnum;
(function (GetHouseHoldMateModelInviteStatusEnum) {
    GetHouseHoldMateModelInviteStatusEnum["CANCELLED"] = "CANCELLED";
    GetHouseHoldMateModelInviteStatusEnum["PENDING"] = "PENDING";
    GetHouseHoldMateModelInviteStatusEnum["VERIFIED"] = "VERIFIED";
})(GetHouseHoldMateModelInviteStatusEnum = exports.GetHouseHoldMateModelInviteStatusEnum || (exports.GetHouseHoldMateModelInviteStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetHouseHoldMateModelRelationshipTypeEnum;
(function (GetHouseHoldMateModelRelationshipTypeEnum) {
    GetHouseHoldMateModelRelationshipTypeEnum["SELF"] = "SELF";
    GetHouseHoldMateModelRelationshipTypeEnum["SIBLING"] = "SIBLING";
    GetHouseHoldMateModelRelationshipTypeEnum["SPOUSE"] = "SPOUSE";
    GetHouseHoldMateModelRelationshipTypeEnum["TEENAGER"] = "TEENAGER";
    GetHouseHoldMateModelRelationshipTypeEnum["UNKNOWN"] = "UNKNOWN";
})(GetHouseHoldMateModelRelationshipTypeEnum = exports.GetHouseHoldMateModelRelationshipTypeEnum || (exports.GetHouseHoldMateModelRelationshipTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmFeeModelClassificationEnum;
(function (GetLawfirmFeeModelClassificationEnum) {
    GetLawfirmFeeModelClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    GetLawfirmFeeModelClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    GetLawfirmFeeModelClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    GetLawfirmFeeModelClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    GetLawfirmFeeModelClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    GetLawfirmFeeModelClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    GetLawfirmFeeModelClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    GetLawfirmFeeModelClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    GetLawfirmFeeModelClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    GetLawfirmFeeModelClassificationEnum["FELONY"] = "FELONY";
    GetLawfirmFeeModelClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    GetLawfirmFeeModelClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    GetLawfirmFeeModelClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    GetLawfirmFeeModelClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    GetLawfirmFeeModelClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    GetLawfirmFeeModelClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["INFRACTION"] = "INFRACTION";
    GetLawfirmFeeModelClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    GetLawfirmFeeModelClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    GetLawfirmFeeModelClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    GetLawfirmFeeModelClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    GetLawfirmFeeModelClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    GetLawfirmFeeModelClassificationEnum["NONMOVING"] = "NON_MOVING";
    GetLawfirmFeeModelClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    GetLawfirmFeeModelClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    GetLawfirmFeeModelClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    GetLawfirmFeeModelClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    GetLawfirmFeeModelClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    GetLawfirmFeeModelClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    GetLawfirmFeeModelClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(GetLawfirmFeeModelClassificationEnum = exports.GetLawfirmFeeModelClassificationEnum || (exports.GetLawfirmFeeModelClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmFeeModelRefundEligibilityEnum;
(function (GetLawfirmFeeModelRefundEligibilityEnum) {
    GetLawfirmFeeModelRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    GetLawfirmFeeModelRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    GetLawfirmFeeModelRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(GetLawfirmFeeModelRefundEligibilityEnum = exports.GetLawfirmFeeModelRefundEligibilityEnum || (exports.GetLawfirmFeeModelRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmJobTitleResponseJobTitlesEnum;
(function (GetLawfirmJobTitleResponseJobTitlesEnum) {
    GetLawfirmJobTitleResponseJobTitlesEnum["ACCOUNTANT"] = "ACCOUNTANT";
    GetLawfirmJobTitleResponseJobTitlesEnum["ATTORNEY"] = "ATTORNEY";
    GetLawfirmJobTitleResponseJobTitlesEnum["ATTORNEYASSOCIATE"] = "ATTORNEY_ASSOCIATE";
    GetLawfirmJobTitleResponseJobTitlesEnum["ATTORNEYCOUNSEL"] = "ATTORNEY_COUNSEL";
    GetLawfirmJobTitleResponseJobTitlesEnum["ATTORNEYMANAGINGPARTNER"] = "ATTORNEY_MANAGING_PARTNER";
    GetLawfirmJobTitleResponseJobTitlesEnum["ATTORNEYPARTNER"] = "ATTORNEY_PARTNER";
    GetLawfirmJobTitleResponseJobTitlesEnum["ATTORNEYSTAFF"] = "ATTORNEY_STAFF";
    GetLawfirmJobTitleResponseJobTitlesEnum["CUSTOMERSERVICEREP"] = "CUSTOMER_SERVICE_REP";
    GetLawfirmJobTitleResponseJobTitlesEnum["LEGALASSISTANT"] = "LEGAL_ASSISTANT";
    GetLawfirmJobTitleResponseJobTitlesEnum["LEGALINTERN"] = "LEGAL_INTERN";
    GetLawfirmJobTitleResponseJobTitlesEnum["LEGALSECRETARY"] = "LEGAL_SECRETARY";
    GetLawfirmJobTitleResponseJobTitlesEnum["OTHER"] = "OTHER";
    GetLawfirmJobTitleResponseJobTitlesEnum["PARALEGAL"] = "PARALEGAL";
})(GetLawfirmJobTitleResponseJobTitlesEnum = exports.GetLawfirmJobTitleResponseJobTitlesEnum || (exports.GetLawfirmJobTitleResponseJobTitlesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmModelLawfirmPaymentModelEnum;
(function (GetLawfirmModelLawfirmPaymentModelEnum) {
    GetLawfirmModelLawfirmPaymentModelEnum["DESTINATIONACCOUNT"] = "DESTINATION_ACCOUNT";
    GetLawfirmModelLawfirmPaymentModelEnum["SEPARATECHARGE"] = "SEPARATE_CHARGE";
    GetLawfirmModelLawfirmPaymentModelEnum["TRANSFERDEDUCTION"] = "TRANSFER_DEDUCTION";
})(GetLawfirmModelLawfirmPaymentModelEnum = exports.GetLawfirmModelLawfirmPaymentModelEnum || (exports.GetLawfirmModelLawfirmPaymentModelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmModelLawfirmStateEnum;
(function (GetLawfirmModelLawfirmStateEnum) {
    GetLawfirmModelLawfirmStateEnum["ACCOUNTCLOSED"] = "ACCOUNT_CLOSED";
    GetLawfirmModelLawfirmStateEnum["DUPLICATE"] = "DUPLICATE";
    GetLawfirmModelLawfirmStateEnum["ESTABLISHED"] = "ESTABLISHED";
    GetLawfirmModelLawfirmStateEnum["FUTURELEAD"] = "FUTURE_LEAD";
    GetLawfirmModelLawfirmStateEnum["INTRIAL"] = "IN_TRIAL";
    GetLawfirmModelLawfirmStateEnum["LAWFIRMINTERESTED"] = "LAWFIRM_INTERESTED";
    GetLawfirmModelLawfirmStateEnum["LAWFIRMLEAD"] = "LAWFIRM_LEAD";
    GetLawfirmModelLawfirmStateEnum["LAWFIRMNOTINTERESTED"] = "LAWFIRM_NOT_INTERESTED";
    GetLawfirmModelLawfirmStateEnum["NOTINTERESTEDFEESPLITTINGETHICS"] = "NOT_INTERESTED_FEE_SPLITTING_ETHICS";
    GetLawfirmModelLawfirmStateEnum["NOTINTERESTEDREFUNDETHICS"] = "NOT_INTERESTED_REFUND_ETHICS";
    GetLawfirmModelLawfirmStateEnum["ONBOARDING"] = "ONBOARDING";
    GetLawfirmModelLawfirmStateEnum["TEMPORARILYTURNEDOFF"] = "TEMPORARILY_TURNED_OFF";
    GetLawfirmModelLawfirmStateEnum["TERMINATEDFRAUD"] = "TERMINATED_FRAUD";
    GetLawfirmModelLawfirmStateEnum["TERMINATEDPOORSERVICE"] = "TERMINATED_POOR_SERVICE";
    GetLawfirmModelLawfirmStateEnum["TERMINATEDPOORSUCCESS"] = "TERMINATED_POOR_SUCCESS";
    GetLawfirmModelLawfirmStateEnum["UNDERREVIEW"] = "UNDER_REVIEW";
})(GetLawfirmModelLawfirmStateEnum = exports.GetLawfirmModelLawfirmStateEnum || (exports.GetLawfirmModelLawfirmStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmModelSupportedStatesEnum;
(function (GetLawfirmModelSupportedStatesEnum) {
    GetLawfirmModelSupportedStatesEnum["AK"] = "AK";
    GetLawfirmModelSupportedStatesEnum["AL"] = "AL";
    GetLawfirmModelSupportedStatesEnum["AR"] = "AR";
    GetLawfirmModelSupportedStatesEnum["AZ"] = "AZ";
    GetLawfirmModelSupportedStatesEnum["CA"] = "CA";
    GetLawfirmModelSupportedStatesEnum["CO"] = "CO";
    GetLawfirmModelSupportedStatesEnum["CT"] = "CT";
    GetLawfirmModelSupportedStatesEnum["DC"] = "DC";
    GetLawfirmModelSupportedStatesEnum["DE"] = "DE";
    GetLawfirmModelSupportedStatesEnum["FL"] = "FL";
    GetLawfirmModelSupportedStatesEnum["GA"] = "GA";
    GetLawfirmModelSupportedStatesEnum["HI"] = "HI";
    GetLawfirmModelSupportedStatesEnum["IA"] = "IA";
    GetLawfirmModelSupportedStatesEnum["ID"] = "ID";
    GetLawfirmModelSupportedStatesEnum["IL"] = "IL";
    GetLawfirmModelSupportedStatesEnum["IN"] = "IN";
    GetLawfirmModelSupportedStatesEnum["KS"] = "KS";
    GetLawfirmModelSupportedStatesEnum["KY"] = "KY";
    GetLawfirmModelSupportedStatesEnum["LA"] = "LA";
    GetLawfirmModelSupportedStatesEnum["MA"] = "MA";
    GetLawfirmModelSupportedStatesEnum["MD"] = "MD";
    GetLawfirmModelSupportedStatesEnum["ME"] = "ME";
    GetLawfirmModelSupportedStatesEnum["MI"] = "MI";
    GetLawfirmModelSupportedStatesEnum["MN"] = "MN";
    GetLawfirmModelSupportedStatesEnum["MO"] = "MO";
    GetLawfirmModelSupportedStatesEnum["MS"] = "MS";
    GetLawfirmModelSupportedStatesEnum["MT"] = "MT";
    GetLawfirmModelSupportedStatesEnum["NC"] = "NC";
    GetLawfirmModelSupportedStatesEnum["ND"] = "ND";
    GetLawfirmModelSupportedStatesEnum["NE"] = "NE";
    GetLawfirmModelSupportedStatesEnum["NH"] = "NH";
    GetLawfirmModelSupportedStatesEnum["NJ"] = "NJ";
    GetLawfirmModelSupportedStatesEnum["NM"] = "NM";
    GetLawfirmModelSupportedStatesEnum["NV"] = "NV";
    GetLawfirmModelSupportedStatesEnum["NY"] = "NY";
    GetLawfirmModelSupportedStatesEnum["OH"] = "OH";
    GetLawfirmModelSupportedStatesEnum["OK"] = "OK";
    GetLawfirmModelSupportedStatesEnum["OR"] = "OR";
    GetLawfirmModelSupportedStatesEnum["PA"] = "PA";
    GetLawfirmModelSupportedStatesEnum["RI"] = "RI";
    GetLawfirmModelSupportedStatesEnum["SC"] = "SC";
    GetLawfirmModelSupportedStatesEnum["SD"] = "SD";
    GetLawfirmModelSupportedStatesEnum["TN"] = "TN";
    GetLawfirmModelSupportedStatesEnum["TX"] = "TX";
    GetLawfirmModelSupportedStatesEnum["UT"] = "UT";
    GetLawfirmModelSupportedStatesEnum["VA"] = "VA";
    GetLawfirmModelSupportedStatesEnum["VT"] = "VT";
    GetLawfirmModelSupportedStatesEnum["WA"] = "WA";
    GetLawfirmModelSupportedStatesEnum["WI"] = "WI";
    GetLawfirmModelSupportedStatesEnum["WV"] = "WV";
    GetLawfirmModelSupportedStatesEnum["WY"] = "WY";
})(GetLawfirmModelSupportedStatesEnum = exports.GetLawfirmModelSupportedStatesEnum || (exports.GetLawfirmModelSupportedStatesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum;
(function (GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum) {
    GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum["ACTIVE"] = "ACTIVE";
    GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum["CANCELLED"] = "CANCELLED";
    GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum["RESOLVED"] = "RESOLVED";
    GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum = exports.GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum || (exports.GetLawfirmSummaryCaseRequestCaseStatusCategoriesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmSummaryCaseRequestCaseStatusesEnum;
(function (GetLawfirmSummaryCaseRequestCaseStatusesEnum) {
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["DEFERRED"] = "DEFERRED";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["DISMISSED"] = "DISMISSED";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["DIVERSION"] = "DIVERSION";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["LOST"] = "LOST";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["STALE"] = "STALE";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    GetLawfirmSummaryCaseRequestCaseStatusesEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(GetLawfirmSummaryCaseRequestCaseStatusesEnum = exports.GetLawfirmSummaryCaseRequestCaseStatusesEnum || (exports.GetLawfirmSummaryCaseRequestCaseStatusesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum;
(function (GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum) {
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["DEFERRED"] = "DEFERRED";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["DISMISSED"] = "DISMISSED";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["DIVERSION"] = "DIVERSION";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["LOST"] = "LOST";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["STALE"] = "STALE";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum = exports.GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum || (exports.GetLawfirmSummaryCaseRequestExcludedCaseStatusesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetLineItemTypesResponseLineItemTypesEnum;
(function (GetLineItemTypesResponseLineItemTypesEnum) {
    GetLineItemTypesResponseLineItemTypesEnum["ACCIDENTFEE"] = "ACCIDENT_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["BASELEGALFEE"] = "BASE_LEGAL_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["BONDFEE"] = "BOND_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["BOOKINGFEE"] = "BOOKING_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["CDLFEE"] = "CDL_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["DISPUTEFEE"] = "DISPUTE_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["FINEPAYMENT"] = "FINE_PAYMENT";
    GetLineItemTypesResponseLineItemTypesEnum["FTAFEE"] = "FTA_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["LATEFEE"] = "LATE_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["MBGREFUND"] = "MBG_REFUND";
    GetLineItemTypesResponseLineItemTypesEnum["MVSFEE"] = "MVS_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["OTHER"] = "OTHER";
    GetLineItemTypesResponseLineItemTypesEnum["OTRCREDIT"] = "OTR_CREDIT";
    GetLineItemTypesResponseLineItemTypesEnum["PAYMENTPLANSERVICEFEE"] = "PAYMENT_PLAN_SERVICE_FEE";
    GetLineItemTypesResponseLineItemTypesEnum["WARRANTFEE"] = "WARRANT_FEE";
})(GetLineItemTypesResponseLineItemTypesEnum = exports.GetLineItemTypesResponseLineItemTypesEnum || (exports.GetLineItemTypesResponseLineItemTypesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetPaymentModelTypesResponseModelsEnum;
(function (GetPaymentModelTypesResponseModelsEnum) {
    GetPaymentModelTypesResponseModelsEnum["DESTINATIONACCOUNT"] = "DESTINATION_ACCOUNT";
    GetPaymentModelTypesResponseModelsEnum["SEPARATECHARGE"] = "SEPARATE_CHARGE";
    GetPaymentModelTypesResponseModelsEnum["TRANSFERDEDUCTION"] = "TRANSFER_DEDUCTION";
})(GetPaymentModelTypesResponseModelsEnum = exports.GetPaymentModelTypesResponseModelsEnum || (exports.GetPaymentModelTypesResponseModelsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetPenaltyTypeTypeEnum;
(function (GetPenaltyTypeTypeEnum) {
    GetPenaltyTypeTypeEnum["DEMERITPOINTS"] = "DEMERIT_POINTS";
    GetPenaltyTypeTypeEnum["INCARCERATIONMAXDAYS"] = "INCARCERATION_MAX_DAYS";
    GetPenaltyTypeTypeEnum["INCARCERATIONMINDAYS"] = "INCARCERATION_MIN_DAYS";
    GetPenaltyTypeTypeEnum["INSURANCEPOINTS"] = "INSURANCE_POINTS";
    GetPenaltyTypeTypeEnum["INSURANCERATEINCREASE"] = "INSURANCE_RATE_INCREASE";
    GetPenaltyTypeTypeEnum["LICENSEREVOCATIONMAXDAYS"] = "LICENSE_REVOCATION_MAX_DAYS";
    GetPenaltyTypeTypeEnum["LICENSEREVOCATIONMINDAYS"] = "LICENSE_REVOCATION_MIN_DAYS";
    GetPenaltyTypeTypeEnum["LICENSESUSPENSIONMAXDAYS"] = "LICENSE_SUSPENSION_MAX_DAYS";
    GetPenaltyTypeTypeEnum["LICENSESUSPENSIONMINDAYS"] = "LICENSE_SUSPENSION_MIN_DAYS";
    GetPenaltyTypeTypeEnum["MANDATORYCOURTAPPEARANCE"] = "MANDATORY_COURT_APPEARANCE";
    GetPenaltyTypeTypeEnum["MANDATORYCOURTAPPEARANCEWITHATTORNEY"] = "MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY";
    GetPenaltyTypeTypeEnum["MAXBAILAMOUNT"] = "MAX_BAIL_AMOUNT";
    GetPenaltyTypeTypeEnum["MINBAILAMOUNT"] = "MIN_BAIL_AMOUNT";
    GetPenaltyTypeTypeEnum["PROBATIONINDAYS"] = "PROBATION_IN_DAYS";
    GetPenaltyTypeTypeEnum["TOTALBAILAMOUNT"] = "TOTAL_BAIL_AMOUNT";
})(GetPenaltyTypeTypeEnum = exports.GetPenaltyTypeTypeEnum || (exports.GetPenaltyTypeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetReferralCodeResponseOwnerTypeEnum;
(function (GetReferralCodeResponseOwnerTypeEnum) {
    GetReferralCodeResponseOwnerTypeEnum["LAWFIRM"] = "LAWFIRM";
    GetReferralCodeResponseOwnerTypeEnum["OTR"] = "OTR";
})(GetReferralCodeResponseOwnerTypeEnum = exports.GetReferralCodeResponseOwnerTypeEnum || (exports.GetReferralCodeResponseOwnerTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetReferralCodeResponseRefereeCreditTypeEnum;
(function (GetReferralCodeResponseRefereeCreditTypeEnum) {
    GetReferralCodeResponseRefereeCreditTypeEnum["CENTSVALUE"] = "CENTS_VALUE";
    GetReferralCodeResponseRefereeCreditTypeEnum["NOCREDIT"] = "NO_CREDIT";
    GetReferralCodeResponseRefereeCreditTypeEnum["PERCENTAGEDISCOUNT"] = "PERCENTAGE_DISCOUNT";
})(GetReferralCodeResponseRefereeCreditTypeEnum = exports.GetReferralCodeResponseRefereeCreditTypeEnum || (exports.GetReferralCodeResponseRefereeCreditTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetTrafficViolationModelViolationClassificationEnum;
(function (GetTrafficViolationModelViolationClassificationEnum) {
    GetTrafficViolationModelViolationClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    GetTrafficViolationModelViolationClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    GetTrafficViolationModelViolationClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    GetTrafficViolationModelViolationClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    GetTrafficViolationModelViolationClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    GetTrafficViolationModelViolationClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    GetTrafficViolationModelViolationClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    GetTrafficViolationModelViolationClassificationEnum["FELONY"] = "FELONY";
    GetTrafficViolationModelViolationClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["INFRACTION"] = "INFRACTION";
    GetTrafficViolationModelViolationClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    GetTrafficViolationModelViolationClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    GetTrafficViolationModelViolationClassificationEnum["NONMOVING"] = "NON_MOVING";
    GetTrafficViolationModelViolationClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    GetTrafficViolationModelViolationClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    GetTrafficViolationModelViolationClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    GetTrafficViolationModelViolationClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    GetTrafficViolationModelViolationClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    GetTrafficViolationModelViolationClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    GetTrafficViolationModelViolationClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(GetTrafficViolationModelViolationClassificationEnum = exports.GetTrafficViolationModelViolationClassificationEnum || (exports.GetTrafficViolationModelViolationClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GraphRequestCaseStatuesEnum;
(function (GraphRequestCaseStatuesEnum) {
    GraphRequestCaseStatuesEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    GraphRequestCaseStatuesEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    GraphRequestCaseStatuesEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    GraphRequestCaseStatuesEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    GraphRequestCaseStatuesEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    GraphRequestCaseStatuesEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    GraphRequestCaseStatuesEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    GraphRequestCaseStatuesEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    GraphRequestCaseStatuesEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    GraphRequestCaseStatuesEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    GraphRequestCaseStatuesEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    GraphRequestCaseStatuesEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    GraphRequestCaseStatuesEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    GraphRequestCaseStatuesEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    GraphRequestCaseStatuesEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    GraphRequestCaseStatuesEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    GraphRequestCaseStatuesEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    GraphRequestCaseStatuesEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    GraphRequestCaseStatuesEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    GraphRequestCaseStatuesEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    GraphRequestCaseStatuesEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    GraphRequestCaseStatuesEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    GraphRequestCaseStatuesEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    GraphRequestCaseStatuesEnum["DEFERRED"] = "DEFERRED";
    GraphRequestCaseStatuesEnum["DISMISSED"] = "DISMISSED";
    GraphRequestCaseStatuesEnum["DIVERSION"] = "DIVERSION";
    GraphRequestCaseStatuesEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    GraphRequestCaseStatuesEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    GraphRequestCaseStatuesEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    GraphRequestCaseStatuesEnum["LOST"] = "LOST";
    GraphRequestCaseStatuesEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    GraphRequestCaseStatuesEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    GraphRequestCaseStatuesEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    GraphRequestCaseStatuesEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    GraphRequestCaseStatuesEnum["STALE"] = "STALE";
    GraphRequestCaseStatuesEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    GraphRequestCaseStatuesEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(GraphRequestCaseStatuesEnum = exports.GraphRequestCaseStatuesEnum || (exports.GraphRequestCaseStatuesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum;
(function (InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum) {
    InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum["ALLUPFRONT"] = "ALL_UPFRONT";
    InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum["THREEPAYMENTSHALFFIRST"] = "THREE_PAYMENTS_HALF_FIRST";
    InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum["TWOPAYMENTSMONTHLY"] = "TWO_PAYMENTS_MONTHLY";
})(InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum = exports.InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum || (exports.InitiateCaseAndChargeCustomerRequestPaymentPlanTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InviteHouseholdMateRequestRelationshipTypeEnum;
(function (InviteHouseholdMateRequestRelationshipTypeEnum) {
    InviteHouseholdMateRequestRelationshipTypeEnum["SELF"] = "SELF";
    InviteHouseholdMateRequestRelationshipTypeEnum["SIBLING"] = "SIBLING";
    InviteHouseholdMateRequestRelationshipTypeEnum["SPOUSE"] = "SPOUSE";
    InviteHouseholdMateRequestRelationshipTypeEnum["TEENAGER"] = "TEENAGER";
    InviteHouseholdMateRequestRelationshipTypeEnum["UNKNOWN"] = "UNKNOWN";
})(InviteHouseholdMateRequestRelationshipTypeEnum = exports.InviteHouseholdMateRequestRelationshipTypeEnum || (exports.InviteHouseholdMateRequestRelationshipTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IsRefundEligibleResponseRefundEligibilityTypeEnum;
(function (IsRefundEligibleResponseRefundEligibilityTypeEnum) {
    IsRefundEligibleResponseRefundEligibilityTypeEnum["FULLREFUND"] = "FULL_REFUND";
    IsRefundEligibleResponseRefundEligibilityTypeEnum["NOREFUND"] = "NO_REFUND";
    IsRefundEligibleResponseRefundEligibilityTypeEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(IsRefundEligibleResponseRefundEligibilityTypeEnum = exports.IsRefundEligibleResponseRefundEligibilityTypeEnum || (exports.IsRefundEligibleResponseRefundEligibilityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmAuditEventModelClientTypeEnum;
(function (LawfirmAuditEventModelClientTypeEnum) {
    LawfirmAuditEventModelClientTypeEnum["ANDROID"] = "ANDROID";
    LawfirmAuditEventModelClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    LawfirmAuditEventModelClientTypeEnum["DMVGO"] = "DMV_GO";
    LawfirmAuditEventModelClientTypeEnum["DMVORG"] = "DMV_ORG";
    LawfirmAuditEventModelClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    LawfirmAuditEventModelClientTypeEnum["IOS"] = "IOS";
    LawfirmAuditEventModelClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    LawfirmAuditEventModelClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    LawfirmAuditEventModelClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    LawfirmAuditEventModelClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    LawfirmAuditEventModelClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    LawfirmAuditEventModelClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    LawfirmAuditEventModelClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    LawfirmAuditEventModelClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    LawfirmAuditEventModelClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    LawfirmAuditEventModelClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    LawfirmAuditEventModelClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    LawfirmAuditEventModelClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    LawfirmAuditEventModelClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(LawfirmAuditEventModelClientTypeEnum = exports.LawfirmAuditEventModelClientTypeEnum || (exports.LawfirmAuditEventModelClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmAuditEventModelEventEnum;
(function (LawfirmAuditEventModelEventEnum) {
    LawfirmAuditEventModelEventEnum["CASEBOOKING"] = "CASE_BOOKING";
    LawfirmAuditEventModelEventEnum["CASEMATCH"] = "CASE_MATCH";
    LawfirmAuditEventModelEventEnum["CITATIONUPLOAD"] = "CITATION_UPLOAD";
    LawfirmAuditEventModelEventEnum["LAWFIRMACCOUNTPRIORITY"] = "LAWFIRM_ACCOUNT_PRIORITY";
    LawfirmAuditEventModelEventEnum["LAWFIRMACCOUNTSTATUS"] = "LAWFIRM_ACCOUNT_STATUS";
    LawfirmAuditEventModelEventEnum["LAWFIRMDAILYCAPACITY"] = "LAWFIRM_DAILY_CAPACITY";
    LawfirmAuditEventModelEventEnum["LAWFIRMTOTALCAPACITY"] = "LAWFIRM_TOTAL_CAPACITY";
    LawfirmAuditEventModelEventEnum["SAVEVACATIONMODEENDDATE"] = "SAVE_VACATION_MODE_END_DATE";
    LawfirmAuditEventModelEventEnum["SAVEVACATIONMODEREASON"] = "SAVE_VACATION_MODE_REASON";
    LawfirmAuditEventModelEventEnum["VACATIONMODETOGGLE"] = "VACATION_MODE_TOGGLE";
})(LawfirmAuditEventModelEventEnum = exports.LawfirmAuditEventModelEventEnum || (exports.LawfirmAuditEventModelEventEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmBookingSummaryStateEnum;
(function (LawfirmBookingSummaryStateEnum) {
    LawfirmBookingSummaryStateEnum["AK"] = "AK";
    LawfirmBookingSummaryStateEnum["AL"] = "AL";
    LawfirmBookingSummaryStateEnum["AR"] = "AR";
    LawfirmBookingSummaryStateEnum["AZ"] = "AZ";
    LawfirmBookingSummaryStateEnum["CA"] = "CA";
    LawfirmBookingSummaryStateEnum["CO"] = "CO";
    LawfirmBookingSummaryStateEnum["CT"] = "CT";
    LawfirmBookingSummaryStateEnum["DC"] = "DC";
    LawfirmBookingSummaryStateEnum["DE"] = "DE";
    LawfirmBookingSummaryStateEnum["FL"] = "FL";
    LawfirmBookingSummaryStateEnum["GA"] = "GA";
    LawfirmBookingSummaryStateEnum["HI"] = "HI";
    LawfirmBookingSummaryStateEnum["IA"] = "IA";
    LawfirmBookingSummaryStateEnum["ID"] = "ID";
    LawfirmBookingSummaryStateEnum["IL"] = "IL";
    LawfirmBookingSummaryStateEnum["IN"] = "IN";
    LawfirmBookingSummaryStateEnum["KS"] = "KS";
    LawfirmBookingSummaryStateEnum["KY"] = "KY";
    LawfirmBookingSummaryStateEnum["LA"] = "LA";
    LawfirmBookingSummaryStateEnum["MA"] = "MA";
    LawfirmBookingSummaryStateEnum["MD"] = "MD";
    LawfirmBookingSummaryStateEnum["ME"] = "ME";
    LawfirmBookingSummaryStateEnum["MI"] = "MI";
    LawfirmBookingSummaryStateEnum["MN"] = "MN";
    LawfirmBookingSummaryStateEnum["MO"] = "MO";
    LawfirmBookingSummaryStateEnum["MS"] = "MS";
    LawfirmBookingSummaryStateEnum["MT"] = "MT";
    LawfirmBookingSummaryStateEnum["NC"] = "NC";
    LawfirmBookingSummaryStateEnum["ND"] = "ND";
    LawfirmBookingSummaryStateEnum["NE"] = "NE";
    LawfirmBookingSummaryStateEnum["NH"] = "NH";
    LawfirmBookingSummaryStateEnum["NJ"] = "NJ";
    LawfirmBookingSummaryStateEnum["NM"] = "NM";
    LawfirmBookingSummaryStateEnum["NV"] = "NV";
    LawfirmBookingSummaryStateEnum["NY"] = "NY";
    LawfirmBookingSummaryStateEnum["OH"] = "OH";
    LawfirmBookingSummaryStateEnum["OK"] = "OK";
    LawfirmBookingSummaryStateEnum["OR"] = "OR";
    LawfirmBookingSummaryStateEnum["PA"] = "PA";
    LawfirmBookingSummaryStateEnum["RI"] = "RI";
    LawfirmBookingSummaryStateEnum["SC"] = "SC";
    LawfirmBookingSummaryStateEnum["SD"] = "SD";
    LawfirmBookingSummaryStateEnum["TN"] = "TN";
    LawfirmBookingSummaryStateEnum["TX"] = "TX";
    LawfirmBookingSummaryStateEnum["UT"] = "UT";
    LawfirmBookingSummaryStateEnum["VA"] = "VA";
    LawfirmBookingSummaryStateEnum["VT"] = "VT";
    LawfirmBookingSummaryStateEnum["WA"] = "WA";
    LawfirmBookingSummaryStateEnum["WI"] = "WI";
    LawfirmBookingSummaryStateEnum["WV"] = "WV";
    LawfirmBookingSummaryStateEnum["WY"] = "WY";
})(LawfirmBookingSummaryStateEnum = exports.LawfirmBookingSummaryStateEnum || (exports.LawfirmBookingSummaryStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDocumentClientDocRequirementEnum;
(function (LawfirmCaseDocumentClientDocRequirementEnum) {
    LawfirmCaseDocumentClientDocRequirementEnum["ACK"] = "ACK";
    LawfirmCaseDocumentClientDocRequirementEnum["NONE"] = "NONE";
    LawfirmCaseDocumentClientDocRequirementEnum["NOTARY"] = "NOTARY";
    LawfirmCaseDocumentClientDocRequirementEnum["SIGNATURE"] = "SIGNATURE";
})(LawfirmCaseDocumentClientDocRequirementEnum = exports.LawfirmCaseDocumentClientDocRequirementEnum || (exports.LawfirmCaseDocumentClientDocRequirementEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDocumentDocTypeEnum;
(function (LawfirmCaseDocumentDocTypeEnum) {
    LawfirmCaseDocumentDocTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
    LawfirmCaseDocumentDocTypeEnum["OTHERDOCUMENT"] = "OTHER_DOCUMENT";
    LawfirmCaseDocumentDocTypeEnum["OTHERIMAGE"] = "OTHER_IMAGE";
})(LawfirmCaseDocumentDocTypeEnum = exports.LawfirmCaseDocumentDocTypeEnum || (exports.LawfirmCaseDocumentDocTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDomainCaseDecisionStatusEnum;
(function (LawfirmCaseDomainCaseDecisionStatusEnum) {
    LawfirmCaseDomainCaseDecisionStatusEnum["ACCEPTED"] = "ACCEPTED";
    LawfirmCaseDomainCaseDecisionStatusEnum["CREATED"] = "CREATED";
    LawfirmCaseDomainCaseDecisionStatusEnum["DECLINED"] = "DECLINED";
    LawfirmCaseDomainCaseDecisionStatusEnum["EXPIRED"] = "EXPIRED";
    LawfirmCaseDomainCaseDecisionStatusEnum["PENDING"] = "PENDING";
    LawfirmCaseDomainCaseDecisionStatusEnum["REMATCHED"] = "REMATCHED";
    LawfirmCaseDomainCaseDecisionStatusEnum["REMATCHEDREFERRAL"] = "REMATCHED_REFERRAL";
})(LawfirmCaseDomainCaseDecisionStatusEnum = exports.LawfirmCaseDomainCaseDecisionStatusEnum || (exports.LawfirmCaseDomainCaseDecisionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDomainRefundOwnerEnum;
(function (LawfirmCaseDomainRefundOwnerEnum) {
    LawfirmCaseDomainRefundOwnerEnum["LAWFIRM"] = "LAWFIRM";
    LawfirmCaseDomainRefundOwnerEnum["NONE"] = "NONE";
    LawfirmCaseDomainRefundOwnerEnum["OTR"] = "OTR";
})(LawfirmCaseDomainRefundOwnerEnum = exports.LawfirmCaseDomainRefundOwnerEnum || (exports.LawfirmCaseDomainRefundOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDomainReqCaseDecisionStatusEnum;
(function (LawfirmCaseDomainReqCaseDecisionStatusEnum) {
    LawfirmCaseDomainReqCaseDecisionStatusEnum["ACCEPTED"] = "ACCEPTED";
    LawfirmCaseDomainReqCaseDecisionStatusEnum["CREATED"] = "CREATED";
    LawfirmCaseDomainReqCaseDecisionStatusEnum["DECLINED"] = "DECLINED";
    LawfirmCaseDomainReqCaseDecisionStatusEnum["EXPIRED"] = "EXPIRED";
    LawfirmCaseDomainReqCaseDecisionStatusEnum["PENDING"] = "PENDING";
    LawfirmCaseDomainReqCaseDecisionStatusEnum["REMATCHED"] = "REMATCHED";
    LawfirmCaseDomainReqCaseDecisionStatusEnum["REMATCHEDREFERRAL"] = "REMATCHED_REFERRAL";
})(LawfirmCaseDomainReqCaseDecisionStatusEnum = exports.LawfirmCaseDomainReqCaseDecisionStatusEnum || (exports.LawfirmCaseDomainReqCaseDecisionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDomainReqRefundOwnerEnum;
(function (LawfirmCaseDomainReqRefundOwnerEnum) {
    LawfirmCaseDomainReqRefundOwnerEnum["LAWFIRM"] = "LAWFIRM";
    LawfirmCaseDomainReqRefundOwnerEnum["NONE"] = "NONE";
    LawfirmCaseDomainReqRefundOwnerEnum["OTR"] = "OTR";
})(LawfirmCaseDomainReqRefundOwnerEnum = exports.LawfirmCaseDomainReqRefundOwnerEnum || (exports.LawfirmCaseDomainReqRefundOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDomainResCaseDecisionStatusEnum;
(function (LawfirmCaseDomainResCaseDecisionStatusEnum) {
    LawfirmCaseDomainResCaseDecisionStatusEnum["ACCEPTED"] = "ACCEPTED";
    LawfirmCaseDomainResCaseDecisionStatusEnum["CREATED"] = "CREATED";
    LawfirmCaseDomainResCaseDecisionStatusEnum["DECLINED"] = "DECLINED";
    LawfirmCaseDomainResCaseDecisionStatusEnum["EXPIRED"] = "EXPIRED";
    LawfirmCaseDomainResCaseDecisionStatusEnum["PENDING"] = "PENDING";
    LawfirmCaseDomainResCaseDecisionStatusEnum["REMATCHED"] = "REMATCHED";
    LawfirmCaseDomainResCaseDecisionStatusEnum["REMATCHEDREFERRAL"] = "REMATCHED_REFERRAL";
})(LawfirmCaseDomainResCaseDecisionStatusEnum = exports.LawfirmCaseDomainResCaseDecisionStatusEnum || (exports.LawfirmCaseDomainResCaseDecisionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmCaseDomainResRefundOwnerEnum;
(function (LawfirmCaseDomainResRefundOwnerEnum) {
    LawfirmCaseDomainResRefundOwnerEnum["LAWFIRM"] = "LAWFIRM";
    LawfirmCaseDomainResRefundOwnerEnum["NONE"] = "NONE";
    LawfirmCaseDomainResRefundOwnerEnum["OTR"] = "OTR";
})(LawfirmCaseDomainResRefundOwnerEnum = exports.LawfirmCaseDomainResRefundOwnerEnum || (exports.LawfirmCaseDomainResRefundOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmDocumentClientDocRequirementEnum;
(function (LawfirmDocumentClientDocRequirementEnum) {
    LawfirmDocumentClientDocRequirementEnum["ACK"] = "ACK";
    LawfirmDocumentClientDocRequirementEnum["NONE"] = "NONE";
    LawfirmDocumentClientDocRequirementEnum["NOTARY"] = "NOTARY";
    LawfirmDocumentClientDocRequirementEnum["SIGNATURE"] = "SIGNATURE";
})(LawfirmDocumentClientDocRequirementEnum = exports.LawfirmDocumentClientDocRequirementEnum || (exports.LawfirmDocumentClientDocRequirementEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmDocumentDocTypeEnum;
(function (LawfirmDocumentDocTypeEnum) {
    LawfirmDocumentDocTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
    LawfirmDocumentDocTypeEnum["OTHERDOCUMENT"] = "OTHER_DOCUMENT";
    LawfirmDocumentDocTypeEnum["OTHERIMAGE"] = "OTHER_IMAGE";
})(LawfirmDocumentDocTypeEnum = exports.LawfirmDocumentDocTypeEnum || (exports.LawfirmDocumentDocTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmDocumentTemplateClientDocRequirementEnum;
(function (LawfirmDocumentTemplateClientDocRequirementEnum) {
    LawfirmDocumentTemplateClientDocRequirementEnum["ACK"] = "ACK";
    LawfirmDocumentTemplateClientDocRequirementEnum["NONE"] = "NONE";
    LawfirmDocumentTemplateClientDocRequirementEnum["NOTARY"] = "NOTARY";
    LawfirmDocumentTemplateClientDocRequirementEnum["SIGNATURE"] = "SIGNATURE";
})(LawfirmDocumentTemplateClientDocRequirementEnum = exports.LawfirmDocumentTemplateClientDocRequirementEnum || (exports.LawfirmDocumentTemplateClientDocRequirementEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmDocumentTemplateDocTypeEnum;
(function (LawfirmDocumentTemplateDocTypeEnum) {
    LawfirmDocumentTemplateDocTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
    LawfirmDocumentTemplateDocTypeEnum["OTHERDOCUMENT"] = "OTHER_DOCUMENT";
    LawfirmDocumentTemplateDocTypeEnum["OTHERIMAGE"] = "OTHER_IMAGE";
})(LawfirmDocumentTemplateDocTypeEnum = exports.LawfirmDocumentTemplateDocTypeEnum || (exports.LawfirmDocumentTemplateDocTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmFeeDomainTransactionMethodEnum;
(function (LawfirmFeeDomainTransactionMethodEnum) {
    LawfirmFeeDomainTransactionMethodEnum["CHECK"] = "CHECK";
    LawfirmFeeDomainTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    LawfirmFeeDomainTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    LawfirmFeeDomainTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    LawfirmFeeDomainTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    LawfirmFeeDomainTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    LawfirmFeeDomainTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    LawfirmFeeDomainTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    LawfirmFeeDomainTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    LawfirmFeeDomainTransactionMethodEnum["VENMO"] = "VENMO";
    LawfirmFeeDomainTransactionMethodEnum["ZELLE"] = "ZELLE";
})(LawfirmFeeDomainTransactionMethodEnum = exports.LawfirmFeeDomainTransactionMethodEnum || (exports.LawfirmFeeDomainTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmInboxMessageDomainCaseStatusEnum;
(function (LawfirmInboxMessageDomainCaseStatusEnum) {
    LawfirmInboxMessageDomainCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    LawfirmInboxMessageDomainCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    LawfirmInboxMessageDomainCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    LawfirmInboxMessageDomainCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    LawfirmInboxMessageDomainCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    LawfirmInboxMessageDomainCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    LawfirmInboxMessageDomainCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    LawfirmInboxMessageDomainCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    LawfirmInboxMessageDomainCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    LawfirmInboxMessageDomainCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    LawfirmInboxMessageDomainCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    LawfirmInboxMessageDomainCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    LawfirmInboxMessageDomainCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    LawfirmInboxMessageDomainCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    LawfirmInboxMessageDomainCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    LawfirmInboxMessageDomainCaseStatusEnum["DEFERRED"] = "DEFERRED";
    LawfirmInboxMessageDomainCaseStatusEnum["DISMISSED"] = "DISMISSED";
    LawfirmInboxMessageDomainCaseStatusEnum["DIVERSION"] = "DIVERSION";
    LawfirmInboxMessageDomainCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    LawfirmInboxMessageDomainCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    LawfirmInboxMessageDomainCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    LawfirmInboxMessageDomainCaseStatusEnum["LOST"] = "LOST";
    LawfirmInboxMessageDomainCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    LawfirmInboxMessageDomainCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    LawfirmInboxMessageDomainCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    LawfirmInboxMessageDomainCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    LawfirmInboxMessageDomainCaseStatusEnum["STALE"] = "STALE";
    LawfirmInboxMessageDomainCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    LawfirmInboxMessageDomainCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(LawfirmInboxMessageDomainCaseStatusEnum = exports.LawfirmInboxMessageDomainCaseStatusEnum || (exports.LawfirmInboxMessageDomainCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmInboxMessageDomainCaseStatusCategoryEnum;
(function (LawfirmInboxMessageDomainCaseStatusCategoryEnum) {
    LawfirmInboxMessageDomainCaseStatusCategoryEnum["ACTIVE"] = "ACTIVE";
    LawfirmInboxMessageDomainCaseStatusCategoryEnum["CANCELLED"] = "CANCELLED";
    LawfirmInboxMessageDomainCaseStatusCategoryEnum["RESOLVED"] = "RESOLVED";
    LawfirmInboxMessageDomainCaseStatusCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(LawfirmInboxMessageDomainCaseStatusCategoryEnum = exports.LawfirmInboxMessageDomainCaseStatusCategoryEnum || (exports.LawfirmInboxMessageDomainCaseStatusCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum;
(function (LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum) {
    LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum["ACCEPTED"] = "ACCEPTED";
    LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum["CREATED"] = "CREATED";
    LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum["DECLINED"] = "DECLINED";
    LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum["EXPIRED"] = "EXPIRED";
    LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum["PENDING"] = "PENDING";
    LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum["REMATCHED"] = "REMATCHED";
    LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum["REMATCHEDREFERRAL"] = "REMATCHED_REFERRAL";
})(LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum = exports.LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum || (exports.LawfirmInboxMessageDomainLawfirmCaseDecisionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmLeadDomainLawfirmAddressStateEnum;
(function (LawfirmLeadDomainLawfirmAddressStateEnum) {
    LawfirmLeadDomainLawfirmAddressStateEnum["AK"] = "AK";
    LawfirmLeadDomainLawfirmAddressStateEnum["AL"] = "AL";
    LawfirmLeadDomainLawfirmAddressStateEnum["AR"] = "AR";
    LawfirmLeadDomainLawfirmAddressStateEnum["AZ"] = "AZ";
    LawfirmLeadDomainLawfirmAddressStateEnum["CA"] = "CA";
    LawfirmLeadDomainLawfirmAddressStateEnum["CO"] = "CO";
    LawfirmLeadDomainLawfirmAddressStateEnum["CT"] = "CT";
    LawfirmLeadDomainLawfirmAddressStateEnum["DC"] = "DC";
    LawfirmLeadDomainLawfirmAddressStateEnum["DE"] = "DE";
    LawfirmLeadDomainLawfirmAddressStateEnum["FL"] = "FL";
    LawfirmLeadDomainLawfirmAddressStateEnum["GA"] = "GA";
    LawfirmLeadDomainLawfirmAddressStateEnum["HI"] = "HI";
    LawfirmLeadDomainLawfirmAddressStateEnum["IA"] = "IA";
    LawfirmLeadDomainLawfirmAddressStateEnum["ID"] = "ID";
    LawfirmLeadDomainLawfirmAddressStateEnum["IL"] = "IL";
    LawfirmLeadDomainLawfirmAddressStateEnum["IN"] = "IN";
    LawfirmLeadDomainLawfirmAddressStateEnum["KS"] = "KS";
    LawfirmLeadDomainLawfirmAddressStateEnum["KY"] = "KY";
    LawfirmLeadDomainLawfirmAddressStateEnum["LA"] = "LA";
    LawfirmLeadDomainLawfirmAddressStateEnum["MA"] = "MA";
    LawfirmLeadDomainLawfirmAddressStateEnum["MD"] = "MD";
    LawfirmLeadDomainLawfirmAddressStateEnum["ME"] = "ME";
    LawfirmLeadDomainLawfirmAddressStateEnum["MI"] = "MI";
    LawfirmLeadDomainLawfirmAddressStateEnum["MN"] = "MN";
    LawfirmLeadDomainLawfirmAddressStateEnum["MO"] = "MO";
    LawfirmLeadDomainLawfirmAddressStateEnum["MS"] = "MS";
    LawfirmLeadDomainLawfirmAddressStateEnum["MT"] = "MT";
    LawfirmLeadDomainLawfirmAddressStateEnum["NC"] = "NC";
    LawfirmLeadDomainLawfirmAddressStateEnum["ND"] = "ND";
    LawfirmLeadDomainLawfirmAddressStateEnum["NE"] = "NE";
    LawfirmLeadDomainLawfirmAddressStateEnum["NH"] = "NH";
    LawfirmLeadDomainLawfirmAddressStateEnum["NJ"] = "NJ";
    LawfirmLeadDomainLawfirmAddressStateEnum["NM"] = "NM";
    LawfirmLeadDomainLawfirmAddressStateEnum["NV"] = "NV";
    LawfirmLeadDomainLawfirmAddressStateEnum["NY"] = "NY";
    LawfirmLeadDomainLawfirmAddressStateEnum["OH"] = "OH";
    LawfirmLeadDomainLawfirmAddressStateEnum["OK"] = "OK";
    LawfirmLeadDomainLawfirmAddressStateEnum["OR"] = "OR";
    LawfirmLeadDomainLawfirmAddressStateEnum["PA"] = "PA";
    LawfirmLeadDomainLawfirmAddressStateEnum["RI"] = "RI";
    LawfirmLeadDomainLawfirmAddressStateEnum["SC"] = "SC";
    LawfirmLeadDomainLawfirmAddressStateEnum["SD"] = "SD";
    LawfirmLeadDomainLawfirmAddressStateEnum["TN"] = "TN";
    LawfirmLeadDomainLawfirmAddressStateEnum["TX"] = "TX";
    LawfirmLeadDomainLawfirmAddressStateEnum["UT"] = "UT";
    LawfirmLeadDomainLawfirmAddressStateEnum["VA"] = "VA";
    LawfirmLeadDomainLawfirmAddressStateEnum["VT"] = "VT";
    LawfirmLeadDomainLawfirmAddressStateEnum["WA"] = "WA";
    LawfirmLeadDomainLawfirmAddressStateEnum["WI"] = "WI";
    LawfirmLeadDomainLawfirmAddressStateEnum["WV"] = "WV";
    LawfirmLeadDomainLawfirmAddressStateEnum["WY"] = "WY";
})(LawfirmLeadDomainLawfirmAddressStateEnum = exports.LawfirmLeadDomainLawfirmAddressStateEnum || (exports.LawfirmLeadDomainLawfirmAddressStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmLeadDomainLawfirmStateEnum;
(function (LawfirmLeadDomainLawfirmStateEnum) {
    LawfirmLeadDomainLawfirmStateEnum["ACCOUNTCLOSED"] = "ACCOUNT_CLOSED";
    LawfirmLeadDomainLawfirmStateEnum["DUPLICATE"] = "DUPLICATE";
    LawfirmLeadDomainLawfirmStateEnum["ESTABLISHED"] = "ESTABLISHED";
    LawfirmLeadDomainLawfirmStateEnum["FUTURELEAD"] = "FUTURE_LEAD";
    LawfirmLeadDomainLawfirmStateEnum["INTRIAL"] = "IN_TRIAL";
    LawfirmLeadDomainLawfirmStateEnum["LAWFIRMINTERESTED"] = "LAWFIRM_INTERESTED";
    LawfirmLeadDomainLawfirmStateEnum["LAWFIRMLEAD"] = "LAWFIRM_LEAD";
    LawfirmLeadDomainLawfirmStateEnum["LAWFIRMNOTINTERESTED"] = "LAWFIRM_NOT_INTERESTED";
    LawfirmLeadDomainLawfirmStateEnum["NOTINTERESTEDFEESPLITTINGETHICS"] = "NOT_INTERESTED_FEE_SPLITTING_ETHICS";
    LawfirmLeadDomainLawfirmStateEnum["NOTINTERESTEDREFUNDETHICS"] = "NOT_INTERESTED_REFUND_ETHICS";
    LawfirmLeadDomainLawfirmStateEnum["ONBOARDING"] = "ONBOARDING";
    LawfirmLeadDomainLawfirmStateEnum["TEMPORARILYTURNEDOFF"] = "TEMPORARILY_TURNED_OFF";
    LawfirmLeadDomainLawfirmStateEnum["TERMINATEDFRAUD"] = "TERMINATED_FRAUD";
    LawfirmLeadDomainLawfirmStateEnum["TERMINATEDPOORSERVICE"] = "TERMINATED_POOR_SERVICE";
    LawfirmLeadDomainLawfirmStateEnum["TERMINATEDPOORSUCCESS"] = "TERMINATED_POOR_SUCCESS";
    LawfirmLeadDomainLawfirmStateEnum["UNDERREVIEW"] = "UNDER_REVIEW";
})(LawfirmLeadDomainLawfirmStateEnum = exports.LawfirmLeadDomainLawfirmStateEnum || (exports.LawfirmLeadDomainLawfirmStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmPayoutDomainTransactionMethodEnum;
(function (LawfirmPayoutDomainTransactionMethodEnum) {
    LawfirmPayoutDomainTransactionMethodEnum["CHECK"] = "CHECK";
    LawfirmPayoutDomainTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    LawfirmPayoutDomainTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    LawfirmPayoutDomainTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    LawfirmPayoutDomainTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    LawfirmPayoutDomainTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    LawfirmPayoutDomainTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    LawfirmPayoutDomainTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    LawfirmPayoutDomainTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    LawfirmPayoutDomainTransactionMethodEnum["VENMO"] = "VENMO";
    LawfirmPayoutDomainTransactionMethodEnum["ZELLE"] = "ZELLE";
})(LawfirmPayoutDomainTransactionMethodEnum = exports.LawfirmPayoutDomainTransactionMethodEnum || (exports.LawfirmPayoutDomainTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmRatesResponseFeeLevelEnum;
(function (LawfirmRatesResponseFeeLevelEnum) {
    LawfirmRatesResponseFeeLevelEnum["ACCOUNTCLASSFEE"] = "ACCOUNT_CLASS_FEE";
    LawfirmRatesResponseFeeLevelEnum["ACCOUNTVIOLATIONFEE"] = "ACCOUNT_VIOLATION_FEE";
    LawfirmRatesResponseFeeLevelEnum["COURTFEE"] = "COURT_FEE";
    LawfirmRatesResponseFeeLevelEnum["COURTVIOLATIONFEE"] = "COURT_VIOLATION_FEE";
})(LawfirmRatesResponseFeeLevelEnum = exports.LawfirmRatesResponseFeeLevelEnum || (exports.LawfirmRatesResponseFeeLevelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmRatesResponseIneligibleMatchReasonsEnum;
(function (LawfirmRatesResponseIneligibleMatchReasonsEnum) {
    LawfirmRatesResponseIneligibleMatchReasonsEnum["DAILYCAPACITYBREACHED"] = "DAILY_CAPACITY_BREACHED";
    LawfirmRatesResponseIneligibleMatchReasonsEnum["ONVACATION"] = "ON_VACATION";
    LawfirmRatesResponseIneligibleMatchReasonsEnum["OUTOFCAPACITY"] = "OUT_OF_CAPACITY";
    LawfirmRatesResponseIneligibleMatchReasonsEnum["OUTPRICED"] = "OUT_PRICED";
    LawfirmRatesResponseIneligibleMatchReasonsEnum["OUTRANKED"] = "OUT_RANKED";
})(LawfirmRatesResponseIneligibleMatchReasonsEnum = exports.LawfirmRatesResponseIneligibleMatchReasonsEnum || (exports.LawfirmRatesResponseIneligibleMatchReasonsEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmRedirectModelLandingPageTypeEnum;
(function (LawfirmRedirectModelLandingPageTypeEnum) {
    LawfirmRedirectModelLandingPageTypeEnum["DEBUG"] = "DEBUG";
    LawfirmRedirectModelLandingPageTypeEnum["SEO"] = "SEO";
    LawfirmRedirectModelLandingPageTypeEnum["VANITY"] = "VANITY";
})(LawfirmRedirectModelLandingPageTypeEnum = exports.LawfirmRedirectModelLandingPageTypeEnum || (exports.LawfirmRedirectModelLandingPageTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmSettingsDomainReqReferralFeeTypeEnum;
(function (LawfirmSettingsDomainReqReferralFeeTypeEnum) {
    LawfirmSettingsDomainReqReferralFeeTypeEnum["FLATFEEINCENTS"] = "FLAT_FEE_IN_CENTS";
    LawfirmSettingsDomainReqReferralFeeTypeEnum["PERCENT"] = "PERCENT";
})(LawfirmSettingsDomainReqReferralFeeTypeEnum = exports.LawfirmSettingsDomainReqReferralFeeTypeEnum || (exports.LawfirmSettingsDomainReqReferralFeeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmSettingsDomainResReferralFeeTypeEnum;
(function (LawfirmSettingsDomainResReferralFeeTypeEnum) {
    LawfirmSettingsDomainResReferralFeeTypeEnum["FLATFEEINCENTS"] = "FLAT_FEE_IN_CENTS";
    LawfirmSettingsDomainResReferralFeeTypeEnum["PERCENT"] = "PERCENT";
})(LawfirmSettingsDomainResReferralFeeTypeEnum = exports.LawfirmSettingsDomainResReferralFeeTypeEnum || (exports.LawfirmSettingsDomainResReferralFeeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawfirmStorefrontModelLawfirmStateEnum;
(function (LawfirmStorefrontModelLawfirmStateEnum) {
    LawfirmStorefrontModelLawfirmStateEnum["ACCOUNTCLOSED"] = "ACCOUNT_CLOSED";
    LawfirmStorefrontModelLawfirmStateEnum["DUPLICATE"] = "DUPLICATE";
    LawfirmStorefrontModelLawfirmStateEnum["ESTABLISHED"] = "ESTABLISHED";
    LawfirmStorefrontModelLawfirmStateEnum["FUTURELEAD"] = "FUTURE_LEAD";
    LawfirmStorefrontModelLawfirmStateEnum["INTRIAL"] = "IN_TRIAL";
    LawfirmStorefrontModelLawfirmStateEnum["LAWFIRMINTERESTED"] = "LAWFIRM_INTERESTED";
    LawfirmStorefrontModelLawfirmStateEnum["LAWFIRMLEAD"] = "LAWFIRM_LEAD";
    LawfirmStorefrontModelLawfirmStateEnum["LAWFIRMNOTINTERESTED"] = "LAWFIRM_NOT_INTERESTED";
    LawfirmStorefrontModelLawfirmStateEnum["NOTINTERESTEDFEESPLITTINGETHICS"] = "NOT_INTERESTED_FEE_SPLITTING_ETHICS";
    LawfirmStorefrontModelLawfirmStateEnum["NOTINTERESTEDREFUNDETHICS"] = "NOT_INTERESTED_REFUND_ETHICS";
    LawfirmStorefrontModelLawfirmStateEnum["ONBOARDING"] = "ONBOARDING";
    LawfirmStorefrontModelLawfirmStateEnum["TEMPORARILYTURNEDOFF"] = "TEMPORARILY_TURNED_OFF";
    LawfirmStorefrontModelLawfirmStateEnum["TERMINATEDFRAUD"] = "TERMINATED_FRAUD";
    LawfirmStorefrontModelLawfirmStateEnum["TERMINATEDPOORSERVICE"] = "TERMINATED_POOR_SERVICE";
    LawfirmStorefrontModelLawfirmStateEnum["TERMINATEDPOORSUCCESS"] = "TERMINATED_POOR_SUCCESS";
    LawfirmStorefrontModelLawfirmStateEnum["UNDERREVIEW"] = "UNDER_REVIEW";
})(LawfirmStorefrontModelLawfirmStateEnum = exports.LawfirmStorefrontModelLawfirmStateEnum || (exports.LawfirmStorefrontModelLawfirmStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawyerLicenseModelLicenseTypeEnum;
(function (LawyerLicenseModelLicenseTypeEnum) {
    LawyerLicenseModelLicenseTypeEnum["BAR"] = "BAR";
})(LawyerLicenseModelLicenseTypeEnum = exports.LawyerLicenseModelLicenseTypeEnum || (exports.LawyerLicenseModelLicenseTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawyerLicenseModelRegionCodeEnum;
(function (LawyerLicenseModelRegionCodeEnum) {
    LawyerLicenseModelRegionCodeEnum["AK"] = "AK";
    LawyerLicenseModelRegionCodeEnum["AL"] = "AL";
    LawyerLicenseModelRegionCodeEnum["AR"] = "AR";
    LawyerLicenseModelRegionCodeEnum["AZ"] = "AZ";
    LawyerLicenseModelRegionCodeEnum["CA"] = "CA";
    LawyerLicenseModelRegionCodeEnum["CO"] = "CO";
    LawyerLicenseModelRegionCodeEnum["CT"] = "CT";
    LawyerLicenseModelRegionCodeEnum["DC"] = "DC";
    LawyerLicenseModelRegionCodeEnum["DE"] = "DE";
    LawyerLicenseModelRegionCodeEnum["FL"] = "FL";
    LawyerLicenseModelRegionCodeEnum["GA"] = "GA";
    LawyerLicenseModelRegionCodeEnum["HI"] = "HI";
    LawyerLicenseModelRegionCodeEnum["IA"] = "IA";
    LawyerLicenseModelRegionCodeEnum["ID"] = "ID";
    LawyerLicenseModelRegionCodeEnum["IL"] = "IL";
    LawyerLicenseModelRegionCodeEnum["IN"] = "IN";
    LawyerLicenseModelRegionCodeEnum["KS"] = "KS";
    LawyerLicenseModelRegionCodeEnum["KY"] = "KY";
    LawyerLicenseModelRegionCodeEnum["LA"] = "LA";
    LawyerLicenseModelRegionCodeEnum["MA"] = "MA";
    LawyerLicenseModelRegionCodeEnum["MD"] = "MD";
    LawyerLicenseModelRegionCodeEnum["ME"] = "ME";
    LawyerLicenseModelRegionCodeEnum["MI"] = "MI";
    LawyerLicenseModelRegionCodeEnum["MN"] = "MN";
    LawyerLicenseModelRegionCodeEnum["MO"] = "MO";
    LawyerLicenseModelRegionCodeEnum["MS"] = "MS";
    LawyerLicenseModelRegionCodeEnum["MT"] = "MT";
    LawyerLicenseModelRegionCodeEnum["NC"] = "NC";
    LawyerLicenseModelRegionCodeEnum["ND"] = "ND";
    LawyerLicenseModelRegionCodeEnum["NE"] = "NE";
    LawyerLicenseModelRegionCodeEnum["NH"] = "NH";
    LawyerLicenseModelRegionCodeEnum["NJ"] = "NJ";
    LawyerLicenseModelRegionCodeEnum["NM"] = "NM";
    LawyerLicenseModelRegionCodeEnum["NV"] = "NV";
    LawyerLicenseModelRegionCodeEnum["NY"] = "NY";
    LawyerLicenseModelRegionCodeEnum["OH"] = "OH";
    LawyerLicenseModelRegionCodeEnum["OK"] = "OK";
    LawyerLicenseModelRegionCodeEnum["OR"] = "OR";
    LawyerLicenseModelRegionCodeEnum["PA"] = "PA";
    LawyerLicenseModelRegionCodeEnum["RI"] = "RI";
    LawyerLicenseModelRegionCodeEnum["SC"] = "SC";
    LawyerLicenseModelRegionCodeEnum["SD"] = "SD";
    LawyerLicenseModelRegionCodeEnum["TN"] = "TN";
    LawyerLicenseModelRegionCodeEnum["TX"] = "TX";
    LawyerLicenseModelRegionCodeEnum["UT"] = "UT";
    LawyerLicenseModelRegionCodeEnum["VA"] = "VA";
    LawyerLicenseModelRegionCodeEnum["VT"] = "VT";
    LawyerLicenseModelRegionCodeEnum["WA"] = "WA";
    LawyerLicenseModelRegionCodeEnum["WI"] = "WI";
    LawyerLicenseModelRegionCodeEnum["WV"] = "WV";
    LawyerLicenseModelRegionCodeEnum["WY"] = "WY";
})(LawyerLicenseModelRegionCodeEnum = exports.LawyerLicenseModelRegionCodeEnum || (exports.LawyerLicenseModelRegionCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LawyerModelJobTitleEnum;
(function (LawyerModelJobTitleEnum) {
    LawyerModelJobTitleEnum["ACCOUNTANT"] = "ACCOUNTANT";
    LawyerModelJobTitleEnum["ATTORNEY"] = "ATTORNEY";
    LawyerModelJobTitleEnum["ATTORNEYASSOCIATE"] = "ATTORNEY_ASSOCIATE";
    LawyerModelJobTitleEnum["ATTORNEYCOUNSEL"] = "ATTORNEY_COUNSEL";
    LawyerModelJobTitleEnum["ATTORNEYMANAGINGPARTNER"] = "ATTORNEY_MANAGING_PARTNER";
    LawyerModelJobTitleEnum["ATTORNEYPARTNER"] = "ATTORNEY_PARTNER";
    LawyerModelJobTitleEnum["ATTORNEYSTAFF"] = "ATTORNEY_STAFF";
    LawyerModelJobTitleEnum["CUSTOMERSERVICEREP"] = "CUSTOMER_SERVICE_REP";
    LawyerModelJobTitleEnum["LEGALASSISTANT"] = "LEGAL_ASSISTANT";
    LawyerModelJobTitleEnum["LEGALINTERN"] = "LEGAL_INTERN";
    LawyerModelJobTitleEnum["LEGALSECRETARY"] = "LEGAL_SECRETARY";
    LawyerModelJobTitleEnum["OTHER"] = "OTHER";
    LawyerModelJobTitleEnum["PARALEGAL"] = "PARALEGAL";
})(LawyerModelJobTitleEnum = exports.LawyerModelJobTitleEnum || (exports.LawyerModelJobTitleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LineItemLineItemEnum;
(function (LineItemLineItemEnum) {
    LineItemLineItemEnum["ACCIDENTFEE"] = "ACCIDENT_FEE";
    LineItemLineItemEnum["BASELEGALFEE"] = "BASE_LEGAL_FEE";
    LineItemLineItemEnum["BONDFEE"] = "BOND_FEE";
    LineItemLineItemEnum["BOOKINGFEE"] = "BOOKING_FEE";
    LineItemLineItemEnum["CDLFEE"] = "CDL_FEE";
    LineItemLineItemEnum["DISPUTEFEE"] = "DISPUTE_FEE";
    LineItemLineItemEnum["FINEPAYMENT"] = "FINE_PAYMENT";
    LineItemLineItemEnum["FTAFEE"] = "FTA_FEE";
    LineItemLineItemEnum["LATEFEE"] = "LATE_FEE";
    LineItemLineItemEnum["MBGREFUND"] = "MBG_REFUND";
    LineItemLineItemEnum["MVSFEE"] = "MVS_FEE";
    LineItemLineItemEnum["OTHER"] = "OTHER";
    LineItemLineItemEnum["OTRCREDIT"] = "OTR_CREDIT";
    LineItemLineItemEnum["PAYMENTPLANSERVICEFEE"] = "PAYMENT_PLAN_SERVICE_FEE";
    LineItemLineItemEnum["WARRANTFEE"] = "WARRANT_FEE";
})(LineItemLineItemEnum = exports.LineItemLineItemEnum || (exports.LineItemLineItemEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LineItemModelLineItemOwnerEnum;
(function (LineItemModelLineItemOwnerEnum) {
    LineItemModelLineItemOwnerEnum["LAWFIRM"] = "LAWFIRM";
    LineItemModelLineItemOwnerEnum["OTR"] = "OTR";
})(LineItemModelLineItemOwnerEnum = exports.LineItemModelLineItemOwnerEnum || (exports.LineItemModelLineItemOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LineItemModelLineItemTypeEnum;
(function (LineItemModelLineItemTypeEnum) {
    LineItemModelLineItemTypeEnum["ACCIDENTFEE"] = "ACCIDENT_FEE";
    LineItemModelLineItemTypeEnum["BASELEGALFEE"] = "BASE_LEGAL_FEE";
    LineItemModelLineItemTypeEnum["BONDFEE"] = "BOND_FEE";
    LineItemModelLineItemTypeEnum["BOOKINGFEE"] = "BOOKING_FEE";
    LineItemModelLineItemTypeEnum["CDLFEE"] = "CDL_FEE";
    LineItemModelLineItemTypeEnum["DISPUTEFEE"] = "DISPUTE_FEE";
    LineItemModelLineItemTypeEnum["FINEPAYMENT"] = "FINE_PAYMENT";
    LineItemModelLineItemTypeEnum["FTAFEE"] = "FTA_FEE";
    LineItemModelLineItemTypeEnum["LATEFEE"] = "LATE_FEE";
    LineItemModelLineItemTypeEnum["MBGREFUND"] = "MBG_REFUND";
    LineItemModelLineItemTypeEnum["MVSFEE"] = "MVS_FEE";
    LineItemModelLineItemTypeEnum["OTHER"] = "OTHER";
    LineItemModelLineItemTypeEnum["OTRCREDIT"] = "OTR_CREDIT";
    LineItemModelLineItemTypeEnum["PAYMENTPLANSERVICEFEE"] = "PAYMENT_PLAN_SERVICE_FEE";
    LineItemModelLineItemTypeEnum["WARRANTFEE"] = "WARRANT_FEE";
})(LineItemModelLineItemTypeEnum = exports.LineItemModelLineItemTypeEnum || (exports.LineItemModelLineItemTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LineItemRequestLineItemOwnerEnum;
(function (LineItemRequestLineItemOwnerEnum) {
    LineItemRequestLineItemOwnerEnum["LAWFIRM"] = "LAWFIRM";
    LineItemRequestLineItemOwnerEnum["OTR"] = "OTR";
})(LineItemRequestLineItemOwnerEnum = exports.LineItemRequestLineItemOwnerEnum || (exports.LineItemRequestLineItemOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LineItemRequestLineItemTypeEnum;
(function (LineItemRequestLineItemTypeEnum) {
    LineItemRequestLineItemTypeEnum["ACCIDENTFEE"] = "ACCIDENT_FEE";
    LineItemRequestLineItemTypeEnum["BASELEGALFEE"] = "BASE_LEGAL_FEE";
    LineItemRequestLineItemTypeEnum["BONDFEE"] = "BOND_FEE";
    LineItemRequestLineItemTypeEnum["BOOKINGFEE"] = "BOOKING_FEE";
    LineItemRequestLineItemTypeEnum["CDLFEE"] = "CDL_FEE";
    LineItemRequestLineItemTypeEnum["DISPUTEFEE"] = "DISPUTE_FEE";
    LineItemRequestLineItemTypeEnum["FINEPAYMENT"] = "FINE_PAYMENT";
    LineItemRequestLineItemTypeEnum["FTAFEE"] = "FTA_FEE";
    LineItemRequestLineItemTypeEnum["LATEFEE"] = "LATE_FEE";
    LineItemRequestLineItemTypeEnum["MBGREFUND"] = "MBG_REFUND";
    LineItemRequestLineItemTypeEnum["MVSFEE"] = "MVS_FEE";
    LineItemRequestLineItemTypeEnum["OTHER"] = "OTHER";
    LineItemRequestLineItemTypeEnum["OTRCREDIT"] = "OTR_CREDIT";
    LineItemRequestLineItemTypeEnum["PAYMENTPLANSERVICEFEE"] = "PAYMENT_PLAN_SERVICE_FEE";
    LineItemRequestLineItemTypeEnum["WARRANTFEE"] = "WARRANT_FEE";
})(LineItemRequestLineItemTypeEnum = exports.LineItemRequestLineItemTypeEnum || (exports.LineItemRequestLineItemTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListEligibleStatusResponseStatusesEnum;
(function (ListEligibleStatusResponseStatusesEnum) {
    ListEligibleStatusResponseStatusesEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    ListEligibleStatusResponseStatusesEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    ListEligibleStatusResponseStatusesEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    ListEligibleStatusResponseStatusesEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    ListEligibleStatusResponseStatusesEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    ListEligibleStatusResponseStatusesEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    ListEligibleStatusResponseStatusesEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    ListEligibleStatusResponseStatusesEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    ListEligibleStatusResponseStatusesEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    ListEligibleStatusResponseStatusesEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    ListEligibleStatusResponseStatusesEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    ListEligibleStatusResponseStatusesEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    ListEligibleStatusResponseStatusesEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    ListEligibleStatusResponseStatusesEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    ListEligibleStatusResponseStatusesEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    ListEligibleStatusResponseStatusesEnum["DEFERRED"] = "DEFERRED";
    ListEligibleStatusResponseStatusesEnum["DISMISSED"] = "DISMISSED";
    ListEligibleStatusResponseStatusesEnum["DIVERSION"] = "DIVERSION";
    ListEligibleStatusResponseStatusesEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    ListEligibleStatusResponseStatusesEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    ListEligibleStatusResponseStatusesEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    ListEligibleStatusResponseStatusesEnum["LOST"] = "LOST";
    ListEligibleStatusResponseStatusesEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    ListEligibleStatusResponseStatusesEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    ListEligibleStatusResponseStatusesEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    ListEligibleStatusResponseStatusesEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    ListEligibleStatusResponseStatusesEnum["STALE"] = "STALE";
    ListEligibleStatusResponseStatusesEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    ListEligibleStatusResponseStatusesEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(ListEligibleStatusResponseStatusesEnum = exports.ListEligibleStatusResponseStatusesEnum || (exports.ListEligibleStatusResponseStatusesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListLawfirmSurchargeModelFeatureEnum;
(function (ListLawfirmSurchargeModelFeatureEnum) {
    ListLawfirmSurchargeModelFeatureEnum["BLACKBOX"] = "BLACK_BOX";
    ListLawfirmSurchargeModelFeatureEnum["STATEPAGE"] = "STATE_PAGE";
    ListLawfirmSurchargeModelFeatureEnum["STOREFRONT"] = "STOREFRONT";
})(ListLawfirmSurchargeModelFeatureEnum = exports.ListLawfirmSurchargeModelFeatureEnum || (exports.ListLawfirmSurchargeModelFeatureEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListLawfirmSurchargeModelFeeTypeEnum;
(function (ListLawfirmSurchargeModelFeeTypeEnum) {
    ListLawfirmSurchargeModelFeeTypeEnum["FLATFEEINCENTS"] = "FLAT_FEE_IN_CENTS";
    ListLawfirmSurchargeModelFeeTypeEnum["FORMULA"] = "FORMULA";
    ListLawfirmSurchargeModelFeeTypeEnum["PERCENT"] = "PERCENT";
})(ListLawfirmSurchargeModelFeeTypeEnum = exports.ListLawfirmSurchargeModelFeeTypeEnum || (exports.ListLawfirmSurchargeModelFeeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListLawfirmSurchargeModelRefundEligibilityEnum;
(function (ListLawfirmSurchargeModelRefundEligibilityEnum) {
    ListLawfirmSurchargeModelRefundEligibilityEnum["DEFAULT"] = "DEFAULT";
    ListLawfirmSurchargeModelRefundEligibilityEnum["NONREFUNDABLE"] = "NON_REFUNDABLE";
    ListLawfirmSurchargeModelRefundEligibilityEnum["SURCHARGEONLY"] = "SURCHARGE_ONLY";
})(ListLawfirmSurchargeModelRefundEligibilityEnum = exports.ListLawfirmSurchargeModelRefundEligibilityEnum || (exports.ListLawfirmSurchargeModelRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ListLawfirmSurchargeTypeModelTypeEnum;
(function (ListLawfirmSurchargeTypeModelTypeEnum) {
    ListLawfirmSurchargeTypeModelTypeEnum["CDL"] = "CDL";
    ListLawfirmSurchargeTypeModelTypeEnum["FAILURETOAPPEAR"] = "FAILURE_TO_APPEAR";
    ListLawfirmSurchargeTypeModelTypeEnum["LATE"] = "LATE";
    ListLawfirmSurchargeTypeModelTypeEnum["MULTIPLEVIOLATIONS"] = "MULTIPLE_VIOLATIONS";
    ListLawfirmSurchargeTypeModelTypeEnum["OUTOFSTATE"] = "OUT_OF_STATE";
    ListLawfirmSurchargeTypeModelTypeEnum["SHORTNOTICE"] = "SHORT_NOTICE";
    ListLawfirmSurchargeTypeModelTypeEnum["WARRANT"] = "WARRANT";
})(ListLawfirmSurchargeTypeModelTypeEnum = exports.ListLawfirmSurchargeTypeModelTypeEnum || (exports.ListLawfirmSurchargeTypeModelTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var LostCaseWithTransferNotReversedRefundOwnerEnum;
(function (LostCaseWithTransferNotReversedRefundOwnerEnum) {
    LostCaseWithTransferNotReversedRefundOwnerEnum["LAWFIRM"] = "LAWFIRM";
    LostCaseWithTransferNotReversedRefundOwnerEnum["NONE"] = "NONE";
    LostCaseWithTransferNotReversedRefundOwnerEnum["OTR"] = "OTR";
})(LostCaseWithTransferNotReversedRefundOwnerEnum = exports.LostCaseWithTransferNotReversedRefundOwnerEnum || (exports.LostCaseWithTransferNotReversedRefundOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MarkCaseAsResolvedRequestResolutionStatusEnum;
(function (MarkCaseAsResolvedRequestResolutionStatusEnum) {
    MarkCaseAsResolvedRequestResolutionStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    MarkCaseAsResolvedRequestResolutionStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    MarkCaseAsResolvedRequestResolutionStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["DEFERRED"] = "DEFERRED";
    MarkCaseAsResolvedRequestResolutionStatusEnum["DISMISSED"] = "DISMISSED";
    MarkCaseAsResolvedRequestResolutionStatusEnum["DIVERSION"] = "DIVERSION";
    MarkCaseAsResolvedRequestResolutionStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    MarkCaseAsResolvedRequestResolutionStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    MarkCaseAsResolvedRequestResolutionStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    MarkCaseAsResolvedRequestResolutionStatusEnum["LOST"] = "LOST";
    MarkCaseAsResolvedRequestResolutionStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    MarkCaseAsResolvedRequestResolutionStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    MarkCaseAsResolvedRequestResolutionStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    MarkCaseAsResolvedRequestResolutionStatusEnum["STALE"] = "STALE";
    MarkCaseAsResolvedRequestResolutionStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    MarkCaseAsResolvedRequestResolutionStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(MarkCaseAsResolvedRequestResolutionStatusEnum = exports.MarkCaseAsResolvedRequestResolutionStatusEnum || (exports.MarkCaseAsResolvedRequestResolutionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MarkCaseAsResolvedResponseCaseStatusEnum;
(function (MarkCaseAsResolvedResponseCaseStatusEnum) {
    MarkCaseAsResolvedResponseCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    MarkCaseAsResolvedResponseCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    MarkCaseAsResolvedResponseCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    MarkCaseAsResolvedResponseCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    MarkCaseAsResolvedResponseCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    MarkCaseAsResolvedResponseCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    MarkCaseAsResolvedResponseCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    MarkCaseAsResolvedResponseCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    MarkCaseAsResolvedResponseCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    MarkCaseAsResolvedResponseCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    MarkCaseAsResolvedResponseCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    MarkCaseAsResolvedResponseCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    MarkCaseAsResolvedResponseCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    MarkCaseAsResolvedResponseCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    MarkCaseAsResolvedResponseCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    MarkCaseAsResolvedResponseCaseStatusEnum["DEFERRED"] = "DEFERRED";
    MarkCaseAsResolvedResponseCaseStatusEnum["DISMISSED"] = "DISMISSED";
    MarkCaseAsResolvedResponseCaseStatusEnum["DIVERSION"] = "DIVERSION";
    MarkCaseAsResolvedResponseCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    MarkCaseAsResolvedResponseCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    MarkCaseAsResolvedResponseCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    MarkCaseAsResolvedResponseCaseStatusEnum["LOST"] = "LOST";
    MarkCaseAsResolvedResponseCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    MarkCaseAsResolvedResponseCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    MarkCaseAsResolvedResponseCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    MarkCaseAsResolvedResponseCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    MarkCaseAsResolvedResponseCaseStatusEnum["STALE"] = "STALE";
    MarkCaseAsResolvedResponseCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    MarkCaseAsResolvedResponseCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(MarkCaseAsResolvedResponseCaseStatusEnum = exports.MarkCaseAsResolvedResponseCaseStatusEnum || (exports.MarkCaseAsResolvedResponseCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MarkCaseAsResolvedResponseStatusCategoryEnum;
(function (MarkCaseAsResolvedResponseStatusCategoryEnum) {
    MarkCaseAsResolvedResponseStatusCategoryEnum["ACTIVE"] = "ACTIVE";
    MarkCaseAsResolvedResponseStatusCategoryEnum["CANCELLED"] = "CANCELLED";
    MarkCaseAsResolvedResponseStatusCategoryEnum["RESOLVED"] = "RESOLVED";
    MarkCaseAsResolvedResponseStatusCategoryEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(MarkCaseAsResolvedResponseStatusCategoryEnum = exports.MarkCaseAsResolvedResponseStatusCategoryEnum || (exports.MarkCaseAsResolvedResponseStatusCategoryEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MatchInnerCaseResponseReferralCodeOwnerEnum;
(function (MatchInnerCaseResponseReferralCodeOwnerEnum) {
    MatchInnerCaseResponseReferralCodeOwnerEnum["LAWFIRM"] = "LAWFIRM";
    MatchInnerCaseResponseReferralCodeOwnerEnum["OTR"] = "OTR";
})(MatchInnerCaseResponseReferralCodeOwnerEnum = exports.MatchInnerCaseResponseReferralCodeOwnerEnum || (exports.MatchInnerCaseResponseReferralCodeOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MatchInnerCaseResponseRefundEligibilityEnum;
(function (MatchInnerCaseResponseRefundEligibilityEnum) {
    MatchInnerCaseResponseRefundEligibilityEnum["FULLREFUND"] = "FULL_REFUND";
    MatchInnerCaseResponseRefundEligibilityEnum["NOREFUND"] = "NO_REFUND";
    MatchInnerCaseResponseRefundEligibilityEnum["PARTIALREFUND"] = "PARTIAL_REFUND";
})(MatchInnerCaseResponseRefundEligibilityEnum = exports.MatchInnerCaseResponseRefundEligibilityEnum || (exports.MatchInnerCaseResponseRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MessageInputModelAuthorEnum;
(function (MessageInputModelAuthorEnum) {
    MessageInputModelAuthorEnum["ADMIN"] = "ADMIN";
    MessageInputModelAuthorEnum["DEFENDANT"] = "DEFENDANT";
    MessageInputModelAuthorEnum["LAWYER"] = "LAWYER";
    MessageInputModelAuthorEnum["PARTNER"] = "PARTNER";
    MessageInputModelAuthorEnum["UNKNOWN"] = "UNKNOWN";
})(MessageInputModelAuthorEnum = exports.MessageInputModelAuthorEnum || (exports.MessageInputModelAuthorEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MessageInputModelMediaTypeEnum;
(function (MessageInputModelMediaTypeEnum) {
    MessageInputModelMediaTypeEnum["IMAGE"] = "IMAGE";
    MessageInputModelMediaTypeEnum["PDF"] = "PDF";
})(MessageInputModelMediaTypeEnum = exports.MessageInputModelMediaTypeEnum || (exports.MessageInputModelMediaTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MissingLawfirmPayoutResultCaseStatusEnum;
(function (MissingLawfirmPayoutResultCaseStatusEnum) {
    MissingLawfirmPayoutResultCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    MissingLawfirmPayoutResultCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    MissingLawfirmPayoutResultCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    MissingLawfirmPayoutResultCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    MissingLawfirmPayoutResultCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    MissingLawfirmPayoutResultCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    MissingLawfirmPayoutResultCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    MissingLawfirmPayoutResultCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    MissingLawfirmPayoutResultCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    MissingLawfirmPayoutResultCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    MissingLawfirmPayoutResultCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    MissingLawfirmPayoutResultCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    MissingLawfirmPayoutResultCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    MissingLawfirmPayoutResultCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    MissingLawfirmPayoutResultCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    MissingLawfirmPayoutResultCaseStatusEnum["DEFERRED"] = "DEFERRED";
    MissingLawfirmPayoutResultCaseStatusEnum["DISMISSED"] = "DISMISSED";
    MissingLawfirmPayoutResultCaseStatusEnum["DIVERSION"] = "DIVERSION";
    MissingLawfirmPayoutResultCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    MissingLawfirmPayoutResultCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    MissingLawfirmPayoutResultCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    MissingLawfirmPayoutResultCaseStatusEnum["LOST"] = "LOST";
    MissingLawfirmPayoutResultCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    MissingLawfirmPayoutResultCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    MissingLawfirmPayoutResultCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    MissingLawfirmPayoutResultCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    MissingLawfirmPayoutResultCaseStatusEnum["STALE"] = "STALE";
    MissingLawfirmPayoutResultCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    MissingLawfirmPayoutResultCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(MissingLawfirmPayoutResultCaseStatusEnum = exports.MissingLawfirmPayoutResultCaseStatusEnum || (exports.MissingLawfirmPayoutResultCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MissingLawfirmPayoutResultStateEnum;
(function (MissingLawfirmPayoutResultStateEnum) {
    MissingLawfirmPayoutResultStateEnum["AK"] = "AK";
    MissingLawfirmPayoutResultStateEnum["AL"] = "AL";
    MissingLawfirmPayoutResultStateEnum["AR"] = "AR";
    MissingLawfirmPayoutResultStateEnum["AZ"] = "AZ";
    MissingLawfirmPayoutResultStateEnum["CA"] = "CA";
    MissingLawfirmPayoutResultStateEnum["CO"] = "CO";
    MissingLawfirmPayoutResultStateEnum["CT"] = "CT";
    MissingLawfirmPayoutResultStateEnum["DC"] = "DC";
    MissingLawfirmPayoutResultStateEnum["DE"] = "DE";
    MissingLawfirmPayoutResultStateEnum["FL"] = "FL";
    MissingLawfirmPayoutResultStateEnum["GA"] = "GA";
    MissingLawfirmPayoutResultStateEnum["HI"] = "HI";
    MissingLawfirmPayoutResultStateEnum["IA"] = "IA";
    MissingLawfirmPayoutResultStateEnum["ID"] = "ID";
    MissingLawfirmPayoutResultStateEnum["IL"] = "IL";
    MissingLawfirmPayoutResultStateEnum["IN"] = "IN";
    MissingLawfirmPayoutResultStateEnum["KS"] = "KS";
    MissingLawfirmPayoutResultStateEnum["KY"] = "KY";
    MissingLawfirmPayoutResultStateEnum["LA"] = "LA";
    MissingLawfirmPayoutResultStateEnum["MA"] = "MA";
    MissingLawfirmPayoutResultStateEnum["MD"] = "MD";
    MissingLawfirmPayoutResultStateEnum["ME"] = "ME";
    MissingLawfirmPayoutResultStateEnum["MI"] = "MI";
    MissingLawfirmPayoutResultStateEnum["MN"] = "MN";
    MissingLawfirmPayoutResultStateEnum["MO"] = "MO";
    MissingLawfirmPayoutResultStateEnum["MS"] = "MS";
    MissingLawfirmPayoutResultStateEnum["MT"] = "MT";
    MissingLawfirmPayoutResultStateEnum["NC"] = "NC";
    MissingLawfirmPayoutResultStateEnum["ND"] = "ND";
    MissingLawfirmPayoutResultStateEnum["NE"] = "NE";
    MissingLawfirmPayoutResultStateEnum["NH"] = "NH";
    MissingLawfirmPayoutResultStateEnum["NJ"] = "NJ";
    MissingLawfirmPayoutResultStateEnum["NM"] = "NM";
    MissingLawfirmPayoutResultStateEnum["NV"] = "NV";
    MissingLawfirmPayoutResultStateEnum["NY"] = "NY";
    MissingLawfirmPayoutResultStateEnum["OH"] = "OH";
    MissingLawfirmPayoutResultStateEnum["OK"] = "OK";
    MissingLawfirmPayoutResultStateEnum["OR"] = "OR";
    MissingLawfirmPayoutResultStateEnum["PA"] = "PA";
    MissingLawfirmPayoutResultStateEnum["RI"] = "RI";
    MissingLawfirmPayoutResultStateEnum["SC"] = "SC";
    MissingLawfirmPayoutResultStateEnum["SD"] = "SD";
    MissingLawfirmPayoutResultStateEnum["TN"] = "TN";
    MissingLawfirmPayoutResultStateEnum["TX"] = "TX";
    MissingLawfirmPayoutResultStateEnum["UT"] = "UT";
    MissingLawfirmPayoutResultStateEnum["VA"] = "VA";
    MissingLawfirmPayoutResultStateEnum["VT"] = "VT";
    MissingLawfirmPayoutResultStateEnum["WA"] = "WA";
    MissingLawfirmPayoutResultStateEnum["WI"] = "WI";
    MissingLawfirmPayoutResultStateEnum["WV"] = "WV";
    MissingLawfirmPayoutResultStateEnum["WY"] = "WY";
})(MissingLawfirmPayoutResultStateEnum = exports.MissingLawfirmPayoutResultStateEnum || (exports.MissingLawfirmPayoutResultStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MissingPaymentDomainCaseStatusEnum;
(function (MissingPaymentDomainCaseStatusEnum) {
    MissingPaymentDomainCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    MissingPaymentDomainCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    MissingPaymentDomainCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    MissingPaymentDomainCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    MissingPaymentDomainCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    MissingPaymentDomainCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    MissingPaymentDomainCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    MissingPaymentDomainCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    MissingPaymentDomainCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    MissingPaymentDomainCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    MissingPaymentDomainCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    MissingPaymentDomainCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    MissingPaymentDomainCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    MissingPaymentDomainCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    MissingPaymentDomainCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    MissingPaymentDomainCaseStatusEnum["DEFERRED"] = "DEFERRED";
    MissingPaymentDomainCaseStatusEnum["DISMISSED"] = "DISMISSED";
    MissingPaymentDomainCaseStatusEnum["DIVERSION"] = "DIVERSION";
    MissingPaymentDomainCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    MissingPaymentDomainCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    MissingPaymentDomainCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    MissingPaymentDomainCaseStatusEnum["LOST"] = "LOST";
    MissingPaymentDomainCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    MissingPaymentDomainCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    MissingPaymentDomainCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    MissingPaymentDomainCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    MissingPaymentDomainCaseStatusEnum["STALE"] = "STALE";
    MissingPaymentDomainCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    MissingPaymentDomainCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(MissingPaymentDomainCaseStatusEnum = exports.MissingPaymentDomainCaseStatusEnum || (exports.MissingPaymentDomainCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NewUserLoginProviderEnum;
(function (NewUserLoginProviderEnum) {
    NewUserLoginProviderEnum["APPLE"] = "APPLE";
    NewUserLoginProviderEnum["EMAIL"] = "EMAIL";
    NewUserLoginProviderEnum["FACEBOOK"] = "FACEBOOK";
    NewUserLoginProviderEnum["GOOGLE"] = "GOOGLE";
    NewUserLoginProviderEnum["PHONE"] = "PHONE";
    NewUserLoginProviderEnum["TWITTER"] = "TWITTER";
})(NewUserLoginProviderEnum = exports.NewUserLoginProviderEnum || (exports.NewUserLoginProviderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NoViolationCitationCaseStatusEnum;
(function (NoViolationCitationCaseStatusEnum) {
    NoViolationCitationCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    NoViolationCitationCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    NoViolationCitationCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    NoViolationCitationCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    NoViolationCitationCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    NoViolationCitationCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    NoViolationCitationCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    NoViolationCitationCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    NoViolationCitationCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    NoViolationCitationCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    NoViolationCitationCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    NoViolationCitationCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    NoViolationCitationCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    NoViolationCitationCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    NoViolationCitationCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    NoViolationCitationCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    NoViolationCitationCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    NoViolationCitationCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    NoViolationCitationCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    NoViolationCitationCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    NoViolationCitationCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    NoViolationCitationCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    NoViolationCitationCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    NoViolationCitationCaseStatusEnum["DEFERRED"] = "DEFERRED";
    NoViolationCitationCaseStatusEnum["DISMISSED"] = "DISMISSED";
    NoViolationCitationCaseStatusEnum["DIVERSION"] = "DIVERSION";
    NoViolationCitationCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    NoViolationCitationCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    NoViolationCitationCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    NoViolationCitationCaseStatusEnum["LOST"] = "LOST";
    NoViolationCitationCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    NoViolationCitationCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    NoViolationCitationCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    NoViolationCitationCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    NoViolationCitationCaseStatusEnum["STALE"] = "STALE";
    NoViolationCitationCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    NoViolationCitationCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(NoViolationCitationCaseStatusEnum = exports.NoViolationCitationCaseStatusEnum || (exports.NoViolationCitationCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var NoteDomainNoteTypeEnum;
(function (NoteDomainNoteTypeEnum) {
    NoteDomainNoteTypeEnum["PHONELEAD"] = "PHONE_LEAD";
})(NoteDomainNoteTypeEnum = exports.NoteDomainNoteTypeEnum || (exports.NoteDomainNoteTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PenaltyPenaltyTypeEnum;
(function (PenaltyPenaltyTypeEnum) {
    PenaltyPenaltyTypeEnum["DEMERITPOINTS"] = "DEMERIT_POINTS";
    PenaltyPenaltyTypeEnum["INCARCERATIONMAXDAYS"] = "INCARCERATION_MAX_DAYS";
    PenaltyPenaltyTypeEnum["INCARCERATIONMINDAYS"] = "INCARCERATION_MIN_DAYS";
    PenaltyPenaltyTypeEnum["INSURANCEPOINTS"] = "INSURANCE_POINTS";
    PenaltyPenaltyTypeEnum["INSURANCERATEINCREASE"] = "INSURANCE_RATE_INCREASE";
    PenaltyPenaltyTypeEnum["LICENSEREVOCATIONMAXDAYS"] = "LICENSE_REVOCATION_MAX_DAYS";
    PenaltyPenaltyTypeEnum["LICENSEREVOCATIONMINDAYS"] = "LICENSE_REVOCATION_MIN_DAYS";
    PenaltyPenaltyTypeEnum["LICENSESUSPENSIONMAXDAYS"] = "LICENSE_SUSPENSION_MAX_DAYS";
    PenaltyPenaltyTypeEnum["LICENSESUSPENSIONMINDAYS"] = "LICENSE_SUSPENSION_MIN_DAYS";
    PenaltyPenaltyTypeEnum["MANDATORYCOURTAPPEARANCE"] = "MANDATORY_COURT_APPEARANCE";
    PenaltyPenaltyTypeEnum["MANDATORYCOURTAPPEARANCEWITHATTORNEY"] = "MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY";
    PenaltyPenaltyTypeEnum["MAXBAILAMOUNT"] = "MAX_BAIL_AMOUNT";
    PenaltyPenaltyTypeEnum["MINBAILAMOUNT"] = "MIN_BAIL_AMOUNT";
    PenaltyPenaltyTypeEnum["PROBATIONINDAYS"] = "PROBATION_IN_DAYS";
    PenaltyPenaltyTypeEnum["TOTALBAILAMOUNT"] = "TOTAL_BAIL_AMOUNT";
})(PenaltyPenaltyTypeEnum = exports.PenaltyPenaltyTypeEnum || (exports.PenaltyPenaltyTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PenaltyModelPenaltyTypeEnum;
(function (PenaltyModelPenaltyTypeEnum) {
    PenaltyModelPenaltyTypeEnum["DEMERITPOINTS"] = "DEMERIT_POINTS";
    PenaltyModelPenaltyTypeEnum["INCARCERATIONMAXDAYS"] = "INCARCERATION_MAX_DAYS";
    PenaltyModelPenaltyTypeEnum["INCARCERATIONMINDAYS"] = "INCARCERATION_MIN_DAYS";
    PenaltyModelPenaltyTypeEnum["INSURANCEPOINTS"] = "INSURANCE_POINTS";
    PenaltyModelPenaltyTypeEnum["INSURANCERATEINCREASE"] = "INSURANCE_RATE_INCREASE";
    PenaltyModelPenaltyTypeEnum["LICENSEREVOCATIONMAXDAYS"] = "LICENSE_REVOCATION_MAX_DAYS";
    PenaltyModelPenaltyTypeEnum["LICENSEREVOCATIONMINDAYS"] = "LICENSE_REVOCATION_MIN_DAYS";
    PenaltyModelPenaltyTypeEnum["LICENSESUSPENSIONMAXDAYS"] = "LICENSE_SUSPENSION_MAX_DAYS";
    PenaltyModelPenaltyTypeEnum["LICENSESUSPENSIONMINDAYS"] = "LICENSE_SUSPENSION_MIN_DAYS";
    PenaltyModelPenaltyTypeEnum["MANDATORYCOURTAPPEARANCE"] = "MANDATORY_COURT_APPEARANCE";
    PenaltyModelPenaltyTypeEnum["MANDATORYCOURTAPPEARANCEWITHATTORNEY"] = "MANDATORY_COURT_APPEARANCE_WITH_ATTORNEY";
    PenaltyModelPenaltyTypeEnum["MAXBAILAMOUNT"] = "MAX_BAIL_AMOUNT";
    PenaltyModelPenaltyTypeEnum["MINBAILAMOUNT"] = "MIN_BAIL_AMOUNT";
    PenaltyModelPenaltyTypeEnum["PROBATIONINDAYS"] = "PROBATION_IN_DAYS";
    PenaltyModelPenaltyTypeEnum["TOTALBAILAMOUNT"] = "TOTAL_BAIL_AMOUNT";
})(PenaltyModelPenaltyTypeEnum = exports.PenaltyModelPenaltyTypeEnum || (exports.PenaltyModelPenaltyTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PersistTicketEvaluationRequestSourceEnum;
(function (PersistTicketEvaluationRequestSourceEnum) {
    PersistTicketEvaluationRequestSourceEnum["OTREXITPOPUP"] = "OTR_EXIT_POPUP";
    PersistTicketEvaluationRequestSourceEnum["QUARANTINELANDINGPAGE"] = "QUARANTINE_LANDING_PAGE";
    PersistTicketEvaluationRequestSourceEnum["TICKETREVIEWPAGE"] = "TICKET_REVIEW_PAGE";
})(PersistTicketEvaluationRequestSourceEnum = exports.PersistTicketEvaluationRequestSourceEnum || (exports.PersistTicketEvaluationRequestSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PhoneNumberDomainEntityTypeEnum;
(function (PhoneNumberDomainEntityTypeEnum) {
    PhoneNumberDomainEntityTypeEnum["CASE"] = "CASE";
    PhoneNumberDomainEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    PhoneNumberDomainEntityTypeEnum["CITATION"] = "CITATION";
    PhoneNumberDomainEntityTypeEnum["COURT"] = "COURT";
    PhoneNumberDomainEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    PhoneNumberDomainEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    PhoneNumberDomainEntityTypeEnum["LAWYER"] = "LAWYER";
    PhoneNumberDomainEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    PhoneNumberDomainEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    PhoneNumberDomainEntityTypeEnum["USER"] = "USER";
})(PhoneNumberDomainEntityTypeEnum = exports.PhoneNumberDomainEntityTypeEnum || (exports.PhoneNumberDomainEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PhoneNumberDomainTypeEnum;
(function (PhoneNumberDomainTypeEnum) {
    PhoneNumberDomainTypeEnum["HOME"] = "HOME";
    PhoneNumberDomainTypeEnum["MOBILE"] = "MOBILE";
    PhoneNumberDomainTypeEnum["NOTSPECIFIED"] = "NOT_SPECIFIED";
    PhoneNumberDomainTypeEnum["OFFICE"] = "OFFICE";
})(PhoneNumberDomainTypeEnum = exports.PhoneNumberDomainTypeEnum || (exports.PhoneNumberDomainTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PhoneNumberDomainReqEntityTypeEnum;
(function (PhoneNumberDomainReqEntityTypeEnum) {
    PhoneNumberDomainReqEntityTypeEnum["CASE"] = "CASE";
    PhoneNumberDomainReqEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    PhoneNumberDomainReqEntityTypeEnum["CITATION"] = "CITATION";
    PhoneNumberDomainReqEntityTypeEnum["COURT"] = "COURT";
    PhoneNumberDomainReqEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    PhoneNumberDomainReqEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    PhoneNumberDomainReqEntityTypeEnum["LAWYER"] = "LAWYER";
    PhoneNumberDomainReqEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    PhoneNumberDomainReqEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    PhoneNumberDomainReqEntityTypeEnum["USER"] = "USER";
})(PhoneNumberDomainReqEntityTypeEnum = exports.PhoneNumberDomainReqEntityTypeEnum || (exports.PhoneNumberDomainReqEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PhoneNumberDomainReqTypeEnum;
(function (PhoneNumberDomainReqTypeEnum) {
    PhoneNumberDomainReqTypeEnum["HOME"] = "HOME";
    PhoneNumberDomainReqTypeEnum["MOBILE"] = "MOBILE";
    PhoneNumberDomainReqTypeEnum["NOTSPECIFIED"] = "NOT_SPECIFIED";
    PhoneNumberDomainReqTypeEnum["OFFICE"] = "OFFICE";
})(PhoneNumberDomainReqTypeEnum = exports.PhoneNumberDomainReqTypeEnum || (exports.PhoneNumberDomainReqTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PhoneNumberDomainResEntityTypeEnum;
(function (PhoneNumberDomainResEntityTypeEnum) {
    PhoneNumberDomainResEntityTypeEnum["CASE"] = "CASE";
    PhoneNumberDomainResEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    PhoneNumberDomainResEntityTypeEnum["CITATION"] = "CITATION";
    PhoneNumberDomainResEntityTypeEnum["COURT"] = "COURT";
    PhoneNumberDomainResEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    PhoneNumberDomainResEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    PhoneNumberDomainResEntityTypeEnum["LAWYER"] = "LAWYER";
    PhoneNumberDomainResEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    PhoneNumberDomainResEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    PhoneNumberDomainResEntityTypeEnum["USER"] = "USER";
})(PhoneNumberDomainResEntityTypeEnum = exports.PhoneNumberDomainResEntityTypeEnum || (exports.PhoneNumberDomainResEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PhoneNumberDomainResTypeEnum;
(function (PhoneNumberDomainResTypeEnum) {
    PhoneNumberDomainResTypeEnum["HOME"] = "HOME";
    PhoneNumberDomainResTypeEnum["MOBILE"] = "MOBILE";
    PhoneNumberDomainResTypeEnum["NOTSPECIFIED"] = "NOT_SPECIFIED";
    PhoneNumberDomainResTypeEnum["OFFICE"] = "OFFICE";
})(PhoneNumberDomainResTypeEnum = exports.PhoneNumberDomainResTypeEnum || (exports.PhoneNumberDomainResTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PotentialCustomerDomainCaseStatusEnum;
(function (PotentialCustomerDomainCaseStatusEnum) {
    PotentialCustomerDomainCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    PotentialCustomerDomainCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    PotentialCustomerDomainCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    PotentialCustomerDomainCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    PotentialCustomerDomainCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    PotentialCustomerDomainCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    PotentialCustomerDomainCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    PotentialCustomerDomainCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    PotentialCustomerDomainCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    PotentialCustomerDomainCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    PotentialCustomerDomainCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    PotentialCustomerDomainCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    PotentialCustomerDomainCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    PotentialCustomerDomainCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    PotentialCustomerDomainCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    PotentialCustomerDomainCaseStatusEnum["DEFERRED"] = "DEFERRED";
    PotentialCustomerDomainCaseStatusEnum["DISMISSED"] = "DISMISSED";
    PotentialCustomerDomainCaseStatusEnum["DIVERSION"] = "DIVERSION";
    PotentialCustomerDomainCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    PotentialCustomerDomainCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    PotentialCustomerDomainCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    PotentialCustomerDomainCaseStatusEnum["LOST"] = "LOST";
    PotentialCustomerDomainCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    PotentialCustomerDomainCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    PotentialCustomerDomainCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    PotentialCustomerDomainCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    PotentialCustomerDomainCaseStatusEnum["STALE"] = "STALE";
    PotentialCustomerDomainCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    PotentialCustomerDomainCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(PotentialCustomerDomainCaseStatusEnum = exports.PotentialCustomerDomainCaseStatusEnum || (exports.PotentialCustomerDomainCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PotentialCustomerDomainCitationStateEnum;
(function (PotentialCustomerDomainCitationStateEnum) {
    PotentialCustomerDomainCitationStateEnum["AK"] = "AK";
    PotentialCustomerDomainCitationStateEnum["AL"] = "AL";
    PotentialCustomerDomainCitationStateEnum["AR"] = "AR";
    PotentialCustomerDomainCitationStateEnum["AZ"] = "AZ";
    PotentialCustomerDomainCitationStateEnum["CA"] = "CA";
    PotentialCustomerDomainCitationStateEnum["CO"] = "CO";
    PotentialCustomerDomainCitationStateEnum["CT"] = "CT";
    PotentialCustomerDomainCitationStateEnum["DC"] = "DC";
    PotentialCustomerDomainCitationStateEnum["DE"] = "DE";
    PotentialCustomerDomainCitationStateEnum["FL"] = "FL";
    PotentialCustomerDomainCitationStateEnum["GA"] = "GA";
    PotentialCustomerDomainCitationStateEnum["HI"] = "HI";
    PotentialCustomerDomainCitationStateEnum["IA"] = "IA";
    PotentialCustomerDomainCitationStateEnum["ID"] = "ID";
    PotentialCustomerDomainCitationStateEnum["IL"] = "IL";
    PotentialCustomerDomainCitationStateEnum["IN"] = "IN";
    PotentialCustomerDomainCitationStateEnum["KS"] = "KS";
    PotentialCustomerDomainCitationStateEnum["KY"] = "KY";
    PotentialCustomerDomainCitationStateEnum["LA"] = "LA";
    PotentialCustomerDomainCitationStateEnum["MA"] = "MA";
    PotentialCustomerDomainCitationStateEnum["MD"] = "MD";
    PotentialCustomerDomainCitationStateEnum["ME"] = "ME";
    PotentialCustomerDomainCitationStateEnum["MI"] = "MI";
    PotentialCustomerDomainCitationStateEnum["MN"] = "MN";
    PotentialCustomerDomainCitationStateEnum["MO"] = "MO";
    PotentialCustomerDomainCitationStateEnum["MS"] = "MS";
    PotentialCustomerDomainCitationStateEnum["MT"] = "MT";
    PotentialCustomerDomainCitationStateEnum["NC"] = "NC";
    PotentialCustomerDomainCitationStateEnum["ND"] = "ND";
    PotentialCustomerDomainCitationStateEnum["NE"] = "NE";
    PotentialCustomerDomainCitationStateEnum["NH"] = "NH";
    PotentialCustomerDomainCitationStateEnum["NJ"] = "NJ";
    PotentialCustomerDomainCitationStateEnum["NM"] = "NM";
    PotentialCustomerDomainCitationStateEnum["NV"] = "NV";
    PotentialCustomerDomainCitationStateEnum["NY"] = "NY";
    PotentialCustomerDomainCitationStateEnum["OH"] = "OH";
    PotentialCustomerDomainCitationStateEnum["OK"] = "OK";
    PotentialCustomerDomainCitationStateEnum["OR"] = "OR";
    PotentialCustomerDomainCitationStateEnum["PA"] = "PA";
    PotentialCustomerDomainCitationStateEnum["RI"] = "RI";
    PotentialCustomerDomainCitationStateEnum["SC"] = "SC";
    PotentialCustomerDomainCitationStateEnum["SD"] = "SD";
    PotentialCustomerDomainCitationStateEnum["TN"] = "TN";
    PotentialCustomerDomainCitationStateEnum["TX"] = "TX";
    PotentialCustomerDomainCitationStateEnum["UT"] = "UT";
    PotentialCustomerDomainCitationStateEnum["VA"] = "VA";
    PotentialCustomerDomainCitationStateEnum["VT"] = "VT";
    PotentialCustomerDomainCitationStateEnum["WA"] = "WA";
    PotentialCustomerDomainCitationStateEnum["WI"] = "WI";
    PotentialCustomerDomainCitationStateEnum["WV"] = "WV";
    PotentialCustomerDomainCitationStateEnum["WY"] = "WY";
})(PotentialCustomerDomainCitationStateEnum = exports.PotentialCustomerDomainCitationStateEnum || (exports.PotentialCustomerDomainCitationStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PriceMatchResponsePriceMatchStatusEnum;
(function (PriceMatchResponsePriceMatchStatusEnum) {
    PriceMatchResponsePriceMatchStatusEnum["COMPLETE"] = "COMPLETE";
    PriceMatchResponsePriceMatchStatusEnum["PENDING"] = "PENDING";
    PriceMatchResponsePriceMatchStatusEnum["REJECTED"] = "REJECTED";
})(PriceMatchResponsePriceMatchStatusEnum = exports.PriceMatchResponsePriceMatchStatusEnum || (exports.PriceMatchResponsePriceMatchStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PushNotificationRegistrationRequestPlatformTypeEnum;
(function (PushNotificationRegistrationRequestPlatformTypeEnum) {
    PushNotificationRegistrationRequestPlatformTypeEnum["ANDROID"] = "ANDROID";
    PushNotificationRegistrationRequestPlatformTypeEnum["IOS"] = "IOS";
    PushNotificationRegistrationRequestPlatformTypeEnum["WEBAPP"] = "WEBAPP";
})(PushNotificationRegistrationRequestPlatformTypeEnum = exports.PushNotificationRegistrationRequestPlatformTypeEnum || (exports.PushNotificationRegistrationRequestPlatformTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PushNotificationRequestPageTypeEnum;
(function (PushNotificationRequestPageTypeEnum) {
    PushNotificationRequestPageTypeEnum["CASEACTION"] = "CASE_ACTION";
    PushNotificationRequestPageTypeEnum["CASEMESSAGES"] = "CASE_MESSAGES";
    PushNotificationRequestPageTypeEnum["CASESTATUS"] = "CASE_STATUS";
    PushNotificationRequestPageTypeEnum["COURTDATESCHEDULED"] = "COURT_DATE_SCHEDULED";
    PushNotificationRequestPageTypeEnum["NEWTICKET"] = "NEW_TICKET";
    PushNotificationRequestPageTypeEnum["PROFILE"] = "PROFILE";
})(PushNotificationRequestPageTypeEnum = exports.PushNotificationRequestPageTypeEnum || (exports.PushNotificationRequestPageTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PushNotificationRequestPlatformTypeEnum;
(function (PushNotificationRequestPlatformTypeEnum) {
    PushNotificationRequestPlatformTypeEnum["ANDROID"] = "ANDROID";
    PushNotificationRequestPlatformTypeEnum["IOS"] = "IOS";
    PushNotificationRequestPlatformTypeEnum["WEBAPP"] = "WEBAPP";
})(PushNotificationRequestPlatformTypeEnum = exports.PushNotificationRequestPlatformTypeEnum || (exports.PushNotificationRequestPlatformTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PutDocumentRequestClientDocReqEnum;
(function (PutDocumentRequestClientDocReqEnum) {
    PutDocumentRequestClientDocReqEnum["ACK"] = "ACK";
    PutDocumentRequestClientDocReqEnum["NONE"] = "NONE";
    PutDocumentRequestClientDocReqEnum["NOTARY"] = "NOTARY";
    PutDocumentRequestClientDocReqEnum["SIGNATURE"] = "SIGNATURE";
})(PutDocumentRequestClientDocReqEnum = exports.PutDocumentRequestClientDocReqEnum || (exports.PutDocumentRequestClientDocReqEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PutDocumentRequestDocTypeEnum;
(function (PutDocumentRequestDocTypeEnum) {
    PutDocumentRequestDocTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
    PutDocumentRequestDocTypeEnum["OTHERDOCUMENT"] = "OTHER_DOCUMENT";
    PutDocumentRequestDocTypeEnum["OTHERIMAGE"] = "OTHER_IMAGE";
})(PutDocumentRequestDocTypeEnum = exports.PutDocumentRequestDocTypeEnum || (exports.PutDocumentRequestDocTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReferralContactStatusErrorTypeEnum;
(function (ReferralContactStatusErrorTypeEnum) {
    ReferralContactStatusErrorTypeEnum["EMAILALREADYEXISTS"] = "EMAIL_ALREADY_EXISTS";
    ReferralContactStatusErrorTypeEnum["EMAILNOTSENT"] = "EMAIL_NOT_SENT";
    ReferralContactStatusErrorTypeEnum["INVALIDEMAIL"] = "INVALID_EMAIL";
})(ReferralContactStatusErrorTypeEnum = exports.ReferralContactStatusErrorTypeEnum || (exports.ReferralContactStatusErrorTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReferralResponseReferralCreditStatusEnum;
(function (ReferralResponseReferralCreditStatusEnum) {
    ReferralResponseReferralCreditStatusEnum["APPLIED"] = "APPLIED";
    ReferralResponseReferralCreditStatusEnum["CASECANCELLED"] = "CASE_CANCELLED";
    ReferralResponseReferralCreditStatusEnum["CONFIRMED"] = "CONFIRMED";
    ReferralResponseReferralCreditStatusEnum["NOTIFIED"] = "NOTIFIED";
    ReferralResponseReferralCreditStatusEnum["SAVED"] = "SAVED";
    ReferralResponseReferralCreditStatusEnum["SUPERSEDED"] = "SUPERSEDED";
})(ReferralResponseReferralCreditStatusEnum = exports.ReferralResponseReferralCreditStatusEnum || (exports.ReferralResponseReferralCreditStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReferralResponseReferralCreditTypeEnum;
(function (ReferralResponseReferralCreditTypeEnum) {
    ReferralResponseReferralCreditTypeEnum["CENTSVALUE"] = "CENTS_VALUE";
    ReferralResponseReferralCreditTypeEnum["NOCREDIT"] = "NO_CREDIT";
    ReferralResponseReferralCreditTypeEnum["PERCENTAGEDISCOUNT"] = "PERCENTAGE_DISCOUNT";
})(ReferralResponseReferralCreditTypeEnum = exports.ReferralResponseReferralCreditTypeEnum || (exports.ReferralResponseReferralCreditTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReferralResponseReferralEventEnum;
(function (ReferralResponseReferralEventEnum) {
    ReferralResponseReferralEventEnum["CASEBOOKING"] = "CASE_BOOKING";
    ReferralResponseReferralEventEnum["CASEMATCH"] = "CASE_MATCH";
    ReferralResponseReferralEventEnum["INVITE"] = "INVITE";
    ReferralResponseReferralEventEnum["REGISTRATION"] = "REGISTRATION";
})(ReferralResponseReferralEventEnum = exports.ReferralResponseReferralEventEnum || (exports.ReferralResponseReferralEventEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReferralResponseReferralPaymentStatusEnum;
(function (ReferralResponseReferralPaymentStatusEnum) {
    ReferralResponseReferralPaymentStatusEnum["ERROR"] = "ERROR";
    ReferralResponseReferralPaymentStatusEnum["NONE"] = "NONE";
    ReferralResponseReferralPaymentStatusEnum["PAIDOUT"] = "PAID_OUT";
    ReferralResponseReferralPaymentStatusEnum["PENDINGACCOUNTVERIFICATION"] = "PENDING_ACCOUNT_VERIFICATION";
    ReferralResponseReferralPaymentStatusEnum["PENDINGCASERESOLUTION"] = "PENDING_CASE_RESOLUTION";
})(ReferralResponseReferralPaymentStatusEnum = exports.ReferralResponseReferralPaymentStatusEnum || (exports.ReferralResponseReferralPaymentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReferralResponseReferralSourceTypeEnum;
(function (ReferralResponseReferralSourceTypeEnum) {
    ReferralResponseReferralSourceTypeEnum["BILLBOARDS"] = "BILLBOARDS";
    ReferralResponseReferralSourceTypeEnum["CHECKOUTCODE"] = "CHECKOUT_CODE";
    ReferralResponseReferralSourceTypeEnum["DMVCOM"] = "DMV_COM";
    ReferralResponseReferralSourceTypeEnum["DMVORG"] = "DMV_ORG";
    ReferralResponseReferralSourceTypeEnum["DWA"] = "DWA";
    ReferralResponseReferralSourceTypeEnum["FACEBOOK"] = "FACEBOOK";
    ReferralResponseReferralSourceTypeEnum["FRIENDORFAMILY"] = "FRIEND_OR_FAMILY";
    ReferralResponseReferralSourceTypeEnum["GOOGLESEARCH"] = "GOOGLE_SEARCH";
    ReferralResponseReferralSourceTypeEnum["INFLUENCERAFFILIATE"] = "INFLUENCER_AFFILIATE";
    ReferralResponseReferralSourceTypeEnum["KICKBACKAPP"] = "KICKBACK_APP";
    ReferralResponseReferralSourceTypeEnum["OTHER"] = "OTHER";
    ReferralResponseReferralSourceTypeEnum["RADIO"] = "RADIO";
    ReferralResponseReferralSourceTypeEnum["REDDIT"] = "REDDIT";
    ReferralResponseReferralSourceTypeEnum["THESMOKINGTIRE"] = "THE_SMOKING_TIRE";
    ReferralResponseReferralSourceTypeEnum["UNKNOWN"] = "UNKNOWN";
    ReferralResponseReferralSourceTypeEnum["VINWIKI"] = "VINWIKI";
    ReferralResponseReferralSourceTypeEnum["YOUTUBEAD"] = "YOUTUBE_AD";
})(ReferralResponseReferralSourceTypeEnum = exports.ReferralResponseReferralSourceTypeEnum || (exports.ReferralResponseReferralSourceTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReferralResponseByUserLatestCreditStatusEnum;
(function (ReferralResponseByUserLatestCreditStatusEnum) {
    ReferralResponseByUserLatestCreditStatusEnum["APPLIED"] = "APPLIED";
    ReferralResponseByUserLatestCreditStatusEnum["CASECANCELLED"] = "CASE_CANCELLED";
    ReferralResponseByUserLatestCreditStatusEnum["CONFIRMED"] = "CONFIRMED";
    ReferralResponseByUserLatestCreditStatusEnum["NOTIFIED"] = "NOTIFIED";
    ReferralResponseByUserLatestCreditStatusEnum["SAVED"] = "SAVED";
    ReferralResponseByUserLatestCreditStatusEnum["SUPERSEDED"] = "SUPERSEDED";
})(ReferralResponseByUserLatestCreditStatusEnum = exports.ReferralResponseByUserLatestCreditStatusEnum || (exports.ReferralResponseByUserLatestCreditStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RefundCasePaymentRequestRefundReasonTypeEnum;
(function (RefundCasePaymentRequestRefundReasonTypeEnum) {
    RefundCasePaymentRequestRefundReasonTypeEnum["CANCELATION"] = "CANCELATION";
    RefundCasePaymentRequestRefundReasonTypeEnum["CLIENTDISPUTEDCHARGE"] = "CLIENT_DISPUTED_CHARGE";
    RefundCasePaymentRequestRefundReasonTypeEnum["DUPLICATECASE"] = "DUPLICATE_CASE";
    RefundCasePaymentRequestRefundReasonTypeEnum["LOSTCASE"] = "LOST_CASE";
    RefundCasePaymentRequestRefundReasonTypeEnum["OTHER"] = "OTHER";
})(RefundCasePaymentRequestRefundReasonTypeEnum = exports.RefundCasePaymentRequestRefundReasonTypeEnum || (exports.RefundCasePaymentRequestRefundReasonTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RefundLawfirmFeeRequestRefundReasonEnum;
(function (RefundLawfirmFeeRequestRefundReasonEnum) {
    RefundLawfirmFeeRequestRefundReasonEnum["CANCELATION"] = "CANCELATION";
    RefundLawfirmFeeRequestRefundReasonEnum["CLIENTDISPUTEDCHARGE"] = "CLIENT_DISPUTED_CHARGE";
    RefundLawfirmFeeRequestRefundReasonEnum["DUPLICATECASE"] = "DUPLICATE_CASE";
    RefundLawfirmFeeRequestRefundReasonEnum["LOSTCASE"] = "LOST_CASE";
    RefundLawfirmFeeRequestRefundReasonEnum["OTHER"] = "OTHER";
})(RefundLawfirmFeeRequestRefundReasonEnum = exports.RefundLawfirmFeeRequestRefundReasonEnum || (exports.RefundLawfirmFeeRequestRefundReasonEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RegisterNewUserRequestClientTypeEnum;
(function (RegisterNewUserRequestClientTypeEnum) {
    RegisterNewUserRequestClientTypeEnum["ANDROID"] = "ANDROID";
    RegisterNewUserRequestClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    RegisterNewUserRequestClientTypeEnum["DMVGO"] = "DMV_GO";
    RegisterNewUserRequestClientTypeEnum["DMVORG"] = "DMV_ORG";
    RegisterNewUserRequestClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    RegisterNewUserRequestClientTypeEnum["IOS"] = "IOS";
    RegisterNewUserRequestClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    RegisterNewUserRequestClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    RegisterNewUserRequestClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    RegisterNewUserRequestClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    RegisterNewUserRequestClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    RegisterNewUserRequestClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    RegisterNewUserRequestClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    RegisterNewUserRequestClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    RegisterNewUserRequestClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    RegisterNewUserRequestClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    RegisterNewUserRequestClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    RegisterNewUserRequestClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    RegisterNewUserRequestClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(RegisterNewUserRequestClientTypeEnum = exports.RegisterNewUserRequestClientTypeEnum || (exports.RegisterNewUserRequestClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RegisterNewUserRequestRoleTypeEnum;
(function (RegisterNewUserRequestRoleTypeEnum) {
    RegisterNewUserRequestRoleTypeEnum["ADMIN"] = "ADMIN";
    RegisterNewUserRequestRoleTypeEnum["DEFENDANT"] = "DEFENDANT";
    RegisterNewUserRequestRoleTypeEnum["LAWYER"] = "LAWYER";
    RegisterNewUserRequestRoleTypeEnum["PARTNER"] = "PARTNER";
    RegisterNewUserRequestRoleTypeEnum["UNKNOWN"] = "UNKNOWN";
})(RegisterNewUserRequestRoleTypeEnum = exports.RegisterNewUserRequestRoleTypeEnum || (exports.RegisterNewUserRequestRoleTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReplyToTicketRequestNewTicketStatusEnum;
(function (ReplyToTicketRequestNewTicketStatusEnum) {
    ReplyToTicketRequestNewTicketStatusEnum["CLOSED"] = "CLOSED";
    ReplyToTicketRequestNewTicketStatusEnum["OPEN"] = "OPEN";
    ReplyToTicketRequestNewTicketStatusEnum["PENDING"] = "PENDING";
    ReplyToTicketRequestNewTicketStatusEnum["PENDINGONEWEEK"] = "PENDING_ONE_WEEK";
    ReplyToTicketRequestNewTicketStatusEnum["PENDINGTWODAYS"] = "PENDING_TWO_DAYS";
    ReplyToTicketRequestNewTicketStatusEnum["QUEUEDFORAUTOMATION"] = "QUEUED_FOR_AUTOMATION";
    ReplyToTicketRequestNewTicketStatusEnum["RESOLVED"] = "RESOLVED";
    ReplyToTicketRequestNewTicketStatusEnum["UNKNOWN"] = "UNKNOWN";
    ReplyToTicketRequestNewTicketStatusEnum["WAITINGONATTORNEY"] = "WAITING_ON_ATTORNEY";
    ReplyToTicketRequestNewTicketStatusEnum["WAITINGONCUSTOMER"] = "WAITING_ON_CUSTOMER";
    ReplyToTicketRequestNewTicketStatusEnum["WAITINGONOTR"] = "WAITING_ON_OTR";
    ReplyToTicketRequestNewTicketStatusEnum["WAITINGONTHIRDPARTY"] = "WAITING_ON_THIRD_PARTY";
})(ReplyToTicketRequestNewTicketStatusEnum = exports.ReplyToTicketRequestNewTicketStatusEnum || (exports.ReplyToTicketRequestNewTicketStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ResetViolationModelViolationClassEnum;
(function (ResetViolationModelViolationClassEnum) {
    ResetViolationModelViolationClassEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    ResetViolationModelViolationClassEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    ResetViolationModelViolationClassEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    ResetViolationModelViolationClassEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    ResetViolationModelViolationClassEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    ResetViolationModelViolationClassEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    ResetViolationModelViolationClassEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    ResetViolationModelViolationClassEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    ResetViolationModelViolationClassEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    ResetViolationModelViolationClassEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    ResetViolationModelViolationClassEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    ResetViolationModelViolationClassEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    ResetViolationModelViolationClassEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    ResetViolationModelViolationClassEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    ResetViolationModelViolationClassEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    ResetViolationModelViolationClassEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    ResetViolationModelViolationClassEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    ResetViolationModelViolationClassEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    ResetViolationModelViolationClassEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    ResetViolationModelViolationClassEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    ResetViolationModelViolationClassEnum["FELONY"] = "FELONY";
    ResetViolationModelViolationClassEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    ResetViolationModelViolationClassEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    ResetViolationModelViolationClassEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    ResetViolationModelViolationClassEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    ResetViolationModelViolationClassEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    ResetViolationModelViolationClassEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["INFRACTION"] = "INFRACTION";
    ResetViolationModelViolationClassEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["MISDEMEANOR"] = "MISDEMEANOR";
    ResetViolationModelViolationClassEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    ResetViolationModelViolationClassEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    ResetViolationModelViolationClassEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    ResetViolationModelViolationClassEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    ResetViolationModelViolationClassEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    ResetViolationModelViolationClassEnum["NONMOVING"] = "NON_MOVING";
    ResetViolationModelViolationClassEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    ResetViolationModelViolationClassEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    ResetViolationModelViolationClassEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    ResetViolationModelViolationClassEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    ResetViolationModelViolationClassEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    ResetViolationModelViolationClassEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    ResetViolationModelViolationClassEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(ResetViolationModelViolationClassEnum = exports.ResetViolationModelViolationClassEnum || (exports.ResetViolationModelViolationClassEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReverseLawfirmPayoutRequestReversalReasonEnum;
(function (ReverseLawfirmPayoutRequestReversalReasonEnum) {
    ReverseLawfirmPayoutRequestReversalReasonEnum["CANCELATION"] = "CANCELATION";
    ReverseLawfirmPayoutRequestReversalReasonEnum["CLIENTDISPUTEDCHARGE"] = "CLIENT_DISPUTED_CHARGE";
    ReverseLawfirmPayoutRequestReversalReasonEnum["DUPLICATECASE"] = "DUPLICATE_CASE";
    ReverseLawfirmPayoutRequestReversalReasonEnum["LOSTCASE"] = "LOST_CASE";
    ReverseLawfirmPayoutRequestReversalReasonEnum["OTHER"] = "OTHER";
})(ReverseLawfirmPayoutRequestReversalReasonEnum = exports.ReverseLawfirmPayoutRequestReversalReasonEnum || (exports.ReverseLawfirmPayoutRequestReversalReasonEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawfirmSurchargeModelFeatureTypeEnum;
(function (SaveLawfirmSurchargeModelFeatureTypeEnum) {
    SaveLawfirmSurchargeModelFeatureTypeEnum["BLACKBOX"] = "BLACK_BOX";
    SaveLawfirmSurchargeModelFeatureTypeEnum["STATEPAGE"] = "STATE_PAGE";
    SaveLawfirmSurchargeModelFeatureTypeEnum["STOREFRONT"] = "STOREFRONT";
})(SaveLawfirmSurchargeModelFeatureTypeEnum = exports.SaveLawfirmSurchargeModelFeatureTypeEnum || (exports.SaveLawfirmSurchargeModelFeatureTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawfirmSurchargeModelFeeTypeEnum;
(function (SaveLawfirmSurchargeModelFeeTypeEnum) {
    SaveLawfirmSurchargeModelFeeTypeEnum["FLATFEEINCENTS"] = "FLAT_FEE_IN_CENTS";
    SaveLawfirmSurchargeModelFeeTypeEnum["FORMULA"] = "FORMULA";
    SaveLawfirmSurchargeModelFeeTypeEnum["PERCENT"] = "PERCENT";
})(SaveLawfirmSurchargeModelFeeTypeEnum = exports.SaveLawfirmSurchargeModelFeeTypeEnum || (exports.SaveLawfirmSurchargeModelFeeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawfirmSurchargeModelRefundEligibilityEnum;
(function (SaveLawfirmSurchargeModelRefundEligibilityEnum) {
    SaveLawfirmSurchargeModelRefundEligibilityEnum["DEFAULT"] = "DEFAULT";
    SaveLawfirmSurchargeModelRefundEligibilityEnum["NONREFUNDABLE"] = "NON_REFUNDABLE";
    SaveLawfirmSurchargeModelRefundEligibilityEnum["SURCHARGEONLY"] = "SURCHARGE_ONLY";
})(SaveLawfirmSurchargeModelRefundEligibilityEnum = exports.SaveLawfirmSurchargeModelRefundEligibilityEnum || (exports.SaveLawfirmSurchargeModelRefundEligibilityEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawfirmSurchargeModelSurchargeTypeEnum;
(function (SaveLawfirmSurchargeModelSurchargeTypeEnum) {
    SaveLawfirmSurchargeModelSurchargeTypeEnum["CDL"] = "CDL";
    SaveLawfirmSurchargeModelSurchargeTypeEnum["FAILURETOAPPEAR"] = "FAILURE_TO_APPEAR";
    SaveLawfirmSurchargeModelSurchargeTypeEnum["LATE"] = "LATE";
    SaveLawfirmSurchargeModelSurchargeTypeEnum["MULTIPLEVIOLATIONS"] = "MULTIPLE_VIOLATIONS";
    SaveLawfirmSurchargeModelSurchargeTypeEnum["OUTOFSTATE"] = "OUT_OF_STATE";
    SaveLawfirmSurchargeModelSurchargeTypeEnum["SHORTNOTICE"] = "SHORT_NOTICE";
    SaveLawfirmSurchargeModelSurchargeTypeEnum["WARRANT"] = "WARRANT";
})(SaveLawfirmSurchargeModelSurchargeTypeEnum = exports.SaveLawfirmSurchargeModelSurchargeTypeEnum || (exports.SaveLawfirmSurchargeModelSurchargeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawyerLeadRequestLeadProvidedSourceEnum;
(function (SaveLawyerLeadRequestLeadProvidedSourceEnum) {
    SaveLawyerLeadRequestLeadProvidedSourceEnum["DIRECTMAIL"] = "DIRECT_MAIL";
    SaveLawyerLeadRequestLeadProvidedSourceEnum["EMAILAD"] = "EMAIL_AD";
    SaveLawyerLeadRequestLeadProvidedSourceEnum["GOOGLEAD"] = "GOOGLE_AD";
    SaveLawyerLeadRequestLeadProvidedSourceEnum["NMA"] = "NMA";
    SaveLawyerLeadRequestLeadProvidedSourceEnum["OTHER"] = "OTHER";
    SaveLawyerLeadRequestLeadProvidedSourceEnum["UNKNOWN"] = "UNKNOWN";
})(SaveLawyerLeadRequestLeadProvidedSourceEnum = exports.SaveLawyerLeadRequestLeadProvidedSourceEnum || (exports.SaveLawyerLeadRequestLeadProvidedSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawyerLicenseModelRegionCodeEnum;
(function (SaveLawyerLicenseModelRegionCodeEnum) {
    SaveLawyerLicenseModelRegionCodeEnum["AK"] = "AK";
    SaveLawyerLicenseModelRegionCodeEnum["AL"] = "AL";
    SaveLawyerLicenseModelRegionCodeEnum["AR"] = "AR";
    SaveLawyerLicenseModelRegionCodeEnum["AZ"] = "AZ";
    SaveLawyerLicenseModelRegionCodeEnum["CA"] = "CA";
    SaveLawyerLicenseModelRegionCodeEnum["CO"] = "CO";
    SaveLawyerLicenseModelRegionCodeEnum["CT"] = "CT";
    SaveLawyerLicenseModelRegionCodeEnum["DC"] = "DC";
    SaveLawyerLicenseModelRegionCodeEnum["DE"] = "DE";
    SaveLawyerLicenseModelRegionCodeEnum["FL"] = "FL";
    SaveLawyerLicenseModelRegionCodeEnum["GA"] = "GA";
    SaveLawyerLicenseModelRegionCodeEnum["HI"] = "HI";
    SaveLawyerLicenseModelRegionCodeEnum["IA"] = "IA";
    SaveLawyerLicenseModelRegionCodeEnum["ID"] = "ID";
    SaveLawyerLicenseModelRegionCodeEnum["IL"] = "IL";
    SaveLawyerLicenseModelRegionCodeEnum["IN"] = "IN";
    SaveLawyerLicenseModelRegionCodeEnum["KS"] = "KS";
    SaveLawyerLicenseModelRegionCodeEnum["KY"] = "KY";
    SaveLawyerLicenseModelRegionCodeEnum["LA"] = "LA";
    SaveLawyerLicenseModelRegionCodeEnum["MA"] = "MA";
    SaveLawyerLicenseModelRegionCodeEnum["MD"] = "MD";
    SaveLawyerLicenseModelRegionCodeEnum["ME"] = "ME";
    SaveLawyerLicenseModelRegionCodeEnum["MI"] = "MI";
    SaveLawyerLicenseModelRegionCodeEnum["MN"] = "MN";
    SaveLawyerLicenseModelRegionCodeEnum["MO"] = "MO";
    SaveLawyerLicenseModelRegionCodeEnum["MS"] = "MS";
    SaveLawyerLicenseModelRegionCodeEnum["MT"] = "MT";
    SaveLawyerLicenseModelRegionCodeEnum["NC"] = "NC";
    SaveLawyerLicenseModelRegionCodeEnum["ND"] = "ND";
    SaveLawyerLicenseModelRegionCodeEnum["NE"] = "NE";
    SaveLawyerLicenseModelRegionCodeEnum["NH"] = "NH";
    SaveLawyerLicenseModelRegionCodeEnum["NJ"] = "NJ";
    SaveLawyerLicenseModelRegionCodeEnum["NM"] = "NM";
    SaveLawyerLicenseModelRegionCodeEnum["NV"] = "NV";
    SaveLawyerLicenseModelRegionCodeEnum["NY"] = "NY";
    SaveLawyerLicenseModelRegionCodeEnum["OH"] = "OH";
    SaveLawyerLicenseModelRegionCodeEnum["OK"] = "OK";
    SaveLawyerLicenseModelRegionCodeEnum["OR"] = "OR";
    SaveLawyerLicenseModelRegionCodeEnum["PA"] = "PA";
    SaveLawyerLicenseModelRegionCodeEnum["RI"] = "RI";
    SaveLawyerLicenseModelRegionCodeEnum["SC"] = "SC";
    SaveLawyerLicenseModelRegionCodeEnum["SD"] = "SD";
    SaveLawyerLicenseModelRegionCodeEnum["TN"] = "TN";
    SaveLawyerLicenseModelRegionCodeEnum["TX"] = "TX";
    SaveLawyerLicenseModelRegionCodeEnum["UT"] = "UT";
    SaveLawyerLicenseModelRegionCodeEnum["VA"] = "VA";
    SaveLawyerLicenseModelRegionCodeEnum["VT"] = "VT";
    SaveLawyerLicenseModelRegionCodeEnum["WA"] = "WA";
    SaveLawyerLicenseModelRegionCodeEnum["WI"] = "WI";
    SaveLawyerLicenseModelRegionCodeEnum["WV"] = "WV";
    SaveLawyerLicenseModelRegionCodeEnum["WY"] = "WY";
})(SaveLawyerLicenseModelRegionCodeEnum = exports.SaveLawyerLicenseModelRegionCodeEnum || (exports.SaveLawyerLicenseModelRegionCodeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawyerLicenseModelTypeEnum;
(function (SaveLawyerLicenseModelTypeEnum) {
    SaveLawyerLicenseModelTypeEnum["BAR"] = "BAR";
})(SaveLawyerLicenseModelTypeEnum = exports.SaveLawyerLicenseModelTypeEnum || (exports.SaveLawyerLicenseModelTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SaveLawyerRequestJobTitleEnum;
(function (SaveLawyerRequestJobTitleEnum) {
    SaveLawyerRequestJobTitleEnum["ACCOUNTANT"] = "ACCOUNTANT";
    SaveLawyerRequestJobTitleEnum["ATTORNEY"] = "ATTORNEY";
    SaveLawyerRequestJobTitleEnum["ATTORNEYASSOCIATE"] = "ATTORNEY_ASSOCIATE";
    SaveLawyerRequestJobTitleEnum["ATTORNEYCOUNSEL"] = "ATTORNEY_COUNSEL";
    SaveLawyerRequestJobTitleEnum["ATTORNEYMANAGINGPARTNER"] = "ATTORNEY_MANAGING_PARTNER";
    SaveLawyerRequestJobTitleEnum["ATTORNEYPARTNER"] = "ATTORNEY_PARTNER";
    SaveLawyerRequestJobTitleEnum["ATTORNEYSTAFF"] = "ATTORNEY_STAFF";
    SaveLawyerRequestJobTitleEnum["CUSTOMERSERVICEREP"] = "CUSTOMER_SERVICE_REP";
    SaveLawyerRequestJobTitleEnum["LEGALASSISTANT"] = "LEGAL_ASSISTANT";
    SaveLawyerRequestJobTitleEnum["LEGALINTERN"] = "LEGAL_INTERN";
    SaveLawyerRequestJobTitleEnum["LEGALSECRETARY"] = "LEGAL_SECRETARY";
    SaveLawyerRequestJobTitleEnum["OTHER"] = "OTHER";
    SaveLawyerRequestJobTitleEnum["PARALEGAL"] = "PARALEGAL";
})(SaveLawyerRequestJobTitleEnum = exports.SaveLawyerRequestJobTitleEnum || (exports.SaveLawyerRequestJobTitleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ScheduleNewPaymentRequestRecipientEnum;
(function (ScheduleNewPaymentRequestRecipientEnum) {
    ScheduleNewPaymentRequestRecipientEnum["LAWFIRM"] = "LAWFIRM";
    ScheduleNewPaymentRequestRecipientEnum["OTR"] = "OTR";
})(ScheduleNewPaymentRequestRecipientEnum = exports.ScheduleNewPaymentRequestRecipientEnum || (exports.ScheduleNewPaymentRequestRecipientEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ScheduleNewPaymentRequestTransactionMethodEnum;
(function (ScheduleNewPaymentRequestTransactionMethodEnum) {
    ScheduleNewPaymentRequestTransactionMethodEnum["CHECK"] = "CHECK";
    ScheduleNewPaymentRequestTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    ScheduleNewPaymentRequestTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    ScheduleNewPaymentRequestTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    ScheduleNewPaymentRequestTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    ScheduleNewPaymentRequestTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    ScheduleNewPaymentRequestTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    ScheduleNewPaymentRequestTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    ScheduleNewPaymentRequestTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    ScheduleNewPaymentRequestTransactionMethodEnum["VENMO"] = "VENMO";
    ScheduleNewPaymentRequestTransactionMethodEnum["ZELLE"] = "ZELLE";
})(ScheduleNewPaymentRequestTransactionMethodEnum = exports.ScheduleNewPaymentRequestTransactionMethodEnum || (exports.ScheduleNewPaymentRequestTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ScheduledTaskResponseTaskStatusEnum;
(function (ScheduledTaskResponseTaskStatusEnum) {
    ScheduledTaskResponseTaskStatusEnum["CANCELLED"] = "CANCELLED";
    ScheduledTaskResponseTaskStatusEnum["COMPLETE"] = "COMPLETE";
    ScheduledTaskResponseTaskStatusEnum["ERROR"] = "ERROR";
    ScheduledTaskResponseTaskStatusEnum["INPROGRESS"] = "IN_PROGRESS";
    ScheduledTaskResponseTaskStatusEnum["NOOPERATION"] = "NO_OPERATION";
    ScheduledTaskResponseTaskStatusEnum["QUEUED"] = "QUEUED";
})(ScheduledTaskResponseTaskStatusEnum = exports.ScheduledTaskResponseTaskStatusEnum || (exports.ScheduledTaskResponseTaskStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ScheduledTaskResponseTaskTypeEnum;
(function (ScheduledTaskResponseTaskTypeEnum) {
    ScheduledTaskResponseTaskTypeEnum["EMAILFOLLOWUPTASK"] = "EMAIL_FOLLOW_UP_TASK";
    ScheduledTaskResponseTaskTypeEnum["PAYINSTALLMENTTASK"] = "PAY_INSTALLMENT_TASK";
    ScheduledTaskResponseTaskTypeEnum["PDFTOIMAGETASK"] = "PDF_TO_IMAGE_TASK";
    ScheduledTaskResponseTaskTypeEnum["TICKETREVIEWTASK"] = "TICKET_REVIEW_TASK";
    ScheduledTaskResponseTaskTypeEnum["VALIDATESUBSCRIPTIONTASK"] = "VALIDATE_SUBSCRIPTION_TASK";
})(ScheduledTaskResponseTaskTypeEnum = exports.ScheduledTaskResponseTaskTypeEnum || (exports.ScheduledTaskResponseTaskTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SendConsolidatedEmailToUserEmailTemplateIdEnum;
(function (SendConsolidatedEmailToUserEmailTemplateIdEnum) {
    SendConsolidatedEmailToUserEmailTemplateIdEnum["AFTERNOONHELLO2"] = "AFTERNOON_HELLO_2";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["ATTICUSATTORNEYCONTACT1"] = "ATTICUS_ATTORNEY_CONTACT_1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CAMERATICKETNMV"] = "CAMERA_TICKET_NMV";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASECANCELLEDBYUSER"] = "CASE_CANCELLED_BY_USER";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASECANCELLEDDUPLICATE"] = "CASE_CANCELLED_DUPLICATE";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASECANCELLEDNMV"] = "CASE_CANCELLED_NMV";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASECANCELLEDNONPAYMENT"] = "CASE_CANCELLED_NON_PAYMENT";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASECANCELLEDNOLAWFIRM"] = "CASE_CANCELLED_NO_LAWFIRM";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASECANCELLEDOVERDUE"] = "CASE_CANCELLED_OVERDUE";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASECANCELLEDTOOSHORTNOTICE"] = "CASE_CANCELLED_TOO_SHORT_NOTICE";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASUALFIRSTV1"] = "CASUAL_FIRST_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["CASUALSECONDV1"] = "CASUAL_SECOND_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["FRIDAYINTRO"] = "FRIDAY_INTRO";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["INVALIDIMAGEUPLOAD1"] = "INVALID_IMAGE_UPLOAD_1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT10V1"] = "LAWFIRM_CONTACT_10_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT1V1"] = "LAWFIRM_CONTACT_1_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT2V1"] = "LAWFIRM_CONTACT_2_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT3V1"] = "LAWFIRM_CONTACT_3_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT4V1"] = "LAWFIRM_CONTACT_4_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT5V1"] = "LAWFIRM_CONTACT_5_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT6V1"] = "LAWFIRM_CONTACT_6_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT7V1"] = "LAWFIRM_CONTACT_7_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT8V1"] = "LAWFIRM_CONTACT_8_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWFIRMCONTACT9V1"] = "LAWFIRM_CONTACT_9_V1";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["LAWYERPOSTCOURTREMINDER"] = "LAWYER_POST_COURT_REMINDER";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["NOCOVERAGEAVAILABLE"] = "NO_COVERAGE_AVAILABLE";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["NOCOVERAGEAVAILABLEMISSINGCOURT"] = "NO_COVERAGE_AVAILABLE_MISSING_COURT";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["PARKINGTICKET"] = "PARKING_TICKET";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["POSTWIN"] = "POST_WIN";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["POSTWINLASTASK"] = "POST_WIN_LAST_ASK";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["POSTWINV2"] = "POST_WIN_V2";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["SUNDAYAFTERNOONHELLO"] = "SUNDAY_AFTERNOON_HELLO";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["TICKETDUEWA"] = "TICKET_DUE_WA";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["TICKETEVALWITHCITATION"] = "TICKET_EVAL_WITH_CITATION";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["TICKETEVALWITHCITATION2NDFOLLOWUP"] = "TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP";
    SendConsolidatedEmailToUserEmailTemplateIdEnum["TICKETEVALWITHCITATIONCLOSEOUT"] = "TICKET_EVAL_WITH_CITATION_CLOSE_OUT";
})(SendConsolidatedEmailToUserEmailTemplateIdEnum = exports.SendConsolidatedEmailToUserEmailTemplateIdEnum || (exports.SendConsolidatedEmailToUserEmailTemplateIdEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SendEmailToUserRequestEmailTemplateIdEnum;
(function (SendEmailToUserRequestEmailTemplateIdEnum) {
    SendEmailToUserRequestEmailTemplateIdEnum["AFTERNOONHELLO2"] = "AFTERNOON_HELLO_2";
    SendEmailToUserRequestEmailTemplateIdEnum["ATTICUSATTORNEYCONTACT1"] = "ATTICUS_ATTORNEY_CONTACT_1";
    SendEmailToUserRequestEmailTemplateIdEnum["CAMERATICKETNMV"] = "CAMERA_TICKET_NMV";
    SendEmailToUserRequestEmailTemplateIdEnum["CASECANCELLEDBYUSER"] = "CASE_CANCELLED_BY_USER";
    SendEmailToUserRequestEmailTemplateIdEnum["CASECANCELLEDDUPLICATE"] = "CASE_CANCELLED_DUPLICATE";
    SendEmailToUserRequestEmailTemplateIdEnum["CASECANCELLEDNMV"] = "CASE_CANCELLED_NMV";
    SendEmailToUserRequestEmailTemplateIdEnum["CASECANCELLEDNONPAYMENT"] = "CASE_CANCELLED_NON_PAYMENT";
    SendEmailToUserRequestEmailTemplateIdEnum["CASECANCELLEDNOLAWFIRM"] = "CASE_CANCELLED_NO_LAWFIRM";
    SendEmailToUserRequestEmailTemplateIdEnum["CASECANCELLEDOVERDUE"] = "CASE_CANCELLED_OVERDUE";
    SendEmailToUserRequestEmailTemplateIdEnum["CASECANCELLEDTOOSHORTNOTICE"] = "CASE_CANCELLED_TOO_SHORT_NOTICE";
    SendEmailToUserRequestEmailTemplateIdEnum["CASUALFIRSTV1"] = "CASUAL_FIRST_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["CASUALSECONDV1"] = "CASUAL_SECOND_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["FRIDAYINTRO"] = "FRIDAY_INTRO";
    SendEmailToUserRequestEmailTemplateIdEnum["INVALIDIMAGEUPLOAD1"] = "INVALID_IMAGE_UPLOAD_1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT10V1"] = "LAWFIRM_CONTACT_10_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT1V1"] = "LAWFIRM_CONTACT_1_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT2V1"] = "LAWFIRM_CONTACT_2_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT3V1"] = "LAWFIRM_CONTACT_3_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT4V1"] = "LAWFIRM_CONTACT_4_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT5V1"] = "LAWFIRM_CONTACT_5_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT6V1"] = "LAWFIRM_CONTACT_6_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT7V1"] = "LAWFIRM_CONTACT_7_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT8V1"] = "LAWFIRM_CONTACT_8_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWFIRMCONTACT9V1"] = "LAWFIRM_CONTACT_9_V1";
    SendEmailToUserRequestEmailTemplateIdEnum["LAWYERPOSTCOURTREMINDER"] = "LAWYER_POST_COURT_REMINDER";
    SendEmailToUserRequestEmailTemplateIdEnum["NOCOVERAGEAVAILABLE"] = "NO_COVERAGE_AVAILABLE";
    SendEmailToUserRequestEmailTemplateIdEnum["NOCOVERAGEAVAILABLEMISSINGCOURT"] = "NO_COVERAGE_AVAILABLE_MISSING_COURT";
    SendEmailToUserRequestEmailTemplateIdEnum["PARKINGTICKET"] = "PARKING_TICKET";
    SendEmailToUserRequestEmailTemplateIdEnum["POSTWIN"] = "POST_WIN";
    SendEmailToUserRequestEmailTemplateIdEnum["POSTWINLASTASK"] = "POST_WIN_LAST_ASK";
    SendEmailToUserRequestEmailTemplateIdEnum["POSTWINV2"] = "POST_WIN_V2";
    SendEmailToUserRequestEmailTemplateIdEnum["SUNDAYAFTERNOONHELLO"] = "SUNDAY_AFTERNOON_HELLO";
    SendEmailToUserRequestEmailTemplateIdEnum["TICKETDUEWA"] = "TICKET_DUE_WA";
    SendEmailToUserRequestEmailTemplateIdEnum["TICKETEVALWITHCITATION"] = "TICKET_EVAL_WITH_CITATION";
    SendEmailToUserRequestEmailTemplateIdEnum["TICKETEVALWITHCITATION2NDFOLLOWUP"] = "TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP";
    SendEmailToUserRequestEmailTemplateIdEnum["TICKETEVALWITHCITATIONCLOSEOUT"] = "TICKET_EVAL_WITH_CITATION_CLOSE_OUT";
})(SendEmailToUserRequestEmailTemplateIdEnum = exports.SendEmailToUserRequestEmailTemplateIdEnum || (exports.SendEmailToUserRequestEmailTemplateIdEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SendEmailToUserRequestReviewPlatformEnum;
(function (SendEmailToUserRequestReviewPlatformEnum) {
    SendEmailToUserRequestReviewPlatformEnum["FACEBOOK"] = "FACEBOOK";
    SendEmailToUserRequestReviewPlatformEnum["GOOGLEMYBUSINESS"] = "GOOGLE_MY_BUSINESS";
    SendEmailToUserRequestReviewPlatformEnum["GOOGLEPLAYSTORE"] = "GOOGLE_PLAY_STORE";
    SendEmailToUserRequestReviewPlatformEnum["HIGHYA"] = "HIGHYA";
    SendEmailToUserRequestReviewPlatformEnum["IOSAPPSTORE"] = "IOS_APP_STORE";
    SendEmailToUserRequestReviewPlatformEnum["REVIEWSIO"] = "REVIEWS_IO";
})(SendEmailToUserRequestReviewPlatformEnum = exports.SendEmailToUserRequestReviewPlatformEnum || (exports.SendEmailToUserRequestReviewPlatformEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SendEmailToUsersRequestEmailTemplateIdEnum;
(function (SendEmailToUsersRequestEmailTemplateIdEnum) {
    SendEmailToUsersRequestEmailTemplateIdEnum["AFTERNOONHELLO2"] = "AFTERNOON_HELLO_2";
    SendEmailToUsersRequestEmailTemplateIdEnum["ATTICUSATTORNEYCONTACT1"] = "ATTICUS_ATTORNEY_CONTACT_1";
    SendEmailToUsersRequestEmailTemplateIdEnum["CAMERATICKETNMV"] = "CAMERA_TICKET_NMV";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASECANCELLEDBYUSER"] = "CASE_CANCELLED_BY_USER";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASECANCELLEDDUPLICATE"] = "CASE_CANCELLED_DUPLICATE";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASECANCELLEDNMV"] = "CASE_CANCELLED_NMV";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASECANCELLEDNONPAYMENT"] = "CASE_CANCELLED_NON_PAYMENT";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASECANCELLEDNOLAWFIRM"] = "CASE_CANCELLED_NO_LAWFIRM";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASECANCELLEDOVERDUE"] = "CASE_CANCELLED_OVERDUE";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASECANCELLEDTOOSHORTNOTICE"] = "CASE_CANCELLED_TOO_SHORT_NOTICE";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASUALFIRSTV1"] = "CASUAL_FIRST_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["CASUALSECONDV1"] = "CASUAL_SECOND_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["FRIDAYINTRO"] = "FRIDAY_INTRO";
    SendEmailToUsersRequestEmailTemplateIdEnum["INVALIDIMAGEUPLOAD1"] = "INVALID_IMAGE_UPLOAD_1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT10V1"] = "LAWFIRM_CONTACT_10_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT1V1"] = "LAWFIRM_CONTACT_1_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT2V1"] = "LAWFIRM_CONTACT_2_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT3V1"] = "LAWFIRM_CONTACT_3_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT4V1"] = "LAWFIRM_CONTACT_4_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT5V1"] = "LAWFIRM_CONTACT_5_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT6V1"] = "LAWFIRM_CONTACT_6_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT7V1"] = "LAWFIRM_CONTACT_7_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT8V1"] = "LAWFIRM_CONTACT_8_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWFIRMCONTACT9V1"] = "LAWFIRM_CONTACT_9_V1";
    SendEmailToUsersRequestEmailTemplateIdEnum["LAWYERPOSTCOURTREMINDER"] = "LAWYER_POST_COURT_REMINDER";
    SendEmailToUsersRequestEmailTemplateIdEnum["NOCOVERAGEAVAILABLE"] = "NO_COVERAGE_AVAILABLE";
    SendEmailToUsersRequestEmailTemplateIdEnum["NOCOVERAGEAVAILABLEMISSINGCOURT"] = "NO_COVERAGE_AVAILABLE_MISSING_COURT";
    SendEmailToUsersRequestEmailTemplateIdEnum["PARKINGTICKET"] = "PARKING_TICKET";
    SendEmailToUsersRequestEmailTemplateIdEnum["POSTWIN"] = "POST_WIN";
    SendEmailToUsersRequestEmailTemplateIdEnum["POSTWINLASTASK"] = "POST_WIN_LAST_ASK";
    SendEmailToUsersRequestEmailTemplateIdEnum["POSTWINV2"] = "POST_WIN_V2";
    SendEmailToUsersRequestEmailTemplateIdEnum["SUNDAYAFTERNOONHELLO"] = "SUNDAY_AFTERNOON_HELLO";
    SendEmailToUsersRequestEmailTemplateIdEnum["TICKETDUEWA"] = "TICKET_DUE_WA";
    SendEmailToUsersRequestEmailTemplateIdEnum["TICKETEVALWITHCITATION"] = "TICKET_EVAL_WITH_CITATION";
    SendEmailToUsersRequestEmailTemplateIdEnum["TICKETEVALWITHCITATION2NDFOLLOWUP"] = "TICKET_EVAL_WITH_CITATION_2ND_FOLLOW_UP";
    SendEmailToUsersRequestEmailTemplateIdEnum["TICKETEVALWITHCITATIONCLOSEOUT"] = "TICKET_EVAL_WITH_CITATION_CLOSE_OUT";
})(SendEmailToUsersRequestEmailTemplateIdEnum = exports.SendEmailToUsersRequestEmailTemplateIdEnum || (exports.SendEmailToUsersRequestEmailTemplateIdEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SendPayoutToLawfirmRequestTransactionMethodEnum;
(function (SendPayoutToLawfirmRequestTransactionMethodEnum) {
    SendPayoutToLawfirmRequestTransactionMethodEnum["CHECK"] = "CHECK";
    SendPayoutToLawfirmRequestTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    SendPayoutToLawfirmRequestTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    SendPayoutToLawfirmRequestTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    SendPayoutToLawfirmRequestTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    SendPayoutToLawfirmRequestTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    SendPayoutToLawfirmRequestTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    SendPayoutToLawfirmRequestTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    SendPayoutToLawfirmRequestTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    SendPayoutToLawfirmRequestTransactionMethodEnum["VENMO"] = "VENMO";
    SendPayoutToLawfirmRequestTransactionMethodEnum["ZELLE"] = "ZELLE";
})(SendPayoutToLawfirmRequestTransactionMethodEnum = exports.SendPayoutToLawfirmRequestTransactionMethodEnum || (exports.SendPayoutToLawfirmRequestTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum;
(function (SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum) {
    SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum["ACCEPTED"] = "ACCEPTED";
    SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum["CREATED"] = "CREATED";
    SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum["DECLINED"] = "DECLINED";
    SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum["EXPIRED"] = "EXPIRED";
    SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum["PENDING"] = "PENDING";
    SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum["REMATCHED"] = "REMATCHED";
    SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum["REMATCHEDREFERRAL"] = "REMATCHED_REFERRAL";
})(SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum = exports.SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum || (exports.SetLawfirmCaseDecisionRequestCaseDecisionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SetReferralSourceRequestClientTypeEnum;
(function (SetReferralSourceRequestClientTypeEnum) {
    SetReferralSourceRequestClientTypeEnum["ANDROID"] = "ANDROID";
    SetReferralSourceRequestClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    SetReferralSourceRequestClientTypeEnum["DMVGO"] = "DMV_GO";
    SetReferralSourceRequestClientTypeEnum["DMVORG"] = "DMV_ORG";
    SetReferralSourceRequestClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    SetReferralSourceRequestClientTypeEnum["IOS"] = "IOS";
    SetReferralSourceRequestClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    SetReferralSourceRequestClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    SetReferralSourceRequestClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    SetReferralSourceRequestClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    SetReferralSourceRequestClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    SetReferralSourceRequestClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    SetReferralSourceRequestClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    SetReferralSourceRequestClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    SetReferralSourceRequestClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    SetReferralSourceRequestClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    SetReferralSourceRequestClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    SetReferralSourceRequestClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    SetReferralSourceRequestClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(SetReferralSourceRequestClientTypeEnum = exports.SetReferralSourceRequestClientTypeEnum || (exports.SetReferralSourceRequestClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SocialLoginRequestClientTypeEnum;
(function (SocialLoginRequestClientTypeEnum) {
    SocialLoginRequestClientTypeEnum["ANDROID"] = "ANDROID";
    SocialLoginRequestClientTypeEnum["DESKTOPWEBAPP"] = "DESKTOP_WEBAPP";
    SocialLoginRequestClientTypeEnum["DMVGO"] = "DMV_GO";
    SocialLoginRequestClientTypeEnum["DMVORG"] = "DMV_ORG";
    SocialLoginRequestClientTypeEnum["FRESHDESK"] = "FRESH_DESK";
    SocialLoginRequestClientTypeEnum["IOS"] = "IOS";
    SocialLoginRequestClientTypeEnum["MOBILEWEBAPP"] = "MOBILE_WEBAPP";
    SocialLoginRequestClientTypeEnum["OTRADMINCONSOLE"] = "OTR_ADMIN_CONSOLE";
    SocialLoginRequestClientTypeEnum["OTRADMINCONSOLEDEVO"] = "OTR_ADMIN_CONSOLE_DEVO";
    SocialLoginRequestClientTypeEnum["OTRADMINCONSOLELOCALHOST"] = "OTR_ADMIN_CONSOLE_LOCALHOST";
    SocialLoginRequestClientTypeEnum["OTREXPLORER"] = "OTR_EXPLORER";
    SocialLoginRequestClientTypeEnum["OTRLAWFIRMPORTAL"] = "OTR_LAWFIRM_PORTAL";
    SocialLoginRequestClientTypeEnum["OTRLAWFIRMPORTALDEVO"] = "OTR_LAWFIRM_PORTAL_DEVO";
    SocialLoginRequestClientTypeEnum["OTRLAWFIRMPORTALLOCALHOST"] = "OTR_LAWFIRM_PORTAL_LOCALHOST";
    SocialLoginRequestClientTypeEnum["OTRWEBSITE"] = "OTR_WEBSITE";
    SocialLoginRequestClientTypeEnum["OTRWEBSITEDEVO"] = "OTR_WEBSITE_DEVO";
    SocialLoginRequestClientTypeEnum["OTRWEBSITELOCALHOST"] = "OTR_WEBSITE_LOCALHOST";
    SocialLoginRequestClientTypeEnum["OTRWIDGET"] = "OTR_WIDGET";
    SocialLoginRequestClientTypeEnum["UNKNOWN"] = "UNKNOWN";
})(SocialLoginRequestClientTypeEnum = exports.SocialLoginRequestClientTypeEnum || (exports.SocialLoginRequestClientTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SocialPhoneNumberTypeEnum;
(function (SocialPhoneNumberTypeEnum) {
    SocialPhoneNumberTypeEnum["HOME"] = "HOME";
    SocialPhoneNumberTypeEnum["MOBILE"] = "MOBILE";
    SocialPhoneNumberTypeEnum["NOTSPECIFIED"] = "NOT_SPECIFIED";
    SocialPhoneNumberTypeEnum["OFFICE"] = "OFFICE";
})(SocialPhoneNumberTypeEnum = exports.SocialPhoneNumberTypeEnum || (exports.SocialPhoneNumberTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StripeConnectedAccountDomainAccountTypeEnum;
(function (StripeConnectedAccountDomainAccountTypeEnum) {
    StripeConnectedAccountDomainAccountTypeEnum["EXPRESS"] = "EXPRESS";
    StripeConnectedAccountDomainAccountTypeEnum["STANDARD"] = "STANDARD";
})(StripeConnectedAccountDomainAccountTypeEnum = exports.StripeConnectedAccountDomainAccountTypeEnum || (exports.StripeConnectedAccountDomainAccountTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StripeCustomerAccountDomainEntityTypeEnum;
(function (StripeCustomerAccountDomainEntityTypeEnum) {
    StripeCustomerAccountDomainEntityTypeEnum["CASE"] = "CASE";
    StripeCustomerAccountDomainEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    StripeCustomerAccountDomainEntityTypeEnum["CITATION"] = "CITATION";
    StripeCustomerAccountDomainEntityTypeEnum["COURT"] = "COURT";
    StripeCustomerAccountDomainEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    StripeCustomerAccountDomainEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    StripeCustomerAccountDomainEntityTypeEnum["LAWYER"] = "LAWYER";
    StripeCustomerAccountDomainEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    StripeCustomerAccountDomainEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    StripeCustomerAccountDomainEntityTypeEnum["USER"] = "USER";
})(StripeCustomerAccountDomainEntityTypeEnum = exports.StripeCustomerAccountDomainEntityTypeEnum || (exports.StripeCustomerAccountDomainEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StripeDisputeDomainCaseStatusEnum;
(function (StripeDisputeDomainCaseStatusEnum) {
    StripeDisputeDomainCaseStatusEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    StripeDisputeDomainCaseStatusEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    StripeDisputeDomainCaseStatusEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    StripeDisputeDomainCaseStatusEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    StripeDisputeDomainCaseStatusEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    StripeDisputeDomainCaseStatusEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    StripeDisputeDomainCaseStatusEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    StripeDisputeDomainCaseStatusEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    StripeDisputeDomainCaseStatusEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    StripeDisputeDomainCaseStatusEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    StripeDisputeDomainCaseStatusEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    StripeDisputeDomainCaseStatusEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    StripeDisputeDomainCaseStatusEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    StripeDisputeDomainCaseStatusEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    StripeDisputeDomainCaseStatusEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    StripeDisputeDomainCaseStatusEnum["DEFERRED"] = "DEFERRED";
    StripeDisputeDomainCaseStatusEnum["DISMISSED"] = "DISMISSED";
    StripeDisputeDomainCaseStatusEnum["DIVERSION"] = "DIVERSION";
    StripeDisputeDomainCaseStatusEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    StripeDisputeDomainCaseStatusEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    StripeDisputeDomainCaseStatusEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    StripeDisputeDomainCaseStatusEnum["LOST"] = "LOST";
    StripeDisputeDomainCaseStatusEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    StripeDisputeDomainCaseStatusEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    StripeDisputeDomainCaseStatusEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    StripeDisputeDomainCaseStatusEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    StripeDisputeDomainCaseStatusEnum["STALE"] = "STALE";
    StripeDisputeDomainCaseStatusEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    StripeDisputeDomainCaseStatusEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(StripeDisputeDomainCaseStatusEnum = exports.StripeDisputeDomainCaseStatusEnum || (exports.StripeDisputeDomainCaseStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StripeDisputeDomainPaymentRecipientEnum;
(function (StripeDisputeDomainPaymentRecipientEnum) {
    StripeDisputeDomainPaymentRecipientEnum["LAWFIRM"] = "LAWFIRM";
    StripeDisputeDomainPaymentRecipientEnum["OTR"] = "OTR";
})(StripeDisputeDomainPaymentRecipientEnum = exports.StripeDisputeDomainPaymentRecipientEnum || (exports.StripeDisputeDomainPaymentRecipientEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SubscriberDomainSubscriptionTypeEnum;
(function (SubscriberDomainSubscriptionTypeEnum) {
    SubscriberDomainSubscriptionTypeEnum["WEBBROCHURELAUNCHNOTIFICATION"] = "WEB_BROCHURE_LAUNCH_NOTIFICATION";
})(SubscriberDomainSubscriptionTypeEnum = exports.SubscriberDomainSubscriptionTypeEnum || (exports.SubscriberDomainSubscriptionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TicketLeadDomainClassificationEnum;
(function (TicketLeadDomainClassificationEnum) {
    TicketLeadDomainClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    TicketLeadDomainClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    TicketLeadDomainClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    TicketLeadDomainClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    TicketLeadDomainClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    TicketLeadDomainClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    TicketLeadDomainClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    TicketLeadDomainClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    TicketLeadDomainClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    TicketLeadDomainClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    TicketLeadDomainClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    TicketLeadDomainClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    TicketLeadDomainClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    TicketLeadDomainClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    TicketLeadDomainClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    TicketLeadDomainClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    TicketLeadDomainClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    TicketLeadDomainClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    TicketLeadDomainClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    TicketLeadDomainClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    TicketLeadDomainClassificationEnum["FELONY"] = "FELONY";
    TicketLeadDomainClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    TicketLeadDomainClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    TicketLeadDomainClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    TicketLeadDomainClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    TicketLeadDomainClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    TicketLeadDomainClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["INFRACTION"] = "INFRACTION";
    TicketLeadDomainClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    TicketLeadDomainClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    TicketLeadDomainClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    TicketLeadDomainClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    TicketLeadDomainClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    TicketLeadDomainClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    TicketLeadDomainClassificationEnum["NONMOVING"] = "NON_MOVING";
    TicketLeadDomainClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    TicketLeadDomainClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    TicketLeadDomainClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    TicketLeadDomainClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    TicketLeadDomainClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    TicketLeadDomainClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    TicketLeadDomainClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(TicketLeadDomainClassificationEnum = exports.TicketLeadDomainClassificationEnum || (exports.TicketLeadDomainClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TicketReviewRequestSourceEnum;
(function (TicketReviewRequestSourceEnum) {
    TicketReviewRequestSourceEnum["OTREXITPOPUP"] = "OTR_EXIT_POPUP";
    TicketReviewRequestSourceEnum["QUARANTINELANDINGPAGE"] = "QUARANTINE_LANDING_PAGE";
    TicketReviewRequestSourceEnum["TICKETREVIEWPAGE"] = "TICKET_REVIEW_PAGE";
})(TicketReviewRequestSourceEnum = exports.TicketReviewRequestSourceEnum || (exports.TicketReviewRequestSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TicketReviewRequestReqSourceEnum;
(function (TicketReviewRequestReqSourceEnum) {
    TicketReviewRequestReqSourceEnum["OTREXITPOPUP"] = "OTR_EXIT_POPUP";
    TicketReviewRequestReqSourceEnum["QUARANTINELANDINGPAGE"] = "QUARANTINE_LANDING_PAGE";
    TicketReviewRequestReqSourceEnum["TICKETREVIEWPAGE"] = "TICKET_REVIEW_PAGE";
})(TicketReviewRequestReqSourceEnum = exports.TicketReviewRequestReqSourceEnum || (exports.TicketReviewRequestReqSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TicketReviewRequestResSourceEnum;
(function (TicketReviewRequestResSourceEnum) {
    TicketReviewRequestResSourceEnum["OTREXITPOPUP"] = "OTR_EXIT_POPUP";
    TicketReviewRequestResSourceEnum["QUARANTINELANDINGPAGE"] = "QUARANTINE_LANDING_PAGE";
    TicketReviewRequestResSourceEnum["TICKETREVIEWPAGE"] = "TICKET_REVIEW_PAGE";
})(TicketReviewRequestResSourceEnum = exports.TicketReviewRequestResSourceEnum || (exports.TicketReviewRequestResSourceEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TrafficViolationTypeDomainViolationClassificationEnum;
(function (TrafficViolationTypeDomainViolationClassificationEnum) {
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    TrafficViolationTypeDomainViolationClassificationEnum["FELONY"] = "FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["INFRACTION"] = "INFRACTION";
    TrafficViolationTypeDomainViolationClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    TrafficViolationTypeDomainViolationClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    TrafficViolationTypeDomainViolationClassificationEnum["NONMOVING"] = "NON_MOVING";
    TrafficViolationTypeDomainViolationClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    TrafficViolationTypeDomainViolationClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    TrafficViolationTypeDomainViolationClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    TrafficViolationTypeDomainViolationClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    TrafficViolationTypeDomainViolationClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    TrafficViolationTypeDomainViolationClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    TrafficViolationTypeDomainViolationClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(TrafficViolationTypeDomainViolationClassificationEnum = exports.TrafficViolationTypeDomainViolationClassificationEnum || (exports.TrafficViolationTypeDomainViolationClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateCasePaymentRequestRecipientEnum;
(function (UpdateCasePaymentRequestRecipientEnum) {
    UpdateCasePaymentRequestRecipientEnum["LAWFIRM"] = "LAWFIRM";
    UpdateCasePaymentRequestRecipientEnum["OTR"] = "OTR";
})(UpdateCasePaymentRequestRecipientEnum = exports.UpdateCasePaymentRequestRecipientEnum || (exports.UpdateCasePaymentRequestRecipientEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateCasePaymentRequestTransactionMethodEnum;
(function (UpdateCasePaymentRequestTransactionMethodEnum) {
    UpdateCasePaymentRequestTransactionMethodEnum["CHECK"] = "CHECK";
    UpdateCasePaymentRequestTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    UpdateCasePaymentRequestTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    UpdateCasePaymentRequestTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    UpdateCasePaymentRequestTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    UpdateCasePaymentRequestTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    UpdateCasePaymentRequestTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    UpdateCasePaymentRequestTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    UpdateCasePaymentRequestTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    UpdateCasePaymentRequestTransactionMethodEnum["VENMO"] = "VENMO";
    UpdateCasePaymentRequestTransactionMethodEnum["ZELLE"] = "ZELLE";
})(UpdateCasePaymentRequestTransactionMethodEnum = exports.UpdateCasePaymentRequestTransactionMethodEnum || (exports.UpdateCasePaymentRequestTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateLawfirmFeeRequestTransactionMethodEnum;
(function (UpdateLawfirmFeeRequestTransactionMethodEnum) {
    UpdateLawfirmFeeRequestTransactionMethodEnum["CHECK"] = "CHECK";
    UpdateLawfirmFeeRequestTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    UpdateLawfirmFeeRequestTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    UpdateLawfirmFeeRequestTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    UpdateLawfirmFeeRequestTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    UpdateLawfirmFeeRequestTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    UpdateLawfirmFeeRequestTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    UpdateLawfirmFeeRequestTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    UpdateLawfirmFeeRequestTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    UpdateLawfirmFeeRequestTransactionMethodEnum["VENMO"] = "VENMO";
    UpdateLawfirmFeeRequestTransactionMethodEnum["ZELLE"] = "ZELLE";
})(UpdateLawfirmFeeRequestTransactionMethodEnum = exports.UpdateLawfirmFeeRequestTransactionMethodEnum || (exports.UpdateLawfirmFeeRequestTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateLawfirmModelLawfirmPaymentModelEnum;
(function (UpdateLawfirmModelLawfirmPaymentModelEnum) {
    UpdateLawfirmModelLawfirmPaymentModelEnum["DESTINATIONACCOUNT"] = "DESTINATION_ACCOUNT";
    UpdateLawfirmModelLawfirmPaymentModelEnum["SEPARATECHARGE"] = "SEPARATE_CHARGE";
    UpdateLawfirmModelLawfirmPaymentModelEnum["TRANSFERDEDUCTION"] = "TRANSFER_DEDUCTION";
})(UpdateLawfirmModelLawfirmPaymentModelEnum = exports.UpdateLawfirmModelLawfirmPaymentModelEnum || (exports.UpdateLawfirmModelLawfirmPaymentModelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateLawfirmModelLawfirmStateEnum;
(function (UpdateLawfirmModelLawfirmStateEnum) {
    UpdateLawfirmModelLawfirmStateEnum["ACCOUNTCLOSED"] = "ACCOUNT_CLOSED";
    UpdateLawfirmModelLawfirmStateEnum["DUPLICATE"] = "DUPLICATE";
    UpdateLawfirmModelLawfirmStateEnum["ESTABLISHED"] = "ESTABLISHED";
    UpdateLawfirmModelLawfirmStateEnum["FUTURELEAD"] = "FUTURE_LEAD";
    UpdateLawfirmModelLawfirmStateEnum["INTRIAL"] = "IN_TRIAL";
    UpdateLawfirmModelLawfirmStateEnum["LAWFIRMINTERESTED"] = "LAWFIRM_INTERESTED";
    UpdateLawfirmModelLawfirmStateEnum["LAWFIRMLEAD"] = "LAWFIRM_LEAD";
    UpdateLawfirmModelLawfirmStateEnum["LAWFIRMNOTINTERESTED"] = "LAWFIRM_NOT_INTERESTED";
    UpdateLawfirmModelLawfirmStateEnum["NOTINTERESTEDFEESPLITTINGETHICS"] = "NOT_INTERESTED_FEE_SPLITTING_ETHICS";
    UpdateLawfirmModelLawfirmStateEnum["NOTINTERESTEDREFUNDETHICS"] = "NOT_INTERESTED_REFUND_ETHICS";
    UpdateLawfirmModelLawfirmStateEnum["ONBOARDING"] = "ONBOARDING";
    UpdateLawfirmModelLawfirmStateEnum["TEMPORARILYTURNEDOFF"] = "TEMPORARILY_TURNED_OFF";
    UpdateLawfirmModelLawfirmStateEnum["TERMINATEDFRAUD"] = "TERMINATED_FRAUD";
    UpdateLawfirmModelLawfirmStateEnum["TERMINATEDPOORSERVICE"] = "TERMINATED_POOR_SERVICE";
    UpdateLawfirmModelLawfirmStateEnum["TERMINATEDPOORSUCCESS"] = "TERMINATED_POOR_SUCCESS";
    UpdateLawfirmModelLawfirmStateEnum["UNDERREVIEW"] = "UNDER_REVIEW";
})(UpdateLawfirmModelLawfirmStateEnum = exports.UpdateLawfirmModelLawfirmStateEnum || (exports.UpdateLawfirmModelLawfirmStateEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateLawfirmPaymentModelRequestPaymentModelEnum;
(function (UpdateLawfirmPaymentModelRequestPaymentModelEnum) {
    UpdateLawfirmPaymentModelRequestPaymentModelEnum["DESTINATIONACCOUNT"] = "DESTINATION_ACCOUNT";
    UpdateLawfirmPaymentModelRequestPaymentModelEnum["SEPARATECHARGE"] = "SEPARATE_CHARGE";
    UpdateLawfirmPaymentModelRequestPaymentModelEnum["TRANSFERDEDUCTION"] = "TRANSFER_DEDUCTION";
})(UpdateLawfirmPaymentModelRequestPaymentModelEnum = exports.UpdateLawfirmPaymentModelRequestPaymentModelEnum || (exports.UpdateLawfirmPaymentModelRequestPaymentModelEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateLawfirmPayoutRequestTransactionMethodEnum;
(function (UpdateLawfirmPayoutRequestTransactionMethodEnum) {
    UpdateLawfirmPayoutRequestTransactionMethodEnum["CHECK"] = "CHECK";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["DESTINATIONCHARGETRANSFER"] = "DESTINATION_CHARGE_TRANSFER";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["LOBCHECK"] = "LOB_CHECK";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["PAYPAL"] = "PAYPAL";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["STRIPEAPPLICATIONFEE"] = "STRIPE_APPLICATION_FEE";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["STRIPECONNECTDEBIT"] = "STRIPE_CONNECT_DEBIT";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["STRIPETRANSFER"] = "STRIPE_TRANSFER";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["UNKNOWN"] = "UNKNOWN";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["VENMO"] = "VENMO";
    UpdateLawfirmPayoutRequestTransactionMethodEnum["ZELLE"] = "ZELLE";
})(UpdateLawfirmPayoutRequestTransactionMethodEnum = exports.UpdateLawfirmPayoutRequestTransactionMethodEnum || (exports.UpdateLawfirmPayoutRequestTransactionMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdatePhoneNumberEntityTypeEnum;
(function (UpdatePhoneNumberEntityTypeEnum) {
    UpdatePhoneNumberEntityTypeEnum["CASE"] = "CASE";
    UpdatePhoneNumberEntityTypeEnum["CASEPAYMENT"] = "CASE_PAYMENT";
    UpdatePhoneNumberEntityTypeEnum["CITATION"] = "CITATION";
    UpdatePhoneNumberEntityTypeEnum["COURT"] = "COURT";
    UpdatePhoneNumberEntityTypeEnum["LAWFIRM"] = "LAWFIRM";
    UpdatePhoneNumberEntityTypeEnum["LAWFIRMCASE"] = "LAWFIRM_CASE";
    UpdatePhoneNumberEntityTypeEnum["LAWYER"] = "LAWYER";
    UpdatePhoneNumberEntityTypeEnum["LINEITEM"] = "LINE_ITEM";
    UpdatePhoneNumberEntityTypeEnum["STRIPECHARGE"] = "STRIPE_CHARGE";
    UpdatePhoneNumberEntityTypeEnum["USER"] = "USER";
})(UpdatePhoneNumberEntityTypeEnum = exports.UpdatePhoneNumberEntityTypeEnum || (exports.UpdatePhoneNumberEntityTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdatePhoneNumberTypeEnum;
(function (UpdatePhoneNumberTypeEnum) {
    UpdatePhoneNumberTypeEnum["HOME"] = "HOME";
    UpdatePhoneNumberTypeEnum["MOBILE"] = "MOBILE";
    UpdatePhoneNumberTypeEnum["NOTSPECIFIED"] = "NOT_SPECIFIED";
    UpdatePhoneNumberTypeEnum["OFFICE"] = "OFFICE";
})(UpdatePhoneNumberTypeEnum = exports.UpdatePhoneNumberTypeEnum || (exports.UpdatePhoneNumberTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateRefundEligibilityForCaseRequestRefundOwnerEnum;
(function (UpdateRefundEligibilityForCaseRequestRefundOwnerEnum) {
    UpdateRefundEligibilityForCaseRequestRefundOwnerEnum["LAWFIRM"] = "LAWFIRM";
    UpdateRefundEligibilityForCaseRequestRefundOwnerEnum["NONE"] = "NONE";
    UpdateRefundEligibilityForCaseRequestRefundOwnerEnum["OTR"] = "OTR";
})(UpdateRefundEligibilityForCaseRequestRefundOwnerEnum = exports.UpdateRefundEligibilityForCaseRequestRefundOwnerEnum || (exports.UpdateRefundEligibilityForCaseRequestRefundOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateUserModelLoginProviderEnum;
(function (UpdateUserModelLoginProviderEnum) {
    UpdateUserModelLoginProviderEnum["APPLE"] = "APPLE";
    UpdateUserModelLoginProviderEnum["EMAIL"] = "EMAIL";
    UpdateUserModelLoginProviderEnum["FACEBOOK"] = "FACEBOOK";
    UpdateUserModelLoginProviderEnum["GOOGLE"] = "GOOGLE";
    UpdateUserModelLoginProviderEnum["PHONE"] = "PHONE";
    UpdateUserModelLoginProviderEnum["TWITTER"] = "TWITTER";
})(UpdateUserModelLoginProviderEnum = exports.UpdateUserModelLoginProviderEnum || (exports.UpdateUserModelLoginProviderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateUserModelPrivacyModeEnum;
(function (UpdateUserModelPrivacyModeEnum) {
    UpdateUserModelPrivacyModeEnum["FRIENDS"] = "FRIENDS";
    UpdateUserModelPrivacyModeEnum["PRIVATE"] = "PRIVATE";
    UpdateUserModelPrivacyModeEnum["PUBLIC"] = "PUBLIC";
    UpdateUserModelPrivacyModeEnum["SEMIPUBLIC"] = "SEMI_PUBLIC";
})(UpdateUserModelPrivacyModeEnum = exports.UpdateUserModelPrivacyModeEnum || (exports.UpdateUserModelPrivacyModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateUserRolesRequestRolesEnum;
(function (UpdateUserRolesRequestRolesEnum) {
    UpdateUserRolesRequestRolesEnum["ADMIN"] = "ADMIN";
    UpdateUserRolesRequestRolesEnum["DEFENDANT"] = "DEFENDANT";
    UpdateUserRolesRequestRolesEnum["LAWYER"] = "LAWYER";
    UpdateUserRolesRequestRolesEnum["PARTNER"] = "PARTNER";
    UpdateUserRolesRequestRolesEnum["UNKNOWN"] = "UNKNOWN";
})(UpdateUserRolesRequestRolesEnum = exports.UpdateUserRolesRequestRolesEnum || (exports.UpdateUserRolesRequestRolesEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateViolationRequestClassificationEnum;
(function (UpdateViolationRequestClassificationEnum) {
    UpdateViolationRequestClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    UpdateViolationRequestClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    UpdateViolationRequestClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    UpdateViolationRequestClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    UpdateViolationRequestClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    UpdateViolationRequestClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    UpdateViolationRequestClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    UpdateViolationRequestClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    UpdateViolationRequestClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    UpdateViolationRequestClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    UpdateViolationRequestClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    UpdateViolationRequestClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    UpdateViolationRequestClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    UpdateViolationRequestClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    UpdateViolationRequestClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    UpdateViolationRequestClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    UpdateViolationRequestClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    UpdateViolationRequestClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    UpdateViolationRequestClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    UpdateViolationRequestClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    UpdateViolationRequestClassificationEnum["FELONY"] = "FELONY";
    UpdateViolationRequestClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    UpdateViolationRequestClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    UpdateViolationRequestClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    UpdateViolationRequestClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    UpdateViolationRequestClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    UpdateViolationRequestClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["INFRACTION"] = "INFRACTION";
    UpdateViolationRequestClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    UpdateViolationRequestClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    UpdateViolationRequestClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    UpdateViolationRequestClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    UpdateViolationRequestClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    UpdateViolationRequestClassificationEnum["NONMOVING"] = "NON_MOVING";
    UpdateViolationRequestClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    UpdateViolationRequestClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    UpdateViolationRequestClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    UpdateViolationRequestClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    UpdateViolationRequestClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    UpdateViolationRequestClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    UpdateViolationRequestClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(UpdateViolationRequestClassificationEnum = exports.UpdateViolationRequestClassificationEnum || (exports.UpdateViolationRequestClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserAccountModelLoginProviderEnum;
(function (UserAccountModelLoginProviderEnum) {
    UserAccountModelLoginProviderEnum["APPLE"] = "APPLE";
    UserAccountModelLoginProviderEnum["EMAIL"] = "EMAIL";
    UserAccountModelLoginProviderEnum["FACEBOOK"] = "FACEBOOK";
    UserAccountModelLoginProviderEnum["GOOGLE"] = "GOOGLE";
    UserAccountModelLoginProviderEnum["PHONE"] = "PHONE";
    UserAccountModelLoginProviderEnum["TWITTER"] = "TWITTER";
})(UserAccountModelLoginProviderEnum = exports.UserAccountModelLoginProviderEnum || (exports.UserAccountModelLoginProviderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainLawyerJobTitleEnum;
(function (UserDomainLawyerJobTitleEnum) {
    UserDomainLawyerJobTitleEnum["ACCOUNTANT"] = "ACCOUNTANT";
    UserDomainLawyerJobTitleEnum["ATTORNEY"] = "ATTORNEY";
    UserDomainLawyerJobTitleEnum["ATTORNEYASSOCIATE"] = "ATTORNEY_ASSOCIATE";
    UserDomainLawyerJobTitleEnum["ATTORNEYCOUNSEL"] = "ATTORNEY_COUNSEL";
    UserDomainLawyerJobTitleEnum["ATTORNEYMANAGINGPARTNER"] = "ATTORNEY_MANAGING_PARTNER";
    UserDomainLawyerJobTitleEnum["ATTORNEYPARTNER"] = "ATTORNEY_PARTNER";
    UserDomainLawyerJobTitleEnum["ATTORNEYSTAFF"] = "ATTORNEY_STAFF";
    UserDomainLawyerJobTitleEnum["CUSTOMERSERVICEREP"] = "CUSTOMER_SERVICE_REP";
    UserDomainLawyerJobTitleEnum["LEGALASSISTANT"] = "LEGAL_ASSISTANT";
    UserDomainLawyerJobTitleEnum["LEGALINTERN"] = "LEGAL_INTERN";
    UserDomainLawyerJobTitleEnum["LEGALSECRETARY"] = "LEGAL_SECRETARY";
    UserDomainLawyerJobTitleEnum["OTHER"] = "OTHER";
    UserDomainLawyerJobTitleEnum["PARALEGAL"] = "PARALEGAL";
})(UserDomainLawyerJobTitleEnum = exports.UserDomainLawyerJobTitleEnum || (exports.UserDomainLawyerJobTitleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainLoginProviderEnum;
(function (UserDomainLoginProviderEnum) {
    UserDomainLoginProviderEnum["APPLE"] = "APPLE";
    UserDomainLoginProviderEnum["EMAIL"] = "EMAIL";
    UserDomainLoginProviderEnum["FACEBOOK"] = "FACEBOOK";
    UserDomainLoginProviderEnum["GOOGLE"] = "GOOGLE";
    UserDomainLoginProviderEnum["PHONE"] = "PHONE";
    UserDomainLoginProviderEnum["TWITTER"] = "TWITTER";
})(UserDomainLoginProviderEnum = exports.UserDomainLoginProviderEnum || (exports.UserDomainLoginProviderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainPrivacyModeEnum;
(function (UserDomainPrivacyModeEnum) {
    UserDomainPrivacyModeEnum["FRIENDS"] = "FRIENDS";
    UserDomainPrivacyModeEnum["PRIVATE"] = "PRIVATE";
    UserDomainPrivacyModeEnum["PUBLIC"] = "PUBLIC";
    UserDomainPrivacyModeEnum["SEMIPUBLIC"] = "SEMI_PUBLIC";
})(UserDomainPrivacyModeEnum = exports.UserDomainPrivacyModeEnum || (exports.UserDomainPrivacyModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainReqLawyerJobTitleEnum;
(function (UserDomainReqLawyerJobTitleEnum) {
    UserDomainReqLawyerJobTitleEnum["ACCOUNTANT"] = "ACCOUNTANT";
    UserDomainReqLawyerJobTitleEnum["ATTORNEY"] = "ATTORNEY";
    UserDomainReqLawyerJobTitleEnum["ATTORNEYASSOCIATE"] = "ATTORNEY_ASSOCIATE";
    UserDomainReqLawyerJobTitleEnum["ATTORNEYCOUNSEL"] = "ATTORNEY_COUNSEL";
    UserDomainReqLawyerJobTitleEnum["ATTORNEYMANAGINGPARTNER"] = "ATTORNEY_MANAGING_PARTNER";
    UserDomainReqLawyerJobTitleEnum["ATTORNEYPARTNER"] = "ATTORNEY_PARTNER";
    UserDomainReqLawyerJobTitleEnum["ATTORNEYSTAFF"] = "ATTORNEY_STAFF";
    UserDomainReqLawyerJobTitleEnum["CUSTOMERSERVICEREP"] = "CUSTOMER_SERVICE_REP";
    UserDomainReqLawyerJobTitleEnum["LEGALASSISTANT"] = "LEGAL_ASSISTANT";
    UserDomainReqLawyerJobTitleEnum["LEGALINTERN"] = "LEGAL_INTERN";
    UserDomainReqLawyerJobTitleEnum["LEGALSECRETARY"] = "LEGAL_SECRETARY";
    UserDomainReqLawyerJobTitleEnum["OTHER"] = "OTHER";
    UserDomainReqLawyerJobTitleEnum["PARALEGAL"] = "PARALEGAL";
})(UserDomainReqLawyerJobTitleEnum = exports.UserDomainReqLawyerJobTitleEnum || (exports.UserDomainReqLawyerJobTitleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainReqLoginProviderEnum;
(function (UserDomainReqLoginProviderEnum) {
    UserDomainReqLoginProviderEnum["APPLE"] = "APPLE";
    UserDomainReqLoginProviderEnum["EMAIL"] = "EMAIL";
    UserDomainReqLoginProviderEnum["FACEBOOK"] = "FACEBOOK";
    UserDomainReqLoginProviderEnum["GOOGLE"] = "GOOGLE";
    UserDomainReqLoginProviderEnum["PHONE"] = "PHONE";
    UserDomainReqLoginProviderEnum["TWITTER"] = "TWITTER";
})(UserDomainReqLoginProviderEnum = exports.UserDomainReqLoginProviderEnum || (exports.UserDomainReqLoginProviderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainReqPrivacyModeEnum;
(function (UserDomainReqPrivacyModeEnum) {
    UserDomainReqPrivacyModeEnum["FRIENDS"] = "FRIENDS";
    UserDomainReqPrivacyModeEnum["PRIVATE"] = "PRIVATE";
    UserDomainReqPrivacyModeEnum["PUBLIC"] = "PUBLIC";
    UserDomainReqPrivacyModeEnum["SEMIPUBLIC"] = "SEMI_PUBLIC";
})(UserDomainReqPrivacyModeEnum = exports.UserDomainReqPrivacyModeEnum || (exports.UserDomainReqPrivacyModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainResLawyerJobTitleEnum;
(function (UserDomainResLawyerJobTitleEnum) {
    UserDomainResLawyerJobTitleEnum["ACCOUNTANT"] = "ACCOUNTANT";
    UserDomainResLawyerJobTitleEnum["ATTORNEY"] = "ATTORNEY";
    UserDomainResLawyerJobTitleEnum["ATTORNEYASSOCIATE"] = "ATTORNEY_ASSOCIATE";
    UserDomainResLawyerJobTitleEnum["ATTORNEYCOUNSEL"] = "ATTORNEY_COUNSEL";
    UserDomainResLawyerJobTitleEnum["ATTORNEYMANAGINGPARTNER"] = "ATTORNEY_MANAGING_PARTNER";
    UserDomainResLawyerJobTitleEnum["ATTORNEYPARTNER"] = "ATTORNEY_PARTNER";
    UserDomainResLawyerJobTitleEnum["ATTORNEYSTAFF"] = "ATTORNEY_STAFF";
    UserDomainResLawyerJobTitleEnum["CUSTOMERSERVICEREP"] = "CUSTOMER_SERVICE_REP";
    UserDomainResLawyerJobTitleEnum["LEGALASSISTANT"] = "LEGAL_ASSISTANT";
    UserDomainResLawyerJobTitleEnum["LEGALINTERN"] = "LEGAL_INTERN";
    UserDomainResLawyerJobTitleEnum["LEGALSECRETARY"] = "LEGAL_SECRETARY";
    UserDomainResLawyerJobTitleEnum["OTHER"] = "OTHER";
    UserDomainResLawyerJobTitleEnum["PARALEGAL"] = "PARALEGAL";
})(UserDomainResLawyerJobTitleEnum = exports.UserDomainResLawyerJobTitleEnum || (exports.UserDomainResLawyerJobTitleEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainResLoginProviderEnum;
(function (UserDomainResLoginProviderEnum) {
    UserDomainResLoginProviderEnum["APPLE"] = "APPLE";
    UserDomainResLoginProviderEnum["EMAIL"] = "EMAIL";
    UserDomainResLoginProviderEnum["FACEBOOK"] = "FACEBOOK";
    UserDomainResLoginProviderEnum["GOOGLE"] = "GOOGLE";
    UserDomainResLoginProviderEnum["PHONE"] = "PHONE";
    UserDomainResLoginProviderEnum["TWITTER"] = "TWITTER";
})(UserDomainResLoginProviderEnum = exports.UserDomainResLoginProviderEnum || (exports.UserDomainResLoginProviderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserDomainResPrivacyModeEnum;
(function (UserDomainResPrivacyModeEnum) {
    UserDomainResPrivacyModeEnum["FRIENDS"] = "FRIENDS";
    UserDomainResPrivacyModeEnum["PRIVATE"] = "PRIVATE";
    UserDomainResPrivacyModeEnum["PUBLIC"] = "PUBLIC";
    UserDomainResPrivacyModeEnum["SEMIPUBLIC"] = "SEMI_PUBLIC";
})(UserDomainResPrivacyModeEnum = exports.UserDomainResPrivacyModeEnum || (exports.UserDomainResPrivacyModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserRoleDomainRoleTypeEnum;
(function (UserRoleDomainRoleTypeEnum) {
    UserRoleDomainRoleTypeEnum["ADMIN"] = "ADMIN";
    UserRoleDomainRoleTypeEnum["DEFENDANT"] = "DEFENDANT";
    UserRoleDomainRoleTypeEnum["LAWYER"] = "LAWYER";
    UserRoleDomainRoleTypeEnum["PARTNER"] = "PARTNER";
    UserRoleDomainRoleTypeEnum["UNKNOWN"] = "UNKNOWN";
})(UserRoleDomainRoleTypeEnum = exports.UserRoleDomainRoleTypeEnum || (exports.UserRoleDomainRoleTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserSubscriptionPlanModelSubscriptionStatusEnum;
(function (UserSubscriptionPlanModelSubscriptionStatusEnum) {
    UserSubscriptionPlanModelSubscriptionStatusEnum["ACTIVE"] = "ACTIVE";
    UserSubscriptionPlanModelSubscriptionStatusEnum["CANCELED"] = "CANCELED";
    UserSubscriptionPlanModelSubscriptionStatusEnum["INCOMPLETE"] = "INCOMPLETE";
    UserSubscriptionPlanModelSubscriptionStatusEnum["INCOMPLETEEXPIRED"] = "INCOMPLETE_EXPIRED";
    UserSubscriptionPlanModelSubscriptionStatusEnum["INTRIALPERIOD"] = "IN_TRIAL_PERIOD";
    UserSubscriptionPlanModelSubscriptionStatusEnum["PASTDUE"] = "PAST_DUE";
    UserSubscriptionPlanModelSubscriptionStatusEnum["UNKNOWN"] = "UNKNOWN";
    UserSubscriptionPlanModelSubscriptionStatusEnum["UNPAID"] = "UNPAID";
})(UserSubscriptionPlanModelSubscriptionStatusEnum = exports.UserSubscriptionPlanModelSubscriptionStatusEnum || (exports.UserSubscriptionPlanModelSubscriptionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserSubscriptionPlanModelReqSubscriptionStatusEnum;
(function (UserSubscriptionPlanModelReqSubscriptionStatusEnum) {
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["ACTIVE"] = "ACTIVE";
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["CANCELED"] = "CANCELED";
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["INCOMPLETE"] = "INCOMPLETE";
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["INCOMPLETEEXPIRED"] = "INCOMPLETE_EXPIRED";
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["INTRIALPERIOD"] = "IN_TRIAL_PERIOD";
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["PASTDUE"] = "PAST_DUE";
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["UNKNOWN"] = "UNKNOWN";
    UserSubscriptionPlanModelReqSubscriptionStatusEnum["UNPAID"] = "UNPAID";
})(UserSubscriptionPlanModelReqSubscriptionStatusEnum = exports.UserSubscriptionPlanModelReqSubscriptionStatusEnum || (exports.UserSubscriptionPlanModelReqSubscriptionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UserSubscriptionPlanModelResSubscriptionStatusEnum;
(function (UserSubscriptionPlanModelResSubscriptionStatusEnum) {
    UserSubscriptionPlanModelResSubscriptionStatusEnum["ACTIVE"] = "ACTIVE";
    UserSubscriptionPlanModelResSubscriptionStatusEnum["CANCELED"] = "CANCELED";
    UserSubscriptionPlanModelResSubscriptionStatusEnum["INCOMPLETE"] = "INCOMPLETE";
    UserSubscriptionPlanModelResSubscriptionStatusEnum["INCOMPLETEEXPIRED"] = "INCOMPLETE_EXPIRED";
    UserSubscriptionPlanModelResSubscriptionStatusEnum["INTRIALPERIOD"] = "IN_TRIAL_PERIOD";
    UserSubscriptionPlanModelResSubscriptionStatusEnum["PASTDUE"] = "PAST_DUE";
    UserSubscriptionPlanModelResSubscriptionStatusEnum["UNKNOWN"] = "UNKNOWN";
    UserSubscriptionPlanModelResSubscriptionStatusEnum["UNPAID"] = "UNPAID";
})(UserSubscriptionPlanModelResSubscriptionStatusEnum = exports.UserSubscriptionPlanModelResSubscriptionStatusEnum || (exports.UserSubscriptionPlanModelResSubscriptionStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ValidateDirectMailResponseOtrErrorEnum;
(function (ValidateDirectMailResponseOtrErrorEnum) {
    ValidateDirectMailResponseOtrErrorEnum["ACCESSDENIED"] = "ACCESS_DENIED";
    ValidateDirectMailResponseOtrErrorEnum["ACCOUNTDISABLED"] = "ACCOUNT_DISABLED";
    ValidateDirectMailResponseOtrErrorEnum["ARAGNOTCAPTURED"] = "ARAG_NOT_CAPTURED";
    ValidateDirectMailResponseOtrErrorEnum["AUTHENTICATIONCREDENTIALSNOTFOUND"] = "AUTHENTICATION_CREDENTIALS_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["AUTHENTICATIONFAILED"] = "AUTHENTICATION_FAILED";
    ValidateDirectMailResponseOtrErrorEnum["AUTHENTICATIONSERVICEFAILURE"] = "AUTHENTICATION_SERVICE_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["AUTHORIZATIONSERVICEFAILURE"] = "AUTHORIZATION_SERVICE_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["AUTHORIZEDCHARGESONCASE"] = "AUTHORIZED_CHARGES_ON_CASE";
    ValidateDirectMailResponseOtrErrorEnum["BADCREDENTIALS"] = "BAD_CREDENTIALS";
    ValidateDirectMailResponseOtrErrorEnum["CANCELLATIONWINDOWCLOSED"] = "CANCELLATION_WINDOW_CLOSED";
    ValidateDirectMailResponseOtrErrorEnum["CASEALREADYEXISTS"] = "CASE_ALREADY_EXISTS";
    ValidateDirectMailResponseOtrErrorEnum["CASEALREADYPAID"] = "CASE_ALREADY_PAID";
    ValidateDirectMailResponseOtrErrorEnum["CASEALREADYRESOLVED"] = "CASE_ALREADY_RESOLVED";
    ValidateDirectMailResponseOtrErrorEnum["CASEIDCOLLISION"] = "CASE_ID_COLLISION";
    ValidateDirectMailResponseOtrErrorEnum["CASEISCANCELLED"] = "CASE_IS_CANCELLED";
    ValidateDirectMailResponseOtrErrorEnum["CASEMATCHFAILED"] = "CASE_MATCH_FAILED";
    ValidateDirectMailResponseOtrErrorEnum["CASENOTACCEPTEDBYLAWFIRM"] = "CASE_NOT_ACCEPTED_BY_LAWFIRM";
    ValidateDirectMailResponseOtrErrorEnum["CASENOTCONFIRMED"] = "CASE_NOT_CONFIRMED";
    ValidateDirectMailResponseOtrErrorEnum["CASEPAYMENTASSOCIATEDWITHMULTIPLELAWFIRMFEES"] = "CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_FEES";
    ValidateDirectMailResponseOtrErrorEnum["CASEPAYMENTASSOCIATEDWITHMULTIPLELAWFIRMPAYOUTS"] = "CASE_PAYMENT_ASSOCIATED_WITH_MULTIPLE_LAWFIRM_PAYOUTS";
    ValidateDirectMailResponseOtrErrorEnum["CASEPAYMENTHASSTRIPECHARGE"] = "CASE_PAYMENT_HAS_STRIPE_CHARGE";
    ValidateDirectMailResponseOtrErrorEnum["CASESTATUSNOTALLOWED"] = "CASE_STATUS_NOT_ALLOWED";
    ValidateDirectMailResponseOtrErrorEnum["CASEUSERMISMATCH"] = "CASE_USER_MISMATCH";
    ValidateDirectMailResponseOtrErrorEnum["CCWILLEXPIREBEFOREPAYMENTPLAN"] = "CC_WILL_EXPIRE_BEFORE_PAYMENT_PLAN";
    ValidateDirectMailResponseOtrErrorEnum["CHARGEALREADYCAPTURED"] = "CHARGE_ALREADY_CAPTURED";
    ValidateDirectMailResponseOtrErrorEnum["CHARGEEXPIRED"] = "CHARGE_EXPIRED";
    ValidateDirectMailResponseOtrErrorEnum["CHARGENOTALLOWED"] = "CHARGE_NOT_ALLOWED";
    ValidateDirectMailResponseOtrErrorEnum["CHARGENOTCAPTURED"] = "CHARGE_NOT_CAPTURED";
    ValidateDirectMailResponseOtrErrorEnum["CHARGENOLONGERAUTHORIZED"] = "CHARGE_NO_LONGER_AUTHORIZED";
    ValidateDirectMailResponseOtrErrorEnum["CHARGEREFUNDED"] = "CHARGE_REFUNDED";
    ValidateDirectMailResponseOtrErrorEnum["CITATIONALREADYDELETED"] = "CITATION_ALREADY_DELETED";
    ValidateDirectMailResponseOtrErrorEnum["CITATIONDOESNOTMATCHUSER"] = "CITATION_DOES_NOT_MATCH_USER";
    ValidateDirectMailResponseOtrErrorEnum["CITATIONNOTOWNEDBYUSER"] = "CITATION_NOT_OWNED_BY_USER";
    ValidateDirectMailResponseOtrErrorEnum["CODEALREADYEXISTSFORDRIVER"] = "CODE_ALREADY_EXISTS_FOR_DRIVER";
    ValidateDirectMailResponseOtrErrorEnum["CODEBENEFITTYPENOTSUPPORTED"] = "CODE_BENEFIT_TYPE_NOT_SUPPORTED";
    ValidateDirectMailResponseOtrErrorEnum["CODEDOESNOTEXIST"] = "CODE_DOES_NOT_EXIST";
    ValidateDirectMailResponseOtrErrorEnum["CODEEXCEEDEDMAXUSAGE"] = "CODE_EXCEEDED_MAX_USAGE";
    ValidateDirectMailResponseOtrErrorEnum["CODEHASEXPIRED"] = "CODE_HAS_EXPIRED";
    ValidateDirectMailResponseOtrErrorEnum["CODEISALREADYTAKEN"] = "CODE_IS_ALREADY_TAKEN";
    ValidateDirectMailResponseOtrErrorEnum["CODEISNOTACTIVE"] = "CODE_IS_NOT_ACTIVE";
    ValidateDirectMailResponseOtrErrorEnum["CODENOTALLOWEDDUETOCREDIT"] = "CODE_NOT_ALLOWED_DUE_TO_CREDIT";
    ValidateDirectMailResponseOtrErrorEnum["CODENOTSUPPORTEDBYLAWFIRM"] = "CODE_NOT_SUPPORTED_BY_LAWFIRM";
    ValidateDirectMailResponseOtrErrorEnum["CODENOTYETAPPROVED"] = "CODE_NOT_YET_APPROVED";
    ValidateDirectMailResponseOtrErrorEnum["CODEREFERRERBENEFITSNOTAUTHORIZED"] = "CODE_REFERRER_BENEFITS_NOT_AUTHORIZED";
    ValidateDirectMailResponseOtrErrorEnum["COMMENTALREADYEXISTS"] = "COMMENT_ALREADY_EXISTS";
    ValidateDirectMailResponseOtrErrorEnum["COURTMISSINGADDRESS"] = "COURT_MISSING_ADDRESS";
    ValidateDirectMailResponseOtrErrorEnum["COURTNOTINSUPPORTEDREGION"] = "COURT_NOT_IN_SUPPORTED_REGION";
    ValidateDirectMailResponseOtrErrorEnum["COURTNOTSUPPORTEDBYLAWFIRM"] = "COURT_NOT_SUPPORTED_BY_LAWFIRM";
    ValidateDirectMailResponseOtrErrorEnum["CURRENTPASSWORDINCORRECT"] = "CURRENT_PASSWORD_INCORRECT";
    ValidateDirectMailResponseOtrErrorEnum["DATABASERECORDLOCKED"] = "DATABASE_RECORD_LOCKED";
    ValidateDirectMailResponseOtrErrorEnum["DATAACCESSERROR"] = "DATA_ACCESS_ERROR";
    ValidateDirectMailResponseOtrErrorEnum["DIRECTMAILRECONCILATIONIDNOTEXIST"] = "DIRECT_MAIL_RECONCILATION_ID_NOT_EXIST";
    ValidateDirectMailResponseOtrErrorEnum["DIRECTMAILSENTALREADY"] = "DIRECT_MAIL_SENT_ALREADY";
    ValidateDirectMailResponseOtrErrorEnum["DIRECTMAILTEMPLATEDUPLICATEDETECTED"] = "DIRECT_MAIL_TEMPLATE_DUPLICATE_DETECTED";
    ValidateDirectMailResponseOtrErrorEnum["DIRECTMAILTEMPLATENOTEXIST"] = "DIRECT_MAIL_TEMPLATE_NOT_EXIST";
    ValidateDirectMailResponseOtrErrorEnum["DRIPDEPENDENCYFAILURE"] = "DRIP_DEPENDENCY_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["DUPLICATECOURT"] = "DUPLICATE_COURT";
    ValidateDirectMailResponseOtrErrorEnum["DUPLICATEEMAIL"] = "DUPLICATE_EMAIL";
    ValidateDirectMailResponseOtrErrorEnum["DUPLICATEENTRY"] = "DUPLICATE_ENTRY";
    ValidateDirectMailResponseOtrErrorEnum["DUPLICATELANDINGPAGEURL"] = "DUPLICATE_LANDING_PAGE_URL";
    ValidateDirectMailResponseOtrErrorEnum["DUPLICATEMESSAGEATTEMPT"] = "DUPLICATE_MESSAGE_ATTEMPT";
    ValidateDirectMailResponseOtrErrorEnum["EMAILADDRESSALREADYSUBSCRIBED"] = "EMAIL_ADDRESS_ALREADY_SUBSCRIBED";
    ValidateDirectMailResponseOtrErrorEnum["EMAILADDRESSBLACKLISTED"] = "EMAIL_ADDRESS_BLACKLISTED";
    ValidateDirectMailResponseOtrErrorEnum["EMAILALREADYINUSE"] = "EMAIL_ALREADY_IN_USE";
    ValidateDirectMailResponseOtrErrorEnum["EMAILALREADYSENT"] = "EMAIL_ALREADY_SENT";
    ValidateDirectMailResponseOtrErrorEnum["EMAILNOTCONFIRMED"] = "EMAIL_NOT_CONFIRMED";
    ValidateDirectMailResponseOtrErrorEnum["EMAILNOTSENT"] = "EMAIL_NOT_SENT";
    ValidateDirectMailResponseOtrErrorEnum["EXPECTEDNULLINPUT"] = "EXPECTED_NULL_INPUT";
    ValidateDirectMailResponseOtrErrorEnum["EXPECTEDROLEMISSING"] = "EXPECTED_ROLE_MISSING";
    ValidateDirectMailResponseOtrErrorEnum["FAILEDTOREVERSETRANSFER"] = "FAILED_TO_REVERSE_TRANSFER";
    ValidateDirectMailResponseOtrErrorEnum["FRESHDESKTICKETNOTFOUND"] = "FRESHDESK_TICKET_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["FRESHDESKUNEXPECTEDNUMBEROFRESULTS"] = "FRESHDESK_UNEXPECTED_NUMBER_OF_RESULTS";
    ValidateDirectMailResponseOtrErrorEnum["IMAGENOTCOMPRESSEDPROPERLY"] = "IMAGE_NOT_COMPRESSED_PROPERLY";
    ValidateDirectMailResponseOtrErrorEnum["INCORRECTDIMENSIONS"] = "INCORRECT_DIMENSIONS";
    ValidateDirectMailResponseOtrErrorEnum["INCORRECTENCODING"] = "INCORRECT_ENCODING";
    ValidateDirectMailResponseOtrErrorEnum["INELIGIBLESTATUSFORTRANSFER"] = "INELIGIBLE_STATUS_FOR_TRANSFER";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDADDRESSID"] = "INVALID_ADDRESS_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDAMOUNT"] = "INVALID_AMOUNT";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDAPITOKEN"] = "INVALID_API_TOKEN";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDAPIUSAGE"] = "INVALID_API_USAGE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDCASEACTIONID"] = "INVALID_CASE_ACTION_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDCASEID"] = "INVALID_CASE_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDCASEPAYMENTID"] = "INVALID_CASE_PAYMENT_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDCITATIONID"] = "INVALID_CITATION_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDCOURTID"] = "INVALID_COURT_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDDATE"] = "INVALID_DATE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDDISPUTEID"] = "INVALID_DISPUTE_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDDOCUMENTID"] = "INVALID_DOCUMENT_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDEMAILADDRESS"] = "INVALID_EMAIL_ADDRESS";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDEMAILTEMPLATE"] = "INVALID_EMAIL_TEMPLATE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDENDDATE"] = "INVALID_END_DATE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDENUMVALUE"] = "INVALID_ENUM_VALUE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDFEEPERCENTAGE"] = "INVALID_FEE_PERCENTAGE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDFIRSTNAME"] = "INVALID_FIRST_NAME";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDINTERNETADDRESS"] = "INVALID_INTERNET_ADDRESS";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDINVITATIONTOKEN"] = "INVALID_INVITATION_TOKEN";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDINVOICELINEITEMID"] = "INVALID_INVOICE_LINE_ITEM_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDLASTNAME"] = "INVALID_LAST_NAME";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDLAWFIRM"] = "INVALID_LAWFIRM";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDLAWYERID"] = "INVALID_LAWYER_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDLINEITEM"] = "INVALID_LINE_ITEM";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDMESSAGEID"] = "INVALID_MESSAGE_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDPAGINATIONTOKEN"] = "INVALID_PAGINATION_TOKEN";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDPARAMETERVALUE"] = "INVALID_PARAMETER_VALUE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDPASSWORD"] = "INVALID_PASSWORD";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDPASSWORDRESETTOKEN"] = "INVALID_PASSWORD_RESET_TOKEN";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDPUSHTOKEN"] = "INVALID_PUSH_TOKEN";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDRECIPIENTLIST"] = "INVALID_RECIPIENT_LIST";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDREQUEST"] = "INVALID_REQUEST";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDREQUESTBODY"] = "INVALID_REQUEST_BODY";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDRESOLUTIONSTATUS"] = "INVALID_RESOLUTION_STATUS";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDREVIEWCOPY"] = "INVALID_REVIEW_COPY";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDROLETYPE"] = "INVALID_ROLE_TYPE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDSTATE"] = "INVALID_STATE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDSTRIPEACCOUNT"] = "INVALID_STRIPE_ACCOUNT";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDSTRIPECHARGEID"] = "INVALID_STRIPE_CHARGE_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDSTRIPEREQUEST"] = "INVALID_STRIPE_REQUEST";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDSTRIPETRANSACTIONID"] = "INVALID_STRIPE_TRANSACTION_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDSUBSCRIPTIONTYPE"] = "INVALID_SUBSCRIPTION_TYPE";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDTASKID"] = "INVALID_TASK_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDTICKETID"] = "INVALID_TICKET_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDTICKETREVIEWID"] = "INVALID_TICKET_REVIEW_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDTRAFFICVIOLATION"] = "INVALID_TRAFFIC_VIOLATION";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDUSERID"] = "INVALID_USER_ID";
    ValidateDirectMailResponseOtrErrorEnum["INVALIDUSERNAME"] = "INVALID_USER_NAME";
    ValidateDirectMailResponseOtrErrorEnum["INVITATIONALREADYSENT"] = "INVITATION_ALREADY_SENT";
    ValidateDirectMailResponseOtrErrorEnum["INVITATIONALREADYVERIFIED"] = "INVITATION_ALREADY_VERIFIED";
    ValidateDirectMailResponseOtrErrorEnum["INVITATIONCANCELLED"] = "INVITATION_CANCELLED";
    ValidateDirectMailResponseOtrErrorEnum["INVITATIONHASEXPIRED"] = "INVITATION_HAS_EXPIRED";
    ValidateDirectMailResponseOtrErrorEnum["INVITATIONRECIPIENTNOACCOUNT"] = "INVITATION_RECIPIENT_NO_ACCOUNT";
    ValidateDirectMailResponseOtrErrorEnum["IOERROR"] = "IO_ERROR";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMCASECAPACITYREACHED"] = "LAWFIRM_CASE_CAPACITY_REACHED";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMCASENOTACTIVE"] = "LAWFIRM_CASE_NOT_ACTIVE";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMDOESNOTHANDLEACCIDENTS"] = "LAWFIRM_DOES_NOT_HANDLE_ACCIDENTS";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMDOESNOTHANDLEPASTDUE"] = "LAWFIRM_DOES_NOT_HANDLE_PAST_DUE";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMFEEHASSTRIPEREFERENCE"] = "LAWFIRM_FEE_HAS_STRIPE_REFERENCE";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMMISSINGACCOUNTFEE"] = "LAWFIRM_MISSING_ACCOUNT_FEE";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMNOTELIGIBLE"] = "LAWFIRM_NOT_ELIGIBLE";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMONVACATIONMODE"] = "LAWFIRM_ON_VACATION_MODE";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMPAYOUTHASSTRIPEREFERENCE"] = "LAWFIRM_PAYOUT_HAS_STRIPE_REFERENCE";
    ValidateDirectMailResponseOtrErrorEnum["LAWFIRMNEEDSADDRESS"] = "LAW_FIRM_NEEDS_ADDRESS";
    ValidateDirectMailResponseOtrErrorEnum["LINEITEMMISSINGRECIPIENT"] = "LINE_ITEM_MISSING_RECIPIENT";
    ValidateDirectMailResponseOtrErrorEnum["LINKSNOTALLOWED"] = "LINKS_NOT_ALLOWED";
    ValidateDirectMailResponseOtrErrorEnum["LOBADDRESSCREATIONFAILURE"] = "LOB_ADDRESS_CREATION_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["LOBADDRESSVALIDATIONFAILURE"] = "LOB_ADDRESS_VALIDATION_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["LOBCANCELCHECKDELIVERYFAILURE"] = "LOB_CANCEL_CHECK_DELIVERY_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["LOBCANCELMAILDELIVERYFAILURE"] = "LOB_CANCEL_MAIL_DELIVERY_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["LOBCHECKMAILDELIVERYFAILURE"] = "LOB_CHECK_MAIL_DELIVERY_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["LOBPOSTCARDCREATIONFAILURE"] = "LOB_POSTCARD_CREATION_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["MEDIATYPEINCORRECT"] = "MEDIA_TYPE_INCORRECT";
    ValidateDirectMailResponseOtrErrorEnum["MERGEROLLBACKNOTALLOWED"] = "MERGE_ROLLBACK_NOT_ALLOWED";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGACTIONTYPE"] = "MISSING_ACTION_TYPE";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGADJUSTEDFINEAMOUNT"] = "MISSING_ADJUSTED_FINE_AMOUNT";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGCASE"] = "MISSING_CASE";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGCITATIONID"] = "MISSING_CITATION_ID";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGCOURTID"] = "MISSING_COURT_ID";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGEMAILADDRESS"] = "MISSING_EMAIL_ADDRESS";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGFEEDBACKCONTENT"] = "MISSING_FEEDBACK_CONTENT";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGFIRSTNAME"] = "MISSING_FIRSTNAME";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGIMAGEURL"] = "MISSING_IMAGE_URL";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGLASTNAME"] = "MISSING_LASTNAME";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGLAWFIRMID"] = "MISSING_LAWFIRM_ID";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGLAWYERID"] = "MISSING_LAWYER_ID";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGMEDIADATA"] = "MISSING_MEDIA_DATA";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGNUMVIOLATIONS"] = "MISSING_NUM_VIOLATIONS";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGPARAMETER"] = "MISSING_PARAMETER";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGPASSWORD"] = "MISSING_PASSWORD";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGRECIPIENTEMAIL"] = "MISSING_RECIPIENT_EMAIL";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGREQUESTBODY"] = "MISSING_REQUEST_BODY";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGRESOLUTIONSTATUS"] = "MISSING_RESOLUTION_STATUS";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGSENDEREMAIL"] = "MISSING_SENDER_EMAIL";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGSENDERPHONENUMBER"] = "MISSING_SENDER_PHONE_NUMBER";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGSEOURL"] = "MISSING_SEO_URL";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGSTRIPETOKEN"] = "MISSING_STRIPE_TOKEN";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGSUBSCRIBER"] = "MISSING_SUBSCRIBER";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGTICKETISSUEDATE"] = "MISSING_TICKET_ISSUE_DATE";
    ValidateDirectMailResponseOtrErrorEnum["MISSINGUSERNAME"] = "MISSING_USER_NAME";
    ValidateDirectMailResponseOtrErrorEnum["MULTIPLELAWFIRMFEES"] = "MULTIPLE_LAWFIRM_FEES";
    ValidateDirectMailResponseOtrErrorEnum["MULTIPLELAWFIRMPAYOUTS"] = "MULTIPLE_LAWFIRM_PAYOUTS";
    ValidateDirectMailResponseOtrErrorEnum["MULTIPLEREFUNDSONCHARGE"] = "MULTIPLE_REFUNDS_ON_CHARGE";
    ValidateDirectMailResponseOtrErrorEnum["MULTIPLESTRIPECUSTOMERACCOUNTSFOUND"] = "MULTIPLE_STRIPE_CUSTOMER_ACCOUNTS_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["MULTIPLESTRIPETRANSFERSFOUND"] = "MULTIPLE_STRIPE_TRANSFERS_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["MUSTBEPOSITIVE"] = "MUST_BE_POSITIVE";
    ValidateDirectMailResponseOtrErrorEnum["NOTIFICATIONERROR"] = "NOTIFICATION_ERROR";
    ValidateDirectMailResponseOtrErrorEnum["NOTIFICATIONINCORRECTROLE"] = "NOTIFICATION_INCORRECT_ROLE";
    ValidateDirectMailResponseOtrErrorEnum["NOTIFICATIONTOOLONG"] = "NOTIFICATION_TOO_LONG";
    ValidateDirectMailResponseOtrErrorEnum["NOTIFICATIONTOSELF"] = "NOTIFICATION_TO_SELF";
    ValidateDirectMailResponseOtrErrorEnum["NOTAUTHENTICATED"] = "NOT_AUTHENTICATED";
    ValidateDirectMailResponseOtrErrorEnum["NOACCOUNTWITHEMAIL"] = "NO_ACCOUNT_WITH_EMAIL";
    ValidateDirectMailResponseOtrErrorEnum["NOCASEOWNER"] = "NO_CASE_OWNER";
    ValidateDirectMailResponseOtrErrorEnum["NOCHARGESONCASE"] = "NO_CHARGES_ON_CASE";
    ValidateDirectMailResponseOtrErrorEnum["NOINSURANCE"] = "NO_INSURANCE";
    ValidateDirectMailResponseOtrErrorEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    ValidateDirectMailResponseOtrErrorEnum["NOSTRIPEACCOUNT"] = "NO_STRIPE_ACCOUNT";
    ValidateDirectMailResponseOtrErrorEnum["OWNERCASEMESSAGEMISMATCH"] = "OWNER_CASE_MESSAGE_MISMATCH";
    ValidateDirectMailResponseOtrErrorEnum["PAYMENTPLANSDENIED"] = "PAYMENT_PLANS_DENIED";
    ValidateDirectMailResponseOtrErrorEnum["PAYMENTPLANLEGALFEEHASCENTS"] = "PAYMENT_PLAN_LEGAL_FEE_HAS_CENTS";
    ValidateDirectMailResponseOtrErrorEnum["PAYMENTPLANNOTSUPPORTEDWITHPREPAIDCARD"] = "PAYMENT_PLAN_NOT_SUPPORTED_WITH_PREPAID_CARD";
    ValidateDirectMailResponseOtrErrorEnum["PDFPASSWORDPROTECTED"] = "PDF_PASSWORD_PROTECTED";
    ValidateDirectMailResponseOtrErrorEnum["PLAIDERROR"] = "PLAID_ERROR";
    ValidateDirectMailResponseOtrErrorEnum["QBOBILLCREATIONFAILURE"] = "QBO_BILL_CREATION_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["QBOVENDORCREATIONFAILURE"] = "QBO_VENDOR_CREATION_FAILURE";
    ValidateDirectMailResponseOtrErrorEnum["REFERRALSNOTALLOWEDTOBEREDEEMED"] = "REFERRALS_NOT_ALLOWED_TO_BE_REDEEMED";
    ValidateDirectMailResponseOtrErrorEnum["REFUNDNOTALLOWED"] = "REFUND_NOT_ALLOWED";
    ValidateDirectMailResponseOtrErrorEnum["REFUNDNOTELIGIBLE"] = "REFUND_NOT_ELIGIBLE";
    ValidateDirectMailResponseOtrErrorEnum["REFUNDNOTELIGIBLECRIMINAL"] = "REFUND_NOT_ELIGIBLE_CRIMINAL";
    ValidateDirectMailResponseOtrErrorEnum["RESETTOKENEXPIRED"] = "RESET_TOKEN_EXPIRED";
    ValidateDirectMailResponseOtrErrorEnum["RESOURCENOTFOUND"] = "RESOURCE_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["REVIEWALREADYEXISTS"] = "REVIEW_ALREADY_EXISTS";
    ValidateDirectMailResponseOtrErrorEnum["ROLENOTSUPPORTED"] = "ROLE_NOT_SUPPORTED";
    ValidateDirectMailResponseOtrErrorEnum["S3CLIENTFAILED"] = "S3_CLIENT_FAILED";
    ValidateDirectMailResponseOtrErrorEnum["S3SERVERFAILED"] = "S3_SERVER_FAILED";
    ValidateDirectMailResponseOtrErrorEnum["SAMEUSERCANNOTBEMERGED"] = "SAME_USER_CANNOT_BE_MERGED";
    ValidateDirectMailResponseOtrErrorEnum["SEOURLALREADYEXISTS"] = "SEO_URL_ALREADY_EXISTS";
    ValidateDirectMailResponseOtrErrorEnum["SIMILARCOURT"] = "SIMILAR_COURT";
    ValidateDirectMailResponseOtrErrorEnum["SOCIALPROFILEMISSINGEMAIL"] = "SOCIAL_PROFILE_MISSING_EMAIL";
    ValidateDirectMailResponseOtrErrorEnum["STATENOTSUPPORTED"] = "STATE_NOT_SUPPORTED";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEAPICONNECTIONEXCEPTION"] = "STRIPE_API_CONNECTION_EXCEPTION";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEAPIEXCEPTION"] = "STRIPE_API_EXCEPTION";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEAPPLICATIONFEEALREADYREFUNDED"] = "STRIPE_APPLICATION_FEE_ALREADY_REFUNDED";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEAPPLICATIONFEENOTFOUND"] = "STRIPE_APPLICATION_FEE_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEAUTHENTICATIONEXCEPTION"] = "STRIPE_AUTHENTICATION_EXCEPTION";
    ValidateDirectMailResponseOtrErrorEnum["STRIPECARDEXCEPTION"] = "STRIPE_CARD_EXCEPTION";
    ValidateDirectMailResponseOtrErrorEnum["STRIPECONNECTACCOUNTNOTFOUND"] = "STRIPE_CONNECT_ACCOUNT_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEERROR"] = "STRIPE_ERROR";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEFAILEDCHARGE"] = "STRIPE_FAILED_CHARGE";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEOAUTHCONNECTFAILED"] = "STRIPE_OAUTH_CONNECT_FAILED";
    ValidateDirectMailResponseOtrErrorEnum["STRIPEOBJECTMISSINGMETADATA"] = "STRIPE_OBJECT_MISSING_METADATA";
    ValidateDirectMailResponseOtrErrorEnum["STRIPERESOURCENOTFOUND"] = "STRIPE_RESOURCE_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["STRIPETRANSFEREXISTS"] = "STRIPE_TRANSFER_EXISTS";
    ValidateDirectMailResponseOtrErrorEnum["STRIPETRANSFERNOTFOUND"] = "STRIPE_TRANSFER_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["SUBSCRIPTIONNOTOWNEDBYUSER"] = "SUBSCRIPTION_NOT_OWNED_BY_USER";
    ValidateDirectMailResponseOtrErrorEnum["TEMPLATENOTSUPPORTED"] = "TEMPLATE_NOT_SUPPORTED";
    ValidateDirectMailResponseOtrErrorEnum["TRANSFERALREADYREVERSED"] = "TRANSFER_ALREADY_REVERSED";
    ValidateDirectMailResponseOtrErrorEnum["TRANSFERIDDOESNTMATCHCHARGE"] = "TRANSFER_ID_DOESNT_MATCH_CHARGE";
    ValidateDirectMailResponseOtrErrorEnum["TRANSFERNOTSAFE"] = "TRANSFER_NOT_SAFE";
    ValidateDirectMailResponseOtrErrorEnum["TRANSFERREVERSALNOTALLOWED"] = "TRANSFER_REVERSAL_NOT_ALLOWED";
    ValidateDirectMailResponseOtrErrorEnum["TRANSFERTOSAMELAWFIRM"] = "TRANSFER_TO_SAME_LAWFIRM";
    ValidateDirectMailResponseOtrErrorEnum["UNAUTHORIZED"] = "UNAUTHORIZED";
    ValidateDirectMailResponseOtrErrorEnum["UNEXPECTEDCASESTATUS"] = "UNEXPECTED_CASE_STATUS";
    ValidateDirectMailResponseOtrErrorEnum["UNEXPECTEDNULLINPUT"] = "UNEXPECTED_NULL_INPUT";
    ValidateDirectMailResponseOtrErrorEnum["UNEXPECTEDNUMBEROFCHARGES"] = "UNEXPECTED_NUMBER_OF_CHARGES";
    ValidateDirectMailResponseOtrErrorEnum["UNKNOWN"] = "UNKNOWN";
    ValidateDirectMailResponseOtrErrorEnum["URLENTITYMISMATCH"] = "URL_ENTITY_MISMATCH";
    ValidateDirectMailResponseOtrErrorEnum["USERALREADYHASSECONDARYACCOUNT"] = "USER_ALREADY_HAS_SECONDARY_ACCOUNT";
    ValidateDirectMailResponseOtrErrorEnum["USERALREADYLOGGEDIN"] = "USER_ALREADY_LOGGED_IN";
    ValidateDirectMailResponseOtrErrorEnum["USERALREADYMERGED"] = "USER_ALREADY_MERGED";
    ValidateDirectMailResponseOtrErrorEnum["USERCANTUSEOWNCODE"] = "USER_CANT_USE_OWN_CODE";
    ValidateDirectMailResponseOtrErrorEnum["USERDOESNOTMATCHCITATION"] = "USER_DOES_NOT_MATCH_CITATION";
    ValidateDirectMailResponseOtrErrorEnum["USERISNOTTHEOWNER"] = "USER_IS_NOT_THE_OWNER";
    ValidateDirectMailResponseOtrErrorEnum["USERNOTFOUND"] = "USER_NOT_FOUND";
    ValidateDirectMailResponseOtrErrorEnum["VERIFICATIONLINKNOTVALID"] = "VERIFICATION_LINK_NOT_VALID";
})(ValidateDirectMailResponseOtrErrorEnum = exports.ValidateDirectMailResponseOtrErrorEnum || (exports.ValidateDirectMailResponseOtrErrorEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ViolationClassificationModelClassificationEnum;
(function (ViolationClassificationModelClassificationEnum) {
    ViolationClassificationModelClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    ViolationClassificationModelClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    ViolationClassificationModelClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    ViolationClassificationModelClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    ViolationClassificationModelClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    ViolationClassificationModelClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    ViolationClassificationModelClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    ViolationClassificationModelClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    ViolationClassificationModelClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    ViolationClassificationModelClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    ViolationClassificationModelClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    ViolationClassificationModelClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    ViolationClassificationModelClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    ViolationClassificationModelClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    ViolationClassificationModelClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    ViolationClassificationModelClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    ViolationClassificationModelClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    ViolationClassificationModelClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    ViolationClassificationModelClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    ViolationClassificationModelClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    ViolationClassificationModelClassificationEnum["FELONY"] = "FELONY";
    ViolationClassificationModelClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    ViolationClassificationModelClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    ViolationClassificationModelClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    ViolationClassificationModelClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    ViolationClassificationModelClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    ViolationClassificationModelClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["INFRACTION"] = "INFRACTION";
    ViolationClassificationModelClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    ViolationClassificationModelClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    ViolationClassificationModelClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    ViolationClassificationModelClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    ViolationClassificationModelClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    ViolationClassificationModelClassificationEnum["NONMOVING"] = "NON_MOVING";
    ViolationClassificationModelClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    ViolationClassificationModelClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    ViolationClassificationModelClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    ViolationClassificationModelClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    ViolationClassificationModelClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    ViolationClassificationModelClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    ViolationClassificationModelClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(ViolationClassificationModelClassificationEnum = exports.ViolationClassificationModelClassificationEnum || (exports.ViolationClassificationModelClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ViolationResponseViolationClassificationEnum;
(function (ViolationResponseViolationClassificationEnum) {
    ViolationResponseViolationClassificationEnum["CLASS1FELONY"] = "CLASS_1_FELONY";
    ViolationResponseViolationClassificationEnum["CLASS1MISDEMEANOR"] = "CLASS_1_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASS2FELONY"] = "CLASS_2_FELONY";
    ViolationResponseViolationClassificationEnum["CLASS2MISDEMEANOR"] = "CLASS_2_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASS3FELONY"] = "CLASS_3_FELONY";
    ViolationResponseViolationClassificationEnum["CLASS3MISDEMEANOR"] = "CLASS_3_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASS4FELONY"] = "CLASS_4_FELONY";
    ViolationResponseViolationClassificationEnum["CLASS4MISDEMEANOR"] = "CLASS_4_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASS5FELONY"] = "CLASS_5_FELONY";
    ViolationResponseViolationClassificationEnum["CLASS6FELONY"] = "CLASS_6_FELONY";
    ViolationResponseViolationClassificationEnum["CLASSA1MISDEMEANOR"] = "CLASS_A1_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASSAFELONY"] = "CLASS_A_FELONY";
    ViolationResponseViolationClassificationEnum["CLASSAINFRACTION"] = "CLASS_A_INFRACTION";
    ViolationResponseViolationClassificationEnum["CLASSAMISDEMEANOR"] = "CLASS_A_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASSAVIOLATION"] = "CLASS_A_VIOLATION";
    ViolationResponseViolationClassificationEnum["CLASSBFELONY"] = "CLASS_B_FELONY";
    ViolationResponseViolationClassificationEnum["CLASSBINFRACTION"] = "CLASS_B_INFRACTION";
    ViolationResponseViolationClassificationEnum["CLASSBMISDEMEANOR"] = "CLASS_B_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASSBVIOLATION"] = "CLASS_B_VIOLATION";
    ViolationResponseViolationClassificationEnum["CLASSCFELONY"] = "CLASS_C_FELONY";
    ViolationResponseViolationClassificationEnum["CLASSCMISDEMEANOR"] = "CLASS_C_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASSCVIOLATION"] = "CLASS_C_VIOLATION";
    ViolationResponseViolationClassificationEnum["CLASSDFELONY"] = "CLASS_D_FELONY";
    ViolationResponseViolationClassificationEnum["CLASSDMISDEMEANOR"] = "CLASS_D_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["CLASSDVIOLATION"] = "CLASS_D_VIOLATION";
    ViolationResponseViolationClassificationEnum["CLASSEFELONY"] = "CLASS_E_FELONY";
    ViolationResponseViolationClassificationEnum["CLASSFFELONY"] = "CLASS_F_FELONY";
    ViolationResponseViolationClassificationEnum["CLASSHFELONY"] = "CLASS_H_FELONY";
    ViolationResponseViolationClassificationEnum["DISORDERLYPERSONSOFFENSE"] = "DISORDERLY_PERSONS_OFFENSE";
    ViolationResponseViolationClassificationEnum["FELONY"] = "FELONY";
    ViolationResponseViolationClassificationEnum["FELONY1STDEGREE"] = "FELONY_1ST_DEGREE";
    ViolationResponseViolationClassificationEnum["FELONY2NDDEGREE"] = "FELONY_2ND_DEGREE";
    ViolationResponseViolationClassificationEnum["FELONY3RDDEGREE"] = "FELONY_3RD_DEGREE";
    ViolationResponseViolationClassificationEnum["FELONY4THDEGREE"] = "FELONY_4TH_DEGREE";
    ViolationResponseViolationClassificationEnum["FELONY5THDEGREE"] = "FELONY_5TH_DEGREE";
    ViolationResponseViolationClassificationEnum["GROSSMISDEMEANOR"] = "GROSS_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["HIGHANDAGGRAVATEDMISDEMEANOR"] = "HIGH_AND_AGGRAVATED_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["INFRACTION"] = "INFRACTION";
    ViolationResponseViolationClassificationEnum["MINORMISDEMEANOR"] = "MINOR_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["MISDEMEANOR"] = "MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["MISDEMEANOR1STDEGREE"] = "MISDEMEANOR_1ST_DEGREE";
    ViolationResponseViolationClassificationEnum["MISDEMEANOR2NDDEGREE"] = "MISDEMEANOR_2ND_DEGREE";
    ViolationResponseViolationClassificationEnum["MISDEMEANOR3RDDEGREE"] = "MISDEMEANOR_3RD_DEGREE";
    ViolationResponseViolationClassificationEnum["MISDEMEANOR4THDEGREE"] = "MISDEMEANOR_4TH_DEGREE";
    ViolationResponseViolationClassificationEnum["MISDEMEANORWITHREFUND"] = "MISDEMEANOR_WITH_REFUND";
    ViolationResponseViolationClassificationEnum["NONMOVING"] = "NON_MOVING";
    ViolationResponseViolationClassificationEnum["NONREPORTABLE"] = "NON_REPORTABLE";
    ViolationResponseViolationClassificationEnum["PETTYMISDEMEANOR"] = "PETTY_MISDEMEANOR";
    ViolationResponseViolationClassificationEnum["QUASICRIMINAL"] = "QUASI_CRIMINAL";
    ViolationResponseViolationClassificationEnum["SUMMARYOFFENSE"] = "SUMMARY_OFFENSE";
    ViolationResponseViolationClassificationEnum["SUMMARYOFFENSENOREFUND"] = "SUMMARY_OFFENSE_NO_REFUND";
    ViolationResponseViolationClassificationEnum["WOBBLERTOFELONY"] = "WOBBLER_TO_FELONY";
    ViolationResponseViolationClassificationEnum["WOBBLERTOMISDEMEANOR"] = "WOBBLER_TO_MISDEMEANOR";
})(ViolationResponseViolationClassificationEnum = exports.ViolationResponseViolationClassificationEnum || (exports.ViolationResponseViolationClassificationEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ZoneOffsetTransitionRuleDayOfWeekEnum;
(function (ZoneOffsetTransitionRuleDayOfWeekEnum) {
    ZoneOffsetTransitionRuleDayOfWeekEnum["FRIDAY"] = "FRIDAY";
    ZoneOffsetTransitionRuleDayOfWeekEnum["MONDAY"] = "MONDAY";
    ZoneOffsetTransitionRuleDayOfWeekEnum["SATURDAY"] = "SATURDAY";
    ZoneOffsetTransitionRuleDayOfWeekEnum["SUNDAY"] = "SUNDAY";
    ZoneOffsetTransitionRuleDayOfWeekEnum["THURSDAY"] = "THURSDAY";
    ZoneOffsetTransitionRuleDayOfWeekEnum["TUESDAY"] = "TUESDAY";
    ZoneOffsetTransitionRuleDayOfWeekEnum["WEDNESDAY"] = "WEDNESDAY";
})(ZoneOffsetTransitionRuleDayOfWeekEnum = exports.ZoneOffsetTransitionRuleDayOfWeekEnum || (exports.ZoneOffsetTransitionRuleDayOfWeekEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ZoneOffsetTransitionRuleMonthEnum;
(function (ZoneOffsetTransitionRuleMonthEnum) {
    ZoneOffsetTransitionRuleMonthEnum["APRIL"] = "APRIL";
    ZoneOffsetTransitionRuleMonthEnum["AUGUST"] = "AUGUST";
    ZoneOffsetTransitionRuleMonthEnum["DECEMBER"] = "DECEMBER";
    ZoneOffsetTransitionRuleMonthEnum["FEBRUARY"] = "FEBRUARY";
    ZoneOffsetTransitionRuleMonthEnum["JANUARY"] = "JANUARY";
    ZoneOffsetTransitionRuleMonthEnum["JULY"] = "JULY";
    ZoneOffsetTransitionRuleMonthEnum["JUNE"] = "JUNE";
    ZoneOffsetTransitionRuleMonthEnum["MARCH"] = "MARCH";
    ZoneOffsetTransitionRuleMonthEnum["MAY"] = "MAY";
    ZoneOffsetTransitionRuleMonthEnum["NOVEMBER"] = "NOVEMBER";
    ZoneOffsetTransitionRuleMonthEnum["OCTOBER"] = "OCTOBER";
    ZoneOffsetTransitionRuleMonthEnum["SEPTEMBER"] = "SEPTEMBER";
})(ZoneOffsetTransitionRuleMonthEnum = exports.ZoneOffsetTransitionRuleMonthEnum || (exports.ZoneOffsetTransitionRuleMonthEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ZoneOffsetTransitionRuleTimeDefinitionEnum;
(function (ZoneOffsetTransitionRuleTimeDefinitionEnum) {
    ZoneOffsetTransitionRuleTimeDefinitionEnum["STANDARD"] = "STANDARD";
    ZoneOffsetTransitionRuleTimeDefinitionEnum["UTC"] = "UTC";
    ZoneOffsetTransitionRuleTimeDefinitionEnum["WALL"] = "WALL";
})(ZoneOffsetTransitionRuleTimeDefinitionEnum = exports.ZoneOffsetTransitionRuleTimeDefinitionEnum || (exports.ZoneOffsetTransitionRuleTimeDefinitionEnum = {}));
/**
 * ActionRequiredControllerApi - axios parameter creator
 * @export
 */
var ActionRequiredControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary notifyClientActionRequirement
         * @param {ClientActionRequiredRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyClientActionRequirementUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling notifyClientActionRequirementUsingPOST.');
                    }
                    localVarPath = "/api/v1/notifications/action-required";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ActionRequiredControllerApiAxiosParamCreator = ActionRequiredControllerApiAxiosParamCreator;
/**
 * ActionRequiredControllerApi - functional programming interface
 * @export
 */
var ActionRequiredControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary notifyClientActionRequirement
         * @param {ClientActionRequiredRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyClientActionRequirementUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ActionRequiredControllerApiAxiosParamCreator)(configuration).notifyClientActionRequirementUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ActionRequiredControllerApiFp = ActionRequiredControllerApiFp;
/**
 * ActionRequiredControllerApi - factory interface
 * @export
 */
var ActionRequiredControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary notifyClientActionRequirement
         * @param {ClientActionRequiredRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyClientActionRequirementUsingPOST: function (request, options) {
            return (0, exports.ActionRequiredControllerApiFp)(configuration).notifyClientActionRequirementUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ActionRequiredControllerApiFactory = ActionRequiredControllerApiFactory;
/**
 * ActionRequiredControllerApi - object-oriented interface
 * @export
 * @class ActionRequiredControllerApi
 * @extends {BaseAPI}
 */
var ActionRequiredControllerApi = /** @class */ (function (_super) {
    __extends(ActionRequiredControllerApi, _super);
    function ActionRequiredControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary notifyClientActionRequirement
     * @param {ClientActionRequiredRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionRequiredControllerApi
     */
    ActionRequiredControllerApi.prototype.notifyClientActionRequirementUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ActionRequiredControllerApiFp)(this.configuration).notifyClientActionRequirementUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ActionRequiredControllerApi;
}(base_1.BaseAPI));
exports.ActionRequiredControllerApi = ActionRequiredControllerApi;
/**
 * ActivityFeedControllerApi - axios parameter creator
 * @export
 */
var ActivityFeedControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary listActivityFeed
         * @param {number} limit limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityFeedUsingGET: function (limit, nextPageToken, previousPageToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'limit' is not null or undefined
                    if (limit === null || limit === undefined) {
                        throw new base_1.RequiredError('limit', 'Required parameter limit was null or undefined when calling listActivityFeedUsingGET.');
                    }
                    localVarPath = "/api/v1/activity-feed";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (nextPageToken !== undefined) {
                        localVarQueryParameter['nextPageToken'] = nextPageToken;
                    }
                    if (previousPageToken !== undefined) {
                        localVarQueryParameter['previousPageToken'] = previousPageToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ActivityFeedControllerApiAxiosParamCreator = ActivityFeedControllerApiAxiosParamCreator;
/**
 * ActivityFeedControllerApi - functional programming interface
 * @export
 */
var ActivityFeedControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary listActivityFeed
         * @param {number} limit limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityFeedUsingGET: function (limit, nextPageToken, previousPageToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ActivityFeedControllerApiAxiosParamCreator)(configuration).listActivityFeedUsingGET(limit, nextPageToken, previousPageToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ActivityFeedControllerApiFp = ActivityFeedControllerApiFp;
/**
 * ActivityFeedControllerApi - factory interface
 * @export
 */
var ActivityFeedControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary listActivityFeed
         * @param {number} limit limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityFeedUsingGET: function (limit, nextPageToken, previousPageToken, options) {
            return (0, exports.ActivityFeedControllerApiFp)(configuration).listActivityFeedUsingGET(limit, nextPageToken, previousPageToken, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ActivityFeedControllerApiFactory = ActivityFeedControllerApiFactory;
/**
 * ActivityFeedControllerApi - object-oriented interface
 * @export
 * @class ActivityFeedControllerApi
 * @extends {BaseAPI}
 */
var ActivityFeedControllerApi = /** @class */ (function (_super) {
    __extends(ActivityFeedControllerApi, _super);
    function ActivityFeedControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary listActivityFeed
     * @param {number} limit limit
     * @param {string} [nextPageToken] nextPageToken
     * @param {string} [previousPageToken] previousPageToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityFeedControllerApi
     */
    ActivityFeedControllerApi.prototype.listActivityFeedUsingGET = function (limit, nextPageToken, previousPageToken, options) {
        var _this = this;
        return (0, exports.ActivityFeedControllerApiFp)(this.configuration).listActivityFeedUsingGET(limit, nextPageToken, previousPageToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ActivityFeedControllerApi;
}(base_1.BaseAPI));
exports.ActivityFeedControllerApi = ActivityFeedControllerApi;
/**
 * AddressControllerApi - axios parameter creator
 * @export
 */
var AddressControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getCountryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryListUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/countries";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCountryRegions
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryRegionsUsingGET: function (countryCode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'countryCode' is not null or undefined
                    if (countryCode === null || countryCode === undefined) {
                        throw new base_1.RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling getCountryRegionsUsingGET.');
                    }
                    localVarPath = "/api/v1/countries/{countryCode}/regions"
                        .replace("{" + "countryCode" + "}", encodeURIComponent(String(countryCode)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLocation
         * @param {string} zipCode zipCode
         * @param {string} [countryCode] countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationUsingGET: function (zipCode, countryCode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'zipCode' is not null or undefined
                    if (zipCode === null || zipCode === undefined) {
                        throw new base_1.RequiredError('zipCode', 'Required parameter zipCode was null or undefined when calling getLocationUsingGET.');
                    }
                    localVarPath = "/api/v1/locations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (countryCode !== undefined) {
                        localVarQueryParameter['countryCode'] = countryCode;
                    }
                    if (zipCode !== undefined) {
                        localVarQueryParameter['zipCode'] = zipCode;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AddressControllerApiAxiosParamCreator = AddressControllerApiAxiosParamCreator;
/**
 * AddressControllerApi - functional programming interface
 * @export
 */
var AddressControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getCountryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryListUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AddressControllerApiAxiosParamCreator)(configuration).getCountryListUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCountryRegions
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryRegionsUsingGET: function (countryCode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AddressControllerApiAxiosParamCreator)(configuration).getCountryRegionsUsingGET(countryCode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLocation
         * @param {string} zipCode zipCode
         * @param {string} [countryCode] countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationUsingGET: function (zipCode, countryCode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AddressControllerApiAxiosParamCreator)(configuration).getLocationUsingGET(zipCode, countryCode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.AddressControllerApiFp = AddressControllerApiFp;
/**
 * AddressControllerApi - factory interface
 * @export
 */
var AddressControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getCountryList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryListUsingGET: function (options) {
            return (0, exports.AddressControllerApiFp)(configuration).getCountryListUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCountryRegions
         * @param {string} countryCode countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryRegionsUsingGET: function (countryCode, options) {
            return (0, exports.AddressControllerApiFp)(configuration).getCountryRegionsUsingGET(countryCode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLocation
         * @param {string} zipCode zipCode
         * @param {string} [countryCode] countryCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationUsingGET: function (zipCode, countryCode, options) {
            return (0, exports.AddressControllerApiFp)(configuration).getLocationUsingGET(zipCode, countryCode, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AddressControllerApiFactory = AddressControllerApiFactory;
/**
 * AddressControllerApi - object-oriented interface
 * @export
 * @class AddressControllerApi
 * @extends {BaseAPI}
 */
var AddressControllerApi = /** @class */ (function (_super) {
    __extends(AddressControllerApi, _super);
    function AddressControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getCountryList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    AddressControllerApi.prototype.getCountryListUsingGET = function (options) {
        var _this = this;
        return (0, exports.AddressControllerApiFp)(this.configuration).getCountryListUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCountryRegions
     * @param {string} countryCode countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    AddressControllerApi.prototype.getCountryRegionsUsingGET = function (countryCode, options) {
        var _this = this;
        return (0, exports.AddressControllerApiFp)(this.configuration).getCountryRegionsUsingGET(countryCode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLocation
     * @param {string} zipCode zipCode
     * @param {string} [countryCode] countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressControllerApi
     */
    AddressControllerApi.prototype.getLocationUsingGET = function (zipCode, countryCode, options) {
        var _this = this;
        return (0, exports.AddressControllerApiFp)(this.configuration).getLocationUsingGET(zipCode, countryCode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AddressControllerApi;
}(base_1.BaseAPI));
exports.AddressControllerApi = AddressControllerApi;
/**
 * AlertNotificationControllerApi - axios parameter creator
 * @export
 */
var AlertNotificationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getAlerts
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertsUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getAlertsUsingGET.');
                    }
                    localVarPath = "/api/v1/alerts/{userId}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markAlertAsRead
         * @param {string} alertId alertId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAlertAsReadUsingDELETE: function (alertId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'alertId' is not null or undefined
                    if (alertId === null || alertId === undefined) {
                        throw new base_1.RequiredError('alertId', 'Required parameter alertId was null or undefined when calling markAlertAsReadUsingDELETE.');
                    }
                    localVarPath = "/api/v1/alerts/{alertId}"
                        .replace("{" + "alertId" + "}", encodeURIComponent(String(alertId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AlertNotificationControllerApiAxiosParamCreator = AlertNotificationControllerApiAxiosParamCreator;
/**
 * AlertNotificationControllerApi - functional programming interface
 * @export
 */
var AlertNotificationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getAlerts
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertsUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AlertNotificationControllerApiAxiosParamCreator)(configuration).getAlertsUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markAlertAsRead
         * @param {string} alertId alertId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAlertAsReadUsingDELETE: function (alertId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AlertNotificationControllerApiAxiosParamCreator)(configuration).markAlertAsReadUsingDELETE(alertId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.AlertNotificationControllerApiFp = AlertNotificationControllerApiFp;
/**
 * AlertNotificationControllerApi - factory interface
 * @export
 */
var AlertNotificationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getAlerts
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertsUsingGET: function (userId, options) {
            return (0, exports.AlertNotificationControllerApiFp)(configuration).getAlertsUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markAlertAsRead
         * @param {string} alertId alertId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAlertAsReadUsingDELETE: function (alertId, options) {
            return (0, exports.AlertNotificationControllerApiFp)(configuration).markAlertAsReadUsingDELETE(alertId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AlertNotificationControllerApiFactory = AlertNotificationControllerApiFactory;
/**
 * AlertNotificationControllerApi - object-oriented interface
 * @export
 * @class AlertNotificationControllerApi
 * @extends {BaseAPI}
 */
var AlertNotificationControllerApi = /** @class */ (function (_super) {
    __extends(AlertNotificationControllerApi, _super);
    function AlertNotificationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getAlerts
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    AlertNotificationControllerApi.prototype.getAlertsUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.AlertNotificationControllerApiFp)(this.configuration).getAlertsUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markAlertAsRead
     * @param {string} alertId alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertNotificationControllerApi
     */
    AlertNotificationControllerApi.prototype.markAlertAsReadUsingDELETE = function (alertId, options) {
        var _this = this;
        return (0, exports.AlertNotificationControllerApiFp)(this.configuration).markAlertAsReadUsingDELETE(alertId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AlertNotificationControllerApi;
}(base_1.BaseAPI));
exports.AlertNotificationControllerApi = AlertNotificationControllerApi;
/**
 * AppEventsControllerApi - axios parameter creator
 * @export
 */
var AppEventsControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addAppEvent
         * @param {AppEventCreateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppEventUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addAppEventUsingPOST.');
                    }
                    localVarPath = "/api/v1/app-events";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AppEventsControllerApiAxiosParamCreator = AppEventsControllerApiAxiosParamCreator;
/**
 * AppEventsControllerApi - functional programming interface
 * @export
 */
var AppEventsControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addAppEvent
         * @param {AppEventCreateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppEventUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AppEventsControllerApiAxiosParamCreator)(configuration).addAppEventUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.AppEventsControllerApiFp = AppEventsControllerApiFp;
/**
 * AppEventsControllerApi - factory interface
 * @export
 */
var AppEventsControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addAppEvent
         * @param {AppEventCreateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppEventUsingPOST: function (request, options) {
            return (0, exports.AppEventsControllerApiFp)(configuration).addAppEventUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AppEventsControllerApiFactory = AppEventsControllerApiFactory;
/**
 * AppEventsControllerApi - object-oriented interface
 * @export
 * @class AppEventsControllerApi
 * @extends {BaseAPI}
 */
var AppEventsControllerApi = /** @class */ (function (_super) {
    __extends(AppEventsControllerApi, _super);
    function AppEventsControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addAppEvent
     * @param {AppEventCreateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEventsControllerApi
     */
    AppEventsControllerApi.prototype.addAppEventUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.AppEventsControllerApiFp)(this.configuration).addAppEventUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AppEventsControllerApi;
}(base_1.BaseAPI));
exports.AppEventsControllerApi = AppEventsControllerApi;
/**
 * AuditLawfirmEventsControllerApi - axios parameter creator
 * @export
 */
var AuditLawfirmEventsControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary listLawfirmAuditEventsByCursor
         * @param {number} lawfirmId lawfirmId
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmAuditEventsByCursorUsingGET: function (lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling listLawfirmAuditEventsByCursorUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/audit-events"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (excludeTypes) {
                        localVarQueryParameter['excludeTypes'] = excludeTypes;
                    }
                    if (includeTypes) {
                        localVarQueryParameter['includeTypes'] = includeTypes;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (nextPageToken !== undefined) {
                        localVarQueryParameter['nextPageToken'] = nextPageToken;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuditLawfirmEventsControllerApiAxiosParamCreator = AuditLawfirmEventsControllerApiAxiosParamCreator;
/**
 * AuditLawfirmEventsControllerApi - functional programming interface
 * @export
 */
var AuditLawfirmEventsControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary listLawfirmAuditEventsByCursor
         * @param {number} lawfirmId lawfirmId
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmAuditEventsByCursorUsingGET: function (lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AuditLawfirmEventsControllerApiAxiosParamCreator)(configuration).listLawfirmAuditEventsByCursorUsingGET(lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.AuditLawfirmEventsControllerApiFp = AuditLawfirmEventsControllerApiFp;
/**
 * AuditLawfirmEventsControllerApi - factory interface
 * @export
 */
var AuditLawfirmEventsControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary listLawfirmAuditEventsByCursor
         * @param {number} lawfirmId lawfirmId
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
         * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmAuditEventsByCursorUsingGET: function (lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options) {
            return (0, exports.AuditLawfirmEventsControllerApiFp)(configuration).listLawfirmAuditEventsByCursorUsingGET(lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuditLawfirmEventsControllerApiFactory = AuditLawfirmEventsControllerApiFactory;
/**
 * AuditLawfirmEventsControllerApi - object-oriented interface
 * @export
 * @class AuditLawfirmEventsControllerApi
 * @extends {BaseAPI}
 */
var AuditLawfirmEventsControllerApi = /** @class */ (function (_super) {
    __extends(AuditLawfirmEventsControllerApi, _super);
    function AuditLawfirmEventsControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary listLawfirmAuditEventsByCursor
     * @param {number} lawfirmId lawfirmId
     * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [excludeTypes] excludeTypes
     * @param {Array<'CASE_BOOKING' | 'CASE_MATCH' | 'CITATION_UPLOAD' | 'LAWFIRM_ACCOUNT_PRIORITY' | 'LAWFIRM_ACCOUNT_STATUS' | 'LAWFIRM_DAILY_CAPACITY' | 'LAWFIRM_TOTAL_CAPACITY' | 'SAVE_VACATION_MODE_END_DATE' | 'SAVE_VACATION_MODE_REASON' | 'VACATION_MODE_TOGGLE'>} [includeTypes] includeTypes
     * @param {number} [limit] limit
     * @param {string} [nextPageToken] nextPageToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLawfirmEventsControllerApi
     */
    AuditLawfirmEventsControllerApi.prototype.listLawfirmAuditEventsByCursorUsingGET = function (lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options) {
        var _this = this;
        return (0, exports.AuditLawfirmEventsControllerApiFp)(this.configuration).listLawfirmAuditEventsByCursorUsingGET(lawfirmId, excludeTypes, includeTypes, limit, nextPageToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuditLawfirmEventsControllerApi;
}(base_1.BaseAPI));
exports.AuditLawfirmEventsControllerApi = AuditLawfirmEventsControllerApi;
/**
 * AuthenticationControllerApi - axios parameter creator
 * @export
 */
var AuthenticationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/authentication/user";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuthenticationControllerApiAxiosParamCreator = AuthenticationControllerApiAxiosParamCreator;
/**
 * AuthenticationControllerApi - functional programming interface
 * @export
 */
var AuthenticationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AuthenticationControllerApiAxiosParamCreator)(configuration).getUserInfoUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.AuthenticationControllerApiFp = AuthenticationControllerApiFp;
/**
 * AuthenticationControllerApi - factory interface
 * @export
 */
var AuthenticationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET: function (options) {
            return (0, exports.AuthenticationControllerApiFp)(configuration).getUserInfoUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthenticationControllerApiFactory = AuthenticationControllerApiFactory;
/**
 * AuthenticationControllerApi - object-oriented interface
 * @export
 * @class AuthenticationControllerApi
 * @extends {BaseAPI}
 */
var AuthenticationControllerApi = /** @class */ (function (_super) {
    __extends(AuthenticationControllerApi, _super);
    function AuthenticationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getUserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationControllerApi
     */
    AuthenticationControllerApi.prototype.getUserInfoUsingGET = function (options) {
        var _this = this;
        return (0, exports.AuthenticationControllerApiFp)(this.configuration).getUserInfoUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthenticationControllerApi;
}(base_1.BaseAPI));
exports.AuthenticationControllerApi = AuthenticationControllerApi;
/**
 * AwsCredentialsControllerApi - axios parameter creator
 * @export
 */
var AwsCredentialsControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getAwsCredentials
         * @param {AwsCredentialsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwsCredentialsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getAwsCredentialsUsingPOST.');
                    }
                    localVarPath = "/api/v1/credentials/aws";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AwsCredentialsControllerApiAxiosParamCreator = AwsCredentialsControllerApiAxiosParamCreator;
/**
 * AwsCredentialsControllerApi - functional programming interface
 * @export
 */
var AwsCredentialsControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getAwsCredentials
         * @param {AwsCredentialsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwsCredentialsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.AwsCredentialsControllerApiAxiosParamCreator)(configuration).getAwsCredentialsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.AwsCredentialsControllerApiFp = AwsCredentialsControllerApiFp;
/**
 * AwsCredentialsControllerApi - factory interface
 * @export
 */
var AwsCredentialsControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getAwsCredentials
         * @param {AwsCredentialsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwsCredentialsUsingPOST: function (request, options) {
            return (0, exports.AwsCredentialsControllerApiFp)(configuration).getAwsCredentialsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AwsCredentialsControllerApiFactory = AwsCredentialsControllerApiFactory;
/**
 * AwsCredentialsControllerApi - object-oriented interface
 * @export
 * @class AwsCredentialsControllerApi
 * @extends {BaseAPI}
 */
var AwsCredentialsControllerApi = /** @class */ (function (_super) {
    __extends(AwsCredentialsControllerApi, _super);
    function AwsCredentialsControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getAwsCredentials
     * @param {AwsCredentialsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsCredentialsControllerApi
     */
    AwsCredentialsControllerApi.prototype.getAwsCredentialsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.AwsCredentialsControllerApiFp)(this.configuration).getAwsCredentialsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AwsCredentialsControllerApi;
}(base_1.BaseAPI));
exports.AwsCredentialsControllerApi = AwsCredentialsControllerApi;
/**
 * BlogWebhookControllerApi - axios parameter creator
 * @export
 */
var BlogWebhookControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary handleEvent
         * @param {BlogEvent} event event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleEventUsingPOST: function (event, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'event' is not null or undefined
                    if (event === null || event === undefined) {
                        throw new base_1.RequiredError('event', 'Required parameter event was null or undefined when calling handleEventUsingPOST.');
                    }
                    localVarPath = "/api/v1/webhooks/prismic";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof event !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(event !== undefined ? event : {}) : (event || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BlogWebhookControllerApiAxiosParamCreator = BlogWebhookControllerApiAxiosParamCreator;
/**
 * BlogWebhookControllerApi - functional programming interface
 * @export
 */
var BlogWebhookControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary handleEvent
         * @param {BlogEvent} event event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleEventUsingPOST: function (event, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.BlogWebhookControllerApiAxiosParamCreator)(configuration).handleEventUsingPOST(event, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.BlogWebhookControllerApiFp = BlogWebhookControllerApiFp;
/**
 * BlogWebhookControllerApi - factory interface
 * @export
 */
var BlogWebhookControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary handleEvent
         * @param {BlogEvent} event event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleEventUsingPOST: function (event, options) {
            return (0, exports.BlogWebhookControllerApiFp)(configuration).handleEventUsingPOST(event, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BlogWebhookControllerApiFactory = BlogWebhookControllerApiFactory;
/**
 * BlogWebhookControllerApi - object-oriented interface
 * @export
 * @class BlogWebhookControllerApi
 * @extends {BaseAPI}
 */
var BlogWebhookControllerApi = /** @class */ (function (_super) {
    __extends(BlogWebhookControllerApi, _super);
    function BlogWebhookControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary handleEvent
     * @param {BlogEvent} event event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogWebhookControllerApi
     */
    BlogWebhookControllerApi.prototype.handleEventUsingPOST = function (event, options) {
        var _this = this;
        return (0, exports.BlogWebhookControllerApiFp)(this.configuration).handleEventUsingPOST(event, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BlogWebhookControllerApi;
}(base_1.BaseAPI));
exports.BlogWebhookControllerApi = BlogWebhookControllerApi;
/**
 * BranchLinkControllerApi - axios parameter creator
 * @export
 */
var BranchLinkControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary createBranchLink
         * @param {CreateBranchLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchLinkUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createBranchLinkUsingPOST.');
                    }
                    localVarPath = "/api/v1/branch/link";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BranchLinkControllerApiAxiosParamCreator = BranchLinkControllerApiAxiosParamCreator;
/**
 * BranchLinkControllerApi - functional programming interface
 * @export
 */
var BranchLinkControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createBranchLink
         * @param {CreateBranchLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchLinkUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.BranchLinkControllerApiAxiosParamCreator)(configuration).createBranchLinkUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.BranchLinkControllerApiFp = BranchLinkControllerApiFp;
/**
 * BranchLinkControllerApi - factory interface
 * @export
 */
var BranchLinkControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary createBranchLink
         * @param {CreateBranchLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchLinkUsingPOST: function (request, options) {
            return (0, exports.BranchLinkControllerApiFp)(configuration).createBranchLinkUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BranchLinkControllerApiFactory = BranchLinkControllerApiFactory;
/**
 * BranchLinkControllerApi - object-oriented interface
 * @export
 * @class BranchLinkControllerApi
 * @extends {BaseAPI}
 */
var BranchLinkControllerApi = /** @class */ (function (_super) {
    __extends(BranchLinkControllerApi, _super);
    function BranchLinkControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createBranchLink
     * @param {CreateBranchLinkRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchLinkControllerApi
     */
    BranchLinkControllerApi.prototype.createBranchLinkUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.BranchLinkControllerApiFp)(this.configuration).createBranchLinkUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BranchLinkControllerApi;
}(base_1.BaseAPI));
exports.BranchLinkControllerApi = BranchLinkControllerApi;
/**
 * CaseActionsControllerApi - axios parameter creator
 * @export
 */
var CaseActionsControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addActionToCaseV2
         * @param {string} caseId caseId
         * @param {AddActionToCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActionToCaseV2UsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling addActionToCaseV2UsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addActionToCaseV2UsingPOST.');
                    }
                    localVarPath = "/api/v2/cases/{caseId}/actions"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteActionFromCase
         * @param {string} caseActionIdString caseActionIdString
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActionFromCaseUsingDELETE: function (caseActionIdString, caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseActionIdString' is not null or undefined
                    if (caseActionIdString === null || caseActionIdString === undefined) {
                        throw new base_1.RequiredError('caseActionIdString', 'Required parameter caseActionIdString was null or undefined when calling deleteActionFromCaseUsingDELETE.');
                    }
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling deleteActionFromCaseUsingDELETE.');
                    }
                    localVarPath = "/api/{caseId}/actions/{caseActionIdString}"
                        .replace("{" + "caseActionIdString" + "}", encodeURIComponent(String(caseActionIdString)))
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getActionTimeline
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionTimelineUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getActionTimelineUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/actions/timeline"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getAllActions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActionsUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/cases/actions";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCaseActions
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseActionsUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getCaseActionsUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/actions"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseActionsControllerApiAxiosParamCreator = CaseActionsControllerApiAxiosParamCreator;
/**
 * CaseActionsControllerApi - functional programming interface
 * @export
 */
var CaseActionsControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addActionToCaseV2
         * @param {string} caseId caseId
         * @param {AddActionToCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActionToCaseV2UsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseActionsControllerApiAxiosParamCreator)(configuration).addActionToCaseV2UsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteActionFromCase
         * @param {string} caseActionIdString caseActionIdString
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActionFromCaseUsingDELETE: function (caseActionIdString, caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseActionsControllerApiAxiosParamCreator)(configuration).deleteActionFromCaseUsingDELETE(caseActionIdString, caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getActionTimeline
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionTimelineUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseActionsControllerApiAxiosParamCreator)(configuration).getActionTimelineUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getAllActions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActionsUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseActionsControllerApiAxiosParamCreator)(configuration).getAllActionsUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCaseActions
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseActionsUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseActionsControllerApiAxiosParamCreator)(configuration).getCaseActionsUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseActionsControllerApiFp = CaseActionsControllerApiFp;
/**
 * CaseActionsControllerApi - factory interface
 * @export
 */
var CaseActionsControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addActionToCaseV2
         * @param {string} caseId caseId
         * @param {AddActionToCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addActionToCaseV2UsingPOST: function (caseId, request, options) {
            return (0, exports.CaseActionsControllerApiFp)(configuration).addActionToCaseV2UsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteActionFromCase
         * @param {string} caseActionIdString caseActionIdString
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteActionFromCaseUsingDELETE: function (caseActionIdString, caseId, options) {
            return (0, exports.CaseActionsControllerApiFp)(configuration).deleteActionFromCaseUsingDELETE(caseActionIdString, caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getActionTimeline
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActionTimelineUsingGET: function (caseId, options) {
            return (0, exports.CaseActionsControllerApiFp)(configuration).getActionTimelineUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getAllActions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActionsUsingGET: function (options) {
            return (0, exports.CaseActionsControllerApiFp)(configuration).getAllActionsUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCaseActions
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseActionsUsingGET: function (caseId, options) {
            return (0, exports.CaseActionsControllerApiFp)(configuration).getCaseActionsUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseActionsControllerApiFactory = CaseActionsControllerApiFactory;
/**
 * CaseActionsControllerApi - object-oriented interface
 * @export
 * @class CaseActionsControllerApi
 * @extends {BaseAPI}
 */
var CaseActionsControllerApi = /** @class */ (function (_super) {
    __extends(CaseActionsControllerApi, _super);
    function CaseActionsControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addActionToCaseV2
     * @param {string} caseId caseId
     * @param {AddActionToCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    CaseActionsControllerApi.prototype.addActionToCaseV2UsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseActionsControllerApiFp)(this.configuration).addActionToCaseV2UsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteActionFromCase
     * @param {string} caseActionIdString caseActionIdString
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    CaseActionsControllerApi.prototype.deleteActionFromCaseUsingDELETE = function (caseActionIdString, caseId, options) {
        var _this = this;
        return (0, exports.CaseActionsControllerApiFp)(this.configuration).deleteActionFromCaseUsingDELETE(caseActionIdString, caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getActionTimeline
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    CaseActionsControllerApi.prototype.getActionTimelineUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseActionsControllerApiFp)(this.configuration).getActionTimelineUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getAllActions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    CaseActionsControllerApi.prototype.getAllActionsUsingGET = function (options) {
        var _this = this;
        return (0, exports.CaseActionsControllerApiFp)(this.configuration).getAllActionsUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCaseActions
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseActionsControllerApi
     */
    CaseActionsControllerApi.prototype.getCaseActionsUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseActionsControllerApiFp)(this.configuration).getCaseActionsUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseActionsControllerApi;
}(base_1.BaseAPI));
exports.CaseActionsControllerApi = CaseActionsControllerApi;
/**
 * CaseControllerApi - axios parameter creator
 * @export
 */
var CaseControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addViolationsToCitation
         * @param {string} caseId caseId
         * @param {AddViolationsToCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationsToCitationUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling addViolationsToCitationUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addViolationsToCitationUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/citation/violations"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary assignCaseToUser
         * @param {string} caseId caseId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCaseToUserUsingPOST: function (caseId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling assignCaseToUserUsingPOST.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling assignCaseToUserUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/owner/{userId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary assignOwner
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOwnerUsingPOST: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling assignOwnerUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/owner"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary findChargeDisputesByCaseId
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByCaseIdUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling findChargeDisputesByCaseIdUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/disputes"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getAppearanceAttorneysForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppearanceAttorneysForCaseUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getAppearanceAttorneysForCaseUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/appearance-attorneys"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getSupportTicketsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForCaseUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getSupportTicketsForCaseUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/support-tickets"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary initiateCaseAndChargeCustomer
         * @param {string} caseId caseId
         * @param {InitiateCaseAndChargeCustomerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseAndChargeCustomerUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/initiate-with-payment"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary initiateCase
         * @param {string} caseId caseId
         * @param {object} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling initiateCaseUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/initiate"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markCaseAsResolved
         * @param {string} caseId caseId
         * @param {MarkCaseAsResolvedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCaseAsResolvedUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling markCaseAsResolvedUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling markCaseAsResolvedUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/resolution"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary removeViolationsFromCitation
         * @param {string} caseId caseId
         * @param {string} violationTypes violationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeViolationsFromCitationUsingDELETE: function (caseId, violationTypes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
                    }
                    // verify required parameter 'violationTypes' is not null or undefined
                    if (violationTypes === null || violationTypes === undefined) {
                        throw new base_1.RequiredError('violationTypes', 'Required parameter violationTypes was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/citation/violations/{violationTypes}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "violationTypes" + "}", encodeURIComponent(String(violationTypes)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary reopenCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenCaseUsingPUT: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling reopenCaseUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/reopen"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setCourtDateForCase
         * @param {string} caseId caseId
         * @param {SetCourtDateForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCourtDateForCaseUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling setCourtDateForCaseUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling setCourtDateForCaseUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/courtdate"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary submitRequestForPriceMatch
         * @param {string} caseId caseId
         * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitRequestForPriceMatchUsingPOST: function (caseId, priceMatchRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
                    }
                    // verify required parameter 'priceMatchRequest' is not null or undefined
                    if (priceMatchRequest === null || priceMatchRequest === undefined) {
                        throw new base_1.RequiredError('priceMatchRequest', 'Required parameter priceMatchRequest was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/price-match"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof priceMatchRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(priceMatchRequest !== undefined ? priceMatchRequest : {}) : (priceMatchRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCase
         * @param {string} caseId caseId
         * @param {CaseDomainReq} caseFromRequest caseFromRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseUsingPUT: function (caseId, caseFromRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling updateCaseUsingPUT.');
                    }
                    // verify required parameter 'caseFromRequest' is not null or undefined
                    if (caseFromRequest === null || caseFromRequest === undefined) {
                        throw new base_1.RequiredError('caseFromRequest', 'Required parameter caseFromRequest was null or undefined when calling updateCaseUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof caseFromRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(caseFromRequest !== undefined ? caseFromRequest : {}) : (caseFromRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateDeclineTickets
         * @param {string} caseId caseId
         * @param {UpdateCaseDeclineTicketsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeclineTicketsUsingPUT: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling updateDeclineTicketsUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateDeclineTicketsUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/decline-tickets"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseControllerApiAxiosParamCreator = CaseControllerApiAxiosParamCreator;
/**
 * CaseControllerApi - functional programming interface
 * @export
 */
var CaseControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addViolationsToCitation
         * @param {string} caseId caseId
         * @param {AddViolationsToCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationsToCitationUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).addViolationsToCitationUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary assignCaseToUser
         * @param {string} caseId caseId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCaseToUserUsingPOST: function (caseId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).assignCaseToUserUsingPOST(caseId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary assignOwner
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOwnerUsingPOST: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).assignOwnerUsingPOST(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary findChargeDisputesByCaseId
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByCaseIdUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).findChargeDisputesByCaseIdUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getAppearanceAttorneysForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppearanceAttorneysForCaseUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).getAppearanceAttorneysForCaseUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getSupportTicketsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForCaseUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).getSupportTicketsForCaseUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary initiateCaseAndChargeCustomer
         * @param {string} caseId caseId
         * @param {InitiateCaseAndChargeCustomerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseAndChargeCustomerUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).initiateCaseAndChargeCustomerUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary initiateCase
         * @param {string} caseId caseId
         * @param {object} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).initiateCaseUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markCaseAsResolved
         * @param {string} caseId caseId
         * @param {MarkCaseAsResolvedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCaseAsResolvedUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).markCaseAsResolvedUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary removeViolationsFromCitation
         * @param {string} caseId caseId
         * @param {string} violationTypes violationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeViolationsFromCitationUsingDELETE: function (caseId, violationTypes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).removeViolationsFromCitationUsingDELETE(caseId, violationTypes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary reopenCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenCaseUsingPUT: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).reopenCaseUsingPUT(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setCourtDateForCase
         * @param {string} caseId caseId
         * @param {SetCourtDateForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCourtDateForCaseUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).setCourtDateForCaseUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary submitRequestForPriceMatch
         * @param {string} caseId caseId
         * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitRequestForPriceMatchUsingPOST: function (caseId, priceMatchRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).submitRequestForPriceMatchUsingPOST(caseId, priceMatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCase
         * @param {string} caseId caseId
         * @param {CaseDomainReq} caseFromRequest caseFromRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseUsingPUT: function (caseId, caseFromRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).updateCaseUsingPUT(caseId, caseFromRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateDeclineTickets
         * @param {string} caseId caseId
         * @param {UpdateCaseDeclineTicketsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeclineTicketsUsingPUT: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseControllerApiAxiosParamCreator)(configuration).updateDeclineTicketsUsingPUT(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseControllerApiFp = CaseControllerApiFp;
/**
 * CaseControllerApi - factory interface
 * @export
 */
var CaseControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addViolationsToCitation
         * @param {string} caseId caseId
         * @param {AddViolationsToCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationsToCitationUsingPOST: function (caseId, request, options) {
            return (0, exports.CaseControllerApiFp)(configuration).addViolationsToCitationUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary assignCaseToUser
         * @param {string} caseId caseId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCaseToUserUsingPOST: function (caseId, userId, options) {
            return (0, exports.CaseControllerApiFp)(configuration).assignCaseToUserUsingPOST(caseId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary assignOwner
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOwnerUsingPOST: function (caseId, options) {
            return (0, exports.CaseControllerApiFp)(configuration).assignOwnerUsingPOST(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary findChargeDisputesByCaseId
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByCaseIdUsingGET: function (caseId, options) {
            return (0, exports.CaseControllerApiFp)(configuration).findChargeDisputesByCaseIdUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getAppearanceAttorneysForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppearanceAttorneysForCaseUsingGET: function (caseId, options) {
            return (0, exports.CaseControllerApiFp)(configuration).getAppearanceAttorneysForCaseUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getSupportTicketsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForCaseUsingGET: function (caseId, options) {
            return (0, exports.CaseControllerApiFp)(configuration).getSupportTicketsForCaseUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary initiateCaseAndChargeCustomer
         * @param {string} caseId caseId
         * @param {InitiateCaseAndChargeCustomerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseAndChargeCustomerUsingPOST: function (caseId, request, options) {
            return (0, exports.CaseControllerApiFp)(configuration).initiateCaseAndChargeCustomerUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary initiateCase
         * @param {string} caseId caseId
         * @param {object} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateCaseUsingPOST: function (caseId, request, options) {
            return (0, exports.CaseControllerApiFp)(configuration).initiateCaseUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markCaseAsResolved
         * @param {string} caseId caseId
         * @param {MarkCaseAsResolvedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCaseAsResolvedUsingPOST: function (caseId, request, options) {
            return (0, exports.CaseControllerApiFp)(configuration).markCaseAsResolvedUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary removeViolationsFromCitation
         * @param {string} caseId caseId
         * @param {string} violationTypes violationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeViolationsFromCitationUsingDELETE: function (caseId, violationTypes, options) {
            return (0, exports.CaseControllerApiFp)(configuration).removeViolationsFromCitationUsingDELETE(caseId, violationTypes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary reopenCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenCaseUsingPUT: function (caseId, options) {
            return (0, exports.CaseControllerApiFp)(configuration).reopenCaseUsingPUT(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setCourtDateForCase
         * @param {string} caseId caseId
         * @param {SetCourtDateForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCourtDateForCaseUsingPOST: function (caseId, request, options) {
            return (0, exports.CaseControllerApiFp)(configuration).setCourtDateForCaseUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary submitRequestForPriceMatch
         * @param {string} caseId caseId
         * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitRequestForPriceMatchUsingPOST: function (caseId, priceMatchRequest, options) {
            return (0, exports.CaseControllerApiFp)(configuration).submitRequestForPriceMatchUsingPOST(caseId, priceMatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCase
         * @param {string} caseId caseId
         * @param {CaseDomainReq} caseFromRequest caseFromRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseUsingPUT: function (caseId, caseFromRequest, options) {
            return (0, exports.CaseControllerApiFp)(configuration).updateCaseUsingPUT(caseId, caseFromRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateDeclineTickets
         * @param {string} caseId caseId
         * @param {UpdateCaseDeclineTicketsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeclineTicketsUsingPUT: function (caseId, request, options) {
            return (0, exports.CaseControllerApiFp)(configuration).updateDeclineTicketsUsingPUT(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseControllerApiFactory = CaseControllerApiFactory;
/**
 * CaseControllerApi - object-oriented interface
 * @export
 * @class CaseControllerApi
 * @extends {BaseAPI}
 */
var CaseControllerApi = /** @class */ (function (_super) {
    __extends(CaseControllerApi, _super);
    function CaseControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addViolationsToCitation
     * @param {string} caseId caseId
     * @param {AddViolationsToCitationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.addViolationsToCitationUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).addViolationsToCitationUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary assignCaseToUser
     * @param {string} caseId caseId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.assignCaseToUserUsingPOST = function (caseId, userId, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).assignCaseToUserUsingPOST(caseId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary assignOwner
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.assignOwnerUsingPOST = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).assignOwnerUsingPOST(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary findChargeDisputesByCaseId
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.findChargeDisputesByCaseIdUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).findChargeDisputesByCaseIdUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getAppearanceAttorneysForCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.getAppearanceAttorneysForCaseUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).getAppearanceAttorneysForCaseUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getSupportTicketsForCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.getSupportTicketsForCaseUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).getSupportTicketsForCaseUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary initiateCaseAndChargeCustomer
     * @param {string} caseId caseId
     * @param {InitiateCaseAndChargeCustomerRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.initiateCaseAndChargeCustomerUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).initiateCaseAndChargeCustomerUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary initiateCase
     * @param {string} caseId caseId
     * @param {object} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.initiateCaseUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).initiateCaseUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markCaseAsResolved
     * @param {string} caseId caseId
     * @param {MarkCaseAsResolvedRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.markCaseAsResolvedUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).markCaseAsResolvedUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary removeViolationsFromCitation
     * @param {string} caseId caseId
     * @param {string} violationTypes violationTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.removeViolationsFromCitationUsingDELETE = function (caseId, violationTypes, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).removeViolationsFromCitationUsingDELETE(caseId, violationTypes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary reopenCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.reopenCaseUsingPUT = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).reopenCaseUsingPUT(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setCourtDateForCase
     * @param {string} caseId caseId
     * @param {SetCourtDateForCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.setCourtDateForCaseUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).setCourtDateForCaseUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary submitRequestForPriceMatch
     * @param {string} caseId caseId
     * @param {PriceMatchRequest} priceMatchRequest priceMatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.submitRequestForPriceMatchUsingPOST = function (caseId, priceMatchRequest, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).submitRequestForPriceMatchUsingPOST(caseId, priceMatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCase
     * @param {string} caseId caseId
     * @param {CaseDomainReq} caseFromRequest caseFromRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.updateCaseUsingPUT = function (caseId, caseFromRequest, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).updateCaseUsingPUT(caseId, caseFromRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateDeclineTickets
     * @param {string} caseId caseId
     * @param {UpdateCaseDeclineTicketsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseControllerApi
     */
    CaseControllerApi.prototype.updateDeclineTicketsUsingPUT = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseControllerApiFp)(this.configuration).updateDeclineTicketsUsingPUT(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseControllerApi;
}(base_1.BaseAPI));
exports.CaseControllerApi = CaseControllerApi;
/**
 * CaseCreationControllerApi - axios parameter creator
 * @export
 */
var CaseCreationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addSampleCase
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSampleCaseUsingPUT: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling addSampleCaseUsingPUT.');
                    }
                    localVarPath = "/api/v1/citations/{lawfirmId}/sample"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary matchCase
         * @param {string} citationIdString citationIdString
         * @param {CaseCreationRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCaseUsingPOST: function (citationIdString, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationIdString' is not null or undefined
                    if (citationIdString === null || citationIdString === undefined) {
                        throw new base_1.RequiredError('citationIdString', 'Required parameter citationIdString was null or undefined when calling matchCaseUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations/{citationIdString}/case"
                        .replace("{" + "citationIdString" + "}", encodeURIComponent(String(citationIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseCreationControllerApiAxiosParamCreator = CaseCreationControllerApiAxiosParamCreator;
/**
 * CaseCreationControllerApi - functional programming interface
 * @export
 */
var CaseCreationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addSampleCase
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSampleCaseUsingPUT: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseCreationControllerApiAxiosParamCreator)(configuration).addSampleCaseUsingPUT(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary matchCase
         * @param {string} citationIdString citationIdString
         * @param {CaseCreationRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCaseUsingPOST: function (citationIdString, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseCreationControllerApiAxiosParamCreator)(configuration).matchCaseUsingPOST(citationIdString, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseCreationControllerApiFp = CaseCreationControllerApiFp;
/**
 * CaseCreationControllerApi - factory interface
 * @export
 */
var CaseCreationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addSampleCase
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSampleCaseUsingPUT: function (lawfirmId, options) {
            return (0, exports.CaseCreationControllerApiFp)(configuration).addSampleCaseUsingPUT(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary matchCase
         * @param {string} citationIdString citationIdString
         * @param {CaseCreationRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCaseUsingPOST: function (citationIdString, request, options) {
            return (0, exports.CaseCreationControllerApiFp)(configuration).matchCaseUsingPOST(citationIdString, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseCreationControllerApiFactory = CaseCreationControllerApiFactory;
/**
 * CaseCreationControllerApi - object-oriented interface
 * @export
 * @class CaseCreationControllerApi
 * @extends {BaseAPI}
 */
var CaseCreationControllerApi = /** @class */ (function (_super) {
    __extends(CaseCreationControllerApi, _super);
    function CaseCreationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addSampleCase
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseCreationControllerApi
     */
    CaseCreationControllerApi.prototype.addSampleCaseUsingPUT = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.CaseCreationControllerApiFp)(this.configuration).addSampleCaseUsingPUT(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary matchCase
     * @param {string} citationIdString citationIdString
     * @param {CaseCreationRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseCreationControllerApi
     */
    CaseCreationControllerApi.prototype.matchCaseUsingPOST = function (citationIdString, request, options) {
        var _this = this;
        return (0, exports.CaseCreationControllerApiFp)(this.configuration).matchCaseUsingPOST(citationIdString, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseCreationControllerApi;
}(base_1.BaseAPI));
exports.CaseCreationControllerApi = CaseCreationControllerApi;
/**
 * CaseNotesControllerApi - axios parameter creator
 * @export
 */
var CaseNotesControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getCaseNotes
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseNotesUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getCaseNotesUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/notes"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary saveCaseNotes
         * @param {string} caseId caseId
         * @param {SaveCaseNotesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCaseNotesUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling saveCaseNotesUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling saveCaseNotesUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/notes"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseNotesControllerApiAxiosParamCreator = CaseNotesControllerApiAxiosParamCreator;
/**
 * CaseNotesControllerApi - functional programming interface
 * @export
 */
var CaseNotesControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getCaseNotes
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseNotesUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseNotesControllerApiAxiosParamCreator)(configuration).getCaseNotesUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary saveCaseNotes
         * @param {string} caseId caseId
         * @param {SaveCaseNotesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCaseNotesUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseNotesControllerApiAxiosParamCreator)(configuration).saveCaseNotesUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseNotesControllerApiFp = CaseNotesControllerApiFp;
/**
 * CaseNotesControllerApi - factory interface
 * @export
 */
var CaseNotesControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getCaseNotes
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseNotesUsingGET: function (caseId, options) {
            return (0, exports.CaseNotesControllerApiFp)(configuration).getCaseNotesUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary saveCaseNotes
         * @param {string} caseId caseId
         * @param {SaveCaseNotesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveCaseNotesUsingPOST: function (caseId, request, options) {
            return (0, exports.CaseNotesControllerApiFp)(configuration).saveCaseNotesUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseNotesControllerApiFactory = CaseNotesControllerApiFactory;
/**
 * CaseNotesControllerApi - object-oriented interface
 * @export
 * @class CaseNotesControllerApi
 * @extends {BaseAPI}
 */
var CaseNotesControllerApi = /** @class */ (function (_super) {
    __extends(CaseNotesControllerApi, _super);
    function CaseNotesControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getCaseNotes
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseNotesControllerApi
     */
    CaseNotesControllerApi.prototype.getCaseNotesUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseNotesControllerApiFp)(this.configuration).getCaseNotesUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary saveCaseNotes
     * @param {string} caseId caseId
     * @param {SaveCaseNotesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseNotesControllerApi
     */
    CaseNotesControllerApi.prototype.saveCaseNotesUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseNotesControllerApiFp)(this.configuration).saveCaseNotesUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseNotesControllerApi;
}(base_1.BaseAPI));
exports.CaseNotesControllerApi = CaseNotesControllerApi;
/**
 * CasePaymentControllerApi - axios parameter creator
 * @export
 */
var CasePaymentControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary authorizeChargeForCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {AuthorizeChargeForCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeChargeForCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling authorizeChargeForCasePaymentUsingPOST.');
                    }
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling authorizeChargeForCasePaymentUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payments/{casePaymentId}/authorize"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary captureChargeFromCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {CaptureChargeFromCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureChargeFromCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling captureChargeFromCasePaymentUsingPOST.');
                    }
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling captureChargeFromCasePaymentUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payments/{casePaymentId}/capture"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCasePaymentUsingDELETE: function (caseId, casePaymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling deleteCasePaymentUsingDELETE.');
                    }
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling deleteCasePaymentUsingDELETE.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payments/{casePaymentId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary generateCasePaymentPlan
         * @param {string} caseId caseId
         * @param {string} paymentPlanTypeId paymentPlanTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCasePaymentPlanUsingGET: function (caseId, paymentPlanTypeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling generateCasePaymentPlanUsingGET.');
                    }
                    // verify required parameter 'paymentPlanTypeId' is not null or undefined
                    if (paymentPlanTypeId === null || paymentPlanTypeId === undefined) {
                        throw new base_1.RequiredError('paymentPlanTypeId', 'Required parameter paymentPlanTypeId was null or undefined when calling generateCasePaymentPlanUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payment-plans/{paymentPlanTypeId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "paymentPlanTypeId" + "}", encodeURIComponent(String(paymentPlanTypeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getAvailablePaymentPlans
         * @param {number} lawfirmId lawfirmId
         * @param {string} legalFeeInCents legalFeeInCents
         * @param {string} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailablePaymentPlansUsingPOST: function (lawfirmId, legalFeeInCents, state, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
                    }
                    // verify required parameter 'legalFeeInCents' is not null or undefined
                    if (legalFeeInCents === null || legalFeeInCents === undefined) {
                        throw new base_1.RequiredError('legalFeeInCents', 'Required parameter legalFeeInCents was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
                    }
                    // verify required parameter 'state' is not null or undefined
                    if (state === null || state === undefined) {
                        throw new base_1.RequiredError('state', 'Required parameter state was null or undefined when calling getAvailablePaymentPlansUsingPOST.');
                    }
                    localVarPath = "/api/v1/payment-plans/{lawfirmId}/case-payment"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (legalFeeInCents !== undefined) {
                        localVarQueryParameter['legalFeeInCents'] = legalFeeInCents;
                    }
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCasePayments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasePaymentsUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getCasePaymentsUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payments"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getPaymentPlanOptions
         * @param {string} caseId caseId
         * @param {number} feeInCents feeInCents
         * @param {number} lawfirmId lawfirmId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanOptionsUsingGET: function (caseId, feeInCents, lawfirmId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getPaymentPlanOptionsUsingGET.');
                    }
                    // verify required parameter 'feeInCents' is not null or undefined
                    if (feeInCents === null || feeInCents === undefined) {
                        throw new base_1.RequiredError('feeInCents', 'Required parameter feeInCents was null or undefined when calling getPaymentPlanOptionsUsingGET.');
                    }
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getPaymentPlanOptionsUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payment-plans"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (feeInCents !== undefined) {
                        localVarQueryParameter['feeInCents'] = feeInCents;
                    }
                    if (lawfirmId !== undefined) {
                        localVarQueryParameter['lawfirmId'] = lawfirmId;
                    }
                    if (userId !== undefined) {
                        localVarQueryParameter['userId'] = userId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getStripeCharge
         * @param {string} caseId caseId
         * @param {string} stripeChargeId stripeChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargeUsingGET: function (caseId, stripeChargeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getStripeChargeUsingGET.');
                    }
                    // verify required parameter 'stripeChargeId' is not null or undefined
                    if (stripeChargeId === null || stripeChargeId === undefined) {
                        throw new base_1.RequiredError('stripeChargeId', 'Required parameter stripeChargeId was null or undefined when calling getStripeChargeUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/charges/{stripeChargeId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "stripeChargeId" + "}", encodeURIComponent(String(stripeChargeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getStripeCharges
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargesUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getStripeChargesUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/stripe-charges"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listCostItemsForAttorney
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForAttorneyUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling listCostItemsForAttorneyUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/attorney/cost"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listCostItemsForCustomer
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForCustomerUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling listCostItemsForCustomerUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/customer/cost"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary scheduleNewPayment
         * @param {string} caseId caseId
         * @param {ScheduleNewPaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleNewPaymentUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling scheduleNewPaymentUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling scheduleNewPaymentUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payments"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCasePayment
         * @param {string} casePaymentId casePaymentId
         * @param {UpdateCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCasePaymentUsingPUT: function (casePaymentId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling updateCasePaymentUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateCasePaymentUsingPUT.');
                    }
                    localVarPath = "/api/v1/payments/{casePaymentId}"
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updatePaymentDueDate
         * @param {string} casePaymentId casePaymentId
         * @param {UpdatePaymentDueDateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentDueDateUsingPUT: function (casePaymentId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling updatePaymentDueDateUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updatePaymentDueDateUsingPUT.');
                    }
                    localVarPath = "/api/v1/payments/{casePaymentId}/due-date"
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updatePaymentRecipient
         * @param {string} casePaymentId casePaymentId
         * @param {'LAWFIRM' | 'OTR'} recipient recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentRecipientUsingPUT: function (casePaymentId, recipient, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling updatePaymentRecipientUsingPUT.');
                    }
                    // verify required parameter 'recipient' is not null or undefined
                    if (recipient === null || recipient === undefined) {
                        throw new base_1.RequiredError('recipient', 'Required parameter recipient was null or undefined when calling updatePaymentRecipientUsingPUT.');
                    }
                    localVarPath = "/api/v1/payments/{casePaymentId}/owner"
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (recipient !== undefined) {
                        localVarQueryParameter['recipient'] = recipient;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CasePaymentControllerApiAxiosParamCreator = CasePaymentControllerApiAxiosParamCreator;
/**
 * CasePaymentControllerApi - functional programming interface
 * @export
 */
var CasePaymentControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary authorizeChargeForCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {AuthorizeChargeForCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeChargeForCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).authorizeChargeForCasePaymentUsingPOST(caseId, casePaymentId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary captureChargeFromCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {CaptureChargeFromCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureChargeFromCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).captureChargeFromCasePaymentUsingPOST(caseId, casePaymentId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCasePaymentUsingDELETE: function (caseId, casePaymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).deleteCasePaymentUsingDELETE(caseId, casePaymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary generateCasePaymentPlan
         * @param {string} caseId caseId
         * @param {string} paymentPlanTypeId paymentPlanTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCasePaymentPlanUsingGET: function (caseId, paymentPlanTypeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).generateCasePaymentPlanUsingGET(caseId, paymentPlanTypeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getAvailablePaymentPlans
         * @param {number} lawfirmId lawfirmId
         * @param {string} legalFeeInCents legalFeeInCents
         * @param {string} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailablePaymentPlansUsingPOST: function (lawfirmId, legalFeeInCents, state, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).getAvailablePaymentPlansUsingPOST(lawfirmId, legalFeeInCents, state, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCasePayments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasePaymentsUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).getCasePaymentsUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getPaymentPlanOptions
         * @param {string} caseId caseId
         * @param {number} feeInCents feeInCents
         * @param {number} lawfirmId lawfirmId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanOptionsUsingGET: function (caseId, feeInCents, lawfirmId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).getPaymentPlanOptionsUsingGET(caseId, feeInCents, lawfirmId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getStripeCharge
         * @param {string} caseId caseId
         * @param {string} stripeChargeId stripeChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargeUsingGET: function (caseId, stripeChargeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).getStripeChargeUsingGET(caseId, stripeChargeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getStripeCharges
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargesUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).getStripeChargesUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listCostItemsForAttorney
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForAttorneyUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).listCostItemsForAttorneyUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listCostItemsForCustomer
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForCustomerUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).listCostItemsForCustomerUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary scheduleNewPayment
         * @param {string} caseId caseId
         * @param {ScheduleNewPaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleNewPaymentUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).scheduleNewPaymentUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCasePayment
         * @param {string} casePaymentId casePaymentId
         * @param {UpdateCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCasePaymentUsingPUT: function (casePaymentId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).updateCasePaymentUsingPUT(casePaymentId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updatePaymentDueDate
         * @param {string} casePaymentId casePaymentId
         * @param {UpdatePaymentDueDateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentDueDateUsingPUT: function (casePaymentId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).updatePaymentDueDateUsingPUT(casePaymentId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updatePaymentRecipient
         * @param {string} casePaymentId casePaymentId
         * @param {'LAWFIRM' | 'OTR'} recipient recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentRecipientUsingPUT: function (casePaymentId, recipient, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CasePaymentControllerApiAxiosParamCreator)(configuration).updatePaymentRecipientUsingPUT(casePaymentId, recipient, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CasePaymentControllerApiFp = CasePaymentControllerApiFp;
/**
 * CasePaymentControllerApi - factory interface
 * @export
 */
var CasePaymentControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary authorizeChargeForCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {AuthorizeChargeForCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeChargeForCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).authorizeChargeForCasePaymentUsingPOST(caseId, casePaymentId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary captureChargeFromCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {CaptureChargeFromCasePaymentRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captureChargeFromCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).captureChargeFromCasePaymentUsingPOST(caseId, casePaymentId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCasePaymentUsingDELETE: function (caseId, casePaymentId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).deleteCasePaymentUsingDELETE(caseId, casePaymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary generateCasePaymentPlan
         * @param {string} caseId caseId
         * @param {string} paymentPlanTypeId paymentPlanTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCasePaymentPlanUsingGET: function (caseId, paymentPlanTypeId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).generateCasePaymentPlanUsingGET(caseId, paymentPlanTypeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getAvailablePaymentPlans
         * @param {number} lawfirmId lawfirmId
         * @param {string} legalFeeInCents legalFeeInCents
         * @param {string} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailablePaymentPlansUsingPOST: function (lawfirmId, legalFeeInCents, state, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).getAvailablePaymentPlansUsingPOST(lawfirmId, legalFeeInCents, state, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCasePayments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasePaymentsUsingGET: function (caseId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).getCasePaymentsUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getPaymentPlanOptions
         * @param {string} caseId caseId
         * @param {number} feeInCents feeInCents
         * @param {number} lawfirmId lawfirmId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentPlanOptionsUsingGET: function (caseId, feeInCents, lawfirmId, userId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).getPaymentPlanOptionsUsingGET(caseId, feeInCents, lawfirmId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getStripeCharge
         * @param {string} caseId caseId
         * @param {string} stripeChargeId stripeChargeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargeUsingGET: function (caseId, stripeChargeId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).getStripeChargeUsingGET(caseId, stripeChargeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getStripeCharges
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeChargesUsingGET: function (caseId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).getStripeChargesUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listCostItemsForAttorney
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForAttorneyUsingGET: function (caseId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).listCostItemsForAttorneyUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listCostItemsForCustomer
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostItemsForCustomerUsingGET: function (caseId, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).listCostItemsForCustomerUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary scheduleNewPayment
         * @param {string} caseId caseId
         * @param {ScheduleNewPaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleNewPaymentUsingPOST: function (caseId, request, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).scheduleNewPaymentUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCasePayment
         * @param {string} casePaymentId casePaymentId
         * @param {UpdateCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCasePaymentUsingPUT: function (casePaymentId, request, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).updateCasePaymentUsingPUT(casePaymentId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updatePaymentDueDate
         * @param {string} casePaymentId casePaymentId
         * @param {UpdatePaymentDueDateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentDueDateUsingPUT: function (casePaymentId, request, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).updatePaymentDueDateUsingPUT(casePaymentId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updatePaymentRecipient
         * @param {string} casePaymentId casePaymentId
         * @param {'LAWFIRM' | 'OTR'} recipient recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentRecipientUsingPUT: function (casePaymentId, recipient, options) {
            return (0, exports.CasePaymentControllerApiFp)(configuration).updatePaymentRecipientUsingPUT(casePaymentId, recipient, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CasePaymentControllerApiFactory = CasePaymentControllerApiFactory;
/**
 * CasePaymentControllerApi - object-oriented interface
 * @export
 * @class CasePaymentControllerApi
 * @extends {BaseAPI}
 */
var CasePaymentControllerApi = /** @class */ (function (_super) {
    __extends(CasePaymentControllerApi, _super);
    function CasePaymentControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary authorizeChargeForCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {AuthorizeChargeForCasePaymentRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.authorizeChargeForCasePaymentUsingPOST = function (caseId, casePaymentId, request, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).authorizeChargeForCasePaymentUsingPOST(caseId, casePaymentId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary captureChargeFromCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {CaptureChargeFromCasePaymentRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.captureChargeFromCasePaymentUsingPOST = function (caseId, casePaymentId, request, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).captureChargeFromCasePaymentUsingPOST(caseId, casePaymentId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.deleteCasePaymentUsingDELETE = function (caseId, casePaymentId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).deleteCasePaymentUsingDELETE(caseId, casePaymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary generateCasePaymentPlan
     * @param {string} caseId caseId
     * @param {string} paymentPlanTypeId paymentPlanTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.generateCasePaymentPlanUsingGET = function (caseId, paymentPlanTypeId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).generateCasePaymentPlanUsingGET(caseId, paymentPlanTypeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getAvailablePaymentPlans
     * @param {number} lawfirmId lawfirmId
     * @param {string} legalFeeInCents legalFeeInCents
     * @param {string} state state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.getAvailablePaymentPlansUsingPOST = function (lawfirmId, legalFeeInCents, state, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).getAvailablePaymentPlansUsingPOST(lawfirmId, legalFeeInCents, state, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCasePayments
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.getCasePaymentsUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).getCasePaymentsUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getPaymentPlanOptions
     * @param {string} caseId caseId
     * @param {number} feeInCents feeInCents
     * @param {number} lawfirmId lawfirmId
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.getPaymentPlanOptionsUsingGET = function (caseId, feeInCents, lawfirmId, userId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).getPaymentPlanOptionsUsingGET(caseId, feeInCents, lawfirmId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getStripeCharge
     * @param {string} caseId caseId
     * @param {string} stripeChargeId stripeChargeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.getStripeChargeUsingGET = function (caseId, stripeChargeId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).getStripeChargeUsingGET(caseId, stripeChargeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getStripeCharges
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.getStripeChargesUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).getStripeChargesUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listCostItemsForAttorney
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.listCostItemsForAttorneyUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).listCostItemsForAttorneyUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listCostItemsForCustomer
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.listCostItemsForCustomerUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).listCostItemsForCustomerUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary scheduleNewPayment
     * @param {string} caseId caseId
     * @param {ScheduleNewPaymentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.scheduleNewPaymentUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).scheduleNewPaymentUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCasePayment
     * @param {string} casePaymentId casePaymentId
     * @param {UpdateCasePaymentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.updateCasePaymentUsingPUT = function (casePaymentId, request, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).updateCasePaymentUsingPUT(casePaymentId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updatePaymentDueDate
     * @param {string} casePaymentId casePaymentId
     * @param {UpdatePaymentDueDateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.updatePaymentDueDateUsingPUT = function (casePaymentId, request, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).updatePaymentDueDateUsingPUT(casePaymentId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updatePaymentRecipient
     * @param {string} casePaymentId casePaymentId
     * @param {'LAWFIRM' | 'OTR'} recipient recipient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasePaymentControllerApi
     */
    CasePaymentControllerApi.prototype.updatePaymentRecipientUsingPUT = function (casePaymentId, recipient, options) {
        var _this = this;
        return (0, exports.CasePaymentControllerApiFp)(this.configuration).updatePaymentRecipientUsingPUT(casePaymentId, recipient, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CasePaymentControllerApi;
}(base_1.BaseAPI));
exports.CasePaymentControllerApi = CasePaymentControllerApi;
/**
 * CaseReferralCodeControllerApi - axios parameter creator
 * @export
 */
var CaseReferralCodeControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
         * @param {string} caseId caseId
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyReferralCodeUsingPOST: function (caseId, codeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling applyReferralCodeUsingPOST.');
                    }
                    // verify required parameter 'codeId' is not null or undefined
                    if (codeId === null || codeId === undefined) {
                        throw new base_1.RequiredError('codeId', 'Required parameter codeId was null or undefined when calling applyReferralCodeUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/referralcode/{codeId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "codeId" + "}", encodeURIComponent(String(codeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseReferralCodeControllerApiAxiosParamCreator = CaseReferralCodeControllerApiAxiosParamCreator;
/**
 * CaseReferralCodeControllerApi - functional programming interface
 * @export
 */
var CaseReferralCodeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
         * @param {string} caseId caseId
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyReferralCodeUsingPOST: function (caseId, codeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseReferralCodeControllerApiAxiosParamCreator)(configuration).applyReferralCodeUsingPOST(caseId, codeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseReferralCodeControllerApiFp = CaseReferralCodeControllerApiFp;
/**
 * CaseReferralCodeControllerApi - factory interface
 * @export
 */
var CaseReferralCodeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
         * @param {string} caseId caseId
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyReferralCodeUsingPOST: function (caseId, codeId, options) {
            return (0, exports.CaseReferralCodeControllerApiFp)(configuration).applyReferralCodeUsingPOST(caseId, codeId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseReferralCodeControllerApiFactory = CaseReferralCodeControllerApiFactory;
/**
 * CaseReferralCodeControllerApi - object-oriented interface
 * @export
 * @class CaseReferralCodeControllerApi
 * @extends {BaseAPI}
 */
var CaseReferralCodeControllerApi = /** @class */ (function (_super) {
    __extends(CaseReferralCodeControllerApi, _super);
    function CaseReferralCodeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
     * @param {string} caseId caseId
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseReferralCodeControllerApi
     */
    CaseReferralCodeControllerApi.prototype.applyReferralCodeUsingPOST = function (caseId, codeId, options) {
        var _this = this;
        return (0, exports.CaseReferralCodeControllerApiFp)(this.configuration).applyReferralCodeUsingPOST(caseId, codeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseReferralCodeControllerApi;
}(base_1.BaseAPI));
exports.CaseReferralCodeControllerApi = CaseReferralCodeControllerApi;
/**
 * CaseRefundControllerApi - axios parameter creator
 * @export
 */
var CaseRefundControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary cancelCase
         * @param {CancelCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCaseUsingDELETE: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling cancelCaseUsingDELETE.');
                    }
                    localVarPath = "/api/v2/cases";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary refundCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {RefundCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling refundCasePaymentUsingPOST.');
                    }
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling refundCasePaymentUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling refundCasePaymentUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payments/{casePaymentId}/refund"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary releasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePaymentUsingPOST: function (caseId, casePaymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling releasePaymentUsingPOST.');
                    }
                    // verify required parameter 'casePaymentId' is not null or undefined
                    if (casePaymentId === null || casePaymentId === undefined) {
                        throw new base_1.RequiredError('casePaymentId', 'Required parameter casePaymentId was null or undefined when calling releasePaymentUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payments/{casePaymentId}/release"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "casePaymentId" + "}", encodeURIComponent(String(casePaymentId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateRefundEligibilityForCase
         * @param {string} caseId caseId
         * @param {UpdateRefundEligibilityForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRefundEligibilityForCaseUsingPUT: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling updateRefundEligibilityForCaseUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateRefundEligibilityForCaseUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/refund-eligibility"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseRefundControllerApiAxiosParamCreator = CaseRefundControllerApiAxiosParamCreator;
/**
 * CaseRefundControllerApi - functional programming interface
 * @export
 */
var CaseRefundControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary cancelCase
         * @param {CancelCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCaseUsingDELETE: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseRefundControllerApiAxiosParamCreator)(configuration).cancelCaseUsingDELETE(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary refundCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {RefundCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseRefundControllerApiAxiosParamCreator)(configuration).refundCasePaymentUsingPOST(caseId, casePaymentId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary releasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePaymentUsingPOST: function (caseId, casePaymentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseRefundControllerApiAxiosParamCreator)(configuration).releasePaymentUsingPOST(caseId, casePaymentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateRefundEligibilityForCase
         * @param {string} caseId caseId
         * @param {UpdateRefundEligibilityForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRefundEligibilityForCaseUsingPUT: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseRefundControllerApiAxiosParamCreator)(configuration).updateRefundEligibilityForCaseUsingPUT(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseRefundControllerApiFp = CaseRefundControllerApiFp;
/**
 * CaseRefundControllerApi - factory interface
 * @export
 */
var CaseRefundControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary cancelCase
         * @param {CancelCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCaseUsingDELETE: function (request, options) {
            return (0, exports.CaseRefundControllerApiFp)(configuration).cancelCaseUsingDELETE(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary refundCasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {RefundCasePaymentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundCasePaymentUsingPOST: function (caseId, casePaymentId, request, options) {
            return (0, exports.CaseRefundControllerApiFp)(configuration).refundCasePaymentUsingPOST(caseId, casePaymentId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary releasePayment
         * @param {string} caseId caseId
         * @param {string} casePaymentId casePaymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releasePaymentUsingPOST: function (caseId, casePaymentId, options) {
            return (0, exports.CaseRefundControllerApiFp)(configuration).releasePaymentUsingPOST(caseId, casePaymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateRefundEligibilityForCase
         * @param {string} caseId caseId
         * @param {UpdateRefundEligibilityForCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRefundEligibilityForCaseUsingPUT: function (caseId, request, options) {
            return (0, exports.CaseRefundControllerApiFp)(configuration).updateRefundEligibilityForCaseUsingPUT(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseRefundControllerApiFactory = CaseRefundControllerApiFactory;
/**
 * CaseRefundControllerApi - object-oriented interface
 * @export
 * @class CaseRefundControllerApi
 * @extends {BaseAPI}
 */
var CaseRefundControllerApi = /** @class */ (function (_super) {
    __extends(CaseRefundControllerApi, _super);
    function CaseRefundControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary cancelCase
     * @param {CancelCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    CaseRefundControllerApi.prototype.cancelCaseUsingDELETE = function (request, options) {
        var _this = this;
        return (0, exports.CaseRefundControllerApiFp)(this.configuration).cancelCaseUsingDELETE(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary refundCasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {RefundCasePaymentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    CaseRefundControllerApi.prototype.refundCasePaymentUsingPOST = function (caseId, casePaymentId, request, options) {
        var _this = this;
        return (0, exports.CaseRefundControllerApiFp)(this.configuration).refundCasePaymentUsingPOST(caseId, casePaymentId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary releasePayment
     * @param {string} caseId caseId
     * @param {string} casePaymentId casePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    CaseRefundControllerApi.prototype.releasePaymentUsingPOST = function (caseId, casePaymentId, options) {
        var _this = this;
        return (0, exports.CaseRefundControllerApiFp)(this.configuration).releasePaymentUsingPOST(caseId, casePaymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateRefundEligibilityForCase
     * @param {string} caseId caseId
     * @param {UpdateRefundEligibilityForCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseRefundControllerApi
     */
    CaseRefundControllerApi.prototype.updateRefundEligibilityForCaseUsingPUT = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseRefundControllerApiFp)(this.configuration).updateRefundEligibilityForCaseUsingPUT(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseRefundControllerApi;
}(base_1.BaseAPI));
exports.CaseRefundControllerApi = CaseRefundControllerApi;
/**
 * CaseStatusControllerApi - axios parameter creator
 * @export
 */
var CaseStatusControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getCaseResolutionStatuses
         * @param {string} [stateCode] stateCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseResolutionStatusesUsingGET: function (stateCode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/case-statuses/resolution-statuses";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (stateCode !== undefined) {
                        localVarQueryParameter['stateCode'] = stateCode;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCaseStatuses
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusesUsingGET: function (categories, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/case-statuses";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (categories) {
                        localVarQueryParameter['categories'] = categories;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseStatusControllerApiAxiosParamCreator = CaseStatusControllerApiAxiosParamCreator;
/**
 * CaseStatusControllerApi - functional programming interface
 * @export
 */
var CaseStatusControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getCaseResolutionStatuses
         * @param {string} [stateCode] stateCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseResolutionStatusesUsingGET: function (stateCode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseStatusControllerApiAxiosParamCreator)(configuration).getCaseResolutionStatusesUsingGET(stateCode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCaseStatuses
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusesUsingGET: function (categories, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseStatusControllerApiAxiosParamCreator)(configuration).getCaseStatusesUsingGET(categories, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseStatusControllerApiFp = CaseStatusControllerApiFp;
/**
 * CaseStatusControllerApi - factory interface
 * @export
 */
var CaseStatusControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getCaseResolutionStatuses
         * @param {string} [stateCode] stateCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseResolutionStatusesUsingGET: function (stateCode, options) {
            return (0, exports.CaseStatusControllerApiFp)(configuration).getCaseResolutionStatusesUsingGET(stateCode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCaseStatuses
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseStatusesUsingGET: function (categories, options) {
            return (0, exports.CaseStatusControllerApiFp)(configuration).getCaseStatusesUsingGET(categories, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseStatusControllerApiFactory = CaseStatusControllerApiFactory;
/**
 * CaseStatusControllerApi - object-oriented interface
 * @export
 * @class CaseStatusControllerApi
 * @extends {BaseAPI}
 */
var CaseStatusControllerApi = /** @class */ (function (_super) {
    __extends(CaseStatusControllerApi, _super);
    function CaseStatusControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getCaseResolutionStatuses
     * @param {string} [stateCode] stateCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseStatusControllerApi
     */
    CaseStatusControllerApi.prototype.getCaseResolutionStatusesUsingGET = function (stateCode, options) {
        var _this = this;
        return (0, exports.CaseStatusControllerApiFp)(this.configuration).getCaseResolutionStatusesUsingGET(stateCode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCaseStatuses
     * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [categories] categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseStatusControllerApi
     */
    CaseStatusControllerApi.prototype.getCaseStatusesUsingGET = function (categories, options) {
        var _this = this;
        return (0, exports.CaseStatusControllerApiFp)(this.configuration).getCaseStatusesUsingGET(categories, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseStatusControllerApi;
}(base_1.BaseAPI));
exports.CaseStatusControllerApi = CaseStatusControllerApi;
/**
 * CaseTransferControllerApi - axios parameter creator
 * @export
 */
var CaseTransferControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getTransferHistory
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferHistoryUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getTransferHistoryUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/transfer"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary transferCase
         * @param {string} caseId caseId
         * @param {TransferCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCaseUsingPUT: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling transferCaseUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling transferCaseUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/transfer"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CaseTransferControllerApiAxiosParamCreator = CaseTransferControllerApiAxiosParamCreator;
/**
 * CaseTransferControllerApi - functional programming interface
 * @export
 */
var CaseTransferControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getTransferHistory
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferHistoryUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseTransferControllerApiAxiosParamCreator)(configuration).getTransferHistoryUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary transferCase
         * @param {string} caseId caseId
         * @param {TransferCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCaseUsingPUT: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CaseTransferControllerApiAxiosParamCreator)(configuration).transferCaseUsingPUT(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CaseTransferControllerApiFp = CaseTransferControllerApiFp;
/**
 * CaseTransferControllerApi - factory interface
 * @export
 */
var CaseTransferControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getTransferHistory
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransferHistoryUsingGET: function (caseId, options) {
            return (0, exports.CaseTransferControllerApiFp)(configuration).getTransferHistoryUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary transferCase
         * @param {string} caseId caseId
         * @param {TransferCaseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCaseUsingPUT: function (caseId, request, options) {
            return (0, exports.CaseTransferControllerApiFp)(configuration).transferCaseUsingPUT(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CaseTransferControllerApiFactory = CaseTransferControllerApiFactory;
/**
 * CaseTransferControllerApi - object-oriented interface
 * @export
 * @class CaseTransferControllerApi
 * @extends {BaseAPI}
 */
var CaseTransferControllerApi = /** @class */ (function (_super) {
    __extends(CaseTransferControllerApi, _super);
    function CaseTransferControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getTransferHistory
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTransferControllerApi
     */
    CaseTransferControllerApi.prototype.getTransferHistoryUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.CaseTransferControllerApiFp)(this.configuration).getTransferHistoryUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary transferCase
     * @param {string} caseId caseId
     * @param {TransferCaseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseTransferControllerApi
     */
    CaseTransferControllerApi.prototype.transferCaseUsingPUT = function (caseId, request, options) {
        var _this = this;
        return (0, exports.CaseTransferControllerApiFp)(this.configuration).transferCaseUsingPUT(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CaseTransferControllerApi;
}(base_1.BaseAPI));
exports.CaseTransferControllerApi = CaseTransferControllerApi;
/**
 * CatchAllControllerApi - axios parameter creator
 * @export
 */
var CatchAllControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingDELETE1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/**";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingGET1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/**";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingHEAD1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/**";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingOPTIONS1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/**";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'OPTIONS' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPATCH1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/**";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPOST1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/**";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPUT1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/**";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CatchAllControllerApiAxiosParamCreator = CatchAllControllerApiAxiosParamCreator;
/**
 * CatchAllControllerApi - functional programming interface
 * @export
 */
var CatchAllControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingDELETE1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CatchAllControllerApiAxiosParamCreator)(configuration).unmappedRequestUsingDELETE1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingGET1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CatchAllControllerApiAxiosParamCreator)(configuration).unmappedRequestUsingGET1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingHEAD1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CatchAllControllerApiAxiosParamCreator)(configuration).unmappedRequestUsingHEAD1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingOPTIONS1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CatchAllControllerApiAxiosParamCreator)(configuration).unmappedRequestUsingOPTIONS1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPATCH1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CatchAllControllerApiAxiosParamCreator)(configuration).unmappedRequestUsingPATCH1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPOST1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CatchAllControllerApiAxiosParamCreator)(configuration).unmappedRequestUsingPOST1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPUT1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CatchAllControllerApiAxiosParamCreator)(configuration).unmappedRequestUsingPUT1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CatchAllControllerApiFp = CatchAllControllerApiFp;
/**
 * CatchAllControllerApi - factory interface
 * @export
 */
var CatchAllControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingDELETE1: function (options) {
            return (0, exports.CatchAllControllerApiFp)(configuration).unmappedRequestUsingDELETE1(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingGET1: function (options) {
            return (0, exports.CatchAllControllerApiFp)(configuration).unmappedRequestUsingGET1(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingHEAD1: function (options) {
            return (0, exports.CatchAllControllerApiFp)(configuration).unmappedRequestUsingHEAD1(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingOPTIONS1: function (options) {
            return (0, exports.CatchAllControllerApiFp)(configuration).unmappedRequestUsingOPTIONS1(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPATCH1: function (options) {
            return (0, exports.CatchAllControllerApiFp)(configuration).unmappedRequestUsingPATCH1(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPOST1: function (options) {
            return (0, exports.CatchAllControllerApiFp)(configuration).unmappedRequestUsingPOST1(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary unmappedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unmappedRequestUsingPUT1: function (options) {
            return (0, exports.CatchAllControllerApiFp)(configuration).unmappedRequestUsingPUT1(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CatchAllControllerApiFactory = CatchAllControllerApiFactory;
/**
 * CatchAllControllerApi - object-oriented interface
 * @export
 * @class CatchAllControllerApi
 * @extends {BaseAPI}
 */
var CatchAllControllerApi = /** @class */ (function (_super) {
    __extends(CatchAllControllerApi, _super);
    function CatchAllControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    CatchAllControllerApi.prototype.unmappedRequestUsingDELETE1 = function (options) {
        var _this = this;
        return (0, exports.CatchAllControllerApiFp)(this.configuration).unmappedRequestUsingDELETE1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    CatchAllControllerApi.prototype.unmappedRequestUsingGET1 = function (options) {
        var _this = this;
        return (0, exports.CatchAllControllerApiFp)(this.configuration).unmappedRequestUsingGET1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    CatchAllControllerApi.prototype.unmappedRequestUsingHEAD1 = function (options) {
        var _this = this;
        return (0, exports.CatchAllControllerApiFp)(this.configuration).unmappedRequestUsingHEAD1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    CatchAllControllerApi.prototype.unmappedRequestUsingOPTIONS1 = function (options) {
        var _this = this;
        return (0, exports.CatchAllControllerApiFp)(this.configuration).unmappedRequestUsingOPTIONS1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    CatchAllControllerApi.prototype.unmappedRequestUsingPATCH1 = function (options) {
        var _this = this;
        return (0, exports.CatchAllControllerApiFp)(this.configuration).unmappedRequestUsingPATCH1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    CatchAllControllerApi.prototype.unmappedRequestUsingPOST1 = function (options) {
        var _this = this;
        return (0, exports.CatchAllControllerApiFp)(this.configuration).unmappedRequestUsingPOST1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary unmappedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatchAllControllerApi
     */
    CatchAllControllerApi.prototype.unmappedRequestUsingPUT1 = function (options) {
        var _this = this;
        return (0, exports.CatchAllControllerApiFp)(this.configuration).unmappedRequestUsingPUT1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CatchAllControllerApi;
}(base_1.BaseAPI));
exports.CatchAllControllerApi = CatchAllControllerApi;
/**
 * CertificateControllerApi - axios parameter creator
 * @export
 */
var CertificateControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getSSLPublicCertFile
         * @param {'DER' | 'PEM'} encoding encoding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSSLPublicCertFileUsingGET: function (encoding, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'encoding' is not null or undefined
                    if (encoding === null || encoding === undefined) {
                        throw new base_1.RequiredError('encoding', 'Required parameter encoding was null or undefined when calling getSSLPublicCertFileUsingGET.');
                    }
                    localVarPath = "/api/v1/certificates/ssl";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (encoding !== undefined) {
                        localVarQueryParameter['encoding'] = encoding;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CertificateControllerApiAxiosParamCreator = CertificateControllerApiAxiosParamCreator;
/**
 * CertificateControllerApi - functional programming interface
 * @export
 */
var CertificateControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getSSLPublicCertFile
         * @param {'DER' | 'PEM'} encoding encoding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSSLPublicCertFileUsingGET: function (encoding, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CertificateControllerApiAxiosParamCreator)(configuration).getSSLPublicCertFileUsingGET(encoding, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CertificateControllerApiFp = CertificateControllerApiFp;
/**
 * CertificateControllerApi - factory interface
 * @export
 */
var CertificateControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getSSLPublicCertFile
         * @param {'DER' | 'PEM'} encoding encoding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSSLPublicCertFileUsingGET: function (encoding, options) {
            return (0, exports.CertificateControllerApiFp)(configuration).getSSLPublicCertFileUsingGET(encoding, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CertificateControllerApiFactory = CertificateControllerApiFactory;
/**
 * CertificateControllerApi - object-oriented interface
 * @export
 * @class CertificateControllerApi
 * @extends {BaseAPI}
 */
var CertificateControllerApi = /** @class */ (function (_super) {
    __extends(CertificateControllerApi, _super);
    function CertificateControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getSSLPublicCertFile
     * @param {'DER' | 'PEM'} encoding encoding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    CertificateControllerApi.prototype.getSSLPublicCertFileUsingGET = function (encoding, options) {
        var _this = this;
        return (0, exports.CertificateControllerApiFp)(this.configuration).getSSLPublicCertFileUsingGET(encoding, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CertificateControllerApi;
}(base_1.BaseAPI));
exports.CertificateControllerApi = CertificateControllerApi;
/**
 * CitationControllerApi - axios parameter creator
 * @export
 */
var CitationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary assignCitationOwner
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCitationOwnerUsingPOST: function (citationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling assignCitationOwnerUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/owner"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary createNewCitation
         * @param {CreateCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCitationUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createNewCitationUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary createReferralSourceForCitation
         * @param {string} citationId citationId
         * @param {CreateReferralSourceForCitation} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferralSourceForCitationUsingPOST: function (citationId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling createReferralSourceForCitationUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createReferralSourceForCitationUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/referral-source"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCitationUsingDELETE: function (citationIdString, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationIdString' is not null or undefined
                    if (citationIdString === null || citationIdString === undefined) {
                        throw new base_1.RequiredError('citationIdString', 'Required parameter citationIdString was null or undefined when calling deleteCitationUsingDELETE.');
                    }
                    localVarPath = "/api/v1/citations/{citationIdString}"
                        .replace("{" + "citationIdString" + "}", encodeURIComponent(String(citationIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteMissingCourtRecord
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMissingCourtRecordUsingDELETE: function (citationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling deleteMissingCourtRecordUsingDELETE.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/courts/missing"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary dismissCitationsFromContactList
         * @param {DismissCitationsFromContactListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissCitationsFromContactListUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling dismissCitationsFromContactListUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations/dismiss";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getAnonymousTicketUploads
         * @param {string} emailAddress emailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnonymousTicketUploadsUsingGET: function (emailAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'emailAddress' is not null or undefined
                    if (emailAddress === null || emailAddress === undefined) {
                        throw new base_1.RequiredError('emailAddress', 'Required parameter emailAddress was null or undefined when calling getAnonymousTicketUploadsUsingGET.');
                    }
                    localVarPath = "/api/v1/citations/{emailAddress}/anonymous-tickets"
                        .replace("{" + "emailAddress" + "}", encodeURIComponent(String(emailAddress)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationUsingGET: function (citationIdString, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationIdString' is not null or undefined
                    if (citationIdString === null || citationIdString === undefined) {
                        throw new base_1.RequiredError('citationIdString', 'Required parameter citationIdString was null or undefined when calling getCitationUsingGET.');
                    }
                    localVarPath = "/api/v1/citations/{citationIdString}"
                        .replace("{" + "citationIdString" + "}", encodeURIComponent(String(citationIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getListOfCitationsWithMissingCourt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfCitationsWithMissingCourtUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/citations/courts/missing";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getNoViolationCitations
         * @param {Array<string>} [regionCodes] regionCodes
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoViolationCitationsUsingGET: function (regionCodes, trailingDays, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/citations/no-violation-uploads";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (regionCodes) {
                        localVarQueryParameter['regionCodes'] = regionCodes;
                    }
                    if (trailingDays !== undefined) {
                        localVarQueryParameter['trailingDays'] = trailingDays;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary postMissingCourtForCitation
         * @param {string} citationId citationId
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMissingCourtForCitationUsingPOST: function (citationId, state, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling postMissingCourtForCitationUsingPOST.');
                    }
                    // verify required parameter 'state' is not null or undefined
                    if (state === null || state === undefined) {
                        throw new base_1.RequiredError('state', 'Required parameter state was null or undefined when calling postMissingCourtForCitationUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/court/missing"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setCitationContactListFlag
         * @param {string} citationIdString citationIdString
         * @param {boolean} isDismissed isDismissed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCitationContactListFlagUsingPOST: function (citationIdString, isDismissed, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationIdString' is not null or undefined
                    if (citationIdString === null || citationIdString === undefined) {
                        throw new base_1.RequiredError('citationIdString', 'Required parameter citationIdString was null or undefined when calling setCitationContactListFlagUsingPOST.');
                    }
                    // verify required parameter 'isDismissed' is not null or undefined
                    if (isDismissed === null || isDismissed === undefined) {
                        throw new base_1.RequiredError('isDismissed', 'Required parameter isDismissed was null or undefined when calling setCitationContactListFlagUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations/{citationIdString}/dismiss"
                        .replace("{" + "citationIdString" + "}", encodeURIComponent(String(citationIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isDismissed !== undefined) {
                        localVarQueryParameter['isDismissed'] = isDismissed;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCitationAddress
         * @param {string} citationId citationId
         * @param {UpdateCitationAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationAddressUsingPOST: function (citationId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling updateCitationAddressUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateCitationAddressUsingPOST.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/address"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCitationPicture
         * @param {string} citationId citationId
         * @param {UpdateCitationPictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationPictureUsingPUT: function (citationId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling updateCitationPictureUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateCitationPictureUsingPUT.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/picture"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCitation
         * @param {string} citationIdString citationIdString
         * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationUsingPUT: function (citationIdString, updateCitationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationIdString' is not null or undefined
                    if (citationIdString === null || citationIdString === undefined) {
                        throw new base_1.RequiredError('citationIdString', 'Required parameter citationIdString was null or undefined when calling updateCitationUsingPUT.');
                    }
                    // verify required parameter 'updateCitationRequest' is not null or undefined
                    if (updateCitationRequest === null || updateCitationRequest === undefined) {
                        throw new base_1.RequiredError('updateCitationRequest', 'Required parameter updateCitationRequest was null or undefined when calling updateCitationUsingPUT.');
                    }
                    localVarPath = "/api/v1/citations/{citationIdString}"
                        .replace("{" + "citationIdString" + "}", encodeURIComponent(String(citationIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof updateCitationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateCitationRequest !== undefined ? updateCitationRequest : {}) : (updateCitationRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CitationControllerApiAxiosParamCreator = CitationControllerApiAxiosParamCreator;
/**
 * CitationControllerApi - functional programming interface
 * @export
 */
var CitationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary assignCitationOwner
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCitationOwnerUsingPOST: function (citationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).assignCitationOwnerUsingPOST(citationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary createNewCitation
         * @param {CreateCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCitationUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).createNewCitationUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary createReferralSourceForCitation
         * @param {string} citationId citationId
         * @param {CreateReferralSourceForCitation} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferralSourceForCitationUsingPOST: function (citationId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).createReferralSourceForCitationUsingPOST(citationId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCitationUsingDELETE: function (citationIdString, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).deleteCitationUsingDELETE(citationIdString, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteMissingCourtRecord
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMissingCourtRecordUsingDELETE: function (citationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).deleteMissingCourtRecordUsingDELETE(citationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary dismissCitationsFromContactList
         * @param {DismissCitationsFromContactListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissCitationsFromContactListUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).dismissCitationsFromContactListUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getAnonymousTicketUploads
         * @param {string} emailAddress emailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnonymousTicketUploadsUsingGET: function (emailAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).getAnonymousTicketUploadsUsingGET(emailAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationUsingGET: function (citationIdString, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).getCitationUsingGET(citationIdString, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getListOfCitationsWithMissingCourt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfCitationsWithMissingCourtUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).getListOfCitationsWithMissingCourtUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getNoViolationCitations
         * @param {Array<string>} [regionCodes] regionCodes
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoViolationCitationsUsingGET: function (regionCodes, trailingDays, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).getNoViolationCitationsUsingGET(regionCodes, trailingDays, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary postMissingCourtForCitation
         * @param {string} citationId citationId
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMissingCourtForCitationUsingPOST: function (citationId, state, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).postMissingCourtForCitationUsingPOST(citationId, state, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setCitationContactListFlag
         * @param {string} citationIdString citationIdString
         * @param {boolean} isDismissed isDismissed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCitationContactListFlagUsingPOST: function (citationIdString, isDismissed, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).setCitationContactListFlagUsingPOST(citationIdString, isDismissed, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCitationAddress
         * @param {string} citationId citationId
         * @param {UpdateCitationAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationAddressUsingPOST: function (citationId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).updateCitationAddressUsingPOST(citationId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCitationPicture
         * @param {string} citationId citationId
         * @param {UpdateCitationPictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationPictureUsingPUT: function (citationId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).updateCitationPictureUsingPUT(citationId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCitation
         * @param {string} citationIdString citationIdString
         * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationUsingPUT: function (citationIdString, updateCitationRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CitationControllerApiAxiosParamCreator)(configuration).updateCitationUsingPUT(citationIdString, updateCitationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CitationControllerApiFp = CitationControllerApiFp;
/**
 * CitationControllerApi - factory interface
 * @export
 */
var CitationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary assignCitationOwner
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignCitationOwnerUsingPOST: function (citationId, options) {
            return (0, exports.CitationControllerApiFp)(configuration).assignCitationOwnerUsingPOST(citationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary createNewCitation
         * @param {CreateCitationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCitationUsingPOST: function (request, options) {
            return (0, exports.CitationControllerApiFp)(configuration).createNewCitationUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary createReferralSourceForCitation
         * @param {string} citationId citationId
         * @param {CreateReferralSourceForCitation} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferralSourceForCitationUsingPOST: function (citationId, request, options) {
            return (0, exports.CitationControllerApiFp)(configuration).createReferralSourceForCitationUsingPOST(citationId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCitationUsingDELETE: function (citationIdString, options) {
            return (0, exports.CitationControllerApiFp)(configuration).deleteCitationUsingDELETE(citationIdString, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteMissingCourtRecord
         * @param {number} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMissingCourtRecordUsingDELETE: function (citationId, options) {
            return (0, exports.CitationControllerApiFp)(configuration).deleteMissingCourtRecordUsingDELETE(citationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary dismissCitationsFromContactList
         * @param {DismissCitationsFromContactListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissCitationsFromContactListUsingPOST: function (request, options) {
            return (0, exports.CitationControllerApiFp)(configuration).dismissCitationsFromContactListUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getAnonymousTicketUploads
         * @param {string} emailAddress emailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnonymousTicketUploadsUsingGET: function (emailAddress, options) {
            return (0, exports.CitationControllerApiFp)(configuration).getAnonymousTicketUploadsUsingGET(emailAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCitation
         * @param {string} citationIdString citationIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationUsingGET: function (citationIdString, options) {
            return (0, exports.CitationControllerApiFp)(configuration).getCitationUsingGET(citationIdString, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getListOfCitationsWithMissingCourt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfCitationsWithMissingCourtUsingGET: function (options) {
            return (0, exports.CitationControllerApiFp)(configuration).getListOfCitationsWithMissingCourtUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getNoViolationCitations
         * @param {Array<string>} [regionCodes] regionCodes
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoViolationCitationsUsingGET: function (regionCodes, trailingDays, options) {
            return (0, exports.CitationControllerApiFp)(configuration).getNoViolationCitationsUsingGET(regionCodes, trailingDays, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary postMissingCourtForCitation
         * @param {string} citationId citationId
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMissingCourtForCitationUsingPOST: function (citationId, state, options) {
            return (0, exports.CitationControllerApiFp)(configuration).postMissingCourtForCitationUsingPOST(citationId, state, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setCitationContactListFlag
         * @param {string} citationIdString citationIdString
         * @param {boolean} isDismissed isDismissed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCitationContactListFlagUsingPOST: function (citationIdString, isDismissed, options) {
            return (0, exports.CitationControllerApiFp)(configuration).setCitationContactListFlagUsingPOST(citationIdString, isDismissed, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCitationAddress
         * @param {string} citationId citationId
         * @param {UpdateCitationAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationAddressUsingPOST: function (citationId, request, options) {
            return (0, exports.CitationControllerApiFp)(configuration).updateCitationAddressUsingPOST(citationId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCitationPicture
         * @param {string} citationId citationId
         * @param {UpdateCitationPictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationPictureUsingPUT: function (citationId, request, options) {
            return (0, exports.CitationControllerApiFp)(configuration).updateCitationPictureUsingPUT(citationId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCitation
         * @param {string} citationIdString citationIdString
         * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCitationUsingPUT: function (citationIdString, updateCitationRequest, options) {
            return (0, exports.CitationControllerApiFp)(configuration).updateCitationUsingPUT(citationIdString, updateCitationRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CitationControllerApiFactory = CitationControllerApiFactory;
/**
 * CitationControllerApi - object-oriented interface
 * @export
 * @class CitationControllerApi
 * @extends {BaseAPI}
 */
var CitationControllerApi = /** @class */ (function (_super) {
    __extends(CitationControllerApi, _super);
    function CitationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary assignCitationOwner
     * @param {number} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.assignCitationOwnerUsingPOST = function (citationId, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).assignCitationOwnerUsingPOST(citationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary createNewCitation
     * @param {CreateCitationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.createNewCitationUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).createNewCitationUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary createReferralSourceForCitation
     * @param {string} citationId citationId
     * @param {CreateReferralSourceForCitation} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.createReferralSourceForCitationUsingPOST = function (citationId, request, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).createReferralSourceForCitationUsingPOST(citationId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteCitation
     * @param {string} citationIdString citationIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.deleteCitationUsingDELETE = function (citationIdString, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).deleteCitationUsingDELETE(citationIdString, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteMissingCourtRecord
     * @param {number} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.deleteMissingCourtRecordUsingDELETE = function (citationId, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).deleteMissingCourtRecordUsingDELETE(citationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary dismissCitationsFromContactList
     * @param {DismissCitationsFromContactListRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.dismissCitationsFromContactListUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).dismissCitationsFromContactListUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getAnonymousTicketUploads
     * @param {string} emailAddress emailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.getAnonymousTicketUploadsUsingGET = function (emailAddress, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).getAnonymousTicketUploadsUsingGET(emailAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCitation
     * @param {string} citationIdString citationIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.getCitationUsingGET = function (citationIdString, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).getCitationUsingGET(citationIdString, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getListOfCitationsWithMissingCourt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.getListOfCitationsWithMissingCourtUsingGET = function (options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).getListOfCitationsWithMissingCourtUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getNoViolationCitations
     * @param {Array<string>} [regionCodes] regionCodes
     * @param {number} [trailingDays] trailingDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.getNoViolationCitationsUsingGET = function (regionCodes, trailingDays, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).getNoViolationCitationsUsingGET(regionCodes, trailingDays, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary postMissingCourtForCitation
     * @param {string} citationId citationId
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.postMissingCourtForCitationUsingPOST = function (citationId, state, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).postMissingCourtForCitationUsingPOST(citationId, state, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setCitationContactListFlag
     * @param {string} citationIdString citationIdString
     * @param {boolean} isDismissed isDismissed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.setCitationContactListFlagUsingPOST = function (citationIdString, isDismissed, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).setCitationContactListFlagUsingPOST(citationIdString, isDismissed, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCitationAddress
     * @param {string} citationId citationId
     * @param {UpdateCitationAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.updateCitationAddressUsingPOST = function (citationId, request, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).updateCitationAddressUsingPOST(citationId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCitationPicture
     * @param {string} citationId citationId
     * @param {UpdateCitationPictureRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.updateCitationPictureUsingPUT = function (citationId, request, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).updateCitationPictureUsingPUT(citationId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCitation
     * @param {string} citationIdString citationIdString
     * @param {UpdateCitationRequest} updateCitationRequest updateCitationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitationControllerApi
     */
    CitationControllerApi.prototype.updateCitationUsingPUT = function (citationIdString, updateCitationRequest, options) {
        var _this = this;
        return (0, exports.CitationControllerApiFp)(this.configuration).updateCitationUsingPUT(citationIdString, updateCitationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CitationControllerApi;
}(base_1.BaseAPI));
exports.CitationControllerApi = CitationControllerApi;
/**
 * ConfigurationControllerApi - axios parameter creator
 * @export
 */
var ConfigurationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getAppConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigurationUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/config/app";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ConfigurationControllerApiAxiosParamCreator = ConfigurationControllerApiAxiosParamCreator;
/**
 * ConfigurationControllerApi - functional programming interface
 * @export
 */
var ConfigurationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getAppConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigurationUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConfigurationControllerApiAxiosParamCreator)(configuration).getAppConfigurationUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ConfigurationControllerApiFp = ConfigurationControllerApiFp;
/**
 * ConfigurationControllerApi - factory interface
 * @export
 */
var ConfigurationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getAppConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigurationUsingGET: function (options) {
            return (0, exports.ConfigurationControllerApiFp)(configuration).getAppConfigurationUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ConfigurationControllerApiFactory = ConfigurationControllerApiFactory;
/**
 * ConfigurationControllerApi - object-oriented interface
 * @export
 * @class ConfigurationControllerApi
 * @extends {BaseAPI}
 */
var ConfigurationControllerApi = /** @class */ (function (_super) {
    __extends(ConfigurationControllerApi, _super);
    function ConfigurationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getAppConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationControllerApi
     */
    ConfigurationControllerApi.prototype.getAppConfigurationUsingGET = function (options) {
        var _this = this;
        return (0, exports.ConfigurationControllerApiFp)(this.configuration).getAppConfigurationUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConfigurationControllerApi;
}(base_1.BaseAPI));
exports.ConfigurationControllerApi = ConfigurationControllerApi;
/**
 * ConsoleListControllerApi - axios parameter creator
 * @export
 */
var ConsoleListControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary findDisputes
         * @param {FindDisputesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDisputesUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling findDisputesUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/disputes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCasesWithCoverageObtained
         * @param {GenericAdminListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithCoverageObtainedUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getCasesWithCoverageObtainedUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/cases-with-coverage-obtained";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCasesWithMissingLawfirmPayouts
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithMissingLawfirmPayoutsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getCasesWithMissingLawfirmPayoutsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/cases/missing-lawfirm-payouts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCasesWithOverduePayments
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithOverduePaymentsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getCasesWithOverduePaymentsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/cases/unpaid";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCitationPhoneLeads
         * @param {GetCitationPhoneLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationPhoneLeadsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getCitationPhoneLeadsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/citation-phone-leads";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCitationsWithMissingFields
         * @param {GetCitationsWithMissingFieldsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationsWithMissingFieldsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getCitationsWithMissingFieldsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/citations-with-missing-fields";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getClientConfirmedUnpaidCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientConfirmedUnpaidCasesUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getClientConfirmedUnpaidCasesUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/cases/client-confirmed-unpaid";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getDeclinedCases
         * @param {GetDeclinedCasesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeclinedCasesUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getDeclinedCasesUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/declined";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getInvalidCasesWithStripeCharge
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvalidCasesWithStripeChargeUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getInvalidCasesWithStripeChargeUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/cases/invalid-with-charge";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLostCasesWithTransferNotReversed
         * @param {GetLostCasesWithTransferNotReversedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLostCasesWithTransferNotReversedUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getLostCasesWithTransferNotReversedUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/cases/lost/not-reversed";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getPendingCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingCasesUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getPendingCasesUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/pending";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getPendingTicketReviews
         * @param {GetPendingTicketReviewsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTicketReviewsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getPendingTicketReviewsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/ticket-review-requests/pending";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listLawfirmLeads
         * @param {GetLawfirmLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmLeadsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling listLawfirmLeadsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/lawfirms/leads";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listPotentialCustomers
         * @param {GetPotentialCustomersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPotentialCustomersUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling listPotentialCustomersUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/potential-customers";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ConsoleListControllerApiAxiosParamCreator = ConsoleListControllerApiAxiosParamCreator;
/**
 * ConsoleListControllerApi - functional programming interface
 * @export
 */
var ConsoleListControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findDisputes
         * @param {FindDisputesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDisputesUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).findDisputesUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCasesWithCoverageObtained
         * @param {GenericAdminListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithCoverageObtainedUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getCasesWithCoverageObtainedUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCasesWithMissingLawfirmPayouts
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithMissingLawfirmPayoutsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getCasesWithMissingLawfirmPayoutsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCasesWithOverduePayments
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithOverduePaymentsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getCasesWithOverduePaymentsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCitationPhoneLeads
         * @param {GetCitationPhoneLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationPhoneLeadsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getCitationPhoneLeadsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCitationsWithMissingFields
         * @param {GetCitationsWithMissingFieldsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationsWithMissingFieldsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getCitationsWithMissingFieldsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getClientConfirmedUnpaidCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientConfirmedUnpaidCasesUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getClientConfirmedUnpaidCasesUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getDeclinedCases
         * @param {GetDeclinedCasesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeclinedCasesUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getDeclinedCasesUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getInvalidCasesWithStripeCharge
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvalidCasesWithStripeChargeUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getInvalidCasesWithStripeChargeUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLostCasesWithTransferNotReversed
         * @param {GetLostCasesWithTransferNotReversedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLostCasesWithTransferNotReversedUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getLostCasesWithTransferNotReversedUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getPendingCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingCasesUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getPendingCasesUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getPendingTicketReviews
         * @param {GetPendingTicketReviewsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTicketReviewsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).getPendingTicketReviewsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listLawfirmLeads
         * @param {GetLawfirmLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmLeadsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).listLawfirmLeadsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listPotentialCustomers
         * @param {GetPotentialCustomersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPotentialCustomersUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConsoleListControllerApiAxiosParamCreator)(configuration).listPotentialCustomersUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ConsoleListControllerApiFp = ConsoleListControllerApiFp;
/**
 * ConsoleListControllerApi - factory interface
 * @export
 */
var ConsoleListControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findDisputes
         * @param {FindDisputesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDisputesUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).findDisputesUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCasesWithCoverageObtained
         * @param {GenericAdminListRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithCoverageObtainedUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getCasesWithCoverageObtainedUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCasesWithMissingLawfirmPayouts
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithMissingLawfirmPayoutsUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getCasesWithMissingLawfirmPayoutsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCasesWithOverduePayments
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesWithOverduePaymentsUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getCasesWithOverduePaymentsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCitationPhoneLeads
         * @param {GetCitationPhoneLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationPhoneLeadsUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getCitationPhoneLeadsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCitationsWithMissingFields
         * @param {GetCitationsWithMissingFieldsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitationsWithMissingFieldsUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getCitationsWithMissingFieldsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getClientConfirmedUnpaidCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientConfirmedUnpaidCasesUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getClientConfirmedUnpaidCasesUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getDeclinedCases
         * @param {GetDeclinedCasesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeclinedCasesUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getDeclinedCasesUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getInvalidCasesWithStripeCharge
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvalidCasesWithStripeChargeUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getInvalidCasesWithStripeChargeUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLostCasesWithTransferNotReversed
         * @param {GetLostCasesWithTransferNotReversedRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLostCasesWithTransferNotReversedUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getLostCasesWithTransferNotReversedUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getPendingCases
         * @param {object} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingCasesUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getPendingCasesUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getPendingTicketReviews
         * @param {GetPendingTicketReviewsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTicketReviewsUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).getPendingTicketReviewsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listLawfirmLeads
         * @param {GetLawfirmLeadsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmLeadsUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).listLawfirmLeadsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listPotentialCustomers
         * @param {GetPotentialCustomersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPotentialCustomersUsingPOST: function (request, options) {
            return (0, exports.ConsoleListControllerApiFp)(configuration).listPotentialCustomersUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ConsoleListControllerApiFactory = ConsoleListControllerApiFactory;
/**
 * ConsoleListControllerApi - object-oriented interface
 * @export
 * @class ConsoleListControllerApi
 * @extends {BaseAPI}
 */
var ConsoleListControllerApi = /** @class */ (function (_super) {
    __extends(ConsoleListControllerApi, _super);
    function ConsoleListControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary findDisputes
     * @param {FindDisputesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.findDisputesUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).findDisputesUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCasesWithCoverageObtained
     * @param {GenericAdminListRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getCasesWithCoverageObtainedUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getCasesWithCoverageObtainedUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCasesWithMissingLawfirmPayouts
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getCasesWithMissingLawfirmPayoutsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getCasesWithMissingLawfirmPayoutsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCasesWithOverduePayments
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getCasesWithOverduePaymentsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getCasesWithOverduePaymentsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCitationPhoneLeads
     * @param {GetCitationPhoneLeadsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getCitationPhoneLeadsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getCitationPhoneLeadsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCitationsWithMissingFields
     * @param {GetCitationsWithMissingFieldsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getCitationsWithMissingFieldsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getCitationsWithMissingFieldsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getClientConfirmedUnpaidCases
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getClientConfirmedUnpaidCasesUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getClientConfirmedUnpaidCasesUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getDeclinedCases
     * @param {GetDeclinedCasesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getDeclinedCasesUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getDeclinedCasesUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getInvalidCasesWithStripeCharge
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getInvalidCasesWithStripeChargeUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getInvalidCasesWithStripeChargeUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLostCasesWithTransferNotReversed
     * @param {GetLostCasesWithTransferNotReversedRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getLostCasesWithTransferNotReversedUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getLostCasesWithTransferNotReversedUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getPendingCases
     * @param {object} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getPendingCasesUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getPendingCasesUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getPendingTicketReviews
     * @param {GetPendingTicketReviewsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.getPendingTicketReviewsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).getPendingTicketReviewsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listLawfirmLeads
     * @param {GetLawfirmLeadsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.listLawfirmLeadsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).listLawfirmLeadsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listPotentialCustomers
     * @param {GetPotentialCustomersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleListControllerApi
     */
    ConsoleListControllerApi.prototype.listPotentialCustomersUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ConsoleListControllerApiFp)(this.configuration).listPotentialCustomersUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConsoleListControllerApi;
}(base_1.BaseAPI));
exports.ConsoleListControllerApi = ConsoleListControllerApi;
/**
 * ContactTimelineControllerApi - axios parameter creator
 * @export
 */
var ContactTimelineControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary listContactTimeline
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactTimelineUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listContactTimelineUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userId}/contact-timeline"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ContactTimelineControllerApiAxiosParamCreator = ContactTimelineControllerApiAxiosParamCreator;
/**
 * ContactTimelineControllerApi - functional programming interface
 * @export
 */
var ContactTimelineControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary listContactTimeline
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactTimelineUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ContactTimelineControllerApiAxiosParamCreator)(configuration).listContactTimelineUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ContactTimelineControllerApiFp = ContactTimelineControllerApiFp;
/**
 * ContactTimelineControllerApi - factory interface
 * @export
 */
var ContactTimelineControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary listContactTimeline
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContactTimelineUsingGET: function (userId, options) {
            return (0, exports.ContactTimelineControllerApiFp)(configuration).listContactTimelineUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ContactTimelineControllerApiFactory = ContactTimelineControllerApiFactory;
/**
 * ContactTimelineControllerApi - object-oriented interface
 * @export
 * @class ContactTimelineControllerApi
 * @extends {BaseAPI}
 */
var ContactTimelineControllerApi = /** @class */ (function (_super) {
    __extends(ContactTimelineControllerApi, _super);
    function ContactTimelineControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary listContactTimeline
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactTimelineControllerApi
     */
    ContactTimelineControllerApi.prototype.listContactTimelineUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.ContactTimelineControllerApiFp)(this.configuration).listContactTimelineUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ContactTimelineControllerApi;
}(base_1.BaseAPI));
exports.ContactTimelineControllerApi = ContactTimelineControllerApi;
/**
 * ConversationControllerApi - axios parameter creator
 * @export
 */
var ConversationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addMessageToConversation
         * @param {string} caseId caseId
         * @param {AddNewCaseMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessageToConversationUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling addMessageToConversationUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addMessageToConversationUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/conversation"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary editMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {EditConversationMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageUsingPUT: function (caseId, messageId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling editMessageUsingPUT.');
                    }
                    // verify required parameter 'messageId' is not null or undefined
                    if (messageId === null || messageId === undefined) {
                        throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling editMessageUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling editMessageUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/conversation/{messageId}/edit"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "messageId" + "}", encodeURIComponent(String(messageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getConversation
         * @param {string} caseId caseId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationUsingGET: function (caseId, length, page, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getConversationUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/conversation"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (length !== undefined) {
                        localVarQueryParameter['length'] = length;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageUsingGET: function (caseId, messageId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getMessageUsingGET.');
                    }
                    // verify required parameter 'messageId' is not null or undefined
                    if (messageId === null || messageId === undefined) {
                        throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling getMessageUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/conversation/{messageId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "messageId" + "}", encodeURIComponent(String(messageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markMessageAsDeleted
         * @param {string} caseId caseId
         * @param {boolean} isDeleted isDeleted
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedUsingPUT: function (caseId, isDeleted, messageId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling markMessageAsDeletedUsingPUT.');
                    }
                    // verify required parameter 'isDeleted' is not null or undefined
                    if (isDeleted === null || isDeleted === undefined) {
                        throw new base_1.RequiredError('isDeleted', 'Required parameter isDeleted was null or undefined when calling markMessageAsDeletedUsingPUT.');
                    }
                    // verify required parameter 'messageId' is not null or undefined
                    if (messageId === null || messageId === undefined) {
                        throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling markMessageAsDeletedUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/conversation/{messageId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "messageId" + "}", encodeURIComponent(String(messageId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isDeleted !== undefined) {
                        localVarQueryParameter['isDeleted'] = isDeleted;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ConversationControllerApiAxiosParamCreator = ConversationControllerApiAxiosParamCreator;
/**
 * ConversationControllerApi - functional programming interface
 * @export
 */
var ConversationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addMessageToConversation
         * @param {string} caseId caseId
         * @param {AddNewCaseMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessageToConversationUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConversationControllerApiAxiosParamCreator)(configuration).addMessageToConversationUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary editMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {EditConversationMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageUsingPUT: function (caseId, messageId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConversationControllerApiAxiosParamCreator)(configuration).editMessageUsingPUT(caseId, messageId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getConversation
         * @param {string} caseId caseId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationUsingGET: function (caseId, length, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConversationControllerApiAxiosParamCreator)(configuration).getConversationUsingGET(caseId, length, page, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageUsingGET: function (caseId, messageId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConversationControllerApiAxiosParamCreator)(configuration).getMessageUsingGET(caseId, messageId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markMessageAsDeleted
         * @param {string} caseId caseId
         * @param {boolean} isDeleted isDeleted
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedUsingPUT: function (caseId, isDeleted, messageId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ConversationControllerApiAxiosParamCreator)(configuration).markMessageAsDeletedUsingPUT(caseId, isDeleted, messageId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ConversationControllerApiFp = ConversationControllerApiFp;
/**
 * ConversationControllerApi - factory interface
 * @export
 */
var ConversationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addMessageToConversation
         * @param {string} caseId caseId
         * @param {AddNewCaseMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessageToConversationUsingPOST: function (caseId, request, options) {
            return (0, exports.ConversationControllerApiFp)(configuration).addMessageToConversationUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary editMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {EditConversationMessageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editMessageUsingPUT: function (caseId, messageId, request, options) {
            return (0, exports.ConversationControllerApiFp)(configuration).editMessageUsingPUT(caseId, messageId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getConversation
         * @param {string} caseId caseId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationUsingGET: function (caseId, length, page, options) {
            return (0, exports.ConversationControllerApiFp)(configuration).getConversationUsingGET(caseId, length, page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getMessage
         * @param {string} caseId caseId
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageUsingGET: function (caseId, messageId, options) {
            return (0, exports.ConversationControllerApiFp)(configuration).getMessageUsingGET(caseId, messageId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markMessageAsDeleted
         * @param {string} caseId caseId
         * @param {boolean} isDeleted isDeleted
         * @param {number} messageId messageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedUsingPUT: function (caseId, isDeleted, messageId, options) {
            return (0, exports.ConversationControllerApiFp)(configuration).markMessageAsDeletedUsingPUT(caseId, isDeleted, messageId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ConversationControllerApiFactory = ConversationControllerApiFactory;
/**
 * ConversationControllerApi - object-oriented interface
 * @export
 * @class ConversationControllerApi
 * @extends {BaseAPI}
 */
var ConversationControllerApi = /** @class */ (function (_super) {
    __extends(ConversationControllerApi, _super);
    function ConversationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addMessageToConversation
     * @param {string} caseId caseId
     * @param {AddNewCaseMessageRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    ConversationControllerApi.prototype.addMessageToConversationUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.ConversationControllerApiFp)(this.configuration).addMessageToConversationUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary editMessage
     * @param {string} caseId caseId
     * @param {number} messageId messageId
     * @param {EditConversationMessageRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    ConversationControllerApi.prototype.editMessageUsingPUT = function (caseId, messageId, request, options) {
        var _this = this;
        return (0, exports.ConversationControllerApiFp)(this.configuration).editMessageUsingPUT(caseId, messageId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getConversation
     * @param {string} caseId caseId
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    ConversationControllerApi.prototype.getConversationUsingGET = function (caseId, length, page, options) {
        var _this = this;
        return (0, exports.ConversationControllerApiFp)(this.configuration).getConversationUsingGET(caseId, length, page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getMessage
     * @param {string} caseId caseId
     * @param {number} messageId messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    ConversationControllerApi.prototype.getMessageUsingGET = function (caseId, messageId, options) {
        var _this = this;
        return (0, exports.ConversationControllerApiFp)(this.configuration).getMessageUsingGET(caseId, messageId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markMessageAsDeleted
     * @param {string} caseId caseId
     * @param {boolean} isDeleted isDeleted
     * @param {number} messageId messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    ConversationControllerApi.prototype.markMessageAsDeletedUsingPUT = function (caseId, isDeleted, messageId, options) {
        var _this = this;
        return (0, exports.ConversationControllerApiFp)(this.configuration).markMessageAsDeletedUsingPUT(caseId, isDeleted, messageId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConversationControllerApi;
}(base_1.BaseAPI));
exports.ConversationControllerApi = ConversationControllerApi;
/**
 * CountyControllerApi - axios parameter creator
 * @export
 */
var CountyControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getCounties
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountiesUsingGET: function (state, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'state' is not null or undefined
                    if (state === null || state === undefined) {
                        throw new base_1.RequiredError('state', 'Required parameter state was null or undefined when calling getCountiesUsingGET.');
                    }
                    localVarPath = "/api/v1/counties";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CountyControllerApiAxiosParamCreator = CountyControllerApiAxiosParamCreator;
/**
 * CountyControllerApi - functional programming interface
 * @export
 */
var CountyControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getCounties
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountiesUsingGET: function (state, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CountyControllerApiAxiosParamCreator)(configuration).getCountiesUsingGET(state, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CountyControllerApiFp = CountyControllerApiFp;
/**
 * CountyControllerApi - factory interface
 * @export
 */
var CountyControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getCounties
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountiesUsingGET: function (state, options) {
            return (0, exports.CountyControllerApiFp)(configuration).getCountiesUsingGET(state, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CountyControllerApiFactory = CountyControllerApiFactory;
/**
 * CountyControllerApi - object-oriented interface
 * @export
 * @class CountyControllerApi
 * @extends {BaseAPI}
 */
var CountyControllerApi = /** @class */ (function (_super) {
    __extends(CountyControllerApi, _super);
    function CountyControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getCounties
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} state state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountyControllerApi
     */
    CountyControllerApi.prototype.getCountiesUsingGET = function (state, options) {
        var _this = this;
        return (0, exports.CountyControllerApiFp)(this.configuration).getCountiesUsingGET(state, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CountyControllerApi;
}(base_1.BaseAPI));
exports.CountyControllerApi = CountyControllerApi;
/**
 * CourtControllerApi - axios parameter creator
 * @export
 */
var CourtControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addCourt
         * @param {AddCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addCourtUsingPOST.');
                    }
                    localVarPath = "/api/v1/courts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary findCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsUsingGET: function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v2/courts/traffic";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (citationId !== undefined) {
                        localVarQueryParameter['citationId'] = citationId;
                    }
                    if (city !== undefined) {
                        localVarQueryParameter['city'] = city;
                    }
                    if (countryCode !== undefined) {
                        localVarQueryParameter['countryCode'] = countryCode;
                    }
                    if (county !== undefined) {
                        localVarQueryParameter['county'] = county;
                    }
                    if (length !== undefined) {
                        localVarQueryParameter['length'] = length;
                    }
                    if (offset !== undefined) {
                        localVarQueryParameter['offset'] = offset;
                    }
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    if (regionCode !== undefined) {
                        localVarQueryParameter['regionCode'] = regionCode;
                    }
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary findCourtsWithNoCoverage
         * @param {string} [countryCode] countryCode
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsWithNoCoverageUsingGET: function (countryCode, countyId, regionCode, trailingDays, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/courts/no-coverage";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (countryCode !== undefined) {
                        localVarQueryParameter['countryCode'] = countryCode;
                    }
                    if (countyId !== undefined) {
                        localVarQueryParameter['countyId'] = countyId;
                    }
                    if (regionCode !== undefined) {
                        localVarQueryParameter['regionCode'] = regionCode;
                    }
                    if (trailingDays !== undefined) {
                        localVarQueryParameter['trailingDays'] = trailingDays;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCourt
         * @param {number} courtId courtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtUsingGET: function (courtId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'courtId' is not null or undefined
                    if (courtId === null || courtId === undefined) {
                        throw new base_1.RequiredError('courtId', 'Required parameter courtId was null or undefined when calling getCourtUsingGET.');
                    }
                    localVarPath = "/api/v1/courts/{courtId}"
                        .replace("{" + "courtId" + "}", encodeURIComponent(String(courtId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary searchCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCourtsUsingGET: function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/courts/traffic";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (citationId !== undefined) {
                        localVarQueryParameter['citationId'] = citationId;
                    }
                    if (city !== undefined) {
                        localVarQueryParameter['city'] = city;
                    }
                    if (countryCode !== undefined) {
                        localVarQueryParameter['countryCode'] = countryCode;
                    }
                    if (county !== undefined) {
                        localVarQueryParameter['county'] = county;
                    }
                    if (length !== undefined) {
                        localVarQueryParameter['length'] = length;
                    }
                    if (offset !== undefined) {
                        localVarQueryParameter['offset'] = offset;
                    }
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    if (regionCode !== undefined) {
                        localVarQueryParameter['regionCode'] = regionCode;
                    }
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCourtAddress
         * @param {number} addressId addressId
         * @param {number} courtId courtId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtAddressUsingPUT: function (addressId, courtId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'addressId' is not null or undefined
                    if (addressId === null || addressId === undefined) {
                        throw new base_1.RequiredError('addressId', 'Required parameter addressId was null or undefined when calling updateCourtAddressUsingPUT.');
                    }
                    // verify required parameter 'courtId' is not null or undefined
                    if (courtId === null || courtId === undefined) {
                        throw new base_1.RequiredError('courtId', 'Required parameter courtId was null or undefined when calling updateCourtAddressUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateCourtAddressUsingPUT.');
                    }
                    localVarPath = "/api/v1/courts/{courtId}/addresses/{addressId}"
                        .replace("{" + "addressId" + "}", encodeURIComponent(String(addressId)))
                        .replace("{" + "courtId" + "}", encodeURIComponent(String(courtId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCourt
         * @param {number} courtId courtId
         * @param {UpdateCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtUsingPUT: function (courtId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'courtId' is not null or undefined
                    if (courtId === null || courtId === undefined) {
                        throw new base_1.RequiredError('courtId', 'Required parameter courtId was null or undefined when calling updateCourtUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateCourtUsingPUT.');
                    }
                    localVarPath = "/api/v1/courts/{courtId}"
                        .replace("{" + "courtId" + "}", encodeURIComponent(String(courtId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CourtControllerApiAxiosParamCreator = CourtControllerApiAxiosParamCreator;
/**
 * CourtControllerApi - functional programming interface
 * @export
 */
var CourtControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addCourt
         * @param {AddCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CourtControllerApiAxiosParamCreator)(configuration).addCourtUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary findCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsUsingGET: function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CourtControllerApiAxiosParamCreator)(configuration).findCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary findCourtsWithNoCoverage
         * @param {string} [countryCode] countryCode
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsWithNoCoverageUsingGET: function (countryCode, countyId, regionCode, trailingDays, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CourtControllerApiAxiosParamCreator)(configuration).findCourtsWithNoCoverageUsingGET(countryCode, countyId, regionCode, trailingDays, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCourt
         * @param {number} courtId courtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtUsingGET: function (courtId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CourtControllerApiAxiosParamCreator)(configuration).getCourtUsingGET(courtId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary searchCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCourtsUsingGET: function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CourtControllerApiAxiosParamCreator)(configuration).searchCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCourtAddress
         * @param {number} addressId addressId
         * @param {number} courtId courtId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtAddressUsingPUT: function (addressId, courtId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CourtControllerApiAxiosParamCreator)(configuration).updateCourtAddressUsingPUT(addressId, courtId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCourt
         * @param {number} courtId courtId
         * @param {UpdateCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtUsingPUT: function (courtId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CourtControllerApiAxiosParamCreator)(configuration).updateCourtUsingPUT(courtId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CourtControllerApiFp = CourtControllerApiFp;
/**
 * CourtControllerApi - factory interface
 * @export
 */
var CourtControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addCourt
         * @param {AddCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtUsingPOST: function (request, options) {
            return (0, exports.CourtControllerApiFp)(configuration).addCourtUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary findCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsUsingGET: function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
            return (0, exports.CourtControllerApiFp)(configuration).findCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary findCourtsWithNoCoverage
         * @param {string} [countryCode] countryCode
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {number} [trailingDays] trailingDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCourtsWithNoCoverageUsingGET: function (countryCode, countyId, regionCode, trailingDays, options) {
            return (0, exports.CourtControllerApiFp)(configuration).findCourtsWithNoCoverageUsingGET(countryCode, countyId, regionCode, trailingDays, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCourt
         * @param {number} courtId courtId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtUsingGET: function (courtId, options) {
            return (0, exports.CourtControllerApiFp)(configuration).getCourtUsingGET(courtId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary searchCourts
         * @param {number} [citationId] citationId
         * @param {string} [city] city
         * @param {string} [countryCode] countryCode
         * @param {string} [county] county
         * @param {number} [length] length
         * @param {number} [offset] offset
         * @param {string} [q] q
         * @param {string} [regionCode] regionCode
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCourtsUsingGET: function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
            return (0, exports.CourtControllerApiFp)(configuration).searchCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCourtAddress
         * @param {number} addressId addressId
         * @param {number} courtId courtId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtAddressUsingPUT: function (addressId, courtId, request, options) {
            return (0, exports.CourtControllerApiFp)(configuration).updateCourtAddressUsingPUT(addressId, courtId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCourt
         * @param {number} courtId courtId
         * @param {UpdateCourtRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourtUsingPUT: function (courtId, request, options) {
            return (0, exports.CourtControllerApiFp)(configuration).updateCourtUsingPUT(courtId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CourtControllerApiFactory = CourtControllerApiFactory;
/**
 * CourtControllerApi - object-oriented interface
 * @export
 * @class CourtControllerApi
 * @extends {BaseAPI}
 */
var CourtControllerApi = /** @class */ (function (_super) {
    __extends(CourtControllerApi, _super);
    function CourtControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addCourt
     * @param {AddCourtRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    CourtControllerApi.prototype.addCourtUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CourtControllerApiFp)(this.configuration).addCourtUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary findCourts
     * @param {number} [citationId] citationId
     * @param {string} [city] city
     * @param {string} [countryCode] countryCode
     * @param {string} [county] county
     * @param {number} [length] length
     * @param {number} [offset] offset
     * @param {string} [q] q
     * @param {string} [regionCode] regionCode
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    CourtControllerApi.prototype.findCourtsUsingGET = function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
        var _this = this;
        return (0, exports.CourtControllerApiFp)(this.configuration).findCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary findCourtsWithNoCoverage
     * @param {string} [countryCode] countryCode
     * @param {number} [countyId] countyId
     * @param {string} [regionCode] regionCode
     * @param {number} [trailingDays] trailingDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    CourtControllerApi.prototype.findCourtsWithNoCoverageUsingGET = function (countryCode, countyId, regionCode, trailingDays, options) {
        var _this = this;
        return (0, exports.CourtControllerApiFp)(this.configuration).findCourtsWithNoCoverageUsingGET(countryCode, countyId, regionCode, trailingDays, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCourt
     * @param {number} courtId courtId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    CourtControllerApi.prototype.getCourtUsingGET = function (courtId, options) {
        var _this = this;
        return (0, exports.CourtControllerApiFp)(this.configuration).getCourtUsingGET(courtId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary searchCourts
     * @param {number} [citationId] citationId
     * @param {string} [city] city
     * @param {string} [countryCode] countryCode
     * @param {string} [county] county
     * @param {number} [length] length
     * @param {number} [offset] offset
     * @param {string} [q] q
     * @param {string} [regionCode] regionCode
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    CourtControllerApi.prototype.searchCourtsUsingGET = function (citationId, city, countryCode, county, length, offset, q, regionCode, state, options) {
        var _this = this;
        return (0, exports.CourtControllerApiFp)(this.configuration).searchCourtsUsingGET(citationId, city, countryCode, county, length, offset, q, regionCode, state, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCourtAddress
     * @param {number} addressId addressId
     * @param {number} courtId courtId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    CourtControllerApi.prototype.updateCourtAddressUsingPUT = function (addressId, courtId, request, options) {
        var _this = this;
        return (0, exports.CourtControllerApiFp)(this.configuration).updateCourtAddressUsingPUT(addressId, courtId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCourt
     * @param {number} courtId courtId
     * @param {UpdateCourtRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourtControllerApi
     */
    CourtControllerApi.prototype.updateCourtUsingPUT = function (courtId, request, options) {
        var _this = this;
        return (0, exports.CourtControllerApiFp)(this.configuration).updateCourtUsingPUT(courtId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CourtControllerApi;
}(base_1.BaseAPI));
exports.CourtControllerApi = CourtControllerApi;
/**
 * CrmControllerApi - axios parameter creator
 * @export
 */
var CrmControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary generateTemplate
         * @param {GenerateTemplateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTemplateUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling generateTemplateUsingPOST.');
                    }
                    localVarPath = "/api/v1/crm/generate-template";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getOutgoingContacts
         * @param {string} recipientEmailAddress recipientEmailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingContactsUsingGET: function (recipientEmailAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'recipientEmailAddress' is not null or undefined
                    if (recipientEmailAddress === null || recipientEmailAddress === undefined) {
                        throw new base_1.RequiredError('recipientEmailAddress', 'Required parameter recipientEmailAddress was null or undefined when calling getOutgoingContactsUsingGET.');
                    }
                    localVarPath = "/api/v1/crm/contacts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (recipientEmailAddress !== undefined) {
                        localVarQueryParameter['recipientEmailAddress'] = recipientEmailAddress;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getTemplates
         * @param {Array<string>} [category] category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesUsingGET: function (category, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/crm/templates";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (category) {
                        localVarQueryParameter['category'] = category;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary replyToTicket
         * @param {number} ticketId ticketId
         * @param {ReplyToTicketRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToTicketUsingPOST: function (ticketId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'ticketId' is not null or undefined
                    if (ticketId === null || ticketId === undefined) {
                        throw new base_1.RequiredError('ticketId', 'Required parameter ticketId was null or undefined when calling replyToTicketUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling replyToTicketUsingPOST.');
                    }
                    localVarPath = "/api/v1/crm/ticket/{ticketId}/reply"
                        .replace("{" + "ticketId" + "}", encodeURIComponent(String(ticketId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendConsolidatedEmailToUser
         * @param {SendConsolidatedEmailToUser} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConsolidatedEmailToUserUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling sendConsolidatedEmailToUserUsingPOST.');
                    }
                    localVarPath = "/api/v1/crm/user/consolidate-email";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendEmailToUser
         * @param {SendEmailToUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUserUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling sendEmailToUserUsingPOST.');
                    }
                    localVarPath = "/api/v1/crm/user/email";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendEmailToUsers
         * @param {SendEmailToUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUsersUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling sendEmailToUsersUsingPOST.');
                    }
                    localVarPath = "/api/v1/crm/users/email";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CrmControllerApiAxiosParamCreator = CrmControllerApiAxiosParamCreator;
/**
 * CrmControllerApi - functional programming interface
 * @export
 */
var CrmControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary generateTemplate
         * @param {GenerateTemplateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTemplateUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CrmControllerApiAxiosParamCreator)(configuration).generateTemplateUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getOutgoingContacts
         * @param {string} recipientEmailAddress recipientEmailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingContactsUsingGET: function (recipientEmailAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CrmControllerApiAxiosParamCreator)(configuration).getOutgoingContactsUsingGET(recipientEmailAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getTemplates
         * @param {Array<string>} [category] category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesUsingGET: function (category, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CrmControllerApiAxiosParamCreator)(configuration).getTemplatesUsingGET(category, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary replyToTicket
         * @param {number} ticketId ticketId
         * @param {ReplyToTicketRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToTicketUsingPOST: function (ticketId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CrmControllerApiAxiosParamCreator)(configuration).replyToTicketUsingPOST(ticketId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendConsolidatedEmailToUser
         * @param {SendConsolidatedEmailToUser} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConsolidatedEmailToUserUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CrmControllerApiAxiosParamCreator)(configuration).sendConsolidatedEmailToUserUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendEmailToUser
         * @param {SendEmailToUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUserUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CrmControllerApiAxiosParamCreator)(configuration).sendEmailToUserUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendEmailToUsers
         * @param {SendEmailToUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUsersUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CrmControllerApiAxiosParamCreator)(configuration).sendEmailToUsersUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CrmControllerApiFp = CrmControllerApiFp;
/**
 * CrmControllerApi - factory interface
 * @export
 */
var CrmControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary generateTemplate
         * @param {GenerateTemplateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTemplateUsingPOST: function (request, options) {
            return (0, exports.CrmControllerApiFp)(configuration).generateTemplateUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getOutgoingContacts
         * @param {string} recipientEmailAddress recipientEmailAddress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutgoingContactsUsingGET: function (recipientEmailAddress, options) {
            return (0, exports.CrmControllerApiFp)(configuration).getOutgoingContactsUsingGET(recipientEmailAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getTemplates
         * @param {Array<string>} [category] category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplatesUsingGET: function (category, options) {
            return (0, exports.CrmControllerApiFp)(configuration).getTemplatesUsingGET(category, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary replyToTicket
         * @param {number} ticketId ticketId
         * @param {ReplyToTicketRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToTicketUsingPOST: function (ticketId, request, options) {
            return (0, exports.CrmControllerApiFp)(configuration).replyToTicketUsingPOST(ticketId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendConsolidatedEmailToUser
         * @param {SendConsolidatedEmailToUser} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConsolidatedEmailToUserUsingPOST: function (request, options) {
            return (0, exports.CrmControllerApiFp)(configuration).sendConsolidatedEmailToUserUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendEmailToUser
         * @param {SendEmailToUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUserUsingPOST: function (request, options) {
            return (0, exports.CrmControllerApiFp)(configuration).sendEmailToUserUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendEmailToUsers
         * @param {SendEmailToUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailToUsersUsingPOST: function (request, options) {
            return (0, exports.CrmControllerApiFp)(configuration).sendEmailToUsersUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CrmControllerApiFactory = CrmControllerApiFactory;
/**
 * CrmControllerApi - object-oriented interface
 * @export
 * @class CrmControllerApi
 * @extends {BaseAPI}
 */
var CrmControllerApi = /** @class */ (function (_super) {
    __extends(CrmControllerApi, _super);
    function CrmControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary generateTemplate
     * @param {GenerateTemplateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    CrmControllerApi.prototype.generateTemplateUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CrmControllerApiFp)(this.configuration).generateTemplateUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getOutgoingContacts
     * @param {string} recipientEmailAddress recipientEmailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    CrmControllerApi.prototype.getOutgoingContactsUsingGET = function (recipientEmailAddress, options) {
        var _this = this;
        return (0, exports.CrmControllerApiFp)(this.configuration).getOutgoingContactsUsingGET(recipientEmailAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getTemplates
     * @param {Array<string>} [category] category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    CrmControllerApi.prototype.getTemplatesUsingGET = function (category, options) {
        var _this = this;
        return (0, exports.CrmControllerApiFp)(this.configuration).getTemplatesUsingGET(category, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary replyToTicket
     * @param {number} ticketId ticketId
     * @param {ReplyToTicketRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    CrmControllerApi.prototype.replyToTicketUsingPOST = function (ticketId, request, options) {
        var _this = this;
        return (0, exports.CrmControllerApiFp)(this.configuration).replyToTicketUsingPOST(ticketId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendConsolidatedEmailToUser
     * @param {SendConsolidatedEmailToUser} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    CrmControllerApi.prototype.sendConsolidatedEmailToUserUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CrmControllerApiFp)(this.configuration).sendConsolidatedEmailToUserUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendEmailToUser
     * @param {SendEmailToUserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    CrmControllerApi.prototype.sendEmailToUserUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CrmControllerApiFp)(this.configuration).sendEmailToUserUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendEmailToUsers
     * @param {SendEmailToUsersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CrmControllerApi
     */
    CrmControllerApi.prototype.sendEmailToUsersUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CrmControllerApiFp)(this.configuration).sendEmailToUsersUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CrmControllerApi;
}(base_1.BaseAPI));
exports.CrmControllerApi = CrmControllerApi;
/**
 * CustomerLeadControllerApi - axios parameter creator
 * @export
 */
var CustomerLeadControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary postCustomerLead
         * @param {AddCustomerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerLeadUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling postCustomerLeadUsingPOST.');
                    }
                    localVarPath = "/api/v1/customer-leads";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CustomerLeadControllerApiAxiosParamCreator = CustomerLeadControllerApiAxiosParamCreator;
/**
 * CustomerLeadControllerApi - functional programming interface
 * @export
 */
var CustomerLeadControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary postCustomerLead
         * @param {AddCustomerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerLeadUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerLeadControllerApiAxiosParamCreator)(configuration).postCustomerLeadUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CustomerLeadControllerApiFp = CustomerLeadControllerApiFp;
/**
 * CustomerLeadControllerApi - factory interface
 * @export
 */
var CustomerLeadControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary postCustomerLead
         * @param {AddCustomerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerLeadUsingPOST: function (request, options) {
            return (0, exports.CustomerLeadControllerApiFp)(configuration).postCustomerLeadUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CustomerLeadControllerApiFactory = CustomerLeadControllerApiFactory;
/**
 * CustomerLeadControllerApi - object-oriented interface
 * @export
 * @class CustomerLeadControllerApi
 * @extends {BaseAPI}
 */
var CustomerLeadControllerApi = /** @class */ (function (_super) {
    __extends(CustomerLeadControllerApi, _super);
    function CustomerLeadControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary postCustomerLead
     * @param {AddCustomerLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerLeadControllerApi
     */
    CustomerLeadControllerApi.prototype.postCustomerLeadUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.CustomerLeadControllerApiFp)(this.configuration).postCustomerLeadUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomerLeadControllerApi;
}(base_1.BaseAPI));
exports.CustomerLeadControllerApi = CustomerLeadControllerApi;
/**
 * CustomerReviewControllerApi - axios parameter creator
 * @export
 */
var CustomerReviewControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addCustomerReview
         * @param {AddReviewRequest} addReviewRequest addReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerReviewUsingPOST: function (addReviewRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'addReviewRequest' is not null or undefined
                    if (addReviewRequest === null || addReviewRequest === undefined) {
                        throw new base_1.RequiredError('addReviewRequest', 'Required parameter addReviewRequest was null or undefined when calling addCustomerReviewUsingPOST.');
                    }
                    localVarPath = "/api/v1/reviews";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof addReviewRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(addReviewRequest !== undefined ? addReviewRequest : {}) : (addReviewRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listCustomerReviews
         * @param {boolean} [includeAnonymous] includeAnonymous
         * @param {boolean} [includeRatings] includeRatings
         * @param {boolean} [isFeatured] isFeatured
         * @param {number} [lawfirmId] lawfirmId
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {Array<string>} [tags] tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerReviewsUsingGET: function (includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/reviews";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (includeAnonymous !== undefined) {
                        localVarQueryParameter['includeAnonymous'] = includeAnonymous;
                    }
                    if (includeRatings !== undefined) {
                        localVarQueryParameter['includeRatings'] = includeRatings;
                    }
                    if (isFeatured !== undefined) {
                        localVarQueryParameter['isFeatured'] = isFeatured;
                    }
                    if (lawfirmId !== undefined) {
                        localVarQueryParameter['lawfirmId'] = lawfirmId;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (nextPageToken !== undefined) {
                        localVarQueryParameter['nextPageToken'] = nextPageToken;
                    }
                    if (previousPageToken !== undefined) {
                        localVarQueryParameter['previousPageToken'] = previousPageToken;
                    }
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    if (tags) {
                        localVarQueryParameter['tags'] = tags;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listEligibleStatusesForReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEligibleStatusesForReviewUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/reviews/eligible-statuses";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markCommentWithVote
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {boolean} [like] like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCommentWithVoteUsingPUT: function (commentId, reviewId, like, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'commentId' is not null or undefined
                    if (commentId === null || commentId === undefined) {
                        throw new base_1.RequiredError('commentId', 'Required parameter commentId was null or undefined when calling markCommentWithVoteUsingPUT.');
                    }
                    // verify required parameter 'reviewId' is not null or undefined
                    if (reviewId === null || reviewId === undefined) {
                        throw new base_1.RequiredError('reviewId', 'Required parameter reviewId was null or undefined when calling markCommentWithVoteUsingPUT.');
                    }
                    localVarPath = "/api/v1/reviews/{reviewId}/comments/{commentId}/vote"
                        .replace("{" + "commentId" + "}", encodeURIComponent(String(commentId)))
                        .replace("{" + "reviewId" + "}", encodeURIComponent(String(reviewId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (like !== undefined) {
                        localVarQueryParameter['like'] = like;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markReviewWithVote
         * @param {number} reviewId reviewId
         * @param {boolean} [helpful] helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReviewWithVoteUsingPUT: function (reviewId, helpful, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'reviewId' is not null or undefined
                    if (reviewId === null || reviewId === undefined) {
                        throw new base_1.RequiredError('reviewId', 'Required parameter reviewId was null or undefined when calling markReviewWithVoteUsingPUT.');
                    }
                    localVarPath = "/api/v1/reviews/{reviewId}/vote"
                        .replace("{" + "reviewId" + "}", encodeURIComponent(String(reviewId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (helpful !== undefined) {
                        localVarQueryParameter['helpful'] = helpful;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary replyToCustomerReview
         * @param {number} reviewId reviewId
         * @param {ReplyToReviewRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToCustomerReviewUsingPOST: function (reviewId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'reviewId' is not null or undefined
                    if (reviewId === null || reviewId === undefined) {
                        throw new base_1.RequiredError('reviewId', 'Required parameter reviewId was null or undefined when calling replyToCustomerReviewUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling replyToCustomerReviewUsingPOST.');
                    }
                    localVarPath = "/api/v1/reviews/{reviewId}/comments"
                        .replace("{" + "reviewId" + "}", encodeURIComponent(String(reviewId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCommentForCustomerReview
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {UpdateReplyForCustomerReview} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommentForCustomerReviewUsingPOST: function (commentId, reviewId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'commentId' is not null or undefined
                    if (commentId === null || commentId === undefined) {
                        throw new base_1.RequiredError('commentId', 'Required parameter commentId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
                    }
                    // verify required parameter 'reviewId' is not null or undefined
                    if (reviewId === null || reviewId === undefined) {
                        throw new base_1.RequiredError('reviewId', 'Required parameter reviewId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
                    }
                    localVarPath = "/api/v1/reviews/{reviewId}/comments/{commentId}"
                        .replace("{" + "commentId" + "}", encodeURIComponent(String(commentId)))
                        .replace("{" + "reviewId" + "}", encodeURIComponent(String(reviewId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CustomerReviewControllerApiAxiosParamCreator = CustomerReviewControllerApiAxiosParamCreator;
/**
 * CustomerReviewControllerApi - functional programming interface
 * @export
 */
var CustomerReviewControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addCustomerReview
         * @param {AddReviewRequest} addReviewRequest addReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerReviewUsingPOST: function (addReviewRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerReviewControllerApiAxiosParamCreator)(configuration).addCustomerReviewUsingPOST(addReviewRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listCustomerReviews
         * @param {boolean} [includeAnonymous] includeAnonymous
         * @param {boolean} [includeRatings] includeRatings
         * @param {boolean} [isFeatured] isFeatured
         * @param {number} [lawfirmId] lawfirmId
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {Array<string>} [tags] tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerReviewsUsingGET: function (includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerReviewControllerApiAxiosParamCreator)(configuration).listCustomerReviewsUsingGET(includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listEligibleStatusesForReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEligibleStatusesForReviewUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerReviewControllerApiAxiosParamCreator)(configuration).listEligibleStatusesForReviewUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markCommentWithVote
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {boolean} [like] like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCommentWithVoteUsingPUT: function (commentId, reviewId, like, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerReviewControllerApiAxiosParamCreator)(configuration).markCommentWithVoteUsingPUT(commentId, reviewId, like, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markReviewWithVote
         * @param {number} reviewId reviewId
         * @param {boolean} [helpful] helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReviewWithVoteUsingPUT: function (reviewId, helpful, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerReviewControllerApiAxiosParamCreator)(configuration).markReviewWithVoteUsingPUT(reviewId, helpful, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary replyToCustomerReview
         * @param {number} reviewId reviewId
         * @param {ReplyToReviewRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToCustomerReviewUsingPOST: function (reviewId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerReviewControllerApiAxiosParamCreator)(configuration).replyToCustomerReviewUsingPOST(reviewId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCommentForCustomerReview
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {UpdateReplyForCustomerReview} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommentForCustomerReviewUsingPOST: function (commentId, reviewId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.CustomerReviewControllerApiAxiosParamCreator)(configuration).updateCommentForCustomerReviewUsingPOST(commentId, reviewId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.CustomerReviewControllerApiFp = CustomerReviewControllerApiFp;
/**
 * CustomerReviewControllerApi - factory interface
 * @export
 */
var CustomerReviewControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addCustomerReview
         * @param {AddReviewRequest} addReviewRequest addReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerReviewUsingPOST: function (addReviewRequest, options) {
            return (0, exports.CustomerReviewControllerApiFp)(configuration).addCustomerReviewUsingPOST(addReviewRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listCustomerReviews
         * @param {boolean} [includeAnonymous] includeAnonymous
         * @param {boolean} [includeRatings] includeRatings
         * @param {boolean} [isFeatured] isFeatured
         * @param {number} [lawfirmId] lawfirmId
         * @param {number} [limit] limit
         * @param {string} [nextPageToken] nextPageToken
         * @param {string} [previousPageToken] previousPageToken
         * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
         * @param {Array<string>} [tags] tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerReviewsUsingGET: function (includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options) {
            return (0, exports.CustomerReviewControllerApiFp)(configuration).listCustomerReviewsUsingGET(includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listEligibleStatusesForReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEligibleStatusesForReviewUsingGET: function (options) {
            return (0, exports.CustomerReviewControllerApiFp)(configuration).listEligibleStatusesForReviewUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markCommentWithVote
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {boolean} [like] like
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCommentWithVoteUsingPUT: function (commentId, reviewId, like, options) {
            return (0, exports.CustomerReviewControllerApiFp)(configuration).markCommentWithVoteUsingPUT(commentId, reviewId, like, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markReviewWithVote
         * @param {number} reviewId reviewId
         * @param {boolean} [helpful] helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReviewWithVoteUsingPUT: function (reviewId, helpful, options) {
            return (0, exports.CustomerReviewControllerApiFp)(configuration).markReviewWithVoteUsingPUT(reviewId, helpful, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary replyToCustomerReview
         * @param {number} reviewId reviewId
         * @param {ReplyToReviewRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replyToCustomerReviewUsingPOST: function (reviewId, request, options) {
            return (0, exports.CustomerReviewControllerApiFp)(configuration).replyToCustomerReviewUsingPOST(reviewId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCommentForCustomerReview
         * @param {number} commentId commentId
         * @param {number} reviewId reviewId
         * @param {UpdateReplyForCustomerReview} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommentForCustomerReviewUsingPOST: function (commentId, reviewId, request, options) {
            return (0, exports.CustomerReviewControllerApiFp)(configuration).updateCommentForCustomerReviewUsingPOST(commentId, reviewId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CustomerReviewControllerApiFactory = CustomerReviewControllerApiFactory;
/**
 * CustomerReviewControllerApi - object-oriented interface
 * @export
 * @class CustomerReviewControllerApi
 * @extends {BaseAPI}
 */
var CustomerReviewControllerApi = /** @class */ (function (_super) {
    __extends(CustomerReviewControllerApi, _super);
    function CustomerReviewControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addCustomerReview
     * @param {AddReviewRequest} addReviewRequest addReviewRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    CustomerReviewControllerApi.prototype.addCustomerReviewUsingPOST = function (addReviewRequest, options) {
        var _this = this;
        return (0, exports.CustomerReviewControllerApiFp)(this.configuration).addCustomerReviewUsingPOST(addReviewRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listCustomerReviews
     * @param {boolean} [includeAnonymous] includeAnonymous
     * @param {boolean} [includeRatings] includeRatings
     * @param {boolean} [isFeatured] isFeatured
     * @param {number} [lawfirmId] lawfirmId
     * @param {number} [limit] limit
     * @param {string} [nextPageToken] nextPageToken
     * @param {string} [previousPageToken] previousPageToken
     * @param {'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'} [state] state
     * @param {Array<string>} [tags] tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    CustomerReviewControllerApi.prototype.listCustomerReviewsUsingGET = function (includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options) {
        var _this = this;
        return (0, exports.CustomerReviewControllerApiFp)(this.configuration).listCustomerReviewsUsingGET(includeAnonymous, includeRatings, isFeatured, lawfirmId, limit, nextPageToken, previousPageToken, state, tags, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listEligibleStatusesForReview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    CustomerReviewControllerApi.prototype.listEligibleStatusesForReviewUsingGET = function (options) {
        var _this = this;
        return (0, exports.CustomerReviewControllerApiFp)(this.configuration).listEligibleStatusesForReviewUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markCommentWithVote
     * @param {number} commentId commentId
     * @param {number} reviewId reviewId
     * @param {boolean} [like] like
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    CustomerReviewControllerApi.prototype.markCommentWithVoteUsingPUT = function (commentId, reviewId, like, options) {
        var _this = this;
        return (0, exports.CustomerReviewControllerApiFp)(this.configuration).markCommentWithVoteUsingPUT(commentId, reviewId, like, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markReviewWithVote
     * @param {number} reviewId reviewId
     * @param {boolean} [helpful] helpful
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    CustomerReviewControllerApi.prototype.markReviewWithVoteUsingPUT = function (reviewId, helpful, options) {
        var _this = this;
        return (0, exports.CustomerReviewControllerApiFp)(this.configuration).markReviewWithVoteUsingPUT(reviewId, helpful, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary replyToCustomerReview
     * @param {number} reviewId reviewId
     * @param {ReplyToReviewRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    CustomerReviewControllerApi.prototype.replyToCustomerReviewUsingPOST = function (reviewId, request, options) {
        var _this = this;
        return (0, exports.CustomerReviewControllerApiFp)(this.configuration).replyToCustomerReviewUsingPOST(reviewId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCommentForCustomerReview
     * @param {number} commentId commentId
     * @param {number} reviewId reviewId
     * @param {UpdateReplyForCustomerReview} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerReviewControllerApi
     */
    CustomerReviewControllerApi.prototype.updateCommentForCustomerReviewUsingPOST = function (commentId, reviewId, request, options) {
        var _this = this;
        return (0, exports.CustomerReviewControllerApiFp)(this.configuration).updateCommentForCustomerReviewUsingPOST(commentId, reviewId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomerReviewControllerApi;
}(base_1.BaseAPI));
exports.CustomerReviewControllerApi = CustomerReviewControllerApi;
/**
 * DashboardControllerApi - axios parameter creator
 * @export
 */
var DashboardControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getBookings
         * @param {GetBookingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getBookingsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/bookings";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getRegisteredUsers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredUsersUsingPOST: function (graphRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'graphRequest' is not null or undefined
                    if (graphRequest === null || graphRequest === undefined) {
                        throw new base_1.RequiredError('graphRequest', 'Required parameter graphRequest was null or undefined when calling getRegisteredUsersUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/users";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getUserRegistrations
         * @param {GetUserRegistrationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRegistrationsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getUserRegistrationsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/registrations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listCasesByStatus
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCasesByStatusUsingPOST: function (graphRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'graphRequest' is not null or undefined
                    if (graphRequest === null || graphRequest === undefined) {
                        throw new base_1.RequiredError('graphRequest', 'Required parameter graphRequest was null or undefined when calling listCasesByStatusUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/cases/status";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listCustomers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomersUsingPOST: function (graphRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'graphRequest' is not null or undefined
                    if (graphRequest === null || graphRequest === undefined) {
                        throw new base_1.RequiredError('graphRequest', 'Required parameter graphRequest was null or undefined when calling listCustomersUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/customers";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listDropoffs
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDropoffsUsingPOST: function (graphRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'graphRequest' is not null or undefined
                    if (graphRequest === null || graphRequest === undefined) {
                        throw new base_1.RequiredError('graphRequest', 'Required parameter graphRequest was null or undefined when calling listDropoffsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/dropoff";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listExpenses
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExpensesUsingPOST: function (graphRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'graphRequest' is not null or undefined
                    if (graphRequest === null || graphRequest === undefined) {
                        throw new base_1.RequiredError('graphRequest', 'Required parameter graphRequest was null or undefined when calling listExpensesUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/expenses";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listLawyerLeads
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawyerLeadsUsingPOST: function (graphRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'graphRequest' is not null or undefined
                    if (graphRequest === null || graphRequest === undefined) {
                        throw new base_1.RequiredError('graphRequest', 'Required parameter graphRequest was null or undefined when calling listLawyerLeadsUsingPOST.');
                    }
                    localVarPath = "/api/v1/console/lawyer-leads";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof graphRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(graphRequest !== undefined ? graphRequest : {}) : (graphRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DashboardControllerApiAxiosParamCreator = DashboardControllerApiAxiosParamCreator;
/**
 * DashboardControllerApi - functional programming interface
 * @export
 */
var DashboardControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getBookings
         * @param {GetBookingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).getBookingsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getRegisteredUsers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredUsersUsingPOST: function (graphRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).getRegisteredUsersUsingPOST(graphRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getUserRegistrations
         * @param {GetUserRegistrationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRegistrationsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).getUserRegistrationsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listCasesByStatus
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCasesByStatusUsingPOST: function (graphRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).listCasesByStatusUsingPOST(graphRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listCustomers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomersUsingPOST: function (graphRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).listCustomersUsingPOST(graphRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listDropoffs
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDropoffsUsingPOST: function (graphRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).listDropoffsUsingPOST(graphRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listExpenses
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExpensesUsingPOST: function (graphRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).listExpensesUsingPOST(graphRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listLawyerLeads
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawyerLeadsUsingPOST: function (graphRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DashboardControllerApiAxiosParamCreator)(configuration).listLawyerLeadsUsingPOST(graphRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.DashboardControllerApiFp = DashboardControllerApiFp;
/**
 * DashboardControllerApi - factory interface
 * @export
 */
var DashboardControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getBookings
         * @param {GetBookingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingsUsingPOST: function (request, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).getBookingsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getRegisteredUsers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegisteredUsersUsingPOST: function (graphRequest, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).getRegisteredUsersUsingPOST(graphRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getUserRegistrations
         * @param {GetUserRegistrationsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRegistrationsUsingPOST: function (request, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).getUserRegistrationsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listCasesByStatus
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCasesByStatusUsingPOST: function (graphRequest, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).listCasesByStatusUsingPOST(graphRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listCustomers
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomersUsingPOST: function (graphRequest, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).listCustomersUsingPOST(graphRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listDropoffs
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDropoffsUsingPOST: function (graphRequest, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).listDropoffsUsingPOST(graphRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listExpenses
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExpensesUsingPOST: function (graphRequest, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).listExpensesUsingPOST(graphRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listLawyerLeads
         * @param {GraphRequest} graphRequest graphRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawyerLeadsUsingPOST: function (graphRequest, options) {
            return (0, exports.DashboardControllerApiFp)(configuration).listLawyerLeadsUsingPOST(graphRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DashboardControllerApiFactory = DashboardControllerApiFactory;
/**
 * DashboardControllerApi - object-oriented interface
 * @export
 * @class DashboardControllerApi
 * @extends {BaseAPI}
 */
var DashboardControllerApi = /** @class */ (function (_super) {
    __extends(DashboardControllerApi, _super);
    function DashboardControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getBookings
     * @param {GetBookingsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.getBookingsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).getBookingsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getRegisteredUsers
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.getRegisteredUsersUsingPOST = function (graphRequest, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).getRegisteredUsersUsingPOST(graphRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getUserRegistrations
     * @param {GetUserRegistrationsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.getUserRegistrationsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).getUserRegistrationsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listCasesByStatus
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.listCasesByStatusUsingPOST = function (graphRequest, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).listCasesByStatusUsingPOST(graphRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listCustomers
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.listCustomersUsingPOST = function (graphRequest, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).listCustomersUsingPOST(graphRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listDropoffs
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.listDropoffsUsingPOST = function (graphRequest, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).listDropoffsUsingPOST(graphRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listExpenses
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.listExpensesUsingPOST = function (graphRequest, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).listExpensesUsingPOST(graphRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listLawyerLeads
     * @param {GraphRequest} graphRequest graphRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardControllerApi
     */
    DashboardControllerApi.prototype.listLawyerLeadsUsingPOST = function (graphRequest, options) {
        var _this = this;
        return (0, exports.DashboardControllerApiFp)(this.configuration).listLawyerLeadsUsingPOST(graphRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DashboardControllerApi;
}(base_1.BaseAPI));
exports.DashboardControllerApi = DashboardControllerApi;
/**
 * DirectMailControllerApi - axios parameter creator
 * @export
 */
var DirectMailControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addDirectMailTemplate
         * @param {DirectMailTemplateToAdd} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDirectMailTemplateUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addDirectMailTemplateUsingPOST.');
                    }
                    localVarPath = "/api/v1/direct-mail/templates";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getDirectMailTemplates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectMailTemplatesUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/direct-mail/templates";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getSentMail
         * @param {DirectMailGetRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentMailUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getSentMailUsingPOST.');
                    }
                    localVarPath = "/api/v1/direct-mail/fetch-sent-mail";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary handleLobEvent
         * @param {LobEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleLobEventUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling handleLobEventUsingPOST.');
                    }
                    localVarPath = "/api/v1/direct-mail/lob-events";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendDirectMail
         * @param {DirectMailSendRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectMailUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling sendDirectMailUsingPOST.');
                    }
                    localVarPath = "/api/v1/direct-mail";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendDirectReferralCheck
         * @param {number} userId userId
         * @param {SendDirectReferralCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectReferralCheckUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling sendDirectReferralCheckUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling sendDirectReferralCheckUsingPOST.');
                    }
                    localVarPath = "/api/v1/direct-mail/{userId}/send-referral-check"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary validateDirectMailRequestForSend
         * @param {ValidateDirectMailRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateDirectMailRequestForSendUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling validateDirectMailRequestForSendUsingPOST.');
                    }
                    localVarPath = "/api/v1/direct-mail/validate";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary verifyMailingAddress
         * @param {VerifyMailingAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMailingAddressUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling verifyMailingAddressUsingPOST.');
                    }
                    localVarPath = "/api/v1/direct-mail/verify-address";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DirectMailControllerApiAxiosParamCreator = DirectMailControllerApiAxiosParamCreator;
/**
 * DirectMailControllerApi - functional programming interface
 * @export
 */
var DirectMailControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addDirectMailTemplate
         * @param {DirectMailTemplateToAdd} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDirectMailTemplateUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).addDirectMailTemplateUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getDirectMailTemplates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectMailTemplatesUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).getDirectMailTemplatesUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getSentMail
         * @param {DirectMailGetRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentMailUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).getSentMailUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary handleLobEvent
         * @param {LobEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleLobEventUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).handleLobEventUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendDirectMail
         * @param {DirectMailSendRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectMailUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).sendDirectMailUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendDirectReferralCheck
         * @param {number} userId userId
         * @param {SendDirectReferralCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectReferralCheckUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).sendDirectReferralCheckUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary validateDirectMailRequestForSend
         * @param {ValidateDirectMailRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateDirectMailRequestForSendUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).validateDirectMailRequestForSendUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary verifyMailingAddress
         * @param {VerifyMailingAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMailingAddressUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DirectMailControllerApiAxiosParamCreator)(configuration).verifyMailingAddressUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.DirectMailControllerApiFp = DirectMailControllerApiFp;
/**
 * DirectMailControllerApi - factory interface
 * @export
 */
var DirectMailControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addDirectMailTemplate
         * @param {DirectMailTemplateToAdd} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDirectMailTemplateUsingPOST: function (request, options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).addDirectMailTemplateUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getDirectMailTemplates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectMailTemplatesUsingGET: function (options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).getDirectMailTemplatesUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getSentMail
         * @param {DirectMailGetRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentMailUsingPOST: function (request, options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).getSentMailUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary handleLobEvent
         * @param {LobEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleLobEventUsingPOST: function (request, options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).handleLobEventUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendDirectMail
         * @param {DirectMailSendRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectMailUsingPOST: function (request, options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).sendDirectMailUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendDirectReferralCheck
         * @param {number} userId userId
         * @param {SendDirectReferralCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectReferralCheckUsingPOST: function (userId, request, options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).sendDirectReferralCheckUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary validateDirectMailRequestForSend
         * @param {ValidateDirectMailRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateDirectMailRequestForSendUsingPOST: function (request, options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).validateDirectMailRequestForSendUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary verifyMailingAddress
         * @param {VerifyMailingAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMailingAddressUsingPOST: function (request, options) {
            return (0, exports.DirectMailControllerApiFp)(configuration).verifyMailingAddressUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DirectMailControllerApiFactory = DirectMailControllerApiFactory;
/**
 * DirectMailControllerApi - object-oriented interface
 * @export
 * @class DirectMailControllerApi
 * @extends {BaseAPI}
 */
var DirectMailControllerApi = /** @class */ (function (_super) {
    __extends(DirectMailControllerApi, _super);
    function DirectMailControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addDirectMailTemplate
     * @param {DirectMailTemplateToAdd} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.addDirectMailTemplateUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).addDirectMailTemplateUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getDirectMailTemplates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.getDirectMailTemplatesUsingGET = function (options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).getDirectMailTemplatesUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getSentMail
     * @param {DirectMailGetRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.getSentMailUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).getSentMailUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary handleLobEvent
     * @param {LobEventRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.handleLobEventUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).handleLobEventUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendDirectMail
     * @param {DirectMailSendRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.sendDirectMailUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).sendDirectMailUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendDirectReferralCheck
     * @param {number} userId userId
     * @param {SendDirectReferralCheckRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.sendDirectReferralCheckUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).sendDirectReferralCheckUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary validateDirectMailRequestForSend
     * @param {ValidateDirectMailRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.validateDirectMailRequestForSendUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).validateDirectMailRequestForSendUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary verifyMailingAddress
     * @param {VerifyMailingAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectMailControllerApi
     */
    DirectMailControllerApi.prototype.verifyMailingAddressUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DirectMailControllerApiFp)(this.configuration).verifyMailingAddressUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DirectMailControllerApi;
}(base_1.BaseAPI));
exports.DirectMailControllerApi = DirectMailControllerApi;
/**
 * DripControllerApi - axios parameter creator
 * @export
 */
var DripControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary removeFromDrip
         * @param {DripRemoveRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromDripUsingDELETE: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling removeFromDripUsingDELETE.');
                    }
                    localVarPath = "/api/v1/drip";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DripControllerApiAxiosParamCreator = DripControllerApiAxiosParamCreator;
/**
 * DripControllerApi - functional programming interface
 * @export
 */
var DripControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary removeFromDrip
         * @param {DripRemoveRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromDripUsingDELETE: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DripControllerApiAxiosParamCreator)(configuration).removeFromDripUsingDELETE(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.DripControllerApiFp = DripControllerApiFp;
/**
 * DripControllerApi - factory interface
 * @export
 */
var DripControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary removeFromDrip
         * @param {DripRemoveRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromDripUsingDELETE: function (request, options) {
            return (0, exports.DripControllerApiFp)(configuration).removeFromDripUsingDELETE(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DripControllerApiFactory = DripControllerApiFactory;
/**
 * DripControllerApi - object-oriented interface
 * @export
 * @class DripControllerApi
 * @extends {BaseAPI}
 */
var DripControllerApi = /** @class */ (function (_super) {
    __extends(DripControllerApi, _super);
    function DripControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary removeFromDrip
     * @param {DripRemoveRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DripControllerApi
     */
    DripControllerApi.prototype.removeFromDripUsingDELETE = function (request, options) {
        var _this = this;
        return (0, exports.DripControllerApiFp)(this.configuration).removeFromDripUsingDELETE(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DripControllerApi;
}(base_1.BaseAPI));
exports.DripControllerApi = DripControllerApi;
/**
 * DripWebhooksControllerApi - axios parameter creator
 * @export
 */
var DripWebhooksControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary handleBounceOrComplaintEvent
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceOrComplaintEventUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling handleBounceOrComplaintEventUsingPOST.');
                    }
                    localVarPath = "/api/v1/webhooks/drip/bounce-or-complaint";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary handleDripWebhook
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleDripWebhookUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling handleDripWebhookUsingPOST.');
                    }
                    localVarPath = "/api/v1/drip/webhooks";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DripWebhooksControllerApiAxiosParamCreator = DripWebhooksControllerApiAxiosParamCreator;
/**
 * DripWebhooksControllerApi - functional programming interface
 * @export
 */
var DripWebhooksControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary handleBounceOrComplaintEvent
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceOrComplaintEventUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DripWebhooksControllerApiAxiosParamCreator)(configuration).handleBounceOrComplaintEventUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary handleDripWebhook
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleDripWebhookUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.DripWebhooksControllerApiAxiosParamCreator)(configuration).handleDripWebhookUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.DripWebhooksControllerApiFp = DripWebhooksControllerApiFp;
/**
 * DripWebhooksControllerApi - factory interface
 * @export
 */
var DripWebhooksControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary handleBounceOrComplaintEvent
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceOrComplaintEventUsingPOST: function (request, options) {
            return (0, exports.DripWebhooksControllerApiFp)(configuration).handleBounceOrComplaintEventUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary handleDripWebhook
         * @param {DripWebhookEvent} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleDripWebhookUsingPOST: function (request, options) {
            return (0, exports.DripWebhooksControllerApiFp)(configuration).handleDripWebhookUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DripWebhooksControllerApiFactory = DripWebhooksControllerApiFactory;
/**
 * DripWebhooksControllerApi - object-oriented interface
 * @export
 * @class DripWebhooksControllerApi
 * @extends {BaseAPI}
 */
var DripWebhooksControllerApi = /** @class */ (function (_super) {
    __extends(DripWebhooksControllerApi, _super);
    function DripWebhooksControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary handleBounceOrComplaintEvent
     * @param {DripWebhookEvent} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DripWebhooksControllerApi
     */
    DripWebhooksControllerApi.prototype.handleBounceOrComplaintEventUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DripWebhooksControllerApiFp)(this.configuration).handleBounceOrComplaintEventUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary handleDripWebhook
     * @param {DripWebhookEvent} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DripWebhooksControllerApi
     */
    DripWebhooksControllerApi.prototype.handleDripWebhookUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.DripWebhooksControllerApiFp)(this.configuration).handleDripWebhookUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DripWebhooksControllerApi;
}(base_1.BaseAPI));
exports.DripWebhooksControllerApi = DripWebhooksControllerApi;
/**
 * EmailSubscriptionControllerApi - axios parameter creator
 * @export
 */
var EmailSubscriptionControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary subscribe
         * @param {SubscribeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling subscribeUsingPOST.');
                    }
                    localVarPath = "/api/v1/subscribe";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.EmailSubscriptionControllerApiAxiosParamCreator = EmailSubscriptionControllerApiAxiosParamCreator;
/**
 * EmailSubscriptionControllerApi - functional programming interface
 * @export
 */
var EmailSubscriptionControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary subscribe
         * @param {SubscribeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.EmailSubscriptionControllerApiAxiosParamCreator)(configuration).subscribeUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.EmailSubscriptionControllerApiFp = EmailSubscriptionControllerApiFp;
/**
 * EmailSubscriptionControllerApi - factory interface
 * @export
 */
var EmailSubscriptionControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary subscribe
         * @param {SubscribeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeUsingPOST: function (request, options) {
            return (0, exports.EmailSubscriptionControllerApiFp)(configuration).subscribeUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.EmailSubscriptionControllerApiFactory = EmailSubscriptionControllerApiFactory;
/**
 * EmailSubscriptionControllerApi - object-oriented interface
 * @export
 * @class EmailSubscriptionControllerApi
 * @extends {BaseAPI}
 */
var EmailSubscriptionControllerApi = /** @class */ (function (_super) {
    __extends(EmailSubscriptionControllerApi, _super);
    function EmailSubscriptionControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary subscribe
     * @param {SubscribeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSubscriptionControllerApi
     */
    EmailSubscriptionControllerApi.prototype.subscribeUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.EmailSubscriptionControllerApiFp)(this.configuration).subscribeUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EmailSubscriptionControllerApi;
}(base_1.BaseAPI));
exports.EmailSubscriptionControllerApi = EmailSubscriptionControllerApi;
/**
 * FeedbackControllerApi - axios parameter creator
 * @export
 */
var FeedbackControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary postFeedback
         * @param {PostFeedbackRequest} request request
         * @param {boolean} [isReview] isReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackUsingPOST: function (request, isReview, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling postFeedbackUsingPOST.');
                    }
                    localVarPath = "/api/v1/feedback";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isReview !== undefined) {
                        localVarQueryParameter['isReview'] = isReview;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.FeedbackControllerApiAxiosParamCreator = FeedbackControllerApiAxiosParamCreator;
/**
 * FeedbackControllerApi - functional programming interface
 * @export
 */
var FeedbackControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary postFeedback
         * @param {PostFeedbackRequest} request request
         * @param {boolean} [isReview] isReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackUsingPOST: function (request, isReview, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.FeedbackControllerApiAxiosParamCreator)(configuration).postFeedbackUsingPOST(request, isReview, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.FeedbackControllerApiFp = FeedbackControllerApiFp;
/**
 * FeedbackControllerApi - factory interface
 * @export
 */
var FeedbackControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary postFeedback
         * @param {PostFeedbackRequest} request request
         * @param {boolean} [isReview] isReview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackUsingPOST: function (request, isReview, options) {
            return (0, exports.FeedbackControllerApiFp)(configuration).postFeedbackUsingPOST(request, isReview, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FeedbackControllerApiFactory = FeedbackControllerApiFactory;
/**
 * FeedbackControllerApi - object-oriented interface
 * @export
 * @class FeedbackControllerApi
 * @extends {BaseAPI}
 */
var FeedbackControllerApi = /** @class */ (function (_super) {
    __extends(FeedbackControllerApi, _super);
    function FeedbackControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary postFeedback
     * @param {PostFeedbackRequest} request request
     * @param {boolean} [isReview] isReview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackControllerApi
     */
    FeedbackControllerApi.prototype.postFeedbackUsingPOST = function (request, isReview, options) {
        var _this = this;
        return (0, exports.FeedbackControllerApiFp)(this.configuration).postFeedbackUsingPOST(request, isReview, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FeedbackControllerApi;
}(base_1.BaseAPI));
exports.FeedbackControllerApi = FeedbackControllerApi;
/**
 * FreshcallerControllerApi - axios parameter creator
 * @export
 */
var FreshcallerControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary signRecordingUrl
         * @param {SignRecordingUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signRecordingUrlUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling signRecordingUrlUsingPOST.');
                    }
                    localVarPath = "/api/v1/phone-calls/sign";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.FreshcallerControllerApiAxiosParamCreator = FreshcallerControllerApiAxiosParamCreator;
/**
 * FreshcallerControllerApi - functional programming interface
 * @export
 */
var FreshcallerControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary signRecordingUrl
         * @param {SignRecordingUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signRecordingUrlUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.FreshcallerControllerApiAxiosParamCreator)(configuration).signRecordingUrlUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.FreshcallerControllerApiFp = FreshcallerControllerApiFp;
/**
 * FreshcallerControllerApi - factory interface
 * @export
 */
var FreshcallerControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary signRecordingUrl
         * @param {SignRecordingUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signRecordingUrlUsingPOST: function (request, options) {
            return (0, exports.FreshcallerControllerApiFp)(configuration).signRecordingUrlUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FreshcallerControllerApiFactory = FreshcallerControllerApiFactory;
/**
 * FreshcallerControllerApi - object-oriented interface
 * @export
 * @class FreshcallerControllerApi
 * @extends {BaseAPI}
 */
var FreshcallerControllerApi = /** @class */ (function (_super) {
    __extends(FreshcallerControllerApi, _super);
    function FreshcallerControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary signRecordingUrl
     * @param {SignRecordingUrlRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshcallerControllerApi
     */
    FreshcallerControllerApi.prototype.signRecordingUrlUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.FreshcallerControllerApiFp)(this.configuration).signRecordingUrlUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FreshcallerControllerApi;
}(base_1.BaseAPI));
exports.FreshcallerControllerApi = FreshcallerControllerApi;
/**
 * FreshdeskTicketControllerApi - axios parameter creator
 * @export
 */
var FreshdeskTicketControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary mergeTicket
         * @param {number} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeTicketUsingPOST: function (ticketId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'ticketId' is not null or undefined
                    if (ticketId === null || ticketId === undefined) {
                        throw new base_1.RequiredError('ticketId', 'Required parameter ticketId was null or undefined when calling mergeTicketUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling mergeTicketUsingPOST.');
                    }
                    localVarPath = "/api/v1/freshdesk/webhook/ticket/{ticketId}/merge"
                        .replace("{" + "ticketId" + "}", encodeURIComponent(String(ticketId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ticketStatusChangeHook
         * @param {string} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketStatusChangeHookUsingPUT: function (ticketId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'ticketId' is not null or undefined
                    if (ticketId === null || ticketId === undefined) {
                        throw new base_1.RequiredError('ticketId', 'Required parameter ticketId was null or undefined when calling ticketStatusChangeHookUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling ticketStatusChangeHookUsingPUT.');
                    }
                    localVarPath = "/api/v1/freshdesk/ticket/{ticketId}/webhook/status-change"
                        .replace("{" + "ticketId" + "}", encodeURIComponent(String(ticketId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateFreshdeskTicket
         * @param {number} ticketId ticketId
         * @param {FreshDeskTicketReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFreshdeskTicketUsingPUT: function (ticketId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'ticketId' is not null or undefined
                    if (ticketId === null || ticketId === undefined) {
                        throw new base_1.RequiredError('ticketId', 'Required parameter ticketId was null or undefined when calling updateFreshdeskTicketUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateFreshdeskTicketUsingPUT.');
                    }
                    localVarPath = "/api/v1/freshdesk/ticket/{ticketId}"
                        .replace("{" + "ticketId" + "}", encodeURIComponent(String(ticketId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.FreshdeskTicketControllerApiAxiosParamCreator = FreshdeskTicketControllerApiAxiosParamCreator;
/**
 * FreshdeskTicketControllerApi - functional programming interface
 * @export
 */
var FreshdeskTicketControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary mergeTicket
         * @param {number} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeTicketUsingPOST: function (ticketId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.FreshdeskTicketControllerApiAxiosParamCreator)(configuration).mergeTicketUsingPOST(ticketId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary ticketStatusChangeHook
         * @param {string} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketStatusChangeHookUsingPUT: function (ticketId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.FreshdeskTicketControllerApiAxiosParamCreator)(configuration).ticketStatusChangeHookUsingPUT(ticketId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateFreshdeskTicket
         * @param {number} ticketId ticketId
         * @param {FreshDeskTicketReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFreshdeskTicketUsingPUT: function (ticketId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.FreshdeskTicketControllerApiAxiosParamCreator)(configuration).updateFreshdeskTicketUsingPUT(ticketId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.FreshdeskTicketControllerApiFp = FreshdeskTicketControllerApiFp;
/**
 * FreshdeskTicketControllerApi - factory interface
 * @export
 */
var FreshdeskTicketControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary mergeTicket
         * @param {number} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeTicketUsingPOST: function (ticketId, request, options) {
            return (0, exports.FreshdeskTicketControllerApiFp)(configuration).mergeTicketUsingPOST(ticketId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ticketStatusChangeHook
         * @param {string} ticketId ticketId
         * @param {FreshdeskWebhookRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketStatusChangeHookUsingPUT: function (ticketId, request, options) {
            return (0, exports.FreshdeskTicketControllerApiFp)(configuration).ticketStatusChangeHookUsingPUT(ticketId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateFreshdeskTicket
         * @param {number} ticketId ticketId
         * @param {FreshDeskTicketReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFreshdeskTicketUsingPUT: function (ticketId, request, options) {
            return (0, exports.FreshdeskTicketControllerApiFp)(configuration).updateFreshdeskTicketUsingPUT(ticketId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FreshdeskTicketControllerApiFactory = FreshdeskTicketControllerApiFactory;
/**
 * FreshdeskTicketControllerApi - object-oriented interface
 * @export
 * @class FreshdeskTicketControllerApi
 * @extends {BaseAPI}
 */
var FreshdeskTicketControllerApi = /** @class */ (function (_super) {
    __extends(FreshdeskTicketControllerApi, _super);
    function FreshdeskTicketControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary mergeTicket
     * @param {number} ticketId ticketId
     * @param {FreshdeskWebhookRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshdeskTicketControllerApi
     */
    FreshdeskTicketControllerApi.prototype.mergeTicketUsingPOST = function (ticketId, request, options) {
        var _this = this;
        return (0, exports.FreshdeskTicketControllerApiFp)(this.configuration).mergeTicketUsingPOST(ticketId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ticketStatusChangeHook
     * @param {string} ticketId ticketId
     * @param {FreshdeskWebhookRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshdeskTicketControllerApi
     */
    FreshdeskTicketControllerApi.prototype.ticketStatusChangeHookUsingPUT = function (ticketId, request, options) {
        var _this = this;
        return (0, exports.FreshdeskTicketControllerApiFp)(this.configuration).ticketStatusChangeHookUsingPUT(ticketId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateFreshdeskTicket
     * @param {number} ticketId ticketId
     * @param {FreshDeskTicketReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreshdeskTicketControllerApi
     */
    FreshdeskTicketControllerApi.prototype.updateFreshdeskTicketUsingPUT = function (ticketId, request, options) {
        var _this = this;
        return (0, exports.FreshdeskTicketControllerApiFp)(this.configuration).updateFreshdeskTicketUsingPUT(ticketId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FreshdeskTicketControllerApi;
}(base_1.BaseAPI));
exports.FreshdeskTicketControllerApi = FreshdeskTicketControllerApi;
/**
 * GetCaseControllerApi - axios parameter creator
 * @export
 */
var GetCaseControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getCaseClient
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClientUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getCaseClientUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/client"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCaseFromCitation
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseFromCitationUsingGET: function (citationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling getCaseFromCitationUsingGET.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/case"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getCaseUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.GetCaseControllerApiAxiosParamCreator = GetCaseControllerApiAxiosParamCreator;
/**
 * GetCaseControllerApi - functional programming interface
 * @export
 */
var GetCaseControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getCaseClient
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClientUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GetCaseControllerApiAxiosParamCreator)(configuration).getCaseClientUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCaseFromCitation
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseFromCitationUsingGET: function (citationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GetCaseControllerApiAxiosParamCreator)(configuration).getCaseFromCitationUsingGET(citationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.GetCaseControllerApiAxiosParamCreator)(configuration).getCaseUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.GetCaseControllerApiFp = GetCaseControllerApiFp;
/**
 * GetCaseControllerApi - factory interface
 * @export
 */
var GetCaseControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getCaseClient
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseClientUsingGET: function (caseId, options) {
            return (0, exports.GetCaseControllerApiFp)(configuration).getCaseClientUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCaseFromCitation
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseFromCitationUsingGET: function (citationId, options) {
            return (0, exports.GetCaseControllerApiFp)(configuration).getCaseFromCitationUsingGET(citationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseUsingGET: function (caseId, options) {
            return (0, exports.GetCaseControllerApiFp)(configuration).getCaseUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GetCaseControllerApiFactory = GetCaseControllerApiFactory;
/**
 * GetCaseControllerApi - object-oriented interface
 * @export
 * @class GetCaseControllerApi
 * @extends {BaseAPI}
 */
var GetCaseControllerApi = /** @class */ (function (_super) {
    __extends(GetCaseControllerApi, _super);
    function GetCaseControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getCaseClient
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetCaseControllerApi
     */
    GetCaseControllerApi.prototype.getCaseClientUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.GetCaseControllerApiFp)(this.configuration).getCaseClientUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCaseFromCitation
     * @param {string} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetCaseControllerApi
     */
    GetCaseControllerApi.prototype.getCaseFromCitationUsingGET = function (citationId, options) {
        var _this = this;
        return (0, exports.GetCaseControllerApiFp)(this.configuration).getCaseFromCitationUsingGET(citationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetCaseControllerApi
     */
    GetCaseControllerApi.prototype.getCaseUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.GetCaseControllerApiFp)(this.configuration).getCaseUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GetCaseControllerApi;
}(base_1.BaseAPI));
exports.GetCaseControllerApi = GetCaseControllerApi;
/**
 * HouseholdMateControllerApi - axios parameter creator
 * @export
 */
var HouseholdMateControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary acceptHouseholdInvite
         * @param {string} email email
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptHouseholdInviteUsingPUT: function (email, token, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'email' is not null or undefined
                    if (email === null || email === undefined) {
                        throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling acceptHouseholdInviteUsingPUT.');
                    }
                    // verify required parameter 'token' is not null or undefined
                    if (token === null || token === undefined) {
                        throw new base_1.RequiredError('token', 'Required parameter token was null or undefined when calling acceptHouseholdInviteUsingPUT.');
                    }
                    localVarPath = "/api/v1/household-mates/accept-invite";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (email !== undefined) {
                        localVarQueryParameter['email'] = email;
                    }
                    if (token !== undefined) {
                        localVarQueryParameter['token'] = token;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary cancelHouseholdMateInvite
         * @param {string} inviteeEmail inviteeEmail
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelHouseholdMateInviteUsingDELETE: function (inviteeEmail, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'inviteeEmail' is not null or undefined
                    if (inviteeEmail === null || inviteeEmail === undefined) {
                        throw new base_1.RequiredError('inviteeEmail', 'Required parameter inviteeEmail was null or undefined when calling cancelHouseholdMateInviteUsingDELETE.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling cancelHouseholdMateInviteUsingDELETE.');
                    }
                    localVarPath = "/api/v1/household-mates/{userId}/invite"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (inviteeEmail !== undefined) {
                        localVarQueryParameter['inviteeEmail'] = inviteeEmail;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getHouseholdMates
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseholdMatesUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getHouseholdMatesUsingGET.');
                    }
                    localVarPath = "/api/v1/household-mates/{userId}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary inviteHouseholdMate
         * @param {number} userId userId
         * @param {InviteHouseholdMateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteHouseholdMateUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling inviteHouseholdMateUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling inviteHouseholdMateUsingPOST.');
                    }
                    localVarPath = "/api/v1/household-mates/{userId}/invite"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.HouseholdMateControllerApiAxiosParamCreator = HouseholdMateControllerApiAxiosParamCreator;
/**
 * HouseholdMateControllerApi - functional programming interface
 * @export
 */
var HouseholdMateControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary acceptHouseholdInvite
         * @param {string} email email
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptHouseholdInviteUsingPUT: function (email, token, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.HouseholdMateControllerApiAxiosParamCreator)(configuration).acceptHouseholdInviteUsingPUT(email, token, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary cancelHouseholdMateInvite
         * @param {string} inviteeEmail inviteeEmail
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelHouseholdMateInviteUsingDELETE: function (inviteeEmail, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.HouseholdMateControllerApiAxiosParamCreator)(configuration).cancelHouseholdMateInviteUsingDELETE(inviteeEmail, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getHouseholdMates
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseholdMatesUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.HouseholdMateControllerApiAxiosParamCreator)(configuration).getHouseholdMatesUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary inviteHouseholdMate
         * @param {number} userId userId
         * @param {InviteHouseholdMateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteHouseholdMateUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.HouseholdMateControllerApiAxiosParamCreator)(configuration).inviteHouseholdMateUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.HouseholdMateControllerApiFp = HouseholdMateControllerApiFp;
/**
 * HouseholdMateControllerApi - factory interface
 * @export
 */
var HouseholdMateControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary acceptHouseholdInvite
         * @param {string} email email
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptHouseholdInviteUsingPUT: function (email, token, options) {
            return (0, exports.HouseholdMateControllerApiFp)(configuration).acceptHouseholdInviteUsingPUT(email, token, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary cancelHouseholdMateInvite
         * @param {string} inviteeEmail inviteeEmail
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelHouseholdMateInviteUsingDELETE: function (inviteeEmail, userId, options) {
            return (0, exports.HouseholdMateControllerApiFp)(configuration).cancelHouseholdMateInviteUsingDELETE(inviteeEmail, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getHouseholdMates
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseholdMatesUsingGET: function (userId, options) {
            return (0, exports.HouseholdMateControllerApiFp)(configuration).getHouseholdMatesUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary inviteHouseholdMate
         * @param {number} userId userId
         * @param {InviteHouseholdMateRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteHouseholdMateUsingPOST: function (userId, request, options) {
            return (0, exports.HouseholdMateControllerApiFp)(configuration).inviteHouseholdMateUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.HouseholdMateControllerApiFactory = HouseholdMateControllerApiFactory;
/**
 * HouseholdMateControllerApi - object-oriented interface
 * @export
 * @class HouseholdMateControllerApi
 * @extends {BaseAPI}
 */
var HouseholdMateControllerApi = /** @class */ (function (_super) {
    __extends(HouseholdMateControllerApi, _super);
    function HouseholdMateControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary acceptHouseholdInvite
     * @param {string} email email
     * @param {string} token token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    HouseholdMateControllerApi.prototype.acceptHouseholdInviteUsingPUT = function (email, token, options) {
        var _this = this;
        return (0, exports.HouseholdMateControllerApiFp)(this.configuration).acceptHouseholdInviteUsingPUT(email, token, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary cancelHouseholdMateInvite
     * @param {string} inviteeEmail inviteeEmail
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    HouseholdMateControllerApi.prototype.cancelHouseholdMateInviteUsingDELETE = function (inviteeEmail, userId, options) {
        var _this = this;
        return (0, exports.HouseholdMateControllerApiFp)(this.configuration).cancelHouseholdMateInviteUsingDELETE(inviteeEmail, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getHouseholdMates
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    HouseholdMateControllerApi.prototype.getHouseholdMatesUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.HouseholdMateControllerApiFp)(this.configuration).getHouseholdMatesUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary inviteHouseholdMate
     * @param {number} userId userId
     * @param {InviteHouseholdMateRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HouseholdMateControllerApi
     */
    HouseholdMateControllerApi.prototype.inviteHouseholdMateUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.HouseholdMateControllerApiFp)(this.configuration).inviteHouseholdMateUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return HouseholdMateControllerApi;
}(base_1.BaseAPI));
exports.HouseholdMateControllerApi = HouseholdMateControllerApi;
/**
 * InsuranceCalculatorControllerApi - axios parameter creator
 * @export
 */
var InsuranceCalculatorControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary calculateTicketSavings
         * @param {EstimateInsuranceSavingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateTicketSavingsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling calculateTicketSavingsUsingPOST.');
                    }
                    localVarPath = "/api/v1/insurance/ticket/savings";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.InsuranceCalculatorControllerApiAxiosParamCreator = InsuranceCalculatorControllerApiAxiosParamCreator;
/**
 * InsuranceCalculatorControllerApi - functional programming interface
 * @export
 */
var InsuranceCalculatorControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary calculateTicketSavings
         * @param {EstimateInsuranceSavingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateTicketSavingsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.InsuranceCalculatorControllerApiAxiosParamCreator)(configuration).calculateTicketSavingsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.InsuranceCalculatorControllerApiFp = InsuranceCalculatorControllerApiFp;
/**
 * InsuranceCalculatorControllerApi - factory interface
 * @export
 */
var InsuranceCalculatorControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary calculateTicketSavings
         * @param {EstimateInsuranceSavingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateTicketSavingsUsingPOST: function (request, options) {
            return (0, exports.InsuranceCalculatorControllerApiFp)(configuration).calculateTicketSavingsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.InsuranceCalculatorControllerApiFactory = InsuranceCalculatorControllerApiFactory;
/**
 * InsuranceCalculatorControllerApi - object-oriented interface
 * @export
 * @class InsuranceCalculatorControllerApi
 * @extends {BaseAPI}
 */
var InsuranceCalculatorControllerApi = /** @class */ (function (_super) {
    __extends(InsuranceCalculatorControllerApi, _super);
    function InsuranceCalculatorControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary calculateTicketSavings
     * @param {EstimateInsuranceSavingsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceCalculatorControllerApi
     */
    InsuranceCalculatorControllerApi.prototype.calculateTicketSavingsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.InsuranceCalculatorControllerApiFp)(this.configuration).calculateTicketSavingsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return InsuranceCalculatorControllerApi;
}(base_1.BaseAPI));
exports.InsuranceCalculatorControllerApi = InsuranceCalculatorControllerApi;
/**
 * LawfirmCaseDecisionControllerApi - axios parameter creator
 * @export
 */
var LawfirmCaseDecisionControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary setLawfirmCaseDecision
         * @param {string} caseId caseId
         * @param {SetLawfirmCaseDecisionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLawfirmCaseDecisionUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling setLawfirmCaseDecisionUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling setLawfirmCaseDecisionUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirm/cases/{caseId}/decision"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmCaseDecisionControllerApiAxiosParamCreator = LawfirmCaseDecisionControllerApiAxiosParamCreator;
/**
 * LawfirmCaseDecisionControllerApi - functional programming interface
 * @export
 */
var LawfirmCaseDecisionControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary setLawfirmCaseDecision
         * @param {string} caseId caseId
         * @param {SetLawfirmCaseDecisionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLawfirmCaseDecisionUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmCaseDecisionControllerApiAxiosParamCreator)(configuration).setLawfirmCaseDecisionUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmCaseDecisionControllerApiFp = LawfirmCaseDecisionControllerApiFp;
/**
 * LawfirmCaseDecisionControllerApi - factory interface
 * @export
 */
var LawfirmCaseDecisionControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary setLawfirmCaseDecision
         * @param {string} caseId caseId
         * @param {SetLawfirmCaseDecisionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLawfirmCaseDecisionUsingPOST: function (caseId, request, options) {
            return (0, exports.LawfirmCaseDecisionControllerApiFp)(configuration).setLawfirmCaseDecisionUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmCaseDecisionControllerApiFactory = LawfirmCaseDecisionControllerApiFactory;
/**
 * LawfirmCaseDecisionControllerApi - object-oriented interface
 * @export
 * @class LawfirmCaseDecisionControllerApi
 * @extends {BaseAPI}
 */
var LawfirmCaseDecisionControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmCaseDecisionControllerApi, _super);
    function LawfirmCaseDecisionControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary setLawfirmCaseDecision
     * @param {string} caseId caseId
     * @param {SetLawfirmCaseDecisionRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmCaseDecisionControllerApi
     */
    LawfirmCaseDecisionControllerApi.prototype.setLawfirmCaseDecisionUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.LawfirmCaseDecisionControllerApiFp)(this.configuration).setLawfirmCaseDecisionUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmCaseDecisionControllerApi;
}(base_1.BaseAPI));
exports.LawfirmCaseDecisionControllerApi = LawfirmCaseDecisionControllerApi;
/**
 * LawfirmCasesControllerApi - axios parameter creator
 * @export
 */
var LawfirmCasesControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getLawfirmCasesByPage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {GetLawfirmSummaryCaseRequest} request request
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesByPageUsingPOST: function (lawfirmIdString, request, length, page, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmIdString' is not null or undefined
                    if (lawfirmIdString === null || lawfirmIdString === undefined) {
                        throw new base_1.RequiredError('lawfirmIdString', 'Required parameter lawfirmIdString was null or undefined when calling getLawfirmCasesByPageUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getLawfirmCasesByPageUsingPOST.');
                    }
                    localVarPath = "/api/v2/lawfirm/{lawfirmIdString}/cases"
                        .replace("{" + "lawfirmIdString" + "}", encodeURIComponent(String(lawfirmIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (length !== undefined) {
                        localVarQueryParameter['length'] = length;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmCases
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmCasesUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/cases"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmCasesControllerApiAxiosParamCreator = LawfirmCasesControllerApiAxiosParamCreator;
/**
 * LawfirmCasesControllerApi - functional programming interface
 * @export
 */
var LawfirmCasesControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getLawfirmCasesByPage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {GetLawfirmSummaryCaseRequest} request request
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesByPageUsingPOST: function (lawfirmIdString, request, length, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmCasesControllerApiAxiosParamCreator)(configuration).getLawfirmCasesByPageUsingPOST(lawfirmIdString, request, length, page, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmCases
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmCasesControllerApiAxiosParamCreator)(configuration).getLawfirmCasesUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmCasesControllerApiFp = LawfirmCasesControllerApiFp;
/**
 * LawfirmCasesControllerApi - factory interface
 * @export
 */
var LawfirmCasesControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getLawfirmCasesByPage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {GetLawfirmSummaryCaseRequest} request request
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesByPageUsingPOST: function (lawfirmIdString, request, length, page, options) {
            return (0, exports.LawfirmCasesControllerApiFp)(configuration).getLawfirmCasesByPageUsingPOST(lawfirmIdString, request, length, page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmCases
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCasesUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmCasesControllerApiFp)(configuration).getLawfirmCasesUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmCasesControllerApiFactory = LawfirmCasesControllerApiFactory;
/**
 * LawfirmCasesControllerApi - object-oriented interface
 * @export
 * @class LawfirmCasesControllerApi
 * @extends {BaseAPI}
 */
var LawfirmCasesControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmCasesControllerApi, _super);
    function LawfirmCasesControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getLawfirmCasesByPage
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {GetLawfirmSummaryCaseRequest} request request
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmCasesControllerApi
     */
    LawfirmCasesControllerApi.prototype.getLawfirmCasesByPageUsingPOST = function (lawfirmIdString, request, length, page, options) {
        var _this = this;
        return (0, exports.LawfirmCasesControllerApiFp)(this.configuration).getLawfirmCasesByPageUsingPOST(lawfirmIdString, request, length, page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmCases
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmCasesControllerApi
     */
    LawfirmCasesControllerApi.prototype.getLawfirmCasesUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmCasesControllerApiFp)(this.configuration).getLawfirmCasesUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmCasesControllerApi;
}(base_1.BaseAPI));
exports.LawfirmCasesControllerApi = LawfirmCasesControllerApi;
/**
 * LawfirmControllerApi - axios parameter creator
 * @export
 */
var LawfirmControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addLawfirmAddress
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLawfirmAddressUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling addLawfirmAddressUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addLawfirmAddressUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/addresses"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary createLawfirm
         * @param {CreateNewLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLawfirmUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createLawfirmUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmConnectedAccount
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripeAccountId stripeAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmConnectedAccountUsingDELETE: function (lawfirmId, stripeAccountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
                    }
                    // verify required parameter 'stripeAccountId' is not null or undefined
                    if (stripeAccountId === null || stripeAccountId === undefined) {
                        throw new base_1.RequiredError('stripeAccountId', 'Required parameter stripeAccountId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/stripe/account/{stripeAccountId}"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)))
                        .replace("{" + "stripeAccountId" + "}", encodeURIComponent(String(stripeAccountId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmCoverPhoto
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmCoverPhotoUsingDELETE: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling deleteLawfirmCoverPhotoUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/cover-photo"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmAddresses
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmAddressesUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmAddressesUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/addresses"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmByUrl
         * @param {string} seoUrl seoUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmByUrlUsingGET: function (seoUrl, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'seoUrl' is not null or undefined
                    if (seoUrl === null || seoUrl === undefined) {
                        throw new base_1.RequiredError('seoUrl', 'Required parameter seoUrl was null or undefined when calling getLawfirmByUrlUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/url";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (seoUrl !== undefined) {
                        localVarQueryParameter['seoUrl'] = seoUrl;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmCaseStats
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseStatsUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmCaseStatsUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/cases/stats"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmInboxMessages
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmInboxMessagesUsingGET: function (lawfirmId, length, page, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmInboxMessagesUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/messages"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (length !== undefined) {
                        localVarQueryParameter['length'] = length;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmJobTitles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmJobTitlesUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/lawfirms/job-titles";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmLawyers
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmLawyersUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmLawyersUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/lawyers"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmSettings
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmSettingsUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmSettingsUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/settings"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmStatuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmStatusesUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/lawfirms/statuses";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {boolean} [isDetailsRequired] isDetailsRequired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmUsingGET: function (lawfirmIdString, isDetailsRequired, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmIdString' is not null or undefined
                    if (lawfirmIdString === null || lawfirmIdString === undefined) {
                        throw new base_1.RequiredError('lawfirmIdString', 'Required parameter lawfirmIdString was null or undefined when calling getLawfirmUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmIdString}"
                        .replace("{" + "lawfirmIdString" + "}", encodeURIComponent(String(lawfirmIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isDetailsRequired !== undefined) {
                        localVarQueryParameter['isDetailsRequired'] = isDetailsRequired;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirms
         * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
         * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
         * @param {boolean} [includeTestLawfirms] includeTestLawfirms
         * @param {boolean} [includeVacationMode] includeVacationMode
         * @param {string} [q] q
         * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
         * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmsUsingGET: function (acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/lawfirms";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (acceptsAccidentTickets !== undefined) {
                        localVarQueryParameter['acceptsAccidentTickets'] = acceptsAccidentTickets;
                    }
                    if (acceptsPastDueTickets !== undefined) {
                        localVarQueryParameter['acceptsPastDueTickets'] = acceptsPastDueTickets;
                    }
                    if (includeTestLawfirms !== undefined) {
                        localVarQueryParameter['includeTestLawfirms'] = includeTestLawfirms;
                    }
                    if (includeVacationMode !== undefined) {
                        localVarQueryParameter['includeVacationMode'] = includeVacationMode;
                    }
                    if (q !== undefined) {
                        localVarQueryParameter['q'] = q;
                    }
                    if (states) {
                        localVarQueryParameter['states'] = states;
                    }
                    if (statuses) {
                        localVarQueryParameter['statuses'] = statuses;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getOtrLawfirmNotes
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtrLawfirmNotesUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getOtrLawfirmNotesUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/otr-notes"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getStripeConnectedAccounts
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeConnectedAccountsUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getStripeConnectedAccountsUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/stripe"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getSupportedStatesForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedStatesForLawfirmUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getSupportedStatesForLawfirmUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/supported-states"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setVacationMode
         * @param {number} lawfirmId lawfirmId
         * @param {LawfirmVacationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVacationModeUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling setVacationModeUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling setVacationModeUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/vacation"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateLawfirmAddress
         * @param {number} addressId addressId
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmAddressUsingPUT: function (addressId, lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'addressId' is not null or undefined
                    if (addressId === null || addressId === undefined) {
                        throw new base_1.RequiredError('addressId', 'Required parameter addressId was null or undefined when calling updateLawfirmAddressUsingPUT.');
                    }
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling updateLawfirmAddressUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateLawfirmAddressUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/addresses/{addressId}"
                        .replace("{" + "addressId" + "}", encodeURIComponent(String(addressId)))
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateLawfirmSettings
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmSettingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmSettingsUsingPOST: function (lawfirmIdString, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmIdString' is not null or undefined
                    if (lawfirmIdString === null || lawfirmIdString === undefined) {
                        throw new base_1.RequiredError('lawfirmIdString', 'Required parameter lawfirmIdString was null or undefined when calling updateLawfirmSettingsUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateLawfirmSettingsUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmIdString}/settings"
                        .replace("{" + "lawfirmIdString" + "}", encodeURIComponent(String(lawfirmIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmUsingPUT: function (lawfirmIdString, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmIdString' is not null or undefined
                    if (lawfirmIdString === null || lawfirmIdString === undefined) {
                        throw new base_1.RequiredError('lawfirmIdString', 'Required parameter lawfirmIdString was null or undefined when calling updateLawfirmUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateLawfirmUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmIdString}"
                        .replace("{" + "lawfirmIdString" + "}", encodeURIComponent(String(lawfirmIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateLawfirmWithPicture
         * @param {string} lawfirmId lawfirmId
         * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmWithPictureUsingPUT: function (lawfirmId, lawfirmPictureRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
                    }
                    // verify required parameter 'lawfirmPictureRequest' is not null or undefined
                    if (lawfirmPictureRequest === null || lawfirmPictureRequest === undefined) {
                        throw new base_1.RequiredError('lawfirmPictureRequest', 'Required parameter lawfirmPictureRequest was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/picture"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof lawfirmPictureRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(lawfirmPictureRequest !== undefined ? lawfirmPictureRequest : {}) : (lawfirmPictureRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updatePaymentModel
         * @param {number} lawfirmId lawfirmId
         * @param {UpdateLawfirmPaymentModelRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentModelUsingPUT: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling updatePaymentModelUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updatePaymentModelUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/payment-model"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmControllerApiAxiosParamCreator = LawfirmControllerApiAxiosParamCreator;
/**
 * LawfirmControllerApi - functional programming interface
 * @export
 */
var LawfirmControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addLawfirmAddress
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLawfirmAddressUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).addLawfirmAddressUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary createLawfirm
         * @param {CreateNewLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLawfirmUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).createLawfirmUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmConnectedAccount
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripeAccountId stripeAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmConnectedAccountUsingDELETE: function (lawfirmId, stripeAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).deleteLawfirmConnectedAccountUsingDELETE(lawfirmId, stripeAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmCoverPhoto
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmCoverPhotoUsingDELETE: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).deleteLawfirmCoverPhotoUsingDELETE(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmAddresses
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmAddressesUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmAddressesUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmByUrl
         * @param {string} seoUrl seoUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmByUrlUsingGET: function (seoUrl, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmByUrlUsingGET(seoUrl, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmCaseStats
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseStatsUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmCaseStatsUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmInboxMessages
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmInboxMessagesUsingGET: function (lawfirmId, length, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmInboxMessagesUsingGET(lawfirmId, length, page, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmJobTitles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmJobTitlesUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmJobTitlesUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmLawyers
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmLawyersUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmLawyersUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmSettings
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmSettingsUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmSettingsUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmStatuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmStatusesUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmStatusesUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {boolean} [isDetailsRequired] isDetailsRequired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmUsingGET: function (lawfirmIdString, isDetailsRequired, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmUsingGET(lawfirmIdString, isDetailsRequired, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirms
         * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
         * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
         * @param {boolean} [includeTestLawfirms] includeTestLawfirms
         * @param {boolean} [includeVacationMode] includeVacationMode
         * @param {string} [q] q
         * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
         * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmsUsingGET: function (acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getLawfirmsUsingGET(acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getOtrLawfirmNotes
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtrLawfirmNotesUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getOtrLawfirmNotesUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getStripeConnectedAccounts
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeConnectedAccountsUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getStripeConnectedAccountsUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getSupportedStatesForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedStatesForLawfirmUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).getSupportedStatesForLawfirmUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setVacationMode
         * @param {number} lawfirmId lawfirmId
         * @param {LawfirmVacationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVacationModeUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).setVacationModeUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateLawfirmAddress
         * @param {number} addressId addressId
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmAddressUsingPUT: function (addressId, lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).updateLawfirmAddressUsingPUT(addressId, lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateLawfirmSettings
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmSettingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmSettingsUsingPOST: function (lawfirmIdString, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).updateLawfirmSettingsUsingPOST(lawfirmIdString, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmUsingPUT: function (lawfirmIdString, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).updateLawfirmUsingPUT(lawfirmIdString, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateLawfirmWithPicture
         * @param {string} lawfirmId lawfirmId
         * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmWithPictureUsingPUT: function (lawfirmId, lawfirmPictureRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).updateLawfirmWithPictureUsingPUT(lawfirmId, lawfirmPictureRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updatePaymentModel
         * @param {number} lawfirmId lawfirmId
         * @param {UpdateLawfirmPaymentModelRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentModelUsingPUT: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmControllerApiAxiosParamCreator)(configuration).updatePaymentModelUsingPUT(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmControllerApiFp = LawfirmControllerApiFp;
/**
 * LawfirmControllerApi - factory interface
 * @export
 */
var LawfirmControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addLawfirmAddress
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLawfirmAddressUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).addLawfirmAddressUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary createLawfirm
         * @param {CreateNewLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLawfirmUsingPOST: function (request, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).createLawfirmUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteLawfirmConnectedAccount
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripeAccountId stripeAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmConnectedAccountUsingDELETE: function (lawfirmId, stripeAccountId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).deleteLawfirmConnectedAccountUsingDELETE(lawfirmId, stripeAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteLawfirmCoverPhoto
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmCoverPhotoUsingDELETE: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).deleteLawfirmCoverPhotoUsingDELETE(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmAddresses
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmAddressesUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmAddressesUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmByUrl
         * @param {string} seoUrl seoUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmByUrlUsingGET: function (seoUrl, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmByUrlUsingGET(seoUrl, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmCaseStats
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseStatsUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmCaseStatsUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmInboxMessages
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmInboxMessagesUsingGET: function (lawfirmId, length, page, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmInboxMessagesUsingGET(lawfirmId, length, page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmJobTitles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmJobTitlesUsingGET: function (options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmJobTitlesUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmLawyers
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmLawyersUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmLawyersUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmSettings
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmSettingsUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmSettingsUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmStatuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmStatusesUsingGET: function (options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmStatusesUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {boolean} [isDetailsRequired] isDetailsRequired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmUsingGET: function (lawfirmIdString, isDetailsRequired, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmUsingGET(lawfirmIdString, isDetailsRequired, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirms
         * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
         * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
         * @param {boolean} [includeTestLawfirms] includeTestLawfirms
         * @param {boolean} [includeVacationMode] includeVacationMode
         * @param {string} [q] q
         * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
         * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmsUsingGET: function (acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getLawfirmsUsingGET(acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getOtrLawfirmNotes
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtrLawfirmNotesUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getOtrLawfirmNotesUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getStripeConnectedAccounts
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeConnectedAccountsUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getStripeConnectedAccountsUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getSupportedStatesForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedStatesForLawfirmUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).getSupportedStatesForLawfirmUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setVacationMode
         * @param {number} lawfirmId lawfirmId
         * @param {LawfirmVacationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVacationModeUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).setVacationModeUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateLawfirmAddress
         * @param {number} addressId addressId
         * @param {number} lawfirmId lawfirmId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmAddressUsingPUT: function (addressId, lawfirmId, request, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).updateLawfirmAddressUsingPUT(addressId, lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateLawfirmSettings
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmSettingsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmSettingsUsingPOST: function (lawfirmIdString, request, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).updateLawfirmSettingsUsingPOST(lawfirmIdString, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateLawfirm
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {UpdateLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmUsingPUT: function (lawfirmIdString, request, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).updateLawfirmUsingPUT(lawfirmIdString, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateLawfirmWithPicture
         * @param {string} lawfirmId lawfirmId
         * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmWithPictureUsingPUT: function (lawfirmId, lawfirmPictureRequest, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).updateLawfirmWithPictureUsingPUT(lawfirmId, lawfirmPictureRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updatePaymentModel
         * @param {number} lawfirmId lawfirmId
         * @param {UpdateLawfirmPaymentModelRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentModelUsingPUT: function (lawfirmId, request, options) {
            return (0, exports.LawfirmControllerApiFp)(configuration).updatePaymentModelUsingPUT(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmControllerApiFactory = LawfirmControllerApiFactory;
/**
 * LawfirmControllerApi - object-oriented interface
 * @export
 * @class LawfirmControllerApi
 * @extends {BaseAPI}
 */
var LawfirmControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmControllerApi, _super);
    function LawfirmControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addLawfirmAddress
     * @param {number} lawfirmId lawfirmId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.addLawfirmAddressUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).addLawfirmAddressUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary createLawfirm
     * @param {CreateNewLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.createLawfirmUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).createLawfirmUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteLawfirmConnectedAccount
     * @param {number} lawfirmId lawfirmId
     * @param {string} stripeAccountId stripeAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.deleteLawfirmConnectedAccountUsingDELETE = function (lawfirmId, stripeAccountId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).deleteLawfirmConnectedAccountUsingDELETE(lawfirmId, stripeAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteLawfirmCoverPhoto
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.deleteLawfirmCoverPhotoUsingDELETE = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).deleteLawfirmCoverPhotoUsingDELETE(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmAddresses
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmAddressesUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmAddressesUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmByUrl
     * @param {string} seoUrl seoUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmByUrlUsingGET = function (seoUrl, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmByUrlUsingGET(seoUrl, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmCaseStats
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmCaseStatsUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmCaseStatsUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmInboxMessages
     * @param {number} lawfirmId lawfirmId
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmInboxMessagesUsingGET = function (lawfirmId, length, page, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmInboxMessagesUsingGET(lawfirmId, length, page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmJobTitles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmJobTitlesUsingGET = function (options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmJobTitlesUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmLawyers
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmLawyersUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmLawyersUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmSettings
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmSettingsUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmSettingsUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmStatuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmStatusesUsingGET = function (options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmStatusesUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirm
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {boolean} [isDetailsRequired] isDetailsRequired
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmUsingGET = function (lawfirmIdString, isDetailsRequired, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmUsingGET(lawfirmIdString, isDetailsRequired, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirms
     * @param {boolean} [acceptsAccidentTickets] acceptsAccidentTickets
     * @param {boolean} [acceptsPastDueTickets] acceptsPastDueTickets
     * @param {boolean} [includeTestLawfirms] includeTestLawfirms
     * @param {boolean} [includeVacationMode] includeVacationMode
     * @param {string} [q] q
     * @param {Array<'AK' | 'AL' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DC' | 'DE' | 'FL' | 'GA' | 'HI' | 'IA' | 'ID' | 'IL' | 'IN' | 'KS' | 'KY' | 'LA' | 'MA' | 'MD' | 'ME' | 'MI' | 'MN' | 'MO' | 'MS' | 'MT' | 'NC' | 'ND' | 'NE' | 'NH' | 'NJ' | 'NM' | 'NV' | 'NY' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VA' | 'VT' | 'WA' | 'WI' | 'WV' | 'WY'>} [states] states
     * @param {Array<'ACCOUNT_CLOSED' | 'DUPLICATE' | 'ESTABLISHED' | 'FUTURE_LEAD' | 'IN_TRIAL' | 'LAWFIRM_INTERESTED' | 'LAWFIRM_LEAD' | 'LAWFIRM_NOT_INTERESTED' | 'NOT_INTERESTED_FEE_SPLITTING_ETHICS' | 'NOT_INTERESTED_REFUND_ETHICS' | 'ONBOARDING' | 'TEMPORARILY_TURNED_OFF' | 'TERMINATED_FRAUD' | 'TERMINATED_POOR_SERVICE' | 'TERMINATED_POOR_SUCCESS' | 'UNDER_REVIEW'>} [statuses] statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getLawfirmsUsingGET = function (acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getLawfirmsUsingGET(acceptsAccidentTickets, acceptsPastDueTickets, includeTestLawfirms, includeVacationMode, q, states, statuses, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getOtrLawfirmNotes
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getOtrLawfirmNotesUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getOtrLawfirmNotesUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getStripeConnectedAccounts
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getStripeConnectedAccountsUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getStripeConnectedAccountsUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getSupportedStatesForLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.getSupportedStatesForLawfirmUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).getSupportedStatesForLawfirmUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setVacationMode
     * @param {number} lawfirmId lawfirmId
     * @param {LawfirmVacationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.setVacationModeUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).setVacationModeUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateLawfirmAddress
     * @param {number} addressId addressId
     * @param {number} lawfirmId lawfirmId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.updateLawfirmAddressUsingPUT = function (addressId, lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).updateLawfirmAddressUsingPUT(addressId, lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateLawfirmSettings
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {UpdateLawfirmSettingsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.updateLawfirmSettingsUsingPOST = function (lawfirmIdString, request, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).updateLawfirmSettingsUsingPOST(lawfirmIdString, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateLawfirm
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {UpdateLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.updateLawfirmUsingPUT = function (lawfirmIdString, request, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).updateLawfirmUsingPUT(lawfirmIdString, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateLawfirmWithPicture
     * @param {string} lawfirmId lawfirmId
     * @param {LawfirmPictureRequest} lawfirmPictureRequest lawfirmPictureRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.updateLawfirmWithPictureUsingPUT = function (lawfirmId, lawfirmPictureRequest, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).updateLawfirmWithPictureUsingPUT(lawfirmId, lawfirmPictureRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updatePaymentModel
     * @param {number} lawfirmId lawfirmId
     * @param {UpdateLawfirmPaymentModelRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmControllerApi
     */
    LawfirmControllerApi.prototype.updatePaymentModelUsingPUT = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmControllerApiFp)(this.configuration).updatePaymentModelUsingPUT(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmControllerApi;
}(base_1.BaseAPI));
exports.LawfirmControllerApi = LawfirmControllerApi;
/**
 * LawfirmDocumentControllerApi - axios parameter creator
 * @export
 */
var LawfirmDocumentControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary generateDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {GetDocumentsRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDocUsingPOST: function (docType, lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'docType' is not null or undefined
                    if (docType === null || docType === undefined) {
                        throw new base_1.RequiredError('docType', 'Required parameter docType was null or undefined when calling generateDocUsingPOST.');
                    }
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling generateDocUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/documents"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (docType !== undefined) {
                        localVarQueryParameter['doc_type'] = docType;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getDocument
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentUsingGET: function (docType, lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'docType' is not null or undefined
                    if (docType === null || docType === undefined) {
                        throw new base_1.RequiredError('docType', 'Required parameter docType was null or undefined when calling getDocumentUsingGET.');
                    }
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getDocumentUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/documents"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (docType !== undefined) {
                        localVarQueryParameter['doc_type'] = docType;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmCaseDocuments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseDocumentsUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getLawfirmCaseDocumentsUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/documents"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markDocumentWithDecision
         * @param {string} docId docId
         * @param {DocumentDecisionRequest} decisionRequest decisionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markDocumentWithDecisionUsingPOST: function (docId, decisionRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'docId' is not null or undefined
                    if (docId === null || docId === undefined) {
                        throw new base_1.RequiredError('docId', 'Required parameter docId was null or undefined when calling markDocumentWithDecisionUsingPOST.');
                    }
                    // verify required parameter 'decisionRequest' is not null or undefined
                    if (decisionRequest === null || decisionRequest === undefined) {
                        throw new base_1.RequiredError('decisionRequest', 'Required parameter decisionRequest was null or undefined when calling markDocumentWithDecisionUsingPOST.');
                    }
                    localVarPath = "/api/v1/documents/{docId}/decision"
                        .replace("{" + "docId" + "}", encodeURIComponent(String(docId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof decisionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(decisionRequest !== undefined ? decisionRequest : {}) : (decisionRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary previewDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {PreviewDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewDocUsingPOST: function (docType, lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'docType' is not null or undefined
                    if (docType === null || docType === undefined) {
                        throw new base_1.RequiredError('docType', 'Required parameter docType was null or undefined when calling previewDocUsingPOST.');
                    }
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling previewDocUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling previewDocUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/documents/preview"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (docType !== undefined) {
                        localVarQueryParameter['doc_type'] = docType;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary uploadCopy
         * @param {string} lawfirmId lawfirmId
         * @param {PutDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCopyUsingPUT: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling uploadCopyUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling uploadCopyUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/documents"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmDocumentControllerApiAxiosParamCreator = LawfirmDocumentControllerApiAxiosParamCreator;
/**
 * LawfirmDocumentControllerApi - functional programming interface
 * @export
 */
var LawfirmDocumentControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary generateDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {GetDocumentsRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDocUsingPOST: function (docType, lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmDocumentControllerApiAxiosParamCreator)(configuration).generateDocUsingPOST(docType, lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getDocument
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentUsingGET: function (docType, lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmDocumentControllerApiAxiosParamCreator)(configuration).getDocumentUsingGET(docType, lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmCaseDocuments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseDocumentsUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmDocumentControllerApiAxiosParamCreator)(configuration).getLawfirmCaseDocumentsUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markDocumentWithDecision
         * @param {string} docId docId
         * @param {DocumentDecisionRequest} decisionRequest decisionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markDocumentWithDecisionUsingPOST: function (docId, decisionRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmDocumentControllerApiAxiosParamCreator)(configuration).markDocumentWithDecisionUsingPOST(docId, decisionRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary previewDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {PreviewDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewDocUsingPOST: function (docType, lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmDocumentControllerApiAxiosParamCreator)(configuration).previewDocUsingPOST(docType, lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary uploadCopy
         * @param {string} lawfirmId lawfirmId
         * @param {PutDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCopyUsingPUT: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmDocumentControllerApiAxiosParamCreator)(configuration).uploadCopyUsingPUT(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmDocumentControllerApiFp = LawfirmDocumentControllerApiFp;
/**
 * LawfirmDocumentControllerApi - factory interface
 * @export
 */
var LawfirmDocumentControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary generateDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {GetDocumentsRequest} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDocUsingPOST: function (docType, lawfirmId, request, options) {
            return (0, exports.LawfirmDocumentControllerApiFp)(configuration).generateDocUsingPOST(docType, lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getDocument
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentUsingGET: function (docType, lawfirmId, options) {
            return (0, exports.LawfirmDocumentControllerApiFp)(configuration).getDocumentUsingGET(docType, lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmCaseDocuments
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCaseDocumentsUsingGET: function (caseId, options) {
            return (0, exports.LawfirmDocumentControllerApiFp)(configuration).getLawfirmCaseDocumentsUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markDocumentWithDecision
         * @param {string} docId docId
         * @param {DocumentDecisionRequest} decisionRequest decisionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markDocumentWithDecisionUsingPOST: function (docId, decisionRequest, options) {
            return (0, exports.LawfirmDocumentControllerApiFp)(configuration).markDocumentWithDecisionUsingPOST(docId, decisionRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary previewDoc
         * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
         * @param {string} lawfirmId lawfirmId
         * @param {PreviewDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewDocUsingPOST: function (docType, lawfirmId, request, options) {
            return (0, exports.LawfirmDocumentControllerApiFp)(configuration).previewDocUsingPOST(docType, lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary uploadCopy
         * @param {string} lawfirmId lawfirmId
         * @param {PutDocumentRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCopyUsingPUT: function (lawfirmId, request, options) {
            return (0, exports.LawfirmDocumentControllerApiFp)(configuration).uploadCopyUsingPUT(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmDocumentControllerApiFactory = LawfirmDocumentControllerApiFactory;
/**
 * LawfirmDocumentControllerApi - object-oriented interface
 * @export
 * @class LawfirmDocumentControllerApi
 * @extends {BaseAPI}
 */
var LawfirmDocumentControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmDocumentControllerApi, _super);
    function LawfirmDocumentControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary generateDoc
     * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
     * @param {string} lawfirmId lawfirmId
     * @param {GetDocumentsRequest} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    LawfirmDocumentControllerApi.prototype.generateDocUsingPOST = function (docType, lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmDocumentControllerApiFp)(this.configuration).generateDocUsingPOST(docType, lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getDocument
     * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    LawfirmDocumentControllerApi.prototype.getDocumentUsingGET = function (docType, lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmDocumentControllerApiFp)(this.configuration).getDocumentUsingGET(docType, lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmCaseDocuments
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    LawfirmDocumentControllerApi.prototype.getLawfirmCaseDocumentsUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.LawfirmDocumentControllerApiFp)(this.configuration).getLawfirmCaseDocumentsUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markDocumentWithDecision
     * @param {string} docId docId
     * @param {DocumentDecisionRequest} decisionRequest decisionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    LawfirmDocumentControllerApi.prototype.markDocumentWithDecisionUsingPOST = function (docId, decisionRequest, options) {
        var _this = this;
        return (0, exports.LawfirmDocumentControllerApiFp)(this.configuration).markDocumentWithDecisionUsingPOST(docId, decisionRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary previewDoc
     * @param {'ENGAGEMENT_LETTER' | 'OTHER_DOCUMENT' | 'OTHER_IMAGE'} docType doc_type
     * @param {string} lawfirmId lawfirmId
     * @param {PreviewDocumentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    LawfirmDocumentControllerApi.prototype.previewDocUsingPOST = function (docType, lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmDocumentControllerApiFp)(this.configuration).previewDocUsingPOST(docType, lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary uploadCopy
     * @param {string} lawfirmId lawfirmId
     * @param {PutDocumentRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmDocumentControllerApi
     */
    LawfirmDocumentControllerApi.prototype.uploadCopyUsingPUT = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmDocumentControllerApiFp)(this.configuration).uploadCopyUsingPUT(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmDocumentControllerApi;
}(base_1.BaseAPI));
exports.LawfirmDocumentControllerApi = LawfirmDocumentControllerApi;
/**
 * LawfirmFeeCoverageControllerApi - axios parameter creator
 * @export
 */
var LawfirmFeeCoverageControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addCourtToCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {PostCourtCoverageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtToCoverageUsingPOST: function (lawfirmIdString, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmIdString' is not null or undefined
                    if (lawfirmIdString === null || lawfirmIdString === undefined) {
                        throw new base_1.RequiredError('lawfirmIdString', 'Required parameter lawfirmIdString was null or undefined when calling addCourtToCoverageUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addCourtToCoverageUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmIdString}/courts"
                        .replace("{" + "lawfirmIdString" + "}", encodeURIComponent(String(lawfirmIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary enableViolationsForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {EnableViolationsForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableViolationsForLawfirmUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling enableViolationsForLawfirmUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling enableViolationsForLawfirmUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/account-fees/enable-violations"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {boolean} [enabledFeesOnly] enabledFeesOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFeesUsingGET: function (lawfirmId, enabledFeesOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getAccountFeesUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/account-fees"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabledFeesOnly !== undefined) {
                        localVarQueryParameter['enabledFeesOnly'] = enabledFeesOnly;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageUsingGET: function (lawfirmIdString, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmIdString' is not null or undefined
                    if (lawfirmIdString === null || lawfirmIdString === undefined) {
                        throw new base_1.RequiredError('lawfirmIdString', 'Required parameter lawfirmIdString was null or undefined when calling getLawfirmCoverageUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmIdString}/coverage"
                        .replace("{" + "lawfirmIdString" + "}", encodeURIComponent(String(lawfirmIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmFeeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeeCoverageUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmFeeCoverageUsingGET.');
                    }
                    localVarPath = "/api/v2/lawfirms/{lawfirmId}/coverage"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary removeAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
         * @param {boolean} [isPermitted] isPermitted
         * @param {number} [violationId] violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFeesUsingDELETE: function (lawfirmId, classification, isPermitted, violationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling removeAccountFeesUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/account-fees"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (classification !== undefined) {
                        localVarQueryParameter['classification'] = classification;
                    }
                    if (isPermitted !== undefined) {
                        localVarQueryParameter['isPermitted'] = isPermitted;
                    }
                    if (violationId !== undefined) {
                        localVarQueryParameter['violationId'] = violationId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary removeCourts
         * @param {Array<number>} courtsToRemove courtsToRemove
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCourtsUsingDELETE: function (courtsToRemove, lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'courtsToRemove' is not null or undefined
                    if (courtsToRemove === null || courtsToRemove === undefined) {
                        throw new base_1.RequiredError('courtsToRemove', 'Required parameter courtsToRemove was null or undefined when calling removeCourtsUsingDELETE.');
                    }
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling removeCourtsUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/courts"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (courtsToRemove) {
                        localVarQueryParameter['courtsToRemove'] = courtsToRemove;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary removeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCoverageUsingDELETE: function (lawfirmId, courtsToRemove, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling removeCoverageUsingDELETE.');
                    }
                    // verify required parameter 'courtsToRemove' is not null or undefined
                    if (courtsToRemove === null || courtsToRemove === undefined) {
                        throw new base_1.RequiredError('courtsToRemove', 'Required parameter courtsToRemove was null or undefined when calling removeCoverageUsingDELETE.');
                    }
                    localVarPath = "/api/v2/lawfirms/{lawfirmId}/courts"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof courtsToRemove !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(courtsToRemove !== undefined ? courtsToRemove : {}) : (courtsToRemove || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary resetFeesForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {ResetFeesForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetFeesForLawfirmUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling resetFeesForLawfirmUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling resetFeesForLawfirmUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/account-fees/reset"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary saveAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {AccountLevelFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountFeesUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling saveAccountFeesUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling saveAccountFeesUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/account-fees"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmFeeCoverageControllerApiAxiosParamCreator = LawfirmFeeCoverageControllerApiAxiosParamCreator;
/**
 * LawfirmFeeCoverageControllerApi - functional programming interface
 * @export
 */
var LawfirmFeeCoverageControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addCourtToCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {PostCourtCoverageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtToCoverageUsingPOST: function (lawfirmIdString, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).addCourtToCoverageUsingPOST(lawfirmIdString, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary enableViolationsForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {EnableViolationsForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableViolationsForLawfirmUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).enableViolationsForLawfirmUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {boolean} [enabledFeesOnly] enabledFeesOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFeesUsingGET: function (lawfirmId, enabledFeesOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).getAccountFeesUsingGET(lawfirmId, enabledFeesOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageUsingGET: function (lawfirmIdString, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).getLawfirmCoverageUsingGET(lawfirmIdString, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmFeeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeeCoverageUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).getLawfirmFeeCoverageUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary removeAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
         * @param {boolean} [isPermitted] isPermitted
         * @param {number} [violationId] violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFeesUsingDELETE: function (lawfirmId, classification, isPermitted, violationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).removeAccountFeesUsingDELETE(lawfirmId, classification, isPermitted, violationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary removeCourts
         * @param {Array<number>} courtsToRemove courtsToRemove
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCourtsUsingDELETE: function (courtsToRemove, lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).removeCourtsUsingDELETE(courtsToRemove, lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary removeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCoverageUsingDELETE: function (lawfirmId, courtsToRemove, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).removeCoverageUsingDELETE(lawfirmId, courtsToRemove, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary resetFeesForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {ResetFeesForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetFeesForLawfirmUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).resetFeesForLawfirmUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary saveAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {AccountLevelFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountFeesUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmFeeCoverageControllerApiAxiosParamCreator)(configuration).saveAccountFeesUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmFeeCoverageControllerApiFp = LawfirmFeeCoverageControllerApiFp;
/**
 * LawfirmFeeCoverageControllerApi - factory interface
 * @export
 */
var LawfirmFeeCoverageControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addCourtToCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {PostCourtCoverageRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourtToCoverageUsingPOST: function (lawfirmIdString, request, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).addCourtToCoverageUsingPOST(lawfirmIdString, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary enableViolationsForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {EnableViolationsForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableViolationsForLawfirmUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).enableViolationsForLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {boolean} [enabledFeesOnly] enabledFeesOnly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFeesUsingGET: function (lawfirmId, enabledFeesOnly, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).getAccountFeesUsingGET(lawfirmId, enabledFeesOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmCoverage
         * @param {string} lawfirmIdString lawfirmIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageUsingGET: function (lawfirmIdString, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).getLawfirmCoverageUsingGET(lawfirmIdString, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmFeeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeeCoverageUsingGET: function (lawfirmId, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).getLawfirmFeeCoverageUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary removeAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
         * @param {boolean} [isPermitted] isPermitted
         * @param {number} [violationId] violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccountFeesUsingDELETE: function (lawfirmId, classification, isPermitted, violationId, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).removeAccountFeesUsingDELETE(lawfirmId, classification, isPermitted, violationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary removeCourts
         * @param {Array<number>} courtsToRemove courtsToRemove
         * @param {string} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCourtsUsingDELETE: function (courtsToRemove, lawfirmId, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).removeCourtsUsingDELETE(courtsToRemove, lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary removeCoverage
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCoverageUsingDELETE: function (lawfirmId, courtsToRemove, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).removeCoverageUsingDELETE(lawfirmId, courtsToRemove, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary resetFeesForLawfirm
         * @param {string} lawfirmId lawfirmId
         * @param {ResetFeesForLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetFeesForLawfirmUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).resetFeesForLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary saveAccountFees
         * @param {string} lawfirmId lawfirmId
         * @param {AccountLevelFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountFeesUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmFeeCoverageControllerApiFp)(configuration).saveAccountFeesUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmFeeCoverageControllerApiFactory = LawfirmFeeCoverageControllerApiFactory;
/**
 * LawfirmFeeCoverageControllerApi - object-oriented interface
 * @export
 * @class LawfirmFeeCoverageControllerApi
 * @extends {BaseAPI}
 */
var LawfirmFeeCoverageControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmFeeCoverageControllerApi, _super);
    function LawfirmFeeCoverageControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addCourtToCoverage
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {PostCourtCoverageRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.addCourtToCoverageUsingPOST = function (lawfirmIdString, request, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).addCourtToCoverageUsingPOST(lawfirmIdString, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary enableViolationsForLawfirm
     * @param {string} lawfirmId lawfirmId
     * @param {EnableViolationsForLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.enableViolationsForLawfirmUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).enableViolationsForLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getAccountFees
     * @param {string} lawfirmId lawfirmId
     * @param {boolean} [enabledFeesOnly] enabledFeesOnly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.getAccountFeesUsingGET = function (lawfirmId, enabledFeesOnly, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).getAccountFeesUsingGET(lawfirmId, enabledFeesOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmCoverage
     * @param {string} lawfirmIdString lawfirmIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.getLawfirmCoverageUsingGET = function (lawfirmIdString, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).getLawfirmCoverageUsingGET(lawfirmIdString, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmFeeCoverage
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.getLawfirmFeeCoverageUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).getLawfirmFeeCoverageUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary removeAccountFees
     * @param {string} lawfirmId lawfirmId
     * @param {'CLASS_1_FELONY' | 'CLASS_1_MISDEMEANOR' | 'CLASS_2_FELONY' | 'CLASS_2_MISDEMEANOR' | 'CLASS_3_FELONY' | 'CLASS_3_MISDEMEANOR' | 'CLASS_4_FELONY' | 'CLASS_4_MISDEMEANOR' | 'CLASS_5_FELONY' | 'CLASS_6_FELONY' | 'CLASS_A1_MISDEMEANOR' | 'CLASS_A_FELONY' | 'CLASS_A_INFRACTION' | 'CLASS_A_MISDEMEANOR' | 'CLASS_A_VIOLATION' | 'CLASS_B_FELONY' | 'CLASS_B_INFRACTION' | 'CLASS_B_MISDEMEANOR' | 'CLASS_B_VIOLATION' | 'CLASS_C_FELONY' | 'CLASS_C_MISDEMEANOR' | 'CLASS_C_VIOLATION' | 'CLASS_D_FELONY' | 'CLASS_D_MISDEMEANOR' | 'CLASS_D_VIOLATION' | 'CLASS_E_FELONY' | 'CLASS_F_FELONY' | 'CLASS_H_FELONY' | 'DISORDERLY_PERSONS_OFFENSE' | 'FELONY' | 'FELONY_1ST_DEGREE' | 'FELONY_2ND_DEGREE' | 'FELONY_3RD_DEGREE' | 'FELONY_4TH_DEGREE' | 'FELONY_5TH_DEGREE' | 'GROSS_MISDEMEANOR' | 'HIGH_AND_AGGRAVATED_MISDEMEANOR' | 'INFRACTION' | 'MINOR_MISDEMEANOR' | 'MISDEMEANOR' | 'MISDEMEANOR_1ST_DEGREE' | 'MISDEMEANOR_2ND_DEGREE' | 'MISDEMEANOR_3RD_DEGREE' | 'MISDEMEANOR_4TH_DEGREE' | 'MISDEMEANOR_WITH_REFUND' | 'NON_MOVING' | 'NON_REPORTABLE' | 'PETTY_MISDEMEANOR' | 'QUASI_CRIMINAL' | 'SUMMARY_OFFENSE' | 'SUMMARY_OFFENSE_NO_REFUND' | 'WOBBLER_TO_FELONY' | 'WOBBLER_TO_MISDEMEANOR'} [classification] classification
     * @param {boolean} [isPermitted] isPermitted
     * @param {number} [violationId] violationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.removeAccountFeesUsingDELETE = function (lawfirmId, classification, isPermitted, violationId, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).removeAccountFeesUsingDELETE(lawfirmId, classification, isPermitted, violationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary removeCourts
     * @param {Array<number>} courtsToRemove courtsToRemove
     * @param {string} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.removeCourtsUsingDELETE = function (courtsToRemove, lawfirmId, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).removeCourtsUsingDELETE(courtsToRemove, lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary removeCoverage
     * @param {string} lawfirmId lawfirmId
     * @param {RemoveCoverageRequest} courtsToRemove courtsToRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.removeCoverageUsingDELETE = function (lawfirmId, courtsToRemove, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).removeCoverageUsingDELETE(lawfirmId, courtsToRemove, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary resetFeesForLawfirm
     * @param {string} lawfirmId lawfirmId
     * @param {ResetFeesForLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.resetFeesForLawfirmUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).resetFeesForLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary saveAccountFees
     * @param {string} lawfirmId lawfirmId
     * @param {AccountLevelFeeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmFeeCoverageControllerApi
     */
    LawfirmFeeCoverageControllerApi.prototype.saveAccountFeesUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmFeeCoverageControllerApiFp)(this.configuration).saveAccountFeesUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmFeeCoverageControllerApi;
}(base_1.BaseAPI));
exports.LawfirmFeeCoverageControllerApi = LawfirmFeeCoverageControllerApi;
/**
 * LawfirmPaymentModelControllerApi - axios parameter creator
 * @export
 */
var LawfirmPaymentModelControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getPaymentModelTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentModelTypesUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/payment-models";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmPaymentModelControllerApiAxiosParamCreator = LawfirmPaymentModelControllerApiAxiosParamCreator;
/**
 * LawfirmPaymentModelControllerApi - functional programming interface
 * @export
 */
var LawfirmPaymentModelControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getPaymentModelTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentModelTypesUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmPaymentModelControllerApiAxiosParamCreator)(configuration).getPaymentModelTypesUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmPaymentModelControllerApiFp = LawfirmPaymentModelControllerApiFp;
/**
 * LawfirmPaymentModelControllerApi - factory interface
 * @export
 */
var LawfirmPaymentModelControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getPaymentModelTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentModelTypesUsingGET: function (options) {
            return (0, exports.LawfirmPaymentModelControllerApiFp)(configuration).getPaymentModelTypesUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmPaymentModelControllerApiFactory = LawfirmPaymentModelControllerApiFactory;
/**
 * LawfirmPaymentModelControllerApi - object-oriented interface
 * @export
 * @class LawfirmPaymentModelControllerApi
 * @extends {BaseAPI}
 */
var LawfirmPaymentModelControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmPaymentModelControllerApi, _super);
    function LawfirmPaymentModelControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getPaymentModelTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmPaymentModelControllerApi
     */
    LawfirmPaymentModelControllerApi.prototype.getPaymentModelTypesUsingGET = function (options) {
        var _this = this;
        return (0, exports.LawfirmPaymentModelControllerApiFp)(this.configuration).getPaymentModelTypesUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmPaymentModelControllerApi;
}(base_1.BaseAPI));
exports.LawfirmPaymentModelControllerApi = LawfirmPaymentModelControllerApi;
/**
 * LawfirmRatesControllerApi - axios parameter creator
 * @export
 */
var LawfirmRatesControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getActiveRatesByArea
         * @param {GeoRatesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRatesByAreaUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getActiveRatesByAreaUsingPOST.');
                    }
                    localVarPath = "/api/v1/rates";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmRatesControllerApiAxiosParamCreator = LawfirmRatesControllerApiAxiosParamCreator;
/**
 * LawfirmRatesControllerApi - functional programming interface
 * @export
 */
var LawfirmRatesControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getActiveRatesByArea
         * @param {GeoRatesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRatesByAreaUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmRatesControllerApiAxiosParamCreator)(configuration).getActiveRatesByAreaUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmRatesControllerApiFp = LawfirmRatesControllerApiFp;
/**
 * LawfirmRatesControllerApi - factory interface
 * @export
 */
var LawfirmRatesControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getActiveRatesByArea
         * @param {GeoRatesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRatesByAreaUsingPOST: function (request, options) {
            return (0, exports.LawfirmRatesControllerApiFp)(configuration).getActiveRatesByAreaUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmRatesControllerApiFactory = LawfirmRatesControllerApiFactory;
/**
 * LawfirmRatesControllerApi - object-oriented interface
 * @export
 * @class LawfirmRatesControllerApi
 * @extends {BaseAPI}
 */
var LawfirmRatesControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmRatesControllerApi, _super);
    function LawfirmRatesControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getActiveRatesByArea
     * @param {GeoRatesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmRatesControllerApi
     */
    LawfirmRatesControllerApi.prototype.getActiveRatesByAreaUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.LawfirmRatesControllerApiFp)(this.configuration).getActiveRatesByAreaUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmRatesControllerApi;
}(base_1.BaseAPI));
exports.LawfirmRatesControllerApi = LawfirmRatesControllerApi;
/**
 * LawfirmStorefrontControllerApi - axios parameter creator
 * @export
 */
var LawfirmStorefrontControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary listLawfirmStorefronts
         * @param {number} [page] page
         * @param {string} [regionCode] regionCode
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmStorefrontsUsingGET: function (page, regionCode, size, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/lawfirm-storefronts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    if (regionCode !== undefined) {
                        localVarQueryParameter['regionCode'] = regionCode;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter['size'] = size;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmStorefrontControllerApiAxiosParamCreator = LawfirmStorefrontControllerApiAxiosParamCreator;
/**
 * LawfirmStorefrontControllerApi - functional programming interface
 * @export
 */
var LawfirmStorefrontControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary listLawfirmStorefronts
         * @param {number} [page] page
         * @param {string} [regionCode] regionCode
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmStorefrontsUsingGET: function (page, regionCode, size, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmStorefrontControllerApiAxiosParamCreator)(configuration).listLawfirmStorefrontsUsingGET(page, regionCode, size, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmStorefrontControllerApiFp = LawfirmStorefrontControllerApiFp;
/**
 * LawfirmStorefrontControllerApi - factory interface
 * @export
 */
var LawfirmStorefrontControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary listLawfirmStorefronts
         * @param {number} [page] page
         * @param {string} [regionCode] regionCode
         * @param {number} [size] size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmStorefrontsUsingGET: function (page, regionCode, size, options) {
            return (0, exports.LawfirmStorefrontControllerApiFp)(configuration).listLawfirmStorefrontsUsingGET(page, regionCode, size, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmStorefrontControllerApiFactory = LawfirmStorefrontControllerApiFactory;
/**
 * LawfirmStorefrontControllerApi - object-oriented interface
 * @export
 * @class LawfirmStorefrontControllerApi
 * @extends {BaseAPI}
 */
var LawfirmStorefrontControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmStorefrontControllerApi, _super);
    function LawfirmStorefrontControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary listLawfirmStorefronts
     * @param {number} [page] page
     * @param {string} [regionCode] regionCode
     * @param {number} [size] size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmStorefrontControllerApi
     */
    LawfirmStorefrontControllerApi.prototype.listLawfirmStorefrontsUsingGET = function (page, regionCode, size, options) {
        var _this = this;
        return (0, exports.LawfirmStorefrontControllerApiFp)(this.configuration).listLawfirmStorefrontsUsingGET(page, regionCode, size, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmStorefrontControllerApi;
}(base_1.BaseAPI));
exports.LawfirmStorefrontControllerApi = LawfirmStorefrontControllerApi;
/**
 * LawfirmSurchargeControllerApi - axios parameter creator
 * @export
 */
var LawfirmSurchargeControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary listLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmSurchargesUsingGET: function (lawfirmId, featureType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling listLawfirmSurchargesUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/surcharges"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (featureType !== undefined) {
                        localVarQueryParameter['featureType'] = featureType;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary removeSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveLawfirmSurchargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSurchargesUsingDELETE: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling removeSurchargesUsingDELETE.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling removeSurchargesUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/surcharges"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary saveLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {SaveLawfirmSurchargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawfirmSurchargesUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling saveLawfirmSurchargesUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling saveLawfirmSurchargesUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/surcharges"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmSurchargeControllerApiAxiosParamCreator = LawfirmSurchargeControllerApiAxiosParamCreator;
/**
 * LawfirmSurchargeControllerApi - functional programming interface
 * @export
 */
var LawfirmSurchargeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary listLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmSurchargesUsingGET: function (lawfirmId, featureType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmSurchargeControllerApiAxiosParamCreator)(configuration).listLawfirmSurchargesUsingGET(lawfirmId, featureType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary removeSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveLawfirmSurchargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSurchargesUsingDELETE: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmSurchargeControllerApiAxiosParamCreator)(configuration).removeSurchargesUsingDELETE(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary saveLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {SaveLawfirmSurchargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawfirmSurchargesUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmSurchargeControllerApiAxiosParamCreator)(configuration).saveLawfirmSurchargesUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmSurchargeControllerApiFp = LawfirmSurchargeControllerApiFp;
/**
 * LawfirmSurchargeControllerApi - factory interface
 * @export
 */
var LawfirmSurchargeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary listLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLawfirmSurchargesUsingGET: function (lawfirmId, featureType, options) {
            return (0, exports.LawfirmSurchargeControllerApiFp)(configuration).listLawfirmSurchargesUsingGET(lawfirmId, featureType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary removeSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {RemoveLawfirmSurchargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSurchargesUsingDELETE: function (lawfirmId, request, options) {
            return (0, exports.LawfirmSurchargeControllerApiFp)(configuration).removeSurchargesUsingDELETE(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary saveLawfirmSurcharges
         * @param {string} lawfirmId lawfirmId
         * @param {SaveLawfirmSurchargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawfirmSurchargesUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmSurchargeControllerApiFp)(configuration).saveLawfirmSurchargesUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmSurchargeControllerApiFactory = LawfirmSurchargeControllerApiFactory;
/**
 * LawfirmSurchargeControllerApi - object-oriented interface
 * @export
 * @class LawfirmSurchargeControllerApi
 * @extends {BaseAPI}
 */
var LawfirmSurchargeControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmSurchargeControllerApi, _super);
    function LawfirmSurchargeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary listLawfirmSurcharges
     * @param {string} lawfirmId lawfirmId
     * @param {'BLACK_BOX' | 'STATE_PAGE' | 'STOREFRONT'} [featureType] featureType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmSurchargeControllerApi
     */
    LawfirmSurchargeControllerApi.prototype.listLawfirmSurchargesUsingGET = function (lawfirmId, featureType, options) {
        var _this = this;
        return (0, exports.LawfirmSurchargeControllerApiFp)(this.configuration).listLawfirmSurchargesUsingGET(lawfirmId, featureType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary removeSurcharges
     * @param {string} lawfirmId lawfirmId
     * @param {RemoveLawfirmSurchargeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmSurchargeControllerApi
     */
    LawfirmSurchargeControllerApi.prototype.removeSurchargesUsingDELETE = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmSurchargeControllerApiFp)(this.configuration).removeSurchargesUsingDELETE(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary saveLawfirmSurcharges
     * @param {string} lawfirmId lawfirmId
     * @param {SaveLawfirmSurchargesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmSurchargeControllerApi
     */
    LawfirmSurchargeControllerApi.prototype.saveLawfirmSurchargesUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmSurchargeControllerApiFp)(this.configuration).saveLawfirmSurchargesUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmSurchargeControllerApi;
}(base_1.BaseAPI));
exports.LawfirmSurchargeControllerApi = LawfirmSurchargeControllerApi;
/**
 * LawfirmTransactionsControllerApi - axios parameter creator
 * @export
 */
var LawfirmTransactionsControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary chargeFeeToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {ChargeFeeToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeFeeToLawfirmUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling chargeFeeToLawfirmUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/debits"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary debitLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debitLawfirmFeeUsingPOST: function (lawfirmFeeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmFeeId' is not null or undefined
                    if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                        throw new base_1.RequiredError('lawfirmFeeId', 'Required parameter lawfirmFeeId was null or undefined when calling debitLawfirmFeeUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirm-fees/{lawfirmFeeId}/debit"
                        .replace("{" + "lawfirmFeeId" + "}", encodeURIComponent(String(lawfirmFeeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmFeeRecord
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmFeeRecordUsingDELETE: function (lawfirmFeeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmFeeId' is not null or undefined
                    if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                        throw new base_1.RequiredError('lawfirmFeeId', 'Required parameter lawfirmFeeId was null or undefined when calling deleteLawfirmFeeRecordUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/fees/{lawfirmFeeId}"
                        .replace("{" + "lawfirmFeeId" + "}", encodeURIComponent(String(lawfirmFeeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmPayoutRecord
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmPayoutRecordUsingDELETE: function (lawfirmPayoutId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmPayoutId' is not null or undefined
                    if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                        throw new base_1.RequiredError('lawfirmPayoutId', 'Required parameter lawfirmPayoutId was null or undefined when calling deleteLawfirmPayoutRecordUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/payouts/{lawfirmPayoutId}"
                        .replace("{" + "lawfirmPayoutId" + "}", encodeURIComponent(String(lawfirmPayoutId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary executeLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeLawfirmPayoutUsingPOST: function (lawfirmPayoutId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmPayoutId' is not null or undefined
                    if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                        throw new base_1.RequiredError('lawfirmPayoutId', 'Required parameter lawfirmPayoutId was null or undefined when calling executeLawfirmPayoutUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirm-payouts/{lawfirmPayoutId}/transfer"
                        .replace("{" + "lawfirmPayoutId" + "}", encodeURIComponent(String(lawfirmPayoutId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmFees
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeesUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getLawfirmFeesUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/lawfirm-fees"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmFinancialTransactions
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFinancialTransactionsUsingGET: function (lawfirmId, length, page, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmFinancialTransactionsUsingGET.');
                    }
                    localVarPath = "/api/v2/lawfirms/{lawfirmId}/transactions"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (length !== undefined) {
                        localVarQueryParameter['length'] = length;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmPayoutReversals
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutReversalsUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getLawfirmPayoutReversalsUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/reversals"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmPayouts
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutsUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getLawfirmPayoutsUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/payouts"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmTransactionsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmTransactionsForCaseUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getLawfirmTransactionsForCaseUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/lawfirm-transactions"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary refundLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {RefundLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundLawfirmFeeUsingPOST: function (lawfirmFeeId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmFeeId' is not null or undefined
                    if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                        throw new base_1.RequiredError('lawfirmFeeId', 'Required parameter lawfirmFeeId was null or undefined when calling refundLawfirmFeeUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling refundLawfirmFeeUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirm-fee/{lawfirmFeeId}/refund"
                        .replace("{" + "lawfirmFeeId" + "}", encodeURIComponent(String(lawfirmFeeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary reverseLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {ReverseLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseLawfirmPayoutUsingPOST: function (lawfirmPayoutId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmPayoutId' is not null or undefined
                    if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                        throw new base_1.RequiredError('lawfirmPayoutId', 'Required parameter lawfirmPayoutId was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling reverseLawfirmPayoutUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirm-payouts/{lawfirmPayoutId}/reverse"
                        .replace("{" + "lawfirmPayoutId" + "}", encodeURIComponent(String(lawfirmPayoutId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendPayoutToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {SendPayoutToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPayoutToLawfirmUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling sendPayoutToLawfirmUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/payouts"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {UpdateLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmFeeUsingPUT: function (lawfirmFeeId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmFeeId' is not null or undefined
                    if (lawfirmFeeId === null || lawfirmFeeId === undefined) {
                        throw new base_1.RequiredError('lawfirmFeeId', 'Required parameter lawfirmFeeId was null or undefined when calling updateLawfirmFeeUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateLawfirmFeeUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirm-fees/{lawfirmFeeId}"
                        .replace("{" + "lawfirmFeeId" + "}", encodeURIComponent(String(lawfirmFeeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {UpdateLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmPayoutUsingPUT: function (lawfirmPayoutId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmPayoutId' is not null or undefined
                    if (lawfirmPayoutId === null || lawfirmPayoutId === undefined) {
                        throw new base_1.RequiredError('lawfirmPayoutId', 'Required parameter lawfirmPayoutId was null or undefined when calling updateLawfirmPayoutUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateLawfirmPayoutUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirm-payouts/{lawfirmPayoutId}"
                        .replace("{" + "lawfirmPayoutId" + "}", encodeURIComponent(String(lawfirmPayoutId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawfirmTransactionsControllerApiAxiosParamCreator = LawfirmTransactionsControllerApiAxiosParamCreator;
/**
 * LawfirmTransactionsControllerApi - functional programming interface
 * @export
 */
var LawfirmTransactionsControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary chargeFeeToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {ChargeFeeToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeFeeToLawfirmUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).chargeFeeToLawfirmUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary debitLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debitLawfirmFeeUsingPOST: function (lawfirmFeeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).debitLawfirmFeeUsingPOST(lawfirmFeeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmFeeRecord
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmFeeRecordUsingDELETE: function (lawfirmFeeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteLawfirmPayoutRecord
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmPayoutRecordUsingDELETE: function (lawfirmPayoutId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary executeLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeLawfirmPayoutUsingPOST: function (lawfirmPayoutId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).executeLawfirmPayoutUsingPOST(lawfirmPayoutId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmFees
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeesUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).getLawfirmFeesUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmFinancialTransactions
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFinancialTransactionsUsingGET: function (lawfirmId, length, page, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).getLawfirmFinancialTransactionsUsingGET(lawfirmId, length, page, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmPayoutReversals
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutReversalsUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).getLawfirmPayoutReversalsUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmPayouts
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutsUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).getLawfirmPayoutsUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmTransactionsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmTransactionsForCaseUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).getLawfirmTransactionsForCaseUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary refundLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {RefundLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundLawfirmFeeUsingPOST: function (lawfirmFeeId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).refundLawfirmFeeUsingPOST(lawfirmFeeId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary reverseLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {ReverseLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseLawfirmPayoutUsingPOST: function (lawfirmPayoutId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).reverseLawfirmPayoutUsingPOST(lawfirmPayoutId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendPayoutToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {SendPayoutToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPayoutToLawfirmUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).sendPayoutToLawfirmUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {UpdateLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmFeeUsingPUT: function (lawfirmFeeId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).updateLawfirmFeeUsingPUT(lawfirmFeeId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {UpdateLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmPayoutUsingPUT: function (lawfirmPayoutId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawfirmTransactionsControllerApiAxiosParamCreator)(configuration).updateLawfirmPayoutUsingPUT(lawfirmPayoutId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawfirmTransactionsControllerApiFp = LawfirmTransactionsControllerApiFp;
/**
 * LawfirmTransactionsControllerApi - factory interface
 * @export
 */
var LawfirmTransactionsControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary chargeFeeToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {ChargeFeeToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeFeeToLawfirmUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).chargeFeeToLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary debitLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debitLawfirmFeeUsingPOST: function (lawfirmFeeId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).debitLawfirmFeeUsingPOST(lawfirmFeeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteLawfirmFeeRecord
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmFeeRecordUsingDELETE: function (lawfirmFeeId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteLawfirmPayoutRecord
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawfirmPayoutRecordUsingDELETE: function (lawfirmPayoutId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary executeLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeLawfirmPayoutUsingPOST: function (lawfirmPayoutId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).executeLawfirmPayoutUsingPOST(lawfirmPayoutId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmFees
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFeesUsingGET: function (caseId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).getLawfirmFeesUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmFinancialTransactions
         * @param {number} lawfirmId lawfirmId
         * @param {number} [length] length
         * @param {number} [page] page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmFinancialTransactionsUsingGET: function (lawfirmId, length, page, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).getLawfirmFinancialTransactionsUsingGET(lawfirmId, length, page, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmPayoutReversals
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutReversalsUsingGET: function (caseId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).getLawfirmPayoutReversalsUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmPayouts
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPayoutsUsingGET: function (caseId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).getLawfirmPayoutsUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmTransactionsForCase
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmTransactionsForCaseUsingGET: function (caseId, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).getLawfirmTransactionsForCaseUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary refundLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {RefundLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundLawfirmFeeUsingPOST: function (lawfirmFeeId, request, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).refundLawfirmFeeUsingPOST(lawfirmFeeId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary reverseLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {ReverseLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseLawfirmPayoutUsingPOST: function (lawfirmPayoutId, request, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).reverseLawfirmPayoutUsingPOST(lawfirmPayoutId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendPayoutToLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {SendPayoutToLawfirmRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPayoutToLawfirmUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).sendPayoutToLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateLawfirmFee
         * @param {string} lawfirmFeeId lawfirmFeeId
         * @param {UpdateLawfirmFeeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmFeeUsingPUT: function (lawfirmFeeId, request, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).updateLawfirmFeeUsingPUT(lawfirmFeeId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateLawfirmPayout
         * @param {string} lawfirmPayoutId lawfirmPayoutId
         * @param {UpdateLawfirmPayoutRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLawfirmPayoutUsingPUT: function (lawfirmPayoutId, request, options) {
            return (0, exports.LawfirmTransactionsControllerApiFp)(configuration).updateLawfirmPayoutUsingPUT(lawfirmPayoutId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawfirmTransactionsControllerApiFactory = LawfirmTransactionsControllerApiFactory;
/**
 * LawfirmTransactionsControllerApi - object-oriented interface
 * @export
 * @class LawfirmTransactionsControllerApi
 * @extends {BaseAPI}
 */
var LawfirmTransactionsControllerApi = /** @class */ (function (_super) {
    __extends(LawfirmTransactionsControllerApi, _super);
    function LawfirmTransactionsControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary chargeFeeToLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {ChargeFeeToLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.chargeFeeToLawfirmUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).chargeFeeToLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary debitLawfirmFee
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.debitLawfirmFeeUsingPOST = function (lawfirmFeeId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).debitLawfirmFeeUsingPOST(lawfirmFeeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteLawfirmFeeRecord
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.deleteLawfirmFeeRecordUsingDELETE = function (lawfirmFeeId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).deleteLawfirmFeeRecordUsingDELETE(lawfirmFeeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteLawfirmPayoutRecord
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.deleteLawfirmPayoutRecordUsingDELETE = function (lawfirmPayoutId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).deleteLawfirmPayoutRecordUsingDELETE(lawfirmPayoutId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary executeLawfirmPayout
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.executeLawfirmPayoutUsingPOST = function (lawfirmPayoutId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).executeLawfirmPayoutUsingPOST(lawfirmPayoutId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmFees
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.getLawfirmFeesUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).getLawfirmFeesUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmFinancialTransactions
     * @param {number} lawfirmId lawfirmId
     * @param {number} [length] length
     * @param {number} [page] page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.getLawfirmFinancialTransactionsUsingGET = function (lawfirmId, length, page, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).getLawfirmFinancialTransactionsUsingGET(lawfirmId, length, page, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmPayoutReversals
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.getLawfirmPayoutReversalsUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).getLawfirmPayoutReversalsUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmPayouts
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.getLawfirmPayoutsUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).getLawfirmPayoutsUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmTransactionsForCase
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.getLawfirmTransactionsForCaseUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).getLawfirmTransactionsForCaseUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary refundLawfirmFee
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {RefundLawfirmFeeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.refundLawfirmFeeUsingPOST = function (lawfirmFeeId, request, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).refundLawfirmFeeUsingPOST(lawfirmFeeId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary reverseLawfirmPayout
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {ReverseLawfirmPayoutRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.reverseLawfirmPayoutUsingPOST = function (lawfirmPayoutId, request, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).reverseLawfirmPayoutUsingPOST(lawfirmPayoutId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendPayoutToLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {SendPayoutToLawfirmRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.sendPayoutToLawfirmUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).sendPayoutToLawfirmUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateLawfirmFee
     * @param {string} lawfirmFeeId lawfirmFeeId
     * @param {UpdateLawfirmFeeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.updateLawfirmFeeUsingPUT = function (lawfirmFeeId, request, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).updateLawfirmFeeUsingPUT(lawfirmFeeId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateLawfirmPayout
     * @param {string} lawfirmPayoutId lawfirmPayoutId
     * @param {UpdateLawfirmPayoutRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawfirmTransactionsControllerApi
     */
    LawfirmTransactionsControllerApi.prototype.updateLawfirmPayoutUsingPUT = function (lawfirmPayoutId, request, options) {
        var _this = this;
        return (0, exports.LawfirmTransactionsControllerApiFp)(this.configuration).updateLawfirmPayoutUsingPUT(lawfirmPayoutId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawfirmTransactionsControllerApi;
}(base_1.BaseAPI));
exports.LawfirmTransactionsControllerApi = LawfirmTransactionsControllerApi;
/**
 * LawyerControllerApi - axios parameter creator
 * @export
 */
var LawyerControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary deleteLawyerLicenses
         * @param {string} userId userId
         * @param {DeleteLawyerLicenseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawyerLicensesUsingDELETE: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawyers/{userId}/licenses"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawyerEmailGuesses
         * @param {number} lawyerId lawyerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawyerEmailGuessesUsingGET: function (lawyerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawyerId' is not null or undefined
                    if (lawyerId === null || lawyerId === undefined) {
                        throw new base_1.RequiredError('lawyerId', 'Required parameter lawyerId was null or undefined when calling getLawyerEmailGuessesUsingGET.');
                    }
                    localVarPath = "/api/v1/lawyers/{lawyerId}/email-guesses"
                        .replace("{" + "lawyerId" + "}", encodeURIComponent(String(lawyerId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary saveLawyerLead
         * @param {SaveLawyerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLeadUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling saveLawyerLeadUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawyers/lead";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary saveLawyerLicenses
         * @param {string} userId userId
         * @param {SaveLawyerLicensesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLicensesUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling saveLawyerLicensesUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling saveLawyerLicensesUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawyers/{userId}/licenses"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary upsertLawyer
         * @param {SaveLawyerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertLawyerUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling upsertLawyerUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawyers";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LawyerControllerApiAxiosParamCreator = LawyerControllerApiAxiosParamCreator;
/**
 * LawyerControllerApi - functional programming interface
 * @export
 */
var LawyerControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary deleteLawyerLicenses
         * @param {string} userId userId
         * @param {DeleteLawyerLicenseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawyerLicensesUsingDELETE: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawyerControllerApiAxiosParamCreator)(configuration).deleteLawyerLicensesUsingDELETE(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawyerEmailGuesses
         * @param {number} lawyerId lawyerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawyerEmailGuessesUsingGET: function (lawyerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawyerControllerApiAxiosParamCreator)(configuration).getLawyerEmailGuessesUsingGET(lawyerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary saveLawyerLead
         * @param {SaveLawyerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLeadUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawyerControllerApiAxiosParamCreator)(configuration).saveLawyerLeadUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary saveLawyerLicenses
         * @param {string} userId userId
         * @param {SaveLawyerLicensesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLicensesUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawyerControllerApiAxiosParamCreator)(configuration).saveLawyerLicensesUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary upsertLawyer
         * @param {SaveLawyerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertLawyerUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LawyerControllerApiAxiosParamCreator)(configuration).upsertLawyerUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LawyerControllerApiFp = LawyerControllerApiFp;
/**
 * LawyerControllerApi - factory interface
 * @export
 */
var LawyerControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary deleteLawyerLicenses
         * @param {string} userId userId
         * @param {DeleteLawyerLicenseRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLawyerLicensesUsingDELETE: function (userId, request, options) {
            return (0, exports.LawyerControllerApiFp)(configuration).deleteLawyerLicensesUsingDELETE(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawyerEmailGuesses
         * @param {number} lawyerId lawyerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawyerEmailGuessesUsingGET: function (lawyerId, options) {
            return (0, exports.LawyerControllerApiFp)(configuration).getLawyerEmailGuessesUsingGET(lawyerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary saveLawyerLead
         * @param {SaveLawyerLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLeadUsingPOST: function (request, options) {
            return (0, exports.LawyerControllerApiFp)(configuration).saveLawyerLeadUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary saveLawyerLicenses
         * @param {string} userId userId
         * @param {SaveLawyerLicensesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveLawyerLicensesUsingPOST: function (userId, request, options) {
            return (0, exports.LawyerControllerApiFp)(configuration).saveLawyerLicensesUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary upsertLawyer
         * @param {SaveLawyerRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertLawyerUsingPOST: function (request, options) {
            return (0, exports.LawyerControllerApiFp)(configuration).upsertLawyerUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LawyerControllerApiFactory = LawyerControllerApiFactory;
/**
 * LawyerControllerApi - object-oriented interface
 * @export
 * @class LawyerControllerApi
 * @extends {BaseAPI}
 */
var LawyerControllerApi = /** @class */ (function (_super) {
    __extends(LawyerControllerApi, _super);
    function LawyerControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary deleteLawyerLicenses
     * @param {string} userId userId
     * @param {DeleteLawyerLicenseRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    LawyerControllerApi.prototype.deleteLawyerLicensesUsingDELETE = function (userId, request, options) {
        var _this = this;
        return (0, exports.LawyerControllerApiFp)(this.configuration).deleteLawyerLicensesUsingDELETE(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawyerEmailGuesses
     * @param {number} lawyerId lawyerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    LawyerControllerApi.prototype.getLawyerEmailGuessesUsingGET = function (lawyerId, options) {
        var _this = this;
        return (0, exports.LawyerControllerApiFp)(this.configuration).getLawyerEmailGuessesUsingGET(lawyerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary saveLawyerLead
     * @param {SaveLawyerLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    LawyerControllerApi.prototype.saveLawyerLeadUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.LawyerControllerApiFp)(this.configuration).saveLawyerLeadUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary saveLawyerLicenses
     * @param {string} userId userId
     * @param {SaveLawyerLicensesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    LawyerControllerApi.prototype.saveLawyerLicensesUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.LawyerControllerApiFp)(this.configuration).saveLawyerLicensesUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary upsertLawyer
     * @param {SaveLawyerRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LawyerControllerApi
     */
    LawyerControllerApi.prototype.upsertLawyerUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.LawyerControllerApiFp)(this.configuration).upsertLawyerUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LawyerControllerApi;
}(base_1.BaseAPI));
exports.LawyerControllerApi = LawyerControllerApi;
/**
 * LineItemControllerApi - axios parameter creator
 * @export
 */
var LineItemControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary deleteCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCaseLineItemUsingDELETE: function (caseId, lineItemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling deleteCaseLineItemUsingDELETE.');
                    }
                    // verify required parameter 'lineItemId' is not null or undefined
                    if (lineItemId === null || lineItemId === undefined) {
                        throw new base_1.RequiredError('lineItemId', 'Required parameter lineItemId was null or undefined when calling deleteCaseLineItemUsingDELETE.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/lineitems/{lineItemId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "lineItemId" + "}", encodeURIComponent(String(lineItemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLineItemTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemTypesUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/lineitems";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLineItems
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemsUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getLineItemsUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/line-items"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary insertCaseLineItem
         * @param {string} caseId caseId
         * @param {InsertInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCaseLineItemUsingPOST: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling insertCaseLineItemUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling insertCaseLineItemUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/lineitems"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {UpdateInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseLineItemUsingPUT: function (caseId, lineItemId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling updateCaseLineItemUsingPUT.');
                    }
                    // verify required parameter 'lineItemId' is not null or undefined
                    if (lineItemId === null || lineItemId === undefined) {
                        throw new base_1.RequiredError('lineItemId', 'Required parameter lineItemId was null or undefined when calling updateCaseLineItemUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateCaseLineItemUsingPUT.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/lineitems/{lineItemId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)))
                        .replace("{" + "lineItemId" + "}", encodeURIComponent(String(lineItemId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.LineItemControllerApiAxiosParamCreator = LineItemControllerApiAxiosParamCreator;
/**
 * LineItemControllerApi - functional programming interface
 * @export
 */
var LineItemControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary deleteCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCaseLineItemUsingDELETE: function (caseId, lineItemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LineItemControllerApiAxiosParamCreator)(configuration).deleteCaseLineItemUsingDELETE(caseId, lineItemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLineItemTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemTypesUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LineItemControllerApiAxiosParamCreator)(configuration).getLineItemTypesUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLineItems
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemsUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LineItemControllerApiAxiosParamCreator)(configuration).getLineItemsUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary insertCaseLineItem
         * @param {string} caseId caseId
         * @param {InsertInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCaseLineItemUsingPOST: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LineItemControllerApiAxiosParamCreator)(configuration).insertCaseLineItemUsingPOST(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {UpdateInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseLineItemUsingPUT: function (caseId, lineItemId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.LineItemControllerApiAxiosParamCreator)(configuration).updateCaseLineItemUsingPUT(caseId, lineItemId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.LineItemControllerApiFp = LineItemControllerApiFp;
/**
 * LineItemControllerApi - factory interface
 * @export
 */
var LineItemControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary deleteCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCaseLineItemUsingDELETE: function (caseId, lineItemId, options) {
            return (0, exports.LineItemControllerApiFp)(configuration).deleteCaseLineItemUsingDELETE(caseId, lineItemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLineItemTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemTypesUsingGET: function (options) {
            return (0, exports.LineItemControllerApiFp)(configuration).getLineItemTypesUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLineItems
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItemsUsingGET: function (caseId, options) {
            return (0, exports.LineItemControllerApiFp)(configuration).getLineItemsUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary insertCaseLineItem
         * @param {string} caseId caseId
         * @param {InsertInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCaseLineItemUsingPOST: function (caseId, request, options) {
            return (0, exports.LineItemControllerApiFp)(configuration).insertCaseLineItemUsingPOST(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateCaseLineItem
         * @param {string} caseId caseId
         * @param {string} lineItemId lineItemId
         * @param {UpdateInvoiceLineItemRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseLineItemUsingPUT: function (caseId, lineItemId, request, options) {
            return (0, exports.LineItemControllerApiFp)(configuration).updateCaseLineItemUsingPUT(caseId, lineItemId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LineItemControllerApiFactory = LineItemControllerApiFactory;
/**
 * LineItemControllerApi - object-oriented interface
 * @export
 * @class LineItemControllerApi
 * @extends {BaseAPI}
 */
var LineItemControllerApi = /** @class */ (function (_super) {
    __extends(LineItemControllerApi, _super);
    function LineItemControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary deleteCaseLineItem
     * @param {string} caseId caseId
     * @param {string} lineItemId lineItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    LineItemControllerApi.prototype.deleteCaseLineItemUsingDELETE = function (caseId, lineItemId, options) {
        var _this = this;
        return (0, exports.LineItemControllerApiFp)(this.configuration).deleteCaseLineItemUsingDELETE(caseId, lineItemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLineItemTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    LineItemControllerApi.prototype.getLineItemTypesUsingGET = function (options) {
        var _this = this;
        return (0, exports.LineItemControllerApiFp)(this.configuration).getLineItemTypesUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLineItems
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    LineItemControllerApi.prototype.getLineItemsUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.LineItemControllerApiFp)(this.configuration).getLineItemsUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary insertCaseLineItem
     * @param {string} caseId caseId
     * @param {InsertInvoiceLineItemRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    LineItemControllerApi.prototype.insertCaseLineItemUsingPOST = function (caseId, request, options) {
        var _this = this;
        return (0, exports.LineItemControllerApiFp)(this.configuration).insertCaseLineItemUsingPOST(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateCaseLineItem
     * @param {string} caseId caseId
     * @param {string} lineItemId lineItemId
     * @param {UpdateInvoiceLineItemRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemControllerApi
     */
    LineItemControllerApi.prototype.updateCaseLineItemUsingPUT = function (caseId, lineItemId, request, options) {
        var _this = this;
        return (0, exports.LineItemControllerApiFp)(this.configuration).updateCaseLineItemUsingPUT(caseId, lineItemId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LineItemControllerApi;
}(base_1.BaseAPI));
exports.LineItemControllerApi = LineItemControllerApi;
/**
 * ListCasesControllerApi - axios parameter creator
 * @export
 */
var ListCasesControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getCasesForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesForUserUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getCasesForUserUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userId}/cases"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getUserCases
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCasesUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserCasesUsingGET.');
                    }
                    localVarPath = "/api/v2/users/{userId}/cases"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listDashboardCases
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {string} [previousPageToken] previousPageToken
         * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardCasesUsingGET: function (userId, limit, previousPageToken, sortBy, statusCategories, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listDashboardCasesUsingGET.');
                    }
                    localVarPath = "/api/v3/users/{userId}/cases"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (previousPageToken !== undefined) {
                        localVarQueryParameter['previousPageToken'] = previousPageToken;
                    }
                    if (sortBy !== undefined) {
                        localVarQueryParameter['sortBy'] = sortBy;
                    }
                    if (statusCategories) {
                        localVarQueryParameter['statusCategories'] = statusCategories;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ListCasesControllerApiAxiosParamCreator = ListCasesControllerApiAxiosParamCreator;
/**
 * ListCasesControllerApi - functional programming interface
 * @export
 */
var ListCasesControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getCasesForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesForUserUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ListCasesControllerApiAxiosParamCreator)(configuration).getCasesForUserUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getUserCases
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCasesUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ListCasesControllerApiAxiosParamCreator)(configuration).getUserCasesUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listDashboardCases
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {string} [previousPageToken] previousPageToken
         * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardCasesUsingGET: function (userId, limit, previousPageToken, sortBy, statusCategories, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ListCasesControllerApiAxiosParamCreator)(configuration).listDashboardCasesUsingGET(userId, limit, previousPageToken, sortBy, statusCategories, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ListCasesControllerApiFp = ListCasesControllerApiFp;
/**
 * ListCasesControllerApi - factory interface
 * @export
 */
var ListCasesControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getCasesForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCasesForUserUsingGET: function (userId, options) {
            return (0, exports.ListCasesControllerApiFp)(configuration).getCasesForUserUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getUserCases
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCasesUsingGET: function (userId, options) {
            return (0, exports.ListCasesControllerApiFp)(configuration).getUserCasesUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listDashboardCases
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {string} [previousPageToken] previousPageToken
         * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
         * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDashboardCasesUsingGET: function (userId, limit, previousPageToken, sortBy, statusCategories, options) {
            return (0, exports.ListCasesControllerApiFp)(configuration).listDashboardCasesUsingGET(userId, limit, previousPageToken, sortBy, statusCategories, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ListCasesControllerApiFactory = ListCasesControllerApiFactory;
/**
 * ListCasesControllerApi - object-oriented interface
 * @export
 * @class ListCasesControllerApi
 * @extends {BaseAPI}
 */
var ListCasesControllerApi = /** @class */ (function (_super) {
    __extends(ListCasesControllerApi, _super);
    function ListCasesControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getCasesForUser
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListCasesControllerApi
     */
    ListCasesControllerApi.prototype.getCasesForUserUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.ListCasesControllerApiFp)(this.configuration).getCasesForUserUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getUserCases
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListCasesControllerApi
     */
    ListCasesControllerApi.prototype.getUserCasesUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.ListCasesControllerApiFp)(this.configuration).getUserCasesUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listDashboardCases
     * @param {number} userId userId
     * @param {number} [limit] limit
     * @param {string} [previousPageToken] previousPageToken
     * @param {'BOOKING_CONFIRMED_DATE' | 'CITATION_ISSUE_DATE'} [sortBy] sortBy
     * @param {Array<'ACTIVE' | 'CANCELLED' | 'RESOLVED' | 'UNCONFIRMED'>} [statusCategories] statusCategories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListCasesControllerApi
     */
    ListCasesControllerApi.prototype.listDashboardCasesUsingGET = function (userId, limit, previousPageToken, sortBy, statusCategories, options) {
        var _this = this;
        return (0, exports.ListCasesControllerApiFp)(this.configuration).listDashboardCasesUsingGET(userId, limit, previousPageToken, sortBy, statusCategories, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ListCasesControllerApi;
}(base_1.BaseAPI));
exports.ListCasesControllerApi = ListCasesControllerApi;
/**
 * NotesControllerApi - axios parameter creator
 * @export
 */
var NotesControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary createNote
         * @param {CreateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNoteUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createNoteUsingPOST.');
                    }
                    localVarPath = "/api/v1/notes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteNote
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNoteUsingDELETE: function (noteId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'noteId' is not null or undefined
                    if (noteId === null || noteId === undefined) {
                        throw new base_1.RequiredError('noteId', 'Required parameter noteId was null or undefined when calling deleteNoteUsingDELETE.');
                    }
                    localVarPath = "/api/v1/notes/{noteId}"
                        .replace("{" + "noteId" + "}", encodeURIComponent(String(noteId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateNote
         * @param {number} noteId noteId
         * @param {UpdateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNoteUsingPUT: function (noteId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'noteId' is not null or undefined
                    if (noteId === null || noteId === undefined) {
                        throw new base_1.RequiredError('noteId', 'Required parameter noteId was null or undefined when calling updateNoteUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateNoteUsingPUT.');
                    }
                    localVarPath = "/api/v1/notes/{noteId}"
                        .replace("{" + "noteId" + "}", encodeURIComponent(String(noteId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.NotesControllerApiAxiosParamCreator = NotesControllerApiAxiosParamCreator;
/**
 * NotesControllerApi - functional programming interface
 * @export
 */
var NotesControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary createNote
         * @param {CreateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNoteUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.NotesControllerApiAxiosParamCreator)(configuration).createNoteUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteNote
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNoteUsingDELETE: function (noteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.NotesControllerApiAxiosParamCreator)(configuration).deleteNoteUsingDELETE(noteId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateNote
         * @param {number} noteId noteId
         * @param {UpdateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNoteUsingPUT: function (noteId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.NotesControllerApiAxiosParamCreator)(configuration).updateNoteUsingPUT(noteId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.NotesControllerApiFp = NotesControllerApiFp;
/**
 * NotesControllerApi - factory interface
 * @export
 */
var NotesControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary createNote
         * @param {CreateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNoteUsingPOST: function (request, options) {
            return (0, exports.NotesControllerApiFp)(configuration).createNoteUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteNote
         * @param {number} noteId noteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNoteUsingDELETE: function (noteId, options) {
            return (0, exports.NotesControllerApiFp)(configuration).deleteNoteUsingDELETE(noteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateNote
         * @param {number} noteId noteId
         * @param {UpdateNoteRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNoteUsingPUT: function (noteId, request, options) {
            return (0, exports.NotesControllerApiFp)(configuration).updateNoteUsingPUT(noteId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NotesControllerApiFactory = NotesControllerApiFactory;
/**
 * NotesControllerApi - object-oriented interface
 * @export
 * @class NotesControllerApi
 * @extends {BaseAPI}
 */
var NotesControllerApi = /** @class */ (function (_super) {
    __extends(NotesControllerApi, _super);
    function NotesControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary createNote
     * @param {CreateNoteRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesControllerApi
     */
    NotesControllerApi.prototype.createNoteUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.NotesControllerApiFp)(this.configuration).createNoteUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteNote
     * @param {number} noteId noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesControllerApi
     */
    NotesControllerApi.prototype.deleteNoteUsingDELETE = function (noteId, options) {
        var _this = this;
        return (0, exports.NotesControllerApiFp)(this.configuration).deleteNoteUsingDELETE(noteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateNote
     * @param {number} noteId noteId
     * @param {UpdateNoteRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesControllerApi
     */
    NotesControllerApi.prototype.updateNoteUsingPUT = function (noteId, request, options) {
        var _this = this;
        return (0, exports.NotesControllerApiFp)(this.configuration).updateNoteUsingPUT(noteId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NotesControllerApi;
}(base_1.BaseAPI));
exports.NotesControllerApi = NotesControllerApi;
/**
 * OnDemandRequestControllerApi - axios parameter creator
 * @export
 */
var OnDemandRequestControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary requestLawyer
         * @param {string} caseId caseId
         * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLawyerUsingPOST: function (caseId, lawyerRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling requestLawyerUsingPOST.');
                    }
                    // verify required parameter 'lawyerRequest' is not null or undefined
                    if (lawyerRequest === null || lawyerRequest === undefined) {
                        throw new base_1.RequiredError('lawyerRequest', 'Required parameter lawyerRequest was null or undefined when calling requestLawyerUsingPOST.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/request"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof lawyerRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(lawyerRequest !== undefined ? lawyerRequest : {}) : (lawyerRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.OnDemandRequestControllerApiAxiosParamCreator = OnDemandRequestControllerApiAxiosParamCreator;
/**
 * OnDemandRequestControllerApi - functional programming interface
 * @export
 */
var OnDemandRequestControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary requestLawyer
         * @param {string} caseId caseId
         * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLawyerUsingPOST: function (caseId, lawyerRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OnDemandRequestControllerApiAxiosParamCreator)(configuration).requestLawyerUsingPOST(caseId, lawyerRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.OnDemandRequestControllerApiFp = OnDemandRequestControllerApiFp;
/**
 * OnDemandRequestControllerApi - factory interface
 * @export
 */
var OnDemandRequestControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary requestLawyer
         * @param {string} caseId caseId
         * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestLawyerUsingPOST: function (caseId, lawyerRequest, options) {
            return (0, exports.OnDemandRequestControllerApiFp)(configuration).requestLawyerUsingPOST(caseId, lawyerRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OnDemandRequestControllerApiFactory = OnDemandRequestControllerApiFactory;
/**
 * OnDemandRequestControllerApi - object-oriented interface
 * @export
 * @class OnDemandRequestControllerApi
 * @extends {BaseAPI}
 */
var OnDemandRequestControllerApi = /** @class */ (function (_super) {
    __extends(OnDemandRequestControllerApi, _super);
    function OnDemandRequestControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary requestLawyer
     * @param {string} caseId caseId
     * @param {NoLawyerAvailableRequest} lawyerRequest lawyerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnDemandRequestControllerApi
     */
    OnDemandRequestControllerApi.prototype.requestLawyerUsingPOST = function (caseId, lawyerRequest, options) {
        var _this = this;
        return (0, exports.OnDemandRequestControllerApiFp)(this.configuration).requestLawyerUsingPOST(caseId, lawyerRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OnDemandRequestControllerApi;
}(base_1.BaseAPI));
exports.OnDemandRequestControllerApi = OnDemandRequestControllerApi;
/**
 * OneTimePasswordControllerApi - axios parameter creator
 * @export
 */
var OneTimePasswordControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary sendOneTimePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOneTimePasswordUsingPOST: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/one_time_password";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.OneTimePasswordControllerApiAxiosParamCreator = OneTimePasswordControllerApiAxiosParamCreator;
/**
 * OneTimePasswordControllerApi - functional programming interface
 * @export
 */
var OneTimePasswordControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary sendOneTimePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOneTimePasswordUsingPOST: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.OneTimePasswordControllerApiAxiosParamCreator)(configuration).sendOneTimePasswordUsingPOST(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.OneTimePasswordControllerApiFp = OneTimePasswordControllerApiFp;
/**
 * OneTimePasswordControllerApi - factory interface
 * @export
 */
var OneTimePasswordControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary sendOneTimePassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOneTimePasswordUsingPOST: function (options) {
            return (0, exports.OneTimePasswordControllerApiFp)(configuration).sendOneTimePasswordUsingPOST(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OneTimePasswordControllerApiFactory = OneTimePasswordControllerApiFactory;
/**
 * OneTimePasswordControllerApi - object-oriented interface
 * @export
 * @class OneTimePasswordControllerApi
 * @extends {BaseAPI}
 */
var OneTimePasswordControllerApi = /** @class */ (function (_super) {
    __extends(OneTimePasswordControllerApi, _super);
    function OneTimePasswordControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary sendOneTimePassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OneTimePasswordControllerApi
     */
    OneTimePasswordControllerApi.prototype.sendOneTimePasswordUsingPOST = function (options) {
        var _this = this;
        return (0, exports.OneTimePasswordControllerApiFp)(this.configuration).sendOneTimePasswordUsingPOST(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OneTimePasswordControllerApi;
}(base_1.BaseAPI));
exports.OneTimePasswordControllerApi = OneTimePasswordControllerApi;
/**
 * PhoneLeadsControllerApi - axios parameter creator
 * @export
 */
var PhoneLeadsControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addNoteToPhoneLead
         * @param {AddNoteToPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteToPhoneLeadUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addNoteToPhoneLeadUsingPOST.');
                    }
                    localVarPath = "/api/v1/phone-leads/notes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary dismissPhoneLead
         * @param {DismissPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissPhoneLeadUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling dismissPhoneLeadUsingPOST.');
                    }
                    localVarPath = "/api/v1/phone-leads/dismiss";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PhoneLeadsControllerApiAxiosParamCreator = PhoneLeadsControllerApiAxiosParamCreator;
/**
 * PhoneLeadsControllerApi - functional programming interface
 * @export
 */
var PhoneLeadsControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addNoteToPhoneLead
         * @param {AddNoteToPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteToPhoneLeadUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PhoneLeadsControllerApiAxiosParamCreator)(configuration).addNoteToPhoneLeadUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary dismissPhoneLead
         * @param {DismissPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissPhoneLeadUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PhoneLeadsControllerApiAxiosParamCreator)(configuration).dismissPhoneLeadUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.PhoneLeadsControllerApiFp = PhoneLeadsControllerApiFp;
/**
 * PhoneLeadsControllerApi - factory interface
 * @export
 */
var PhoneLeadsControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addNoteToPhoneLead
         * @param {AddNoteToPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNoteToPhoneLeadUsingPOST: function (request, options) {
            return (0, exports.PhoneLeadsControllerApiFp)(configuration).addNoteToPhoneLeadUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary dismissPhoneLead
         * @param {DismissPhoneLeadRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dismissPhoneLeadUsingPOST: function (request, options) {
            return (0, exports.PhoneLeadsControllerApiFp)(configuration).dismissPhoneLeadUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PhoneLeadsControllerApiFactory = PhoneLeadsControllerApiFactory;
/**
 * PhoneLeadsControllerApi - object-oriented interface
 * @export
 * @class PhoneLeadsControllerApi
 * @extends {BaseAPI}
 */
var PhoneLeadsControllerApi = /** @class */ (function (_super) {
    __extends(PhoneLeadsControllerApi, _super);
    function PhoneLeadsControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addNoteToPhoneLead
     * @param {AddNoteToPhoneLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneLeadsControllerApi
     */
    PhoneLeadsControllerApi.prototype.addNoteToPhoneLeadUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.PhoneLeadsControllerApiFp)(this.configuration).addNoteToPhoneLeadUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary dismissPhoneLead
     * @param {DismissPhoneLeadRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneLeadsControllerApi
     */
    PhoneLeadsControllerApi.prototype.dismissPhoneLeadUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.PhoneLeadsControllerApiFp)(this.configuration).dismissPhoneLeadUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PhoneLeadsControllerApi;
}(base_1.BaseAPI));
exports.PhoneLeadsControllerApi = PhoneLeadsControllerApi;
/**
 * PushNotificationControllerApi - axios parameter creator
 * @export
 */
var PushNotificationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getUnreadCounts
         * @param {boolean} [includeMessage] includeMessage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnreadCountsUsingGET: function (includeMessage, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/notifications/unread";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (includeMessage !== undefined) {
                        localVarQueryParameter['includeMessage'] = includeMessage;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markAllReadForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllReadForUserUsingDELETE: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling markAllReadForUserUsingDELETE.');
                    }
                    localVarPath = "/api/v1/notifications/unread/{userId}/user"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markPageTypesAsRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationByPagesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPageTypesAsReadUsingDELETE: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling markPageTypesAsReadUsingDELETE.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling markPageTypesAsReadUsingDELETE.');
                    }
                    localVarPath = "/api/v2/notifications/unread/{caseId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadUsingDELETE: function (caseId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling markReadUsingDELETE.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling markReadUsingDELETE.');
                    }
                    localVarPath = "/api/v1/notifications/unread/{caseId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary pushCaseMessage
         * @param {string} caseId caseId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushCaseMessageUsingPOST: function (caseId, pushRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling pushCaseMessageUsingPOST.');
                    }
                    // verify required parameter 'pushRequest' is not null or undefined
                    if (pushRequest === null || pushRequest === undefined) {
                        throw new base_1.RequiredError('pushRequest', 'Required parameter pushRequest was null or undefined when calling pushCaseMessageUsingPOST.');
                    }
                    localVarPath = "/api/v1/notifications/cases/{caseId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof pushRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(pushRequest !== undefined ? pushRequest : {}) : (pushRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary pushNotificationToUser
         * @param {string} recipientId recipientId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushNotificationToUserUsingPOST: function (recipientId, pushRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'recipientId' is not null or undefined
                    if (recipientId === null || recipientId === undefined) {
                        throw new base_1.RequiredError('recipientId', 'Required parameter recipientId was null or undefined when calling pushNotificationToUserUsingPOST.');
                    }
                    // verify required parameter 'pushRequest' is not null or undefined
                    if (pushRequest === null || pushRequest === undefined) {
                        throw new base_1.RequiredError('pushRequest', 'Required parameter pushRequest was null or undefined when calling pushNotificationToUserUsingPOST.');
                    }
                    localVarPath = "/api/v1/notifications/users/{recipientId}"
                        .replace("{" + "recipientId" + "}", encodeURIComponent(String(recipientId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof pushRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(pushRequest !== undefined ? pushRequest : {}) : (pushRequest || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary register
         * @param {PushNotificationRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling registerUsingPOST.');
                    }
                    localVarPath = "/api/v1/notifications/register";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PushNotificationControllerApiAxiosParamCreator = PushNotificationControllerApiAxiosParamCreator;
/**
 * PushNotificationControllerApi - functional programming interface
 * @export
 */
var PushNotificationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getUnreadCounts
         * @param {boolean} [includeMessage] includeMessage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnreadCountsUsingGET: function (includeMessage, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PushNotificationControllerApiAxiosParamCreator)(configuration).getUnreadCountsUsingGET(includeMessage, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markAllReadForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllReadForUserUsingDELETE: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PushNotificationControllerApiAxiosParamCreator)(configuration).markAllReadForUserUsingDELETE(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markPageTypesAsRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationByPagesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPageTypesAsReadUsingDELETE: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PushNotificationControllerApiAxiosParamCreator)(configuration).markPageTypesAsReadUsingDELETE(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadUsingDELETE: function (caseId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PushNotificationControllerApiAxiosParamCreator)(configuration).markReadUsingDELETE(caseId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary pushCaseMessage
         * @param {string} caseId caseId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushCaseMessageUsingPOST: function (caseId, pushRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PushNotificationControllerApiAxiosParamCreator)(configuration).pushCaseMessageUsingPOST(caseId, pushRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary pushNotificationToUser
         * @param {string} recipientId recipientId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushNotificationToUserUsingPOST: function (recipientId, pushRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PushNotificationControllerApiAxiosParamCreator)(configuration).pushNotificationToUserUsingPOST(recipientId, pushRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary register
         * @param {PushNotificationRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.PushNotificationControllerApiAxiosParamCreator)(configuration).registerUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.PushNotificationControllerApiFp = PushNotificationControllerApiFp;
/**
 * PushNotificationControllerApi - factory interface
 * @export
 */
var PushNotificationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getUnreadCounts
         * @param {boolean} [includeMessage] includeMessage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnreadCountsUsingGET: function (includeMessage, options) {
            return (0, exports.PushNotificationControllerApiFp)(configuration).getUnreadCountsUsingGET(includeMessage, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markAllReadForUser
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllReadForUserUsingDELETE: function (userId, options) {
            return (0, exports.PushNotificationControllerApiFp)(configuration).markAllReadForUserUsingDELETE(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markPageTypesAsRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationByPagesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPageTypesAsReadUsingDELETE: function (caseId, request, options) {
            return (0, exports.PushNotificationControllerApiFp)(configuration).markPageTypesAsReadUsingDELETE(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markRead
         * @param {string} caseId caseId
         * @param {DeleteNotificationEventRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadUsingDELETE: function (caseId, request, options) {
            return (0, exports.PushNotificationControllerApiFp)(configuration).markReadUsingDELETE(caseId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary pushCaseMessage
         * @param {string} caseId caseId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushCaseMessageUsingPOST: function (caseId, pushRequest, options) {
            return (0, exports.PushNotificationControllerApiFp)(configuration).pushCaseMessageUsingPOST(caseId, pushRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary pushNotificationToUser
         * @param {string} recipientId recipientId
         * @param {PushNotificationRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushNotificationToUserUsingPOST: function (recipientId, pushRequest, options) {
            return (0, exports.PushNotificationControllerApiFp)(configuration).pushNotificationToUserUsingPOST(recipientId, pushRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary register
         * @param {PushNotificationRegistrationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUsingPOST: function (request, options) {
            return (0, exports.PushNotificationControllerApiFp)(configuration).registerUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PushNotificationControllerApiFactory = PushNotificationControllerApiFactory;
/**
 * PushNotificationControllerApi - object-oriented interface
 * @export
 * @class PushNotificationControllerApi
 * @extends {BaseAPI}
 */
var PushNotificationControllerApi = /** @class */ (function (_super) {
    __extends(PushNotificationControllerApi, _super);
    function PushNotificationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getUnreadCounts
     * @param {boolean} [includeMessage] includeMessage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    PushNotificationControllerApi.prototype.getUnreadCountsUsingGET = function (includeMessage, options) {
        var _this = this;
        return (0, exports.PushNotificationControllerApiFp)(this.configuration).getUnreadCountsUsingGET(includeMessage, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markAllReadForUser
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    PushNotificationControllerApi.prototype.markAllReadForUserUsingDELETE = function (userId, options) {
        var _this = this;
        return (0, exports.PushNotificationControllerApiFp)(this.configuration).markAllReadForUserUsingDELETE(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markPageTypesAsRead
     * @param {string} caseId caseId
     * @param {DeleteNotificationByPagesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    PushNotificationControllerApi.prototype.markPageTypesAsReadUsingDELETE = function (caseId, request, options) {
        var _this = this;
        return (0, exports.PushNotificationControllerApiFp)(this.configuration).markPageTypesAsReadUsingDELETE(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markRead
     * @param {string} caseId caseId
     * @param {DeleteNotificationEventRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    PushNotificationControllerApi.prototype.markReadUsingDELETE = function (caseId, request, options) {
        var _this = this;
        return (0, exports.PushNotificationControllerApiFp)(this.configuration).markReadUsingDELETE(caseId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary pushCaseMessage
     * @param {string} caseId caseId
     * @param {PushNotificationRequest} pushRequest pushRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    PushNotificationControllerApi.prototype.pushCaseMessageUsingPOST = function (caseId, pushRequest, options) {
        var _this = this;
        return (0, exports.PushNotificationControllerApiFp)(this.configuration).pushCaseMessageUsingPOST(caseId, pushRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary pushNotificationToUser
     * @param {string} recipientId recipientId
     * @param {PushNotificationRequest} pushRequest pushRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    PushNotificationControllerApi.prototype.pushNotificationToUserUsingPOST = function (recipientId, pushRequest, options) {
        var _this = this;
        return (0, exports.PushNotificationControllerApiFp)(this.configuration).pushNotificationToUserUsingPOST(recipientId, pushRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary register
     * @param {PushNotificationRegistrationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushNotificationControllerApi
     */
    PushNotificationControllerApi.prototype.registerUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.PushNotificationControllerApiFp)(this.configuration).registerUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PushNotificationControllerApi;
}(base_1.BaseAPI));
exports.PushNotificationControllerApi = PushNotificationControllerApi;
/**
 * RecurringBillingControllerApi - axios parameter creator
 * @export
 */
var RecurringBillingControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary cancelBillingSubscription
         * @param {string} id id
         * @param {string} userId userId
         * @param {boolean} [isProrated] isProrated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBillingSubscriptionUsingDELETE: function (id, userId, isProrated, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
                    }
                    localVarPath = "/api/v1/billing/{userId}/subscriptions/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isProrated !== undefined) {
                        localVarQueryParameter['isProrated'] = isProrated;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary createBillingSubscription
         * @param {number} userId userId
         * @param {CreateBillingSubscriptionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling createBillingSubscriptionUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createBillingSubscriptionUsingPOST.');
                    }
                    localVarPath = "/api/v1/billing/{userId}/subscriptions"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listBillingProducts
         * @param {boolean} [active] active
         * @param {string} [audience] audience
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingProductsUsingGET: function (active, audience, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/billing/products";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (active !== undefined) {
                        localVarQueryParameter['active'] = active;
                    }
                    if (audience !== undefined) {
                        localVarQueryParameter['audience'] = audience;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listBillingSubscriptions
         * @param {number} userId userId
         * @param {boolean} [includeInactive] includeInactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptionsUsingGET: function (userId, includeInactive, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listBillingSubscriptionsUsingGET.');
                    }
                    localVarPath = "/api/v1/billing/{userId}/subscriptions"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (includeInactive !== undefined) {
                        localVarQueryParameter['includeInactive'] = includeInactive;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listSubscriptionInvoices
         * @param {string} id id
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionInvoicesUsingGET: function (id, userId, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    if (id === null || id === undefined) {
                        throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling listSubscriptionInvoicesUsingGET.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listSubscriptionInvoicesUsingGET.');
                    }
                    localVarPath = "/api/v1/billing/{userId}/subscriptions/{id}/invoices"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.RecurringBillingControllerApiAxiosParamCreator = RecurringBillingControllerApiAxiosParamCreator;
/**
 * RecurringBillingControllerApi - functional programming interface
 * @export
 */
var RecurringBillingControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary cancelBillingSubscription
         * @param {string} id id
         * @param {string} userId userId
         * @param {boolean} [isProrated] isProrated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBillingSubscriptionUsingDELETE: function (id, userId, isProrated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RecurringBillingControllerApiAxiosParamCreator)(configuration).cancelBillingSubscriptionUsingDELETE(id, userId, isProrated, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary createBillingSubscription
         * @param {number} userId userId
         * @param {CreateBillingSubscriptionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RecurringBillingControllerApiAxiosParamCreator)(configuration).createBillingSubscriptionUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listBillingProducts
         * @param {boolean} [active] active
         * @param {string} [audience] audience
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingProductsUsingGET: function (active, audience, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RecurringBillingControllerApiAxiosParamCreator)(configuration).listBillingProductsUsingGET(active, audience, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listBillingSubscriptions
         * @param {number} userId userId
         * @param {boolean} [includeInactive] includeInactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptionsUsingGET: function (userId, includeInactive, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RecurringBillingControllerApiAxiosParamCreator)(configuration).listBillingSubscriptionsUsingGET(userId, includeInactive, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listSubscriptionInvoices
         * @param {string} id id
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionInvoicesUsingGET: function (id, userId, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RecurringBillingControllerApiAxiosParamCreator)(configuration).listSubscriptionInvoicesUsingGET(id, userId, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.RecurringBillingControllerApiFp = RecurringBillingControllerApiFp;
/**
 * RecurringBillingControllerApi - factory interface
 * @export
 */
var RecurringBillingControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary cancelBillingSubscription
         * @param {string} id id
         * @param {string} userId userId
         * @param {boolean} [isProrated] isProrated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBillingSubscriptionUsingDELETE: function (id, userId, isProrated, options) {
            return (0, exports.RecurringBillingControllerApiFp)(configuration).cancelBillingSubscriptionUsingDELETE(id, userId, isProrated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary createBillingSubscription
         * @param {number} userId userId
         * @param {CreateBillingSubscriptionRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingSubscriptionUsingPOST: function (userId, request, options) {
            return (0, exports.RecurringBillingControllerApiFp)(configuration).createBillingSubscriptionUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listBillingProducts
         * @param {boolean} [active] active
         * @param {string} [audience] audience
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingProductsUsingGET: function (active, audience, limit, options) {
            return (0, exports.RecurringBillingControllerApiFp)(configuration).listBillingProductsUsingGET(active, audience, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listBillingSubscriptions
         * @param {number} userId userId
         * @param {boolean} [includeInactive] includeInactive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillingSubscriptionsUsingGET: function (userId, includeInactive, options) {
            return (0, exports.RecurringBillingControllerApiFp)(configuration).listBillingSubscriptionsUsingGET(userId, includeInactive, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listSubscriptionInvoices
         * @param {string} id id
         * @param {number} userId userId
         * @param {number} [limit] limit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionInvoicesUsingGET: function (id, userId, limit, options) {
            return (0, exports.RecurringBillingControllerApiFp)(configuration).listSubscriptionInvoicesUsingGET(id, userId, limit, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RecurringBillingControllerApiFactory = RecurringBillingControllerApiFactory;
/**
 * RecurringBillingControllerApi - object-oriented interface
 * @export
 * @class RecurringBillingControllerApi
 * @extends {BaseAPI}
 */
var RecurringBillingControllerApi = /** @class */ (function (_super) {
    __extends(RecurringBillingControllerApi, _super);
    function RecurringBillingControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary cancelBillingSubscription
     * @param {string} id id
     * @param {string} userId userId
     * @param {boolean} [isProrated] isProrated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    RecurringBillingControllerApi.prototype.cancelBillingSubscriptionUsingDELETE = function (id, userId, isProrated, options) {
        var _this = this;
        return (0, exports.RecurringBillingControllerApiFp)(this.configuration).cancelBillingSubscriptionUsingDELETE(id, userId, isProrated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary createBillingSubscription
     * @param {number} userId userId
     * @param {CreateBillingSubscriptionRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    RecurringBillingControllerApi.prototype.createBillingSubscriptionUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.RecurringBillingControllerApiFp)(this.configuration).createBillingSubscriptionUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listBillingProducts
     * @param {boolean} [active] active
     * @param {string} [audience] audience
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    RecurringBillingControllerApi.prototype.listBillingProductsUsingGET = function (active, audience, limit, options) {
        var _this = this;
        return (0, exports.RecurringBillingControllerApiFp)(this.configuration).listBillingProductsUsingGET(active, audience, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listBillingSubscriptions
     * @param {number} userId userId
     * @param {boolean} [includeInactive] includeInactive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    RecurringBillingControllerApi.prototype.listBillingSubscriptionsUsingGET = function (userId, includeInactive, options) {
        var _this = this;
        return (0, exports.RecurringBillingControllerApiFp)(this.configuration).listBillingSubscriptionsUsingGET(userId, includeInactive, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listSubscriptionInvoices
     * @param {string} id id
     * @param {number} userId userId
     * @param {number} [limit] limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringBillingControllerApi
     */
    RecurringBillingControllerApi.prototype.listSubscriptionInvoicesUsingGET = function (id, userId, limit, options) {
        var _this = this;
        return (0, exports.RecurringBillingControllerApiFp)(this.configuration).listSubscriptionInvoicesUsingGET(id, userId, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RecurringBillingControllerApi;
}(base_1.BaseAPI));
exports.RecurringBillingControllerApi = RecurringBillingControllerApi;
/**
 * RefLinkControllerApi - axios parameter creator
 * @export
 */
var RefLinkControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getRefLinksForUser
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefLinksForUserUsingGET: function (userIdString, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userIdString' is not null or undefined
                    if (userIdString === null || userIdString === undefined) {
                        throw new base_1.RequiredError('userIdString', 'Required parameter userIdString was null or undefined when calling getRefLinksForUserUsingGET.');
                    }
                    localVarPath = "/api/v1/reflinks/{userIdString}"
                        .replace("{" + "userIdString" + "}", encodeURIComponent(String(userIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.RefLinkControllerApiAxiosParamCreator = RefLinkControllerApiAxiosParamCreator;
/**
 * RefLinkControllerApi - functional programming interface
 * @export
 */
var RefLinkControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getRefLinksForUser
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefLinksForUserUsingGET: function (userIdString, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RefLinkControllerApiAxiosParamCreator)(configuration).getRefLinksForUserUsingGET(userIdString, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.RefLinkControllerApiFp = RefLinkControllerApiFp;
/**
 * RefLinkControllerApi - factory interface
 * @export
 */
var RefLinkControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getRefLinksForUser
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefLinksForUserUsingGET: function (userIdString, options) {
            return (0, exports.RefLinkControllerApiFp)(configuration).getRefLinksForUserUsingGET(userIdString, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RefLinkControllerApiFactory = RefLinkControllerApiFactory;
/**
 * RefLinkControllerApi - object-oriented interface
 * @export
 * @class RefLinkControllerApi
 * @extends {BaseAPI}
 */
var RefLinkControllerApi = /** @class */ (function (_super) {
    __extends(RefLinkControllerApi, _super);
    function RefLinkControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getRefLinksForUser
     * @param {string} userIdString userIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefLinkControllerApi
     */
    RefLinkControllerApi.prototype.getRefLinksForUserUsingGET = function (userIdString, options) {
        var _this = this;
        return (0, exports.RefLinkControllerApiFp)(this.configuration).getRefLinksForUserUsingGET(userIdString, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RefLinkControllerApi;
}(base_1.BaseAPI));
exports.RefLinkControllerApi = RefLinkControllerApi;
/**
 * ReferralCodeControllerApi - axios parameter creator
 * @export
 */
var ReferralCodeControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Only for admins. This will approve and activate a given referral code
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveReferralCodeUsingPUT: function (codeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'codeId' is not null or undefined
                    if (codeId === null || codeId === undefined) {
                        throw new base_1.RequiredError('codeId', 'Required parameter codeId was null or undefined when calling approveReferralCodeUsingPUT.');
                    }
                    localVarPath = "/api/v1/referrals/codes/{codeId}/approve"
                        .replace("{" + "codeId" + "}", encodeURIComponent(String(codeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
         * @param {CreateReferralCodeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReferralCodeUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling generateReferralCodeUsingPOST.');
                    }
                    localVarPath = "/api/v1/referrals/codes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getReferralCode
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodeUsingGET: function (codeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'codeId' is not null or undefined
                    if (codeId === null || codeId === undefined) {
                        throw new base_1.RequiredError('codeId', 'Required parameter codeId was null or undefined when calling getReferralCodeUsingGET.');
                    }
                    localVarPath = "/api/v1/referrals/codes/{codeId}"
                        .replace("{" + "codeId" + "}", encodeURIComponent(String(codeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getReferralCodes
         * @param {boolean} [isActive] isActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodesUsingGET: function (isActive, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/referrals/codes";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isActive !== undefined) {
                        localVarQueryParameter['isActive'] = isActive;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary markCodeAsInactive
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCodeAsInactiveUsingDELETE: function (codeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'codeId' is not null or undefined
                    if (codeId === null || codeId === undefined) {
                        throw new base_1.RequiredError('codeId', 'Required parameter codeId was null or undefined when calling markCodeAsInactiveUsingDELETE.');
                    }
                    localVarPath = "/api/v1/referrals/codes/{codeId}"
                        .replace("{" + "codeId" + "}", encodeURIComponent(String(codeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferralCodeUsingGET: function (codeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'codeId' is not null or undefined
                    if (codeId === null || codeId === undefined) {
                        throw new base_1.RequiredError('codeId', 'Required parameter codeId was null or undefined when calling validateReferralCodeUsingGET.');
                    }
                    localVarPath = "/api/v1/referrals/codes/{codeId}/validate"
                        .replace("{" + "codeId" + "}", encodeURIComponent(String(codeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ReferralCodeControllerApiAxiosParamCreator = ReferralCodeControllerApiAxiosParamCreator;
/**
 * ReferralCodeControllerApi - functional programming interface
 * @export
 */
var ReferralCodeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Only for admins. This will approve and activate a given referral code
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveReferralCodeUsingPUT: function (codeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralCodeControllerApiAxiosParamCreator)(configuration).approveReferralCodeUsingPUT(codeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
         * @param {CreateReferralCodeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReferralCodeUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralCodeControllerApiAxiosParamCreator)(configuration).generateReferralCodeUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getReferralCode
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodeUsingGET: function (codeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralCodeControllerApiAxiosParamCreator)(configuration).getReferralCodeUsingGET(codeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getReferralCodes
         * @param {boolean} [isActive] isActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodesUsingGET: function (isActive, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralCodeControllerApiAxiosParamCreator)(configuration).getReferralCodesUsingGET(isActive, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary markCodeAsInactive
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCodeAsInactiveUsingDELETE: function (codeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralCodeControllerApiAxiosParamCreator)(configuration).markCodeAsInactiveUsingDELETE(codeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferralCodeUsingGET: function (codeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralCodeControllerApiAxiosParamCreator)(configuration).validateReferralCodeUsingGET(codeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ReferralCodeControllerApiFp = ReferralCodeControllerApiFp;
/**
 * ReferralCodeControllerApi - factory interface
 * @export
 */
var ReferralCodeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Only for admins. This will approve and activate a given referral code
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveReferralCodeUsingPUT: function (codeId, options) {
            return (0, exports.ReferralCodeControllerApiFp)(configuration).approveReferralCodeUsingPUT(codeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
         * @param {CreateReferralCodeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReferralCodeUsingPOST: function (request, options) {
            return (0, exports.ReferralCodeControllerApiFp)(configuration).generateReferralCodeUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getReferralCode
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodeUsingGET: function (codeId, options) {
            return (0, exports.ReferralCodeControllerApiFp)(configuration).getReferralCodeUsingGET(codeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getReferralCodes
         * @param {boolean} [isActive] isActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralCodesUsingGET: function (isActive, options) {
            return (0, exports.ReferralCodeControllerApiFp)(configuration).getReferralCodesUsingGET(isActive, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary markCodeAsInactive
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markCodeAsInactiveUsingDELETE: function (codeId, options) {
            return (0, exports.ReferralCodeControllerApiFp)(configuration).markCodeAsInactiveUsingDELETE(codeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
         * @param {string} codeId codeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferralCodeUsingGET: function (codeId, options) {
            return (0, exports.ReferralCodeControllerApiFp)(configuration).validateReferralCodeUsingGET(codeId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ReferralCodeControllerApiFactory = ReferralCodeControllerApiFactory;
/**
 * ReferralCodeControllerApi - object-oriented interface
 * @export
 * @class ReferralCodeControllerApi
 * @extends {BaseAPI}
 */
var ReferralCodeControllerApi = /** @class */ (function (_super) {
    __extends(ReferralCodeControllerApi, _super);
    function ReferralCodeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Only for admins. This will approve and activate a given referral code
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    ReferralCodeControllerApi.prototype.approveReferralCodeUsingPUT = function (codeId, options) {
        var _this = this;
        return (0, exports.ReferralCodeControllerApiFp)(this.configuration).approveReferralCodeUsingPUT(codeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
     * @param {CreateReferralCodeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    ReferralCodeControllerApi.prototype.generateReferralCodeUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ReferralCodeControllerApiFp)(this.configuration).generateReferralCodeUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getReferralCode
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    ReferralCodeControllerApi.prototype.getReferralCodeUsingGET = function (codeId, options) {
        var _this = this;
        return (0, exports.ReferralCodeControllerApiFp)(this.configuration).getReferralCodeUsingGET(codeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getReferralCodes
     * @param {boolean} [isActive] isActive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    ReferralCodeControllerApi.prototype.getReferralCodesUsingGET = function (isActive, options) {
        var _this = this;
        return (0, exports.ReferralCodeControllerApiFp)(this.configuration).getReferralCodesUsingGET(isActive, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary markCodeAsInactive
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    ReferralCodeControllerApi.prototype.markCodeAsInactiveUsingDELETE = function (codeId, options) {
        var _this = this;
        return (0, exports.ReferralCodeControllerApiFp)(this.configuration).markCodeAsInactiveUsingDELETE(codeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
     * @param {string} codeId codeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralCodeControllerApi
     */
    ReferralCodeControllerApi.prototype.validateReferralCodeUsingGET = function (codeId, options) {
        var _this = this;
        return (0, exports.ReferralCodeControllerApiFp)(this.configuration).validateReferralCodeUsingGET(codeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ReferralCodeControllerApi;
}(base_1.BaseAPI));
exports.ReferralCodeControllerApi = ReferralCodeControllerApi;
/**
 * ReferralControllerApi - axios parameter creator
 * @export
 */
var ReferralControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getReferralHistory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralHistoryUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/referrals";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listReferrals
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralsUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling listReferralsUsingGET.');
                    }
                    localVarPath = "/api/v2/referrals";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (userId !== undefined) {
                        localVarQueryParameter['userId'] = userId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary publishReferralContacts
         * @param {PublishReferralRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishReferralContactsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling publishReferralContactsUsingPOST.');
                    }
                    localVarPath = "/api/v1/referrals/contacts";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ReferralControllerApiAxiosParamCreator = ReferralControllerApiAxiosParamCreator;
/**
 * ReferralControllerApi - functional programming interface
 * @export
 */
var ReferralControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getReferralHistory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralHistoryUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralControllerApiAxiosParamCreator)(configuration).getReferralHistoryUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listReferrals
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralsUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralControllerApiAxiosParamCreator)(configuration).listReferralsUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary publishReferralContacts
         * @param {PublishReferralRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishReferralContactsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralControllerApiAxiosParamCreator)(configuration).publishReferralContactsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ReferralControllerApiFp = ReferralControllerApiFp;
/**
 * ReferralControllerApi - factory interface
 * @export
 */
var ReferralControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getReferralHistory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralHistoryUsingGET: function (options) {
            return (0, exports.ReferralControllerApiFp)(configuration).getReferralHistoryUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listReferrals
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralsUsingGET: function (userId, options) {
            return (0, exports.ReferralControllerApiFp)(configuration).listReferralsUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary publishReferralContacts
         * @param {PublishReferralRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishReferralContactsUsingPOST: function (request, options) {
            return (0, exports.ReferralControllerApiFp)(configuration).publishReferralContactsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ReferralControllerApiFactory = ReferralControllerApiFactory;
/**
 * ReferralControllerApi - object-oriented interface
 * @export
 * @class ReferralControllerApi
 * @extends {BaseAPI}
 */
var ReferralControllerApi = /** @class */ (function (_super) {
    __extends(ReferralControllerApi, _super);
    function ReferralControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getReferralHistory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralControllerApi
     */
    ReferralControllerApi.prototype.getReferralHistoryUsingGET = function (options) {
        var _this = this;
        return (0, exports.ReferralControllerApiFp)(this.configuration).getReferralHistoryUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listReferrals
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralControllerApi
     */
    ReferralControllerApi.prototype.listReferralsUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.ReferralControllerApiFp)(this.configuration).listReferralsUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary publishReferralContacts
     * @param {PublishReferralRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralControllerApi
     */
    ReferralControllerApi.prototype.publishReferralContactsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ReferralControllerApiFp)(this.configuration).publishReferralContactsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ReferralControllerApi;
}(base_1.BaseAPI));
exports.ReferralControllerApi = ReferralControllerApi;
/**
 * ReferralSourceControllerApi - axios parameter creator
 * @export
 */
var ReferralSourceControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getUserReferralSourceTypes
         * @param {'ALL' | 'ENABLED'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReferralSourceTypesUsingGET: function (flavor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/referrals/sources";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (flavor !== undefined) {
                        localVarQueryParameter['flavor'] = flavor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setReferralSource
         * @param {SetReferralSourceRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setReferralSourceUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling setReferralSourceUsingPOST.');
                    }
                    localVarPath = "/api/v1/referrals/sources";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ReferralSourceControllerApiAxiosParamCreator = ReferralSourceControllerApiAxiosParamCreator;
/**
 * ReferralSourceControllerApi - functional programming interface
 * @export
 */
var ReferralSourceControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getUserReferralSourceTypes
         * @param {'ALL' | 'ENABLED'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReferralSourceTypesUsingGET: function (flavor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralSourceControllerApiAxiosParamCreator)(configuration).getUserReferralSourceTypesUsingGET(flavor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setReferralSource
         * @param {SetReferralSourceRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setReferralSourceUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReferralSourceControllerApiAxiosParamCreator)(configuration).setReferralSourceUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ReferralSourceControllerApiFp = ReferralSourceControllerApiFp;
/**
 * ReferralSourceControllerApi - factory interface
 * @export
 */
var ReferralSourceControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getUserReferralSourceTypes
         * @param {'ALL' | 'ENABLED'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReferralSourceTypesUsingGET: function (flavor, options) {
            return (0, exports.ReferralSourceControllerApiFp)(configuration).getUserReferralSourceTypesUsingGET(flavor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setReferralSource
         * @param {SetReferralSourceRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setReferralSourceUsingPOST: function (request, options) {
            return (0, exports.ReferralSourceControllerApiFp)(configuration).setReferralSourceUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ReferralSourceControllerApiFactory = ReferralSourceControllerApiFactory;
/**
 * ReferralSourceControllerApi - object-oriented interface
 * @export
 * @class ReferralSourceControllerApi
 * @extends {BaseAPI}
 */
var ReferralSourceControllerApi = /** @class */ (function (_super) {
    __extends(ReferralSourceControllerApi, _super);
    function ReferralSourceControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getUserReferralSourceTypes
     * @param {'ALL' | 'ENABLED'} [flavor] flavor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralSourceControllerApi
     */
    ReferralSourceControllerApi.prototype.getUserReferralSourceTypesUsingGET = function (flavor, options) {
        var _this = this;
        return (0, exports.ReferralSourceControllerApiFp)(this.configuration).getUserReferralSourceTypesUsingGET(flavor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setReferralSource
     * @param {SetReferralSourceRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralSourceControllerApi
     */
    ReferralSourceControllerApi.prototype.setReferralSourceUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.ReferralSourceControllerApiFp)(this.configuration).setReferralSourceUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ReferralSourceControllerApi;
}(base_1.BaseAPI));
exports.ReferralSourceControllerApi = ReferralSourceControllerApi;
/**
 * RefundEligibilityControllerApi - axios parameter creator
 * @export
 */
var RefundEligibilityControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary isRefundEligible
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundEligibleUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling isRefundEligibleUsingGET.');
                    }
                    localVarPath = "/api/v1/cases/{caseId}/refund/eligibility"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.RefundEligibilityControllerApiAxiosParamCreator = RefundEligibilityControllerApiAxiosParamCreator;
/**
 * RefundEligibilityControllerApi - functional programming interface
 * @export
 */
var RefundEligibilityControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary isRefundEligible
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundEligibleUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RefundEligibilityControllerApiAxiosParamCreator)(configuration).isRefundEligibleUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.RefundEligibilityControllerApiFp = RefundEligibilityControllerApiFp;
/**
 * RefundEligibilityControllerApi - factory interface
 * @export
 */
var RefundEligibilityControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary isRefundEligible
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundEligibleUsingGET: function (caseId, options) {
            return (0, exports.RefundEligibilityControllerApiFp)(configuration).isRefundEligibleUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RefundEligibilityControllerApiFactory = RefundEligibilityControllerApiFactory;
/**
 * RefundEligibilityControllerApi - object-oriented interface
 * @export
 * @class RefundEligibilityControllerApi
 * @extends {BaseAPI}
 */
var RefundEligibilityControllerApi = /** @class */ (function (_super) {
    __extends(RefundEligibilityControllerApi, _super);
    function RefundEligibilityControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary isRefundEligible
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundEligibilityControllerApi
     */
    RefundEligibilityControllerApi.prototype.isRefundEligibleUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.RefundEligibilityControllerApiFp)(this.configuration).isRefundEligibleUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RefundEligibilityControllerApi;
}(base_1.BaseAPI));
exports.RefundEligibilityControllerApi = RefundEligibilityControllerApi;
/**
 * RegistrationControllerApi - axios parameter creator
 * @export
 */
var RegistrationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary registerNewUser
         * @param {RegisterNewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewUserUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling registerNewUserUsingPOST.');
                    }
                    localVarPath = "/api/v1/signup";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateBranchLinksForAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBranchLinksForAllUsersUsingPOST: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/admin/tools/updateBranchLinksForAllUsers";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.RegistrationControllerApiAxiosParamCreator = RegistrationControllerApiAxiosParamCreator;
/**
 * RegistrationControllerApi - functional programming interface
 * @export
 */
var RegistrationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary registerNewUser
         * @param {RegisterNewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewUserUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RegistrationControllerApiAxiosParamCreator)(configuration).registerNewUserUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateBranchLinksForAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBranchLinksForAllUsersUsingPOST: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.RegistrationControllerApiAxiosParamCreator)(configuration).updateBranchLinksForAllUsersUsingPOST(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.RegistrationControllerApiFp = RegistrationControllerApiFp;
/**
 * RegistrationControllerApi - factory interface
 * @export
 */
var RegistrationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary registerNewUser
         * @param {RegisterNewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewUserUsingPOST: function (request, options) {
            return (0, exports.RegistrationControllerApiFp)(configuration).registerNewUserUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateBranchLinksForAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBranchLinksForAllUsersUsingPOST: function (options) {
            return (0, exports.RegistrationControllerApiFp)(configuration).updateBranchLinksForAllUsersUsingPOST(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RegistrationControllerApiFactory = RegistrationControllerApiFactory;
/**
 * RegistrationControllerApi - object-oriented interface
 * @export
 * @class RegistrationControllerApi
 * @extends {BaseAPI}
 */
var RegistrationControllerApi = /** @class */ (function (_super) {
    __extends(RegistrationControllerApi, _super);
    function RegistrationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary registerNewUser
     * @param {RegisterNewUserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    RegistrationControllerApi.prototype.registerNewUserUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.RegistrationControllerApiFp)(this.configuration).registerNewUserUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateBranchLinksForAllUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    RegistrationControllerApi.prototype.updateBranchLinksForAllUsersUsingPOST = function (options) {
        var _this = this;
        return (0, exports.RegistrationControllerApiFp)(this.configuration).updateBranchLinksForAllUsersUsingPOST(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RegistrationControllerApi;
}(base_1.BaseAPI));
exports.RegistrationControllerApi = RegistrationControllerApi;
/**
 * ReportingControllerApi - axios parameter creator
 * @export
 */
var ReportingControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getCourtCoverageForCountyReport
         * @param {number} countyId countyId
         * @param {string} regionCode regionCode
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForCountyReportUsingGET: function (countyId, regionCode, urWindowInDays, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'countyId' is not null or undefined
                    if (countyId === null || countyId === undefined) {
                        throw new base_1.RequiredError('countyId', 'Required parameter countyId was null or undefined when calling getCourtCoverageForCountyReportUsingGET.');
                    }
                    // verify required parameter 'regionCode' is not null or undefined
                    if (regionCode === null || regionCode === undefined) {
                        throw new base_1.RequiredError('regionCode', 'Required parameter regionCode was null or undefined when calling getCourtCoverageForCountyReportUsingGET.');
                    }
                    localVarPath = "/api/v1/reports/court-coverage/{regionCode}/{countyId}"
                        .replace("{" + "countyId" + "}", encodeURIComponent(String(countyId)))
                        .replace("{" + "regionCode" + "}", encodeURIComponent(String(regionCode)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (urWindowInDays !== undefined) {
                        localVarQueryParameter['urWindowInDays'] = urWindowInDays;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCourtCoverageForStateReport
         * @param {string} regionCode regionCode
         * @param {number} [countyId] countyId
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForStateReportUsingGET: function (regionCode, countyId, urWindowInDays, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'regionCode' is not null or undefined
                    if (regionCode === null || regionCode === undefined) {
                        throw new base_1.RequiredError('regionCode', 'Required parameter regionCode was null or undefined when calling getCourtCoverageForStateReportUsingGET.');
                    }
                    localVarPath = "/api/v1/reports/court-coverage/{regionCode}"
                        .replace("{" + "regionCode" + "}", encodeURIComponent(String(regionCode)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (countyId !== undefined) {
                        localVarQueryParameter['countyId'] = countyId;
                    }
                    if (urWindowInDays !== undefined) {
                        localVarQueryParameter['urWindowInDays'] = urWindowInDays;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCourtCoverageReport
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageReportUsingGET: function (urWindowInDays, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/reports/court-coverage";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (urWindowInDays !== undefined) {
                        localVarQueryParameter['urWindowInDays'] = urWindowInDays;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getLawfirmCoverageReport
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageReportUsingGET: function (countyId, regionCode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/reports/court-coverage/lawfirms";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (countyId !== undefined) {
                        localVarQueryParameter['countyId'] = countyId;
                    }
                    if (regionCode !== undefined) {
                        localVarQueryParameter['regionCode'] = regionCode;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ReportingControllerApiAxiosParamCreator = ReportingControllerApiAxiosParamCreator;
/**
 * ReportingControllerApi - functional programming interface
 * @export
 */
var ReportingControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getCourtCoverageForCountyReport
         * @param {number} countyId countyId
         * @param {string} regionCode regionCode
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForCountyReportUsingGET: function (countyId, regionCode, urWindowInDays, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReportingControllerApiAxiosParamCreator)(configuration).getCourtCoverageForCountyReportUsingGET(countyId, regionCode, urWindowInDays, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCourtCoverageForStateReport
         * @param {string} regionCode regionCode
         * @param {number} [countyId] countyId
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForStateReportUsingGET: function (regionCode, countyId, urWindowInDays, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReportingControllerApiAxiosParamCreator)(configuration).getCourtCoverageForStateReportUsingGET(regionCode, countyId, urWindowInDays, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCourtCoverageReport
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageReportUsingGET: function (urWindowInDays, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReportingControllerApiAxiosParamCreator)(configuration).getCourtCoverageReportUsingGET(urWindowInDays, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getLawfirmCoverageReport
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageReportUsingGET: function (countyId, regionCode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ReportingControllerApiAxiosParamCreator)(configuration).getLawfirmCoverageReportUsingGET(countyId, regionCode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ReportingControllerApiFp = ReportingControllerApiFp;
/**
 * ReportingControllerApi - factory interface
 * @export
 */
var ReportingControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getCourtCoverageForCountyReport
         * @param {number} countyId countyId
         * @param {string} regionCode regionCode
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForCountyReportUsingGET: function (countyId, regionCode, urWindowInDays, options) {
            return (0, exports.ReportingControllerApiFp)(configuration).getCourtCoverageForCountyReportUsingGET(countyId, regionCode, urWindowInDays, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCourtCoverageForStateReport
         * @param {string} regionCode regionCode
         * @param {number} [countyId] countyId
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageForStateReportUsingGET: function (regionCode, countyId, urWindowInDays, options) {
            return (0, exports.ReportingControllerApiFp)(configuration).getCourtCoverageForStateReportUsingGET(regionCode, countyId, urWindowInDays, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCourtCoverageReport
         * @param {number} [urWindowInDays] urWindowInDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourtCoverageReportUsingGET: function (urWindowInDays, options) {
            return (0, exports.ReportingControllerApiFp)(configuration).getCourtCoverageReportUsingGET(urWindowInDays, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getLawfirmCoverageReport
         * @param {number} [countyId] countyId
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmCoverageReportUsingGET: function (countyId, regionCode, options) {
            return (0, exports.ReportingControllerApiFp)(configuration).getLawfirmCoverageReportUsingGET(countyId, regionCode, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ReportingControllerApiFactory = ReportingControllerApiFactory;
/**
 * ReportingControllerApi - object-oriented interface
 * @export
 * @class ReportingControllerApi
 * @extends {BaseAPI}
 */
var ReportingControllerApi = /** @class */ (function (_super) {
    __extends(ReportingControllerApi, _super);
    function ReportingControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getCourtCoverageForCountyReport
     * @param {number} countyId countyId
     * @param {string} regionCode regionCode
     * @param {number} [urWindowInDays] urWindowInDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    ReportingControllerApi.prototype.getCourtCoverageForCountyReportUsingGET = function (countyId, regionCode, urWindowInDays, options) {
        var _this = this;
        return (0, exports.ReportingControllerApiFp)(this.configuration).getCourtCoverageForCountyReportUsingGET(countyId, regionCode, urWindowInDays, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCourtCoverageForStateReport
     * @param {string} regionCode regionCode
     * @param {number} [countyId] countyId
     * @param {number} [urWindowInDays] urWindowInDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    ReportingControllerApi.prototype.getCourtCoverageForStateReportUsingGET = function (regionCode, countyId, urWindowInDays, options) {
        var _this = this;
        return (0, exports.ReportingControllerApiFp)(this.configuration).getCourtCoverageForStateReportUsingGET(regionCode, countyId, urWindowInDays, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCourtCoverageReport
     * @param {number} [urWindowInDays] urWindowInDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    ReportingControllerApi.prototype.getCourtCoverageReportUsingGET = function (urWindowInDays, options) {
        var _this = this;
        return (0, exports.ReportingControllerApiFp)(this.configuration).getCourtCoverageReportUsingGET(urWindowInDays, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getLawfirmCoverageReport
     * @param {number} [countyId] countyId
     * @param {string} [regionCode] regionCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingControllerApi
     */
    ReportingControllerApi.prototype.getLawfirmCoverageReportUsingGET = function (countyId, regionCode, options) {
        var _this = this;
        return (0, exports.ReportingControllerApiFp)(this.configuration).getLawfirmCoverageReportUsingGET(countyId, regionCode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ReportingControllerApi;
}(base_1.BaseAPI));
exports.ReportingControllerApi = ReportingControllerApi;
/**
 * ScheduledTaskControllerApi - axios parameter creator
 * @export
 */
var ScheduledTaskControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary deleteScheduledTask
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledTaskUsingDELETE: function (taskId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'taskId' is not null or undefined
                    if (taskId === null || taskId === undefined) {
                        throw new base_1.RequiredError('taskId', 'Required parameter taskId was null or undefined when calling deleteScheduledTaskUsingDELETE.');
                    }
                    localVarPath = "/api/v1/scheduled-tasks/{taskId}"
                        .replace("{" + "taskId" + "}", encodeURIComponent(String(taskId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getScheduledTasks
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTasksUsingGET: function (caseId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'caseId' is not null or undefined
                    if (caseId === null || caseId === undefined) {
                        throw new base_1.RequiredError('caseId', 'Required parameter caseId was null or undefined when calling getScheduledTasksUsingGET.');
                    }
                    localVarPath = "/api/v1/scheduled-tasks/{caseId}"
                        .replace("{" + "caseId" + "}", encodeURIComponent(String(caseId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary rescheduleTask
         * @param {string} taskId taskId
         * @param {RescheduleTaskRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleTaskUsingPUT: function (taskId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'taskId' is not null or undefined
                    if (taskId === null || taskId === undefined) {
                        throw new base_1.RequiredError('taskId', 'Required parameter taskId was null or undefined when calling rescheduleTaskUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling rescheduleTaskUsingPUT.');
                    }
                    localVarPath = "/api/v1/scheduled-tasks/{taskId}/reschedule"
                        .replace("{" + "taskId" + "}", encodeURIComponent(String(taskId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ScheduledTaskControllerApiAxiosParamCreator = ScheduledTaskControllerApiAxiosParamCreator;
/**
 * ScheduledTaskControllerApi - functional programming interface
 * @export
 */
var ScheduledTaskControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary deleteScheduledTask
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledTaskUsingDELETE: function (taskId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ScheduledTaskControllerApiAxiosParamCreator)(configuration).deleteScheduledTaskUsingDELETE(taskId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getScheduledTasks
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTasksUsingGET: function (caseId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ScheduledTaskControllerApiAxiosParamCreator)(configuration).getScheduledTasksUsingGET(caseId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary rescheduleTask
         * @param {string} taskId taskId
         * @param {RescheduleTaskRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleTaskUsingPUT: function (taskId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ScheduledTaskControllerApiAxiosParamCreator)(configuration).rescheduleTaskUsingPUT(taskId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ScheduledTaskControllerApiFp = ScheduledTaskControllerApiFp;
/**
 * ScheduledTaskControllerApi - factory interface
 * @export
 */
var ScheduledTaskControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary deleteScheduledTask
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledTaskUsingDELETE: function (taskId, options) {
            return (0, exports.ScheduledTaskControllerApiFp)(configuration).deleteScheduledTaskUsingDELETE(taskId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getScheduledTasks
         * @param {string} caseId caseId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTasksUsingGET: function (caseId, options) {
            return (0, exports.ScheduledTaskControllerApiFp)(configuration).getScheduledTasksUsingGET(caseId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary rescheduleTask
         * @param {string} taskId taskId
         * @param {RescheduleTaskRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleTaskUsingPUT: function (taskId, request, options) {
            return (0, exports.ScheduledTaskControllerApiFp)(configuration).rescheduleTaskUsingPUT(taskId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ScheduledTaskControllerApiFactory = ScheduledTaskControllerApiFactory;
/**
 * ScheduledTaskControllerApi - object-oriented interface
 * @export
 * @class ScheduledTaskControllerApi
 * @extends {BaseAPI}
 */
var ScheduledTaskControllerApi = /** @class */ (function (_super) {
    __extends(ScheduledTaskControllerApi, _super);
    function ScheduledTaskControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary deleteScheduledTask
     * @param {number} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskControllerApi
     */
    ScheduledTaskControllerApi.prototype.deleteScheduledTaskUsingDELETE = function (taskId, options) {
        var _this = this;
        return (0, exports.ScheduledTaskControllerApiFp)(this.configuration).deleteScheduledTaskUsingDELETE(taskId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getScheduledTasks
     * @param {string} caseId caseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskControllerApi
     */
    ScheduledTaskControllerApi.prototype.getScheduledTasksUsingGET = function (caseId, options) {
        var _this = this;
        return (0, exports.ScheduledTaskControllerApiFp)(this.configuration).getScheduledTasksUsingGET(caseId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary rescheduleTask
     * @param {string} taskId taskId
     * @param {RescheduleTaskRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTaskControllerApi
     */
    ScheduledTaskControllerApi.prototype.rescheduleTaskUsingPUT = function (taskId, request, options) {
        var _this = this;
        return (0, exports.ScheduledTaskControllerApiFp)(this.configuration).rescheduleTaskUsingPUT(taskId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ScheduledTaskControllerApi;
}(base_1.BaseAPI));
exports.ScheduledTaskControllerApi = ScheduledTaskControllerApi;
/**
 * SnsListenerControllerApi - axios parameter creator
 * @export
 */
var SnsListenerControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary handleBounceComplaintEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceComplaintEmailsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling handleBounceComplaintEmailsUsingPOST.');
                    }
                    localVarPath = "/api/v1/blacklists/ses/emails/";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary handleIncomingEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleIncomingEmailsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling handleIncomingEmailsUsingPOST.');
                    }
                    localVarPath = "/api/v1/ses/inbound-emails";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.SnsListenerControllerApiAxiosParamCreator = SnsListenerControllerApiAxiosParamCreator;
/**
 * SnsListenerControllerApi - functional programming interface
 * @export
 */
var SnsListenerControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary handleBounceComplaintEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceComplaintEmailsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.SnsListenerControllerApiAxiosParamCreator)(configuration).handleBounceComplaintEmailsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary handleIncomingEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleIncomingEmailsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.SnsListenerControllerApiAxiosParamCreator)(configuration).handleIncomingEmailsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.SnsListenerControllerApiFp = SnsListenerControllerApiFp;
/**
 * SnsListenerControllerApi - factory interface
 * @export
 */
var SnsListenerControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary handleBounceComplaintEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleBounceComplaintEmailsUsingPOST: function (request, options) {
            return (0, exports.SnsListenerControllerApiFp)(configuration).handleBounceComplaintEmailsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary handleIncomingEmails
         * @param {SNSNotificationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleIncomingEmailsUsingPOST: function (request, options) {
            return (0, exports.SnsListenerControllerApiFp)(configuration).handleIncomingEmailsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SnsListenerControllerApiFactory = SnsListenerControllerApiFactory;
/**
 * SnsListenerControllerApi - object-oriented interface
 * @export
 * @class SnsListenerControllerApi
 * @extends {BaseAPI}
 */
var SnsListenerControllerApi = /** @class */ (function (_super) {
    __extends(SnsListenerControllerApi, _super);
    function SnsListenerControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary handleBounceComplaintEmails
     * @param {SNSNotificationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnsListenerControllerApi
     */
    SnsListenerControllerApi.prototype.handleBounceComplaintEmailsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.SnsListenerControllerApiFp)(this.configuration).handleBounceComplaintEmailsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary handleIncomingEmails
     * @param {SNSNotificationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnsListenerControllerApi
     */
    SnsListenerControllerApi.prototype.handleIncomingEmailsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.SnsListenerControllerApiFp)(this.configuration).handleIncomingEmailsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SnsListenerControllerApi;
}(base_1.BaseAPI));
exports.SnsListenerControllerApi = SnsListenerControllerApi;
/**
 * SocialLoginControllerApi - axios parameter creator
 * @export
 */
var SocialLoginControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary appleConnect
         * @param {AppleLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleConnectUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling appleConnectUsingPOST.');
                    }
                    localVarPath = "/api/v1/connect/apple";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary facebookConnect
         * @param {string} providerId providerId
         * @param {SocialLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facebookConnectUsingPOST: function (providerId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'providerId' is not null or undefined
                    if (providerId === null || providerId === undefined) {
                        throw new base_1.RequiredError('providerId', 'Required parameter providerId was null or undefined when calling facebookConnectUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling facebookConnectUsingPOST.');
                    }
                    localVarPath = "/api/v1/connect/{providerId}"
                        .replace("{" + "providerId" + "}", encodeURIComponent(String(providerId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.SocialLoginControllerApiAxiosParamCreator = SocialLoginControllerApiAxiosParamCreator;
/**
 * SocialLoginControllerApi - functional programming interface
 * @export
 */
var SocialLoginControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary appleConnect
         * @param {AppleLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleConnectUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.SocialLoginControllerApiAxiosParamCreator)(configuration).appleConnectUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary facebookConnect
         * @param {string} providerId providerId
         * @param {SocialLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facebookConnectUsingPOST: function (providerId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.SocialLoginControllerApiAxiosParamCreator)(configuration).facebookConnectUsingPOST(providerId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.SocialLoginControllerApiFp = SocialLoginControllerApiFp;
/**
 * SocialLoginControllerApi - factory interface
 * @export
 */
var SocialLoginControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary appleConnect
         * @param {AppleLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleConnectUsingPOST: function (request, options) {
            return (0, exports.SocialLoginControllerApiFp)(configuration).appleConnectUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary facebookConnect
         * @param {string} providerId providerId
         * @param {SocialLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facebookConnectUsingPOST: function (providerId, request, options) {
            return (0, exports.SocialLoginControllerApiFp)(configuration).facebookConnectUsingPOST(providerId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SocialLoginControllerApiFactory = SocialLoginControllerApiFactory;
/**
 * SocialLoginControllerApi - object-oriented interface
 * @export
 * @class SocialLoginControllerApi
 * @extends {BaseAPI}
 */
var SocialLoginControllerApi = /** @class */ (function (_super) {
    __extends(SocialLoginControllerApi, _super);
    function SocialLoginControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary appleConnect
     * @param {AppleLoginRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialLoginControllerApi
     */
    SocialLoginControllerApi.prototype.appleConnectUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.SocialLoginControllerApiFp)(this.configuration).appleConnectUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary facebookConnect
     * @param {string} providerId providerId
     * @param {SocialLoginRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialLoginControllerApi
     */
    SocialLoginControllerApi.prototype.facebookConnectUsingPOST = function (providerId, request, options) {
        var _this = this;
        return (0, exports.SocialLoginControllerApiFp)(this.configuration).facebookConnectUsingPOST(providerId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SocialLoginControllerApi;
}(base_1.BaseAPI));
exports.SocialLoginControllerApi = SocialLoginControllerApi;
/**
 * StripeCardControllerApi - axios parameter creator
 * @export
 */
var StripeCardControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addACHToLawfirmStripeAccount
         * @param {string} lawfirmId lawfirmId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToLawfirmStripeAccountUsingPOST: function (lawfirmId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/stripe/ach"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary addACHToUserStripeAccount
         * @param {string} userId userId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToUserStripeAccountUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/{userId}/stripe/ach"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary addCardToStripeAccount
         * @param {AddCardToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToStripeAccountUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addCardToStripeAccountUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/stripe/account/cards";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteBankAccountFromLawfirmStripeAccount
         * @param {string} bankAccountId bankAccountId
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccountFromLawfirmStripeAccountUsingDELETE: function (bankAccountId, lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    if (bankAccountId === null || bankAccountId === undefined) {
                        throw new base_1.RequiredError('bankAccountId', 'Required parameter bankAccountId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
                    }
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/stripe/bank-accounts/{bankAccountId}"
                        .replace("{" + "bankAccountId" + "}", encodeURIComponent(String(bankAccountId)))
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteCardForUser
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardForUserUsingDELETE: function (cardId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'cardId' is not null or undefined
                    if (cardId === null || cardId === undefined) {
                        throw new base_1.RequiredError('cardId', 'Required parameter cardId was null or undefined when calling deleteCardForUserUsingDELETE.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling deleteCardForUserUsingDELETE.');
                    }
                    localVarPath = "/api/v1/users/{userId}/stripe/account/cards/{cardId}"
                        .replace("{" + "cardId" + "}", encodeURIComponent(String(cardId)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardUsingDELETE: function (cardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'cardId' is not null or undefined
                    if (cardId === null || cardId === undefined) {
                        throw new base_1.RequiredError('cardId', 'Required parameter cardId was null or undefined when calling deleteCardUsingDELETE.');
                    }
                    localVarPath = "/api/v1/users/stripe/account/cards/{cardId}"
                        .replace("{" + "cardId" + "}", encodeURIComponent(String(cardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsingGET: function (cardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'cardId' is not null or undefined
                    if (cardId === null || cardId === undefined) {
                        throw new base_1.RequiredError('cardId', 'Required parameter cardId was null or undefined when calling getCardUsingGET.');
                    }
                    localVarPath = "/api/v1/users/stripe/account/cards/{cardId}"
                        .replace("{" + "cardId" + "}", encodeURIComponent(String(cardId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPaymentMethodsUsingGET: function (lawfirmId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling getLawfirmPaymentMethodsUsingGET.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/paymentmethods"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieves all the payment methods available on the user\'s Stripe account.
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForUserUsingGET: function (userIdString, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userIdString' is not null or undefined
                    if (userIdString === null || userIdString === undefined) {
                        throw new base_1.RequiredError('userIdString', 'Required parameter userIdString was null or undefined when calling getPaymentMethodsForUserUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userIdString}/paymentmethods"
                        .replace("{" + "userIdString" + "}", encodeURIComponent(String(userIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setCardAsPrimary
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCardAsPrimaryUsingPUT: function (cardId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'cardId' is not null or undefined
                    if (cardId === null || cardId === undefined) {
                        throw new base_1.RequiredError('cardId', 'Required parameter cardId was null or undefined when calling setCardAsPrimaryUsingPUT.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling setCardAsPrimaryUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/{userId}/account/cards/{cardId}/primary"
                        .replace("{" + "cardId" + "}", encodeURIComponent(String(cardId)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setDefaultPaymentMethodForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripePaymentSourceId stripePaymentSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultPaymentMethodForLawfirmUsingPUT: function (lawfirmId, stripePaymentSourceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lawfirmId' is not null or undefined
                    if (lawfirmId === null || lawfirmId === undefined) {
                        throw new base_1.RequiredError('lawfirmId', 'Required parameter lawfirmId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
                    }
                    // verify required parameter 'stripePaymentSourceId' is not null or undefined
                    if (stripePaymentSourceId === null || stripePaymentSourceId === undefined) {
                        throw new base_1.RequiredError('stripePaymentSourceId', 'Required parameter stripePaymentSourceId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
                    }
                    localVarPath = "/api/v1/lawfirms/{lawfirmId}/stripe/payment-methods/default"
                        .replace("{" + "lawfirmId" + "}", encodeURIComponent(String(lawfirmId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (stripePaymentSourceId !== undefined) {
                        localVarQueryParameter['stripePaymentSourceId'] = stripePaymentSourceId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.StripeCardControllerApiAxiosParamCreator = StripeCardControllerApiAxiosParamCreator;
/**
 * StripeCardControllerApi - functional programming interface
 * @export
 */
var StripeCardControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addACHToLawfirmStripeAccount
         * @param {string} lawfirmId lawfirmId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToLawfirmStripeAccountUsingPOST: function (lawfirmId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).addACHToLawfirmStripeAccountUsingPOST(lawfirmId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary addACHToUserStripeAccount
         * @param {string} userId userId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToUserStripeAccountUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).addACHToUserStripeAccountUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary addCardToStripeAccount
         * @param {AddCardToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToStripeAccountUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).addCardToStripeAccountUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteBankAccountFromLawfirmStripeAccount
         * @param {string} bankAccountId bankAccountId
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccountFromLawfirmStripeAccountUsingDELETE: function (bankAccountId, lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId, lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteCardForUser
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardForUserUsingDELETE: function (cardId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).deleteCardForUserUsingDELETE(cardId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardUsingDELETE: function (cardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).deleteCardUsingDELETE(cardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsingGET: function (cardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).getCardUsingGET(cardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPaymentMethodsUsingGET: function (lawfirmId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).getLawfirmPaymentMethodsUsingGET(lawfirmId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieves all the payment methods available on the user\'s Stripe account.
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForUserUsingGET: function (userIdString, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).getPaymentMethodsForUserUsingGET(userIdString, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setCardAsPrimary
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCardAsPrimaryUsingPUT: function (cardId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).setCardAsPrimaryUsingPUT(cardId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setDefaultPaymentMethodForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripePaymentSourceId stripePaymentSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultPaymentMethodForLawfirmUsingPUT: function (lawfirmId, stripePaymentSourceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeCardControllerApiAxiosParamCreator)(configuration).setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId, stripePaymentSourceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.StripeCardControllerApiFp = StripeCardControllerApiFp;
/**
 * StripeCardControllerApi - factory interface
 * @export
 */
var StripeCardControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addACHToLawfirmStripeAccount
         * @param {string} lawfirmId lawfirmId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToLawfirmStripeAccountUsingPOST: function (lawfirmId, request, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).addACHToLawfirmStripeAccountUsingPOST(lawfirmId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary addACHToUserStripeAccount
         * @param {string} userId userId
         * @param {AddACHToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addACHToUserStripeAccountUsingPOST: function (userId, request, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).addACHToUserStripeAccountUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary addCardToStripeAccount
         * @param {AddCardToStripeAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToStripeAccountUsingPOST: function (request, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).addCardToStripeAccountUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteBankAccountFromLawfirmStripeAccount
         * @param {string} bankAccountId bankAccountId
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccountFromLawfirmStripeAccountUsingDELETE: function (bankAccountId, lawfirmId, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId, lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteCardForUser
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardForUserUsingDELETE: function (cardId, userId, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).deleteCardForUserUsingDELETE(cardId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardUsingDELETE: function (cardId, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).deleteCardUsingDELETE(cardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCard
         * @param {string} cardId cardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsingGET: function (cardId, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).getCardUsingGET(cardId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
         * @param {number} lawfirmId lawfirmId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLawfirmPaymentMethodsUsingGET: function (lawfirmId, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).getLawfirmPaymentMethodsUsingGET(lawfirmId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieves all the payment methods available on the user\'s Stripe account.
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethodsForUserUsingGET: function (userIdString, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).getPaymentMethodsForUserUsingGET(userIdString, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setCardAsPrimary
         * @param {string} cardId cardId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCardAsPrimaryUsingPUT: function (cardId, userId, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).setCardAsPrimaryUsingPUT(cardId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setDefaultPaymentMethodForLawfirm
         * @param {number} lawfirmId lawfirmId
         * @param {string} stripePaymentSourceId stripePaymentSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultPaymentMethodForLawfirmUsingPUT: function (lawfirmId, stripePaymentSourceId, options) {
            return (0, exports.StripeCardControllerApiFp)(configuration).setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId, stripePaymentSourceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StripeCardControllerApiFactory = StripeCardControllerApiFactory;
/**
 * StripeCardControllerApi - object-oriented interface
 * @export
 * @class StripeCardControllerApi
 * @extends {BaseAPI}
 */
var StripeCardControllerApi = /** @class */ (function (_super) {
    __extends(StripeCardControllerApi, _super);
    function StripeCardControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addACHToLawfirmStripeAccount
     * @param {string} lawfirmId lawfirmId
     * @param {AddACHToStripeAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.addACHToLawfirmStripeAccountUsingPOST = function (lawfirmId, request, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).addACHToLawfirmStripeAccountUsingPOST(lawfirmId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary addACHToUserStripeAccount
     * @param {string} userId userId
     * @param {AddACHToStripeAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.addACHToUserStripeAccountUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).addACHToUserStripeAccountUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary addCardToStripeAccount
     * @param {AddCardToStripeAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.addCardToStripeAccountUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).addCardToStripeAccountUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteBankAccountFromLawfirmStripeAccount
     * @param {string} bankAccountId bankAccountId
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.deleteBankAccountFromLawfirmStripeAccountUsingDELETE = function (bankAccountId, lawfirmId, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).deleteBankAccountFromLawfirmStripeAccountUsingDELETE(bankAccountId, lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteCardForUser
     * @param {string} cardId cardId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.deleteCardForUserUsingDELETE = function (cardId, userId, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).deleteCardForUserUsingDELETE(cardId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteCard
     * @param {string} cardId cardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.deleteCardUsingDELETE = function (cardId, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).deleteCardUsingDELETE(cardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCard
     * @param {string} cardId cardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.getCardUsingGET = function (cardId, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).getCardUsingGET(cardId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all the payment methods available on the lawfirm\'s Stripe account.
     * @param {number} lawfirmId lawfirmId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.getLawfirmPaymentMethodsUsingGET = function (lawfirmId, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).getLawfirmPaymentMethodsUsingGET(lawfirmId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieves all the payment methods available on the user\'s Stripe account.
     * @param {string} userIdString userIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.getPaymentMethodsForUserUsingGET = function (userIdString, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).getPaymentMethodsForUserUsingGET(userIdString, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setCardAsPrimary
     * @param {string} cardId cardId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.setCardAsPrimaryUsingPUT = function (cardId, userId, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).setCardAsPrimaryUsingPUT(cardId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setDefaultPaymentMethodForLawfirm
     * @param {number} lawfirmId lawfirmId
     * @param {string} stripePaymentSourceId stripePaymentSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeCardControllerApi
     */
    StripeCardControllerApi.prototype.setDefaultPaymentMethodForLawfirmUsingPUT = function (lawfirmId, stripePaymentSourceId, options) {
        var _this = this;
        return (0, exports.StripeCardControllerApiFp)(this.configuration).setDefaultPaymentMethodForLawfirmUsingPUT(lawfirmId, stripePaymentSourceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StripeCardControllerApi;
}(base_1.BaseAPI));
exports.StripeCardControllerApi = StripeCardControllerApi;
/**
 * StripeControllerApi - axios parameter creator
 * @export
 */
var StripeControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary connectStripeAccount
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectStripeAccountUsingPOST: function (code, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'code' is not null or undefined
                    if (code === null || code === undefined) {
                        throw new base_1.RequiredError('code', 'Required parameter code was null or undefined when calling connectStripeAccountUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/connect";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (code !== undefined) {
                        localVarQueryParameter['code'] = code;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary createConnectAccountLink
         * @param {CreateConnectAccountLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectAccountLinkUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createConnectAccountLinkUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/account/link";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary createStripeConnectAccount
         * @param {CreateStripeConnectAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeConnectAccountUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling createStripeConnectAccountUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/account";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary handleOrphanedStripeCharges
         * @param {HandleOrphanedStripeChargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleOrphanedStripeChargesUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling handleOrphanedStripeChargesUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/handle-orphaned-stripe-charges";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateDispute
         * @param {string} disputeId disputeId
         * @param {UpdateDisputeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisputeUsingPUT: function (disputeId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling updateDisputeUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateDisputeUsingPUT.');
                    }
                    localVarPath = "/api/v1/stripe/disputes/{disputeId}"
                        .replace("{" + "disputeId" + "}", encodeURIComponent(String(disputeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.StripeControllerApiAxiosParamCreator = StripeControllerApiAxiosParamCreator;
/**
 * StripeControllerApi - functional programming interface
 * @export
 */
var StripeControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary connectStripeAccount
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectStripeAccountUsingPOST: function (code, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeControllerApiAxiosParamCreator)(configuration).connectStripeAccountUsingPOST(code, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary createConnectAccountLink
         * @param {CreateConnectAccountLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectAccountLinkUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeControllerApiAxiosParamCreator)(configuration).createConnectAccountLinkUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary createStripeConnectAccount
         * @param {CreateStripeConnectAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeConnectAccountUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeControllerApiAxiosParamCreator)(configuration).createStripeConnectAccountUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary handleOrphanedStripeCharges
         * @param {HandleOrphanedStripeChargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleOrphanedStripeChargesUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeControllerApiAxiosParamCreator)(configuration).handleOrphanedStripeChargesUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateDispute
         * @param {string} disputeId disputeId
         * @param {UpdateDisputeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisputeUsingPUT: function (disputeId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeControllerApiAxiosParamCreator)(configuration).updateDisputeUsingPUT(disputeId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.StripeControllerApiFp = StripeControllerApiFp;
/**
 * StripeControllerApi - factory interface
 * @export
 */
var StripeControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary connectStripeAccount
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectStripeAccountUsingPOST: function (code, options) {
            return (0, exports.StripeControllerApiFp)(configuration).connectStripeAccountUsingPOST(code, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary createConnectAccountLink
         * @param {CreateConnectAccountLinkRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectAccountLinkUsingPOST: function (request, options) {
            return (0, exports.StripeControllerApiFp)(configuration).createConnectAccountLinkUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary createStripeConnectAccount
         * @param {CreateStripeConnectAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeConnectAccountUsingPOST: function (request, options) {
            return (0, exports.StripeControllerApiFp)(configuration).createStripeConnectAccountUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary handleOrphanedStripeCharges
         * @param {HandleOrphanedStripeChargeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleOrphanedStripeChargesUsingPOST: function (request, options) {
            return (0, exports.StripeControllerApiFp)(configuration).handleOrphanedStripeChargesUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateDispute
         * @param {string} disputeId disputeId
         * @param {UpdateDisputeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisputeUsingPUT: function (disputeId, request, options) {
            return (0, exports.StripeControllerApiFp)(configuration).updateDisputeUsingPUT(disputeId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StripeControllerApiFactory = StripeControllerApiFactory;
/**
 * StripeControllerApi - object-oriented interface
 * @export
 * @class StripeControllerApi
 * @extends {BaseAPI}
 */
var StripeControllerApi = /** @class */ (function (_super) {
    __extends(StripeControllerApi, _super);
    function StripeControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary connectStripeAccount
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    StripeControllerApi.prototype.connectStripeAccountUsingPOST = function (code, options) {
        var _this = this;
        return (0, exports.StripeControllerApiFp)(this.configuration).connectStripeAccountUsingPOST(code, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary createConnectAccountLink
     * @param {CreateConnectAccountLinkRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    StripeControllerApi.prototype.createConnectAccountLinkUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeControllerApiFp)(this.configuration).createConnectAccountLinkUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary createStripeConnectAccount
     * @param {CreateStripeConnectAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    StripeControllerApi.prototype.createStripeConnectAccountUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeControllerApiFp)(this.configuration).createStripeConnectAccountUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary handleOrphanedStripeCharges
     * @param {HandleOrphanedStripeChargeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    StripeControllerApi.prototype.handleOrphanedStripeChargesUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeControllerApiFp)(this.configuration).handleOrphanedStripeChargesUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateDispute
     * @param {string} disputeId disputeId
     * @param {UpdateDisputeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeControllerApi
     */
    StripeControllerApi.prototype.updateDisputeUsingPUT = function (disputeId, request, options) {
        var _this = this;
        return (0, exports.StripeControllerApiFp)(this.configuration).updateDisputeUsingPUT(disputeId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StripeControllerApi;
}(base_1.BaseAPI));
exports.StripeControllerApi = StripeControllerApi;
/**
 * StripeSyncControllerApi - axios parameter creator
 * @export
 */
var StripeSyncControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary syncAllDisputes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncAllDisputesUsingPOST: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/stripe/disputes/sync-all";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary syncDispute
         * @param {string} disputeId disputeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncDisputeUsingPOST: function (disputeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'disputeId' is not null or undefined
                    if (disputeId === null || disputeId === undefined) {
                        throw new base_1.RequiredError('disputeId', 'Required parameter disputeId was null or undefined when calling syncDisputeUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/disputes/{disputeId}/sync"
                        .replace("{" + "disputeId" + "}", encodeURIComponent(String(disputeId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary syncStripeCharges
         * @param {SyncStripeChargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeChargesUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling syncStripeChargesUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/sync-stripe-charges";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary syncStripePayments
         * @param {SyncStripePaymentsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripePaymentsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling syncStripePaymentsUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/payments/sync";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary syncStripeRefunds
         * @param {SyncStripeRefundsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeRefundsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling syncStripeRefundsUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/sync-stripe-refunds";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary syncStripeTransfers
         * @param {SyncStripeTransfersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeTransfersUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling syncStripeTransfersUsingPOST.');
                    }
                    localVarPath = "/api/v1/stripe/transfers/sync";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.StripeSyncControllerApiAxiosParamCreator = StripeSyncControllerApiAxiosParamCreator;
/**
 * StripeSyncControllerApi - functional programming interface
 * @export
 */
var StripeSyncControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary syncAllDisputes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncAllDisputesUsingPOST: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeSyncControllerApiAxiosParamCreator)(configuration).syncAllDisputesUsingPOST(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary syncDispute
         * @param {string} disputeId disputeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncDisputeUsingPOST: function (disputeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeSyncControllerApiAxiosParamCreator)(configuration).syncDisputeUsingPOST(disputeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary syncStripeCharges
         * @param {SyncStripeChargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeChargesUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeSyncControllerApiAxiosParamCreator)(configuration).syncStripeChargesUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary syncStripePayments
         * @param {SyncStripePaymentsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripePaymentsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeSyncControllerApiAxiosParamCreator)(configuration).syncStripePaymentsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary syncStripeRefunds
         * @param {SyncStripeRefundsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeRefundsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeSyncControllerApiAxiosParamCreator)(configuration).syncStripeRefundsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary syncStripeTransfers
         * @param {SyncStripeTransfersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeTransfersUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeSyncControllerApiAxiosParamCreator)(configuration).syncStripeTransfersUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.StripeSyncControllerApiFp = StripeSyncControllerApiFp;
/**
 * StripeSyncControllerApi - factory interface
 * @export
 */
var StripeSyncControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary syncAllDisputes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncAllDisputesUsingPOST: function (options) {
            return (0, exports.StripeSyncControllerApiFp)(configuration).syncAllDisputesUsingPOST(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary syncDispute
         * @param {string} disputeId disputeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncDisputeUsingPOST: function (disputeId, options) {
            return (0, exports.StripeSyncControllerApiFp)(configuration).syncDisputeUsingPOST(disputeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary syncStripeCharges
         * @param {SyncStripeChargesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeChargesUsingPOST: function (request, options) {
            return (0, exports.StripeSyncControllerApiFp)(configuration).syncStripeChargesUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary syncStripePayments
         * @param {SyncStripePaymentsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripePaymentsUsingPOST: function (request, options) {
            return (0, exports.StripeSyncControllerApiFp)(configuration).syncStripePaymentsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary syncStripeRefunds
         * @param {SyncStripeRefundsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeRefundsUsingPOST: function (request, options) {
            return (0, exports.StripeSyncControllerApiFp)(configuration).syncStripeRefundsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary syncStripeTransfers
         * @param {SyncStripeTransfersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncStripeTransfersUsingPOST: function (request, options) {
            return (0, exports.StripeSyncControllerApiFp)(configuration).syncStripeTransfersUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StripeSyncControllerApiFactory = StripeSyncControllerApiFactory;
/**
 * StripeSyncControllerApi - object-oriented interface
 * @export
 * @class StripeSyncControllerApi
 * @extends {BaseAPI}
 */
var StripeSyncControllerApi = /** @class */ (function (_super) {
    __extends(StripeSyncControllerApi, _super);
    function StripeSyncControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary syncAllDisputes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    StripeSyncControllerApi.prototype.syncAllDisputesUsingPOST = function (options) {
        var _this = this;
        return (0, exports.StripeSyncControllerApiFp)(this.configuration).syncAllDisputesUsingPOST(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary syncDispute
     * @param {string} disputeId disputeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    StripeSyncControllerApi.prototype.syncDisputeUsingPOST = function (disputeId, options) {
        var _this = this;
        return (0, exports.StripeSyncControllerApiFp)(this.configuration).syncDisputeUsingPOST(disputeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary syncStripeCharges
     * @param {SyncStripeChargesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    StripeSyncControllerApi.prototype.syncStripeChargesUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeSyncControllerApiFp)(this.configuration).syncStripeChargesUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary syncStripePayments
     * @param {SyncStripePaymentsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    StripeSyncControllerApi.prototype.syncStripePaymentsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeSyncControllerApiFp)(this.configuration).syncStripePaymentsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary syncStripeRefunds
     * @param {SyncStripeRefundsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    StripeSyncControllerApi.prototype.syncStripeRefundsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeSyncControllerApiFp)(this.configuration).syncStripeRefundsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary syncStripeTransfers
     * @param {SyncStripeTransfersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeSyncControllerApi
     */
    StripeSyncControllerApi.prototype.syncStripeTransfersUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeSyncControllerApiFp)(this.configuration).syncStripeTransfersUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StripeSyncControllerApi;
}(base_1.BaseAPI));
exports.StripeSyncControllerApi = StripeSyncControllerApi;
/**
 * StripeWebhookControllerApi - axios parameter creator
 * @export
 */
var StripeWebhookControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary handleStripeWebhookFromLawfirmAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromLawfirmAccountUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/stripe/acct_15jGPnDVzhogLb0T/webhook";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary handleStripeWebhookFromOTRAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromOTRAccountUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.StripeWebhookControllerApiAxiosParamCreator = StripeWebhookControllerApiAxiosParamCreator;
/**
 * StripeWebhookControllerApi - functional programming interface
 * @export
 */
var StripeWebhookControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary handleStripeWebhookFromLawfirmAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromLawfirmAccountUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeWebhookControllerApiAxiosParamCreator)(configuration).handleStripeWebhookFromLawfirmAccountUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary handleStripeWebhookFromOTRAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromOTRAccountUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.StripeWebhookControllerApiAxiosParamCreator)(configuration).handleStripeWebhookFromOTRAccountUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.StripeWebhookControllerApiFp = StripeWebhookControllerApiFp;
/**
 * StripeWebhookControllerApi - factory interface
 * @export
 */
var StripeWebhookControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary handleStripeWebhookFromLawfirmAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromLawfirmAccountUsingPOST: function (request, options) {
            return (0, exports.StripeWebhookControllerApiFp)(configuration).handleStripeWebhookFromLawfirmAccountUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary handleStripeWebhookFromOTRAccount
         * @param {string} [request] request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleStripeWebhookFromOTRAccountUsingPOST: function (request, options) {
            return (0, exports.StripeWebhookControllerApiFp)(configuration).handleStripeWebhookFromOTRAccountUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StripeWebhookControllerApiFactory = StripeWebhookControllerApiFactory;
/**
 * StripeWebhookControllerApi - object-oriented interface
 * @export
 * @class StripeWebhookControllerApi
 * @extends {BaseAPI}
 */
var StripeWebhookControllerApi = /** @class */ (function (_super) {
    __extends(StripeWebhookControllerApi, _super);
    function StripeWebhookControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary handleStripeWebhookFromLawfirmAccount
     * @param {string} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeWebhookControllerApi
     */
    StripeWebhookControllerApi.prototype.handleStripeWebhookFromLawfirmAccountUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeWebhookControllerApiFp)(this.configuration).handleStripeWebhookFromLawfirmAccountUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary handleStripeWebhookFromOTRAccount
     * @param {string} [request] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeWebhookControllerApi
     */
    StripeWebhookControllerApi.prototype.handleStripeWebhookFromOTRAccountUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.StripeWebhookControllerApiFp)(this.configuration).handleStripeWebhookFromOTRAccountUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StripeWebhookControllerApi;
}(base_1.BaseAPI));
exports.StripeWebhookControllerApi = StripeWebhookControllerApi;
/**
 * TicketReviewControllerApi - axios parameter creator
 * @export
 */
var TicketReviewControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getTicketReviewInfo
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketReviewInfoUsingGET: function (citationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'citationId' is not null or undefined
                    if (citationId === null || citationId === undefined) {
                        throw new base_1.RequiredError('citationId', 'Required parameter citationId was null or undefined when calling getTicketReviewInfoUsingGET.');
                    }
                    localVarPath = "/api/v1/citations/{citationId}/ticket-review"
                        .replace("{" + "citationId" + "}", encodeURIComponent(String(citationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary persistTicketEvaluation
         * @param {PersistTicketEvaluationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        persistTicketEvaluationUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling persistTicketEvaluationUsingPOST.');
                    }
                    localVarPath = "/api/v1/ticket-evaluation";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateTicketEvaluationRequest
         * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
         * @param {TicketReviewRequestReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketEvaluationRequestUsingPUT: function (ticketEvaluationRequestId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'ticketEvaluationRequestId' is not null or undefined
                    if (ticketEvaluationRequestId === null || ticketEvaluationRequestId === undefined) {
                        throw new base_1.RequiredError('ticketEvaluationRequestId', 'Required parameter ticketEvaluationRequestId was null or undefined when calling updateTicketEvaluationRequestUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateTicketEvaluationRequestUsingPUT.');
                    }
                    localVarPath = "/api/v1/ticket-evaluation/{ticketEvaluationRequestId}"
                        .replace("{" + "ticketEvaluationRequestId" + "}", encodeURIComponent(String(ticketEvaluationRequestId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TicketReviewControllerApiAxiosParamCreator = TicketReviewControllerApiAxiosParamCreator;
/**
 * TicketReviewControllerApi - functional programming interface
 * @export
 */
var TicketReviewControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getTicketReviewInfo
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketReviewInfoUsingGET: function (citationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TicketReviewControllerApiAxiosParamCreator)(configuration).getTicketReviewInfoUsingGET(citationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary persistTicketEvaluation
         * @param {PersistTicketEvaluationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        persistTicketEvaluationUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TicketReviewControllerApiAxiosParamCreator)(configuration).persistTicketEvaluationUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateTicketEvaluationRequest
         * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
         * @param {TicketReviewRequestReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketEvaluationRequestUsingPUT: function (ticketEvaluationRequestId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TicketReviewControllerApiAxiosParamCreator)(configuration).updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.TicketReviewControllerApiFp = TicketReviewControllerApiFp;
/**
 * TicketReviewControllerApi - factory interface
 * @export
 */
var TicketReviewControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getTicketReviewInfo
         * @param {string} citationId citationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketReviewInfoUsingGET: function (citationId, options) {
            return (0, exports.TicketReviewControllerApiFp)(configuration).getTicketReviewInfoUsingGET(citationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary persistTicketEvaluation
         * @param {PersistTicketEvaluationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        persistTicketEvaluationUsingPOST: function (request, options) {
            return (0, exports.TicketReviewControllerApiFp)(configuration).persistTicketEvaluationUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateTicketEvaluationRequest
         * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
         * @param {TicketReviewRequestReq} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketEvaluationRequestUsingPUT: function (ticketEvaluationRequestId, request, options) {
            return (0, exports.TicketReviewControllerApiFp)(configuration).updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TicketReviewControllerApiFactory = TicketReviewControllerApiFactory;
/**
 * TicketReviewControllerApi - object-oriented interface
 * @export
 * @class TicketReviewControllerApi
 * @extends {BaseAPI}
 */
var TicketReviewControllerApi = /** @class */ (function (_super) {
    __extends(TicketReviewControllerApi, _super);
    function TicketReviewControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getTicketReviewInfo
     * @param {string} citationId citationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketReviewControllerApi
     */
    TicketReviewControllerApi.prototype.getTicketReviewInfoUsingGET = function (citationId, options) {
        var _this = this;
        return (0, exports.TicketReviewControllerApiFp)(this.configuration).getTicketReviewInfoUsingGET(citationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary persistTicketEvaluation
     * @param {PersistTicketEvaluationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketReviewControllerApi
     */
    TicketReviewControllerApi.prototype.persistTicketEvaluationUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.TicketReviewControllerApiFp)(this.configuration).persistTicketEvaluationUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateTicketEvaluationRequest
     * @param {number} ticketEvaluationRequestId ticketEvaluationRequestId
     * @param {TicketReviewRequestReq} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketReviewControllerApi
     */
    TicketReviewControllerApi.prototype.updateTicketEvaluationRequestUsingPUT = function (ticketEvaluationRequestId, request, options) {
        var _this = this;
        return (0, exports.TicketReviewControllerApiFp)(this.configuration).updateTicketEvaluationRequestUsingPUT(ticketEvaluationRequestId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TicketReviewControllerApi;
}(base_1.BaseAPI));
exports.TicketReviewControllerApi = TicketReviewControllerApi;
/**
 * TrafficViolationControllerApi - axios parameter creator
 * @export
 */
var TrafficViolationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addViolation
         * @param {boolean} isLive isLive
         * @param {AddViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationUsingPOST: function (isLive, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'isLive' is not null or undefined
                    if (isLive === null || isLive === undefined) {
                        throw new base_1.RequiredError('isLive', 'Required parameter isLive was null or undefined when calling addViolationUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addViolationUsingPOST.');
                    }
                    localVarPath = "/api/v1/violations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (isLive !== undefined) {
                        localVarQueryParameter['isLive'] = isLive;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteViolation
         * @param {number} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViolationUsingDELETE: function (violationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'violationId' is not null or undefined
                    if (violationId === null || violationId === undefined) {
                        throw new base_1.RequiredError('violationId', 'Required parameter violationId was null or undefined when calling deleteViolationUsingDELETE.');
                    }
                    localVarPath = "/api/v1/violations/{violationId}"
                        .replace("{" + "violationId" + "}", encodeURIComponent(String(violationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getRegionsWithViolations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsWithViolationsUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/violations/region-availability";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getTrafficViolationTypes
         * @param {string} [audience] audience
         * @param {string} [flavor] flavor
         * @param {boolean} [includePenalties] includePenalties
         * @param {string} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrafficViolationTypesUsingGET: function (audience, flavor, includePenalties, state, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/violations";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (audience !== undefined) {
                        localVarQueryParameter['audience'] = audience;
                    }
                    if (flavor !== undefined) {
                        localVarQueryParameter['flavor'] = flavor;
                    }
                    if (includePenalties !== undefined) {
                        localVarQueryParameter['includePenalties'] = includePenalties;
                    }
                    if (state !== undefined) {
                        localVarQueryParameter['state'] = state;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary listViolationClassifications
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViolationClassificationsUsingGET: function (regionCode, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/violations/classifications";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (regionCode !== undefined) {
                        localVarQueryParameter['regionCode'] = regionCode;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateViolation
         * @param {number} violationId violationId
         * @param {UpdateViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViolationUsingPUT: function (violationId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'violationId' is not null or undefined
                    if (violationId === null || violationId === undefined) {
                        throw new base_1.RequiredError('violationId', 'Required parameter violationId was null or undefined when calling updateViolationUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateViolationUsingPUT.');
                    }
                    localVarPath = "/api/v1/violations/{violationId}"
                        .replace("{" + "violationId" + "}", encodeURIComponent(String(violationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TrafficViolationControllerApiAxiosParamCreator = TrafficViolationControllerApiAxiosParamCreator;
/**
 * TrafficViolationControllerApi - functional programming interface
 * @export
 */
var TrafficViolationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addViolation
         * @param {boolean} isLive isLive
         * @param {AddViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationUsingPOST: function (isLive, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TrafficViolationControllerApiAxiosParamCreator)(configuration).addViolationUsingPOST(isLive, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteViolation
         * @param {number} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViolationUsingDELETE: function (violationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TrafficViolationControllerApiAxiosParamCreator)(configuration).deleteViolationUsingDELETE(violationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getRegionsWithViolations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsWithViolationsUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TrafficViolationControllerApiAxiosParamCreator)(configuration).getRegionsWithViolationsUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getTrafficViolationTypes
         * @param {string} [audience] audience
         * @param {string} [flavor] flavor
         * @param {boolean} [includePenalties] includePenalties
         * @param {string} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrafficViolationTypesUsingGET: function (audience, flavor, includePenalties, state, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TrafficViolationControllerApiAxiosParamCreator)(configuration).getTrafficViolationTypesUsingGET(audience, flavor, includePenalties, state, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary listViolationClassifications
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViolationClassificationsUsingGET: function (regionCode, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TrafficViolationControllerApiAxiosParamCreator)(configuration).listViolationClassificationsUsingGET(regionCode, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateViolation
         * @param {number} violationId violationId
         * @param {UpdateViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViolationUsingPUT: function (violationId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.TrafficViolationControllerApiAxiosParamCreator)(configuration).updateViolationUsingPUT(violationId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.TrafficViolationControllerApiFp = TrafficViolationControllerApiFp;
/**
 * TrafficViolationControllerApi - factory interface
 * @export
 */
var TrafficViolationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addViolation
         * @param {boolean} isLive isLive
         * @param {AddViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addViolationUsingPOST: function (isLive, request, options) {
            return (0, exports.TrafficViolationControllerApiFp)(configuration).addViolationUsingPOST(isLive, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteViolation
         * @param {number} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteViolationUsingDELETE: function (violationId, options) {
            return (0, exports.TrafficViolationControllerApiFp)(configuration).deleteViolationUsingDELETE(violationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getRegionsWithViolations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionsWithViolationsUsingGET: function (options) {
            return (0, exports.TrafficViolationControllerApiFp)(configuration).getRegionsWithViolationsUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getTrafficViolationTypes
         * @param {string} [audience] audience
         * @param {string} [flavor] flavor
         * @param {boolean} [includePenalties] includePenalties
         * @param {string} [state] state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrafficViolationTypesUsingGET: function (audience, flavor, includePenalties, state, options) {
            return (0, exports.TrafficViolationControllerApiFp)(configuration).getTrafficViolationTypesUsingGET(audience, flavor, includePenalties, state, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary listViolationClassifications
         * @param {string} [regionCode] regionCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViolationClassificationsUsingGET: function (regionCode, options) {
            return (0, exports.TrafficViolationControllerApiFp)(configuration).listViolationClassificationsUsingGET(regionCode, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateViolation
         * @param {number} violationId violationId
         * @param {UpdateViolationRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViolationUsingPUT: function (violationId, request, options) {
            return (0, exports.TrafficViolationControllerApiFp)(configuration).updateViolationUsingPUT(violationId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TrafficViolationControllerApiFactory = TrafficViolationControllerApiFactory;
/**
 * TrafficViolationControllerApi - object-oriented interface
 * @export
 * @class TrafficViolationControllerApi
 * @extends {BaseAPI}
 */
var TrafficViolationControllerApi = /** @class */ (function (_super) {
    __extends(TrafficViolationControllerApi, _super);
    function TrafficViolationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addViolation
     * @param {boolean} isLive isLive
     * @param {AddViolationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    TrafficViolationControllerApi.prototype.addViolationUsingPOST = function (isLive, request, options) {
        var _this = this;
        return (0, exports.TrafficViolationControllerApiFp)(this.configuration).addViolationUsingPOST(isLive, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteViolation
     * @param {number} violationId violationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    TrafficViolationControllerApi.prototype.deleteViolationUsingDELETE = function (violationId, options) {
        var _this = this;
        return (0, exports.TrafficViolationControllerApiFp)(this.configuration).deleteViolationUsingDELETE(violationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getRegionsWithViolations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    TrafficViolationControllerApi.prototype.getRegionsWithViolationsUsingGET = function (options) {
        var _this = this;
        return (0, exports.TrafficViolationControllerApiFp)(this.configuration).getRegionsWithViolationsUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getTrafficViolationTypes
     * @param {string} [audience] audience
     * @param {string} [flavor] flavor
     * @param {boolean} [includePenalties] includePenalties
     * @param {string} [state] state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    TrafficViolationControllerApi.prototype.getTrafficViolationTypesUsingGET = function (audience, flavor, includePenalties, state, options) {
        var _this = this;
        return (0, exports.TrafficViolationControllerApiFp)(this.configuration).getTrafficViolationTypesUsingGET(audience, flavor, includePenalties, state, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary listViolationClassifications
     * @param {string} [regionCode] regionCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    TrafficViolationControllerApi.prototype.listViolationClassificationsUsingGET = function (regionCode, options) {
        var _this = this;
        return (0, exports.TrafficViolationControllerApiFp)(this.configuration).listViolationClassificationsUsingGET(regionCode, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateViolation
     * @param {number} violationId violationId
     * @param {UpdateViolationRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrafficViolationControllerApi
     */
    TrafficViolationControllerApi.prototype.updateViolationUsingPUT = function (violationId, request, options) {
        var _this = this;
        return (0, exports.TrafficViolationControllerApiFp)(this.configuration).updateViolationUsingPUT(violationId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TrafficViolationControllerApi;
}(base_1.BaseAPI));
exports.TrafficViolationControllerApi = TrafficViolationControllerApi;
/**
 * UrlRedirectControllerApi - axios parameter creator
 * @export
 */
var UrlRedirectControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addRedirectUrl
         * @param {AddRedirectUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRedirectUrlUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addRedirectUrlUsingPOST.');
                    }
                    localVarPath = "/api/v1/redirects";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary clearCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCacheUsingPOST: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/redirects/clear-cache";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getRedirectUrl
         * @param {string} [landingPageUrl] landingPageUrl
         * @param {string} [lawfirmId] lawfirmId
         * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectUrlUsingGET: function (landingPageUrl, lawfirmId, pageType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/redirects";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (landingPageUrl !== undefined) {
                        localVarQueryParameter['landingPageUrl'] = landingPageUrl;
                    }
                    if (lawfirmId !== undefined) {
                        localVarQueryParameter['lawfirmId'] = lawfirmId;
                    }
                    if (pageType !== undefined) {
                        localVarQueryParameter['pageType'] = pageType;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UrlRedirectControllerApiAxiosParamCreator = UrlRedirectControllerApiAxiosParamCreator;
/**
 * UrlRedirectControllerApi - functional programming interface
 * @export
 */
var UrlRedirectControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addRedirectUrl
         * @param {AddRedirectUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRedirectUrlUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UrlRedirectControllerApiAxiosParamCreator)(configuration).addRedirectUrlUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary clearCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCacheUsingPOST: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UrlRedirectControllerApiAxiosParamCreator)(configuration).clearCacheUsingPOST(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getRedirectUrl
         * @param {string} [landingPageUrl] landingPageUrl
         * @param {string} [lawfirmId] lawfirmId
         * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectUrlUsingGET: function (landingPageUrl, lawfirmId, pageType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UrlRedirectControllerApiAxiosParamCreator)(configuration).getRedirectUrlUsingGET(landingPageUrl, lawfirmId, pageType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UrlRedirectControllerApiFp = UrlRedirectControllerApiFp;
/**
 * UrlRedirectControllerApi - factory interface
 * @export
 */
var UrlRedirectControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addRedirectUrl
         * @param {AddRedirectUrlRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRedirectUrlUsingPOST: function (request, options) {
            return (0, exports.UrlRedirectControllerApiFp)(configuration).addRedirectUrlUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary clearCache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCacheUsingPOST: function (options) {
            return (0, exports.UrlRedirectControllerApiFp)(configuration).clearCacheUsingPOST(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getRedirectUrl
         * @param {string} [landingPageUrl] landingPageUrl
         * @param {string} [lawfirmId] lawfirmId
         * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedirectUrlUsingGET: function (landingPageUrl, lawfirmId, pageType, options) {
            return (0, exports.UrlRedirectControllerApiFp)(configuration).getRedirectUrlUsingGET(landingPageUrl, lawfirmId, pageType, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UrlRedirectControllerApiFactory = UrlRedirectControllerApiFactory;
/**
 * UrlRedirectControllerApi - object-oriented interface
 * @export
 * @class UrlRedirectControllerApi
 * @extends {BaseAPI}
 */
var UrlRedirectControllerApi = /** @class */ (function (_super) {
    __extends(UrlRedirectControllerApi, _super);
    function UrlRedirectControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addRedirectUrl
     * @param {AddRedirectUrlRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlRedirectControllerApi
     */
    UrlRedirectControllerApi.prototype.addRedirectUrlUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.UrlRedirectControllerApiFp)(this.configuration).addRedirectUrlUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary clearCache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlRedirectControllerApi
     */
    UrlRedirectControllerApi.prototype.clearCacheUsingPOST = function (options) {
        var _this = this;
        return (0, exports.UrlRedirectControllerApiFp)(this.configuration).clearCacheUsingPOST(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getRedirectUrl
     * @param {string} [landingPageUrl] landingPageUrl
     * @param {string} [lawfirmId] lawfirmId
     * @param {'DEBUG' | 'SEO' | 'VANITY'} [pageType] pageType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlRedirectControllerApi
     */
    UrlRedirectControllerApi.prototype.getRedirectUrlUsingGET = function (landingPageUrl, lawfirmId, pageType, options) {
        var _this = this;
        return (0, exports.UrlRedirectControllerApiFp)(this.configuration).getRedirectUrlUsingGET(landingPageUrl, lawfirmId, pageType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UrlRedirectControllerApi;
}(base_1.BaseAPI));
exports.UrlRedirectControllerApi = UrlRedirectControllerApi;
/**
 * UserAccountControllerApi - axios parameter creator
 * @export
 */
var UserAccountControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addExtraAccount
         * @param {string} userId userId
         * @param {AddExtraAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExtraAccountUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling addExtraAccountUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addExtraAccountUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/{userId}/account"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary removeAdditionalUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdditionalUserHandleUsingDELETE: function (userHandle, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userHandle' is not null or undefined
                    if (userHandle === null || userHandle === undefined) {
                        throw new base_1.RequiredError('userHandle', 'Required parameter userHandle was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
                    }
                    localVarPath = "/api/v1/users/{userId}/accounts/{userHandle}"
                        .replace("{" + "userHandle" + "}", encodeURIComponent(String(userHandle)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setPrimaryUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrimaryUserHandleUsingPUT: function (userHandle, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userHandle' is not null or undefined
                    if (userHandle === null || userHandle === undefined) {
                        throw new base_1.RequiredError('userHandle', 'Required parameter userHandle was null or undefined when calling setPrimaryUserHandleUsingPUT.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling setPrimaryUserHandleUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/{userId}/accounts/{userHandle}/set-primary-user-handle"
                        .replace("{" + "userHandle" + "}", encodeURIComponent(String(userHandle)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UserAccountControllerApiAxiosParamCreator = UserAccountControllerApiAxiosParamCreator;
/**
 * UserAccountControllerApi - functional programming interface
 * @export
 */
var UserAccountControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addExtraAccount
         * @param {string} userId userId
         * @param {AddExtraAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExtraAccountUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserAccountControllerApiAxiosParamCreator)(configuration).addExtraAccountUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary removeAdditionalUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdditionalUserHandleUsingDELETE: function (userHandle, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserAccountControllerApiAxiosParamCreator)(configuration).removeAdditionalUserHandleUsingDELETE(userHandle, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setPrimaryUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrimaryUserHandleUsingPUT: function (userHandle, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserAccountControllerApiAxiosParamCreator)(configuration).setPrimaryUserHandleUsingPUT(userHandle, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UserAccountControllerApiFp = UserAccountControllerApiFp;
/**
 * UserAccountControllerApi - factory interface
 * @export
 */
var UserAccountControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addExtraAccount
         * @param {string} userId userId
         * @param {AddExtraAccountRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExtraAccountUsingPOST: function (userId, request, options) {
            return (0, exports.UserAccountControllerApiFp)(configuration).addExtraAccountUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary removeAdditionalUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdditionalUserHandleUsingDELETE: function (userHandle, userId, options) {
            return (0, exports.UserAccountControllerApiFp)(configuration).removeAdditionalUserHandleUsingDELETE(userHandle, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setPrimaryUserHandle
         * @param {string} userHandle userHandle
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrimaryUserHandleUsingPUT: function (userHandle, userId, options) {
            return (0, exports.UserAccountControllerApiFp)(configuration).setPrimaryUserHandleUsingPUT(userHandle, userId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserAccountControllerApiFactory = UserAccountControllerApiFactory;
/**
 * UserAccountControllerApi - object-oriented interface
 * @export
 * @class UserAccountControllerApi
 * @extends {BaseAPI}
 */
var UserAccountControllerApi = /** @class */ (function (_super) {
    __extends(UserAccountControllerApi, _super);
    function UserAccountControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addExtraAccount
     * @param {string} userId userId
     * @param {AddExtraAccountRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountControllerApi
     */
    UserAccountControllerApi.prototype.addExtraAccountUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.UserAccountControllerApiFp)(this.configuration).addExtraAccountUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary removeAdditionalUserHandle
     * @param {string} userHandle userHandle
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountControllerApi
     */
    UserAccountControllerApi.prototype.removeAdditionalUserHandleUsingDELETE = function (userHandle, userId, options) {
        var _this = this;
        return (0, exports.UserAccountControllerApiFp)(this.configuration).removeAdditionalUserHandleUsingDELETE(userHandle, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setPrimaryUserHandle
     * @param {string} userHandle userHandle
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountControllerApi
     */
    UserAccountControllerApi.prototype.setPrimaryUserHandleUsingPUT = function (userHandle, userId, options) {
        var _this = this;
        return (0, exports.UserAccountControllerApiFp)(this.configuration).setPrimaryUserHandleUsingPUT(userHandle, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserAccountControllerApi;
}(base_1.BaseAPI));
exports.UserAccountControllerApi = UserAccountControllerApi;
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
var UserControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary findChargeDisputesByUserId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByUserIdUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling findChargeDisputesByUserIdUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userId}/disputes"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCurrentUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/user";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getOverduePayments
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverduePaymentsUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getOverduePaymentsUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userId}/overdue-payments"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getSupportTicketsForUser
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForUserUsingGET: function (email, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'email' is not null or undefined
                    if (email === null || email === undefined) {
                        throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling getSupportTicketsForUserUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{email}/support-tickets"
                        .replace("{" + "email" + "}", encodeURIComponent(String(email)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getUserDetails
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetailsUsingGET: function (userIdString, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userIdString' is not null or undefined
                    if (userIdString === null || userIdString === undefined) {
                        throw new base_1.RequiredError('userIdString', 'Required parameter userIdString was null or undefined when calling getUserDetailsUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userIdString}"
                        .replace("{" + "userIdString" + "}", encodeURIComponent(String(userIdString)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getUserStripeAccount
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStripeAccountUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserStripeAccountUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userId}/stripe/account"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary isUserLoggedIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserLoggedInUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/users/authentication/status";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateUserProfile
         * @param {number} userId userId
         * @param {UpdateUserProfileRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUsingPUT: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling updateUserProfileUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateUserProfileUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/{userId}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateUserRoles
         * @param {UpdateUserRolesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRolesUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateUserRolesUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/roles";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary validateUserByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateUserByEmailUsingGET: function (email, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'email' is not null or undefined
                    if (email === null || email === undefined) {
                        throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling validateUserByEmailUsingGET.');
                    }
                    localVarPath = "/api/v1/users/validate";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (email !== undefined) {
                        localVarQueryParameter['email'] = email;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UserControllerApiAxiosParamCreator = UserControllerApiAxiosParamCreator;
/**
 * UserControllerApi - functional programming interface
 * @export
 */
var UserControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findChargeDisputesByUserId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByUserIdUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).findChargeDisputesByUserIdUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCurrentUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).getCurrentUserInfoUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getOverduePayments
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverduePaymentsUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).getOverduePaymentsUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getSupportTicketsForUser
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForUserUsingGET: function (email, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).getSupportTicketsForUserUsingGET(email, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getUserDetails
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetailsUsingGET: function (userIdString, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).getUserDetailsUsingGET(userIdString, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getUserStripeAccount
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStripeAccountUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).getUserStripeAccountUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary isUserLoggedIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserLoggedInUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).isUserLoggedInUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateUserProfile
         * @param {number} userId userId
         * @param {UpdateUserProfileRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUsingPUT: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).updateUserProfileUsingPUT(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateUserRoles
         * @param {UpdateUserRolesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRolesUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).updateUserRolesUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary validateUserByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateUserByEmailUsingGET: function (email, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserControllerApiAxiosParamCreator)(configuration).validateUserByEmailUsingGET(email, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UserControllerApiFp = UserControllerApiFp;
/**
 * UserControllerApi - factory interface
 * @export
 */
var UserControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findChargeDisputesByUserId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChargeDisputesByUserIdUsingGET: function (userId, options) {
            return (0, exports.UserControllerApiFp)(configuration).findChargeDisputesByUserIdUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCurrentUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoUsingGET: function (options) {
            return (0, exports.UserControllerApiFp)(configuration).getCurrentUserInfoUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getOverduePayments
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverduePaymentsUsingGET: function (userId, options) {
            return (0, exports.UserControllerApiFp)(configuration).getOverduePaymentsUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getSupportTicketsForUser
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportTicketsForUserUsingGET: function (email, options) {
            return (0, exports.UserControllerApiFp)(configuration).getSupportTicketsForUserUsingGET(email, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getUserDetails
         * @param {string} userIdString userIdString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetailsUsingGET: function (userIdString, options) {
            return (0, exports.UserControllerApiFp)(configuration).getUserDetailsUsingGET(userIdString, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getUserStripeAccount
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStripeAccountUsingGET: function (userId, options) {
            return (0, exports.UserControllerApiFp)(configuration).getUserStripeAccountUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary isUserLoggedIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserLoggedInUsingGET: function (options) {
            return (0, exports.UserControllerApiFp)(configuration).isUserLoggedInUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateUserProfile
         * @param {number} userId userId
         * @param {UpdateUserProfileRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUsingPUT: function (userId, request, options) {
            return (0, exports.UserControllerApiFp)(configuration).updateUserProfileUsingPUT(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateUserRoles
         * @param {UpdateUserRolesRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRolesUsingPOST: function (request, options) {
            return (0, exports.UserControllerApiFp)(configuration).updateUserRolesUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary validateUserByEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateUserByEmailUsingGET: function (email, options) {
            return (0, exports.UserControllerApiFp)(configuration).validateUserByEmailUsingGET(email, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserControllerApiFactory = UserControllerApiFactory;
/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
var UserControllerApi = /** @class */ (function (_super) {
    __extends(UserControllerApi, _super);
    function UserControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary findChargeDisputesByUserId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.findChargeDisputesByUserIdUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).findChargeDisputesByUserIdUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCurrentUserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.getCurrentUserInfoUsingGET = function (options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).getCurrentUserInfoUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getOverduePayments
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.getOverduePaymentsUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).getOverduePaymentsUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getSupportTicketsForUser
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.getSupportTicketsForUserUsingGET = function (email, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).getSupportTicketsForUserUsingGET(email, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getUserDetails
     * @param {string} userIdString userIdString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.getUserDetailsUsingGET = function (userIdString, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).getUserDetailsUsingGET(userIdString, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getUserStripeAccount
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.getUserStripeAccountUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).getUserStripeAccountUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary isUserLoggedIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.isUserLoggedInUsingGET = function (options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).isUserLoggedInUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateUserProfile
     * @param {number} userId userId
     * @param {UpdateUserProfileRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.updateUserProfileUsingPUT = function (userId, request, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).updateUserProfileUsingPUT(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateUserRoles
     * @param {UpdateUserRolesRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.updateUserRolesUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).updateUserRolesUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary validateUserByEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    UserControllerApi.prototype.validateUserByEmailUsingGET = function (email, options) {
        var _this = this;
        return (0, exports.UserControllerApiFp)(this.configuration).validateUserByEmailUsingGET(email, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserControllerApi;
}(base_1.BaseAPI));
exports.UserControllerApi = UserControllerApi;
/**
 * UserPasswordControllerApi - axios parameter creator
 * @export
 */
var UserPasswordControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary changeUserPassword
         * @param {ChangeUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPasswordUsingPUT: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling changeUserPasswordUsingPUT.');
                    }
                    localVarPath = "/api/v1/user/p";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary resetUserPasswordByAdmin
         * @param {number} userId userId
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordByAdminUsingPUT: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling resetUserPasswordByAdminUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling resetUserPasswordByAdminUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/{userId}/password"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary resetUserPassword
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling resetUserPasswordUsingPOST.');
                    }
                    localVarPath = "/api/v1/user/p/reset";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendAccountVerificationCode
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAccountVerificationCodeUsingPOST: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling sendAccountVerificationCodeUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/send-verification-code";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (userId !== undefined) {
                        localVarQueryParameter['userId'] = userId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary sendResetPasswordToken
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordTokenUsingPOST: function (email, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'email' is not null or undefined
                    if (email === null || email === undefined) {
                        throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling sendResetPasswordTokenUsingPOST.');
                    }
                    localVarPath = "/api/v1/user/password/token";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (email !== undefined) {
                        localVarQueryParameter['email'] = email;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary verifyPwdResetToken
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPwdResetTokenUsingGET: function (token, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'token' is not null or undefined
                    if (token === null || token === undefined) {
                        throw new base_1.RequiredError('token', 'Required parameter token was null or undefined when calling verifyPwdResetTokenUsingGET.');
                    }
                    localVarPath = "/api/v1/user/password/token";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (token !== undefined) {
                        localVarQueryParameter['token'] = token;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary verifyUserAccount
         * @param {string} code code
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserAccountUsingPUT: function (code, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'code' is not null or undefined
                    if (code === null || code === undefined) {
                        throw new base_1.RequiredError('code', 'Required parameter code was null or undefined when calling verifyUserAccountUsingPUT.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling verifyUserAccountUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/verify-account";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (code !== undefined) {
                        localVarQueryParameter['code'] = code;
                    }
                    if (userId !== undefined) {
                        localVarQueryParameter['userId'] = userId;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UserPasswordControllerApiAxiosParamCreator = UserPasswordControllerApiAxiosParamCreator;
/**
 * UserPasswordControllerApi - functional programming interface
 * @export
 */
var UserPasswordControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary changeUserPassword
         * @param {ChangeUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPasswordUsingPUT: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserPasswordControllerApiAxiosParamCreator)(configuration).changeUserPasswordUsingPUT(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary resetUserPasswordByAdmin
         * @param {number} userId userId
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordByAdminUsingPUT: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserPasswordControllerApiAxiosParamCreator)(configuration).resetUserPasswordByAdminUsingPUT(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary resetUserPassword
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserPasswordControllerApiAxiosParamCreator)(configuration).resetUserPasswordUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendAccountVerificationCode
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAccountVerificationCodeUsingPOST: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserPasswordControllerApiAxiosParamCreator)(configuration).sendAccountVerificationCodeUsingPOST(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary sendResetPasswordToken
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordTokenUsingPOST: function (email, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserPasswordControllerApiAxiosParamCreator)(configuration).sendResetPasswordTokenUsingPOST(email, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary verifyPwdResetToken
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPwdResetTokenUsingGET: function (token, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserPasswordControllerApiAxiosParamCreator)(configuration).verifyPwdResetTokenUsingGET(token, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary verifyUserAccount
         * @param {string} code code
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserAccountUsingPUT: function (code, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserPasswordControllerApiAxiosParamCreator)(configuration).verifyUserAccountUsingPUT(code, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UserPasswordControllerApiFp = UserPasswordControllerApiFp;
/**
 * UserPasswordControllerApi - factory interface
 * @export
 */
var UserPasswordControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary changeUserPassword
         * @param {ChangeUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPasswordUsingPUT: function (request, options) {
            return (0, exports.UserPasswordControllerApiFp)(configuration).changeUserPasswordUsingPUT(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary resetUserPasswordByAdmin
         * @param {number} userId userId
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordByAdminUsingPUT: function (userId, request, options) {
            return (0, exports.UserPasswordControllerApiFp)(configuration).resetUserPasswordByAdminUsingPUT(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary resetUserPassword
         * @param {ResetUserPasswordRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordUsingPOST: function (request, options) {
            return (0, exports.UserPasswordControllerApiFp)(configuration).resetUserPasswordUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendAccountVerificationCode
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAccountVerificationCodeUsingPOST: function (userId, options) {
            return (0, exports.UserPasswordControllerApiFp)(configuration).sendAccountVerificationCodeUsingPOST(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary sendResetPasswordToken
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendResetPasswordTokenUsingPOST: function (email, options) {
            return (0, exports.UserPasswordControllerApiFp)(configuration).sendResetPasswordTokenUsingPOST(email, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary verifyPwdResetToken
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPwdResetTokenUsingGET: function (token, options) {
            return (0, exports.UserPasswordControllerApiFp)(configuration).verifyPwdResetTokenUsingGET(token, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary verifyUserAccount
         * @param {string} code code
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserAccountUsingPUT: function (code, userId, options) {
            return (0, exports.UserPasswordControllerApiFp)(configuration).verifyUserAccountUsingPUT(code, userId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserPasswordControllerApiFactory = UserPasswordControllerApiFactory;
/**
 * UserPasswordControllerApi - object-oriented interface
 * @export
 * @class UserPasswordControllerApi
 * @extends {BaseAPI}
 */
var UserPasswordControllerApi = /** @class */ (function (_super) {
    __extends(UserPasswordControllerApi, _super);
    function UserPasswordControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary changeUserPassword
     * @param {ChangeUserPasswordRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    UserPasswordControllerApi.prototype.changeUserPasswordUsingPUT = function (request, options) {
        var _this = this;
        return (0, exports.UserPasswordControllerApiFp)(this.configuration).changeUserPasswordUsingPUT(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary resetUserPasswordByAdmin
     * @param {number} userId userId
     * @param {ResetUserPasswordRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    UserPasswordControllerApi.prototype.resetUserPasswordByAdminUsingPUT = function (userId, request, options) {
        var _this = this;
        return (0, exports.UserPasswordControllerApiFp)(this.configuration).resetUserPasswordByAdminUsingPUT(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary resetUserPassword
     * @param {ResetUserPasswordRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    UserPasswordControllerApi.prototype.resetUserPasswordUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.UserPasswordControllerApiFp)(this.configuration).resetUserPasswordUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendAccountVerificationCode
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    UserPasswordControllerApi.prototype.sendAccountVerificationCodeUsingPOST = function (userId, options) {
        var _this = this;
        return (0, exports.UserPasswordControllerApiFp)(this.configuration).sendAccountVerificationCodeUsingPOST(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary sendResetPasswordToken
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    UserPasswordControllerApi.prototype.sendResetPasswordTokenUsingPOST = function (email, options) {
        var _this = this;
        return (0, exports.UserPasswordControllerApiFp)(this.configuration).sendResetPasswordTokenUsingPOST(email, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary verifyPwdResetToken
     * @param {string} token token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    UserPasswordControllerApi.prototype.verifyPwdResetTokenUsingGET = function (token, options) {
        var _this = this;
        return (0, exports.UserPasswordControllerApiFp)(this.configuration).verifyPwdResetTokenUsingGET(token, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary verifyUserAccount
     * @param {string} code code
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPasswordControllerApi
     */
    UserPasswordControllerApi.prototype.verifyUserAccountUsingPUT = function (code, userId, options) {
        var _this = this;
        return (0, exports.UserPasswordControllerApiFp)(this.configuration).verifyUserAccountUsingPUT(code, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserPasswordControllerApi;
}(base_1.BaseAPI));
exports.UserPasswordControllerApi = UserPasswordControllerApi;
/**
 * UserProfileControllerApi - axios parameter creator
 * @export
 */
var UserProfileControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary addUserAddress
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserAddressUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling addUserAddressUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addUserAddressUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/{userId}/addresses"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary addUserPhoneNumber
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPhoneNumberUsingPOST: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling addUserPhoneNumberUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling addUserPhoneNumberUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/{userId}/phone-numbers"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary deleteUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPhoneNumberUsingDELETE: function (phoneNumberId, userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'phoneNumberId' is not null or undefined
                    if (phoneNumberId === null || phoneNumberId === undefined) {
                        throw new base_1.RequiredError('phoneNumberId', 'Required parameter phoneNumberId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
                    }
                    localVarPath = "/api/v1/users/{userId}/phone-numbers/{phoneNumberId}"
                        .replace("{" + "phoneNumberId" + "}", encodeURIComponent(String(phoneNumberId)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getUserAddresses
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAddressesUsingGET: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserAddressesUsingGET.');
                    }
                    localVarPath = "/api/v1/users/{userId}/addresses"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary mergeUser
         * @param {string} primaryUserId primaryUserId
         * @param {MergeUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeUserUsingPOST: function (primaryUserId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'primaryUserId' is not null or undefined
                    if (primaryUserId === null || primaryUserId === undefined) {
                        throw new base_1.RequiredError('primaryUserId', 'Required parameter primaryUserId was null or undefined when calling mergeUserUsingPOST.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling mergeUserUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/{primaryUserId}/merge"
                        .replace("{" + "primaryUserId" + "}", encodeURIComponent(String(primaryUserId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateProfilePicture
         * @param {number} userId userId
         * @param {UpdateProfilePictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePictureUsingPUT: function (userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling updateProfilePictureUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateProfilePictureUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/{userId}/profile-picture"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateUserAddress
         * @param {number} addressId addressId
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAddressUsingPUT: function (addressId, userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'addressId' is not null or undefined
                    if (addressId === null || addressId === undefined) {
                        throw new base_1.RequiredError('addressId', 'Required parameter addressId was null or undefined when calling updateUserAddressUsingPUT.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling updateUserAddressUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateUserAddressUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/{userId}/addresses/{addressId}"
                        .replace("{" + "addressId" + "}", encodeURIComponent(String(addressId)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary updateUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhoneNumberUsingPUT: function (phoneNumberId, userId, request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'phoneNumberId' is not null or undefined
                    if (phoneNumberId === null || phoneNumberId === undefined) {
                        throw new base_1.RequiredError('phoneNumberId', 'Required parameter phoneNumberId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
                    }
                    // verify required parameter 'userId' is not null or undefined
                    if (userId === null || userId === undefined) {
                        throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
                    }
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling updateUserPhoneNumberUsingPUT.');
                    }
                    localVarPath = "/api/v1/users/{userId}/phone-numbers/{phoneNumberId}"
                        .replace("{" + "phoneNumberId" + "}", encodeURIComponent(String(phoneNumberId)))
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UserProfileControllerApiAxiosParamCreator = UserProfileControllerApiAxiosParamCreator;
/**
 * UserProfileControllerApi - functional programming interface
 * @export
 */
var UserProfileControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary addUserAddress
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserAddressUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).addUserAddressUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary addUserPhoneNumber
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPhoneNumberUsingPOST: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).addUserPhoneNumberUsingPOST(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary deleteUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPhoneNumberUsingDELETE: function (phoneNumberId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).deleteUserPhoneNumberUsingDELETE(phoneNumberId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getUserAddresses
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAddressesUsingGET: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).getUserAddressesUsingGET(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary mergeUser
         * @param {string} primaryUserId primaryUserId
         * @param {MergeUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeUserUsingPOST: function (primaryUserId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).mergeUserUsingPOST(primaryUserId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateProfilePicture
         * @param {number} userId userId
         * @param {UpdateProfilePictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePictureUsingPUT: function (userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).updateProfilePictureUsingPUT(userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateUserAddress
         * @param {number} addressId addressId
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAddressUsingPUT: function (addressId, userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).updateUserAddressUsingPUT(addressId, userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary updateUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhoneNumberUsingPUT: function (phoneNumberId, userId, request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserProfileControllerApiAxiosParamCreator)(configuration).updateUserPhoneNumberUsingPUT(phoneNumberId, userId, request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UserProfileControllerApiFp = UserProfileControllerApiFp;
/**
 * UserProfileControllerApi - factory interface
 * @export
 */
var UserProfileControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary addUserAddress
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserAddressUsingPOST: function (userId, request, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).addUserAddressUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary addUserPhoneNumber
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPhoneNumberUsingPOST: function (userId, request, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).addUserPhoneNumberUsingPOST(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary deleteUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserPhoneNumberUsingDELETE: function (phoneNumberId, userId, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).deleteUserPhoneNumberUsingDELETE(phoneNumberId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getUserAddresses
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAddressesUsingGET: function (userId, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).getUserAddressesUsingGET(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary mergeUser
         * @param {string} primaryUserId primaryUserId
         * @param {MergeUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeUserUsingPOST: function (primaryUserId, request, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).mergeUserUsingPOST(primaryUserId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateProfilePicture
         * @param {number} userId userId
         * @param {UpdateProfilePictureRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePictureUsingPUT: function (userId, request, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).updateProfilePictureUsingPUT(userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateUserAddress
         * @param {number} addressId addressId
         * @param {number} userId userId
         * @param {UpsertAddressRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAddressUsingPUT: function (addressId, userId, request, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).updateUserAddressUsingPUT(addressId, userId, request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary updateUserPhoneNumber
         * @param {number} phoneNumberId phoneNumberId
         * @param {number} userId userId
         * @param {UpdateUserPhoneNumberRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhoneNumberUsingPUT: function (phoneNumberId, userId, request, options) {
            return (0, exports.UserProfileControllerApiFp)(configuration).updateUserPhoneNumberUsingPUT(phoneNumberId, userId, request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserProfileControllerApiFactory = UserProfileControllerApiFactory;
/**
 * UserProfileControllerApi - object-oriented interface
 * @export
 * @class UserProfileControllerApi
 * @extends {BaseAPI}
 */
var UserProfileControllerApi = /** @class */ (function (_super) {
    __extends(UserProfileControllerApi, _super);
    function UserProfileControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary addUserAddress
     * @param {number} userId userId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.addUserAddressUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).addUserAddressUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary addUserPhoneNumber
     * @param {number} userId userId
     * @param {UpdateUserPhoneNumberRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.addUserPhoneNumberUsingPOST = function (userId, request, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).addUserPhoneNumberUsingPOST(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary deleteUserPhoneNumber
     * @param {number} phoneNumberId phoneNumberId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.deleteUserPhoneNumberUsingDELETE = function (phoneNumberId, userId, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).deleteUserPhoneNumberUsingDELETE(phoneNumberId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getUserAddresses
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.getUserAddressesUsingGET = function (userId, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).getUserAddressesUsingGET(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary mergeUser
     * @param {string} primaryUserId primaryUserId
     * @param {MergeUserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.mergeUserUsingPOST = function (primaryUserId, request, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).mergeUserUsingPOST(primaryUserId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateProfilePicture
     * @param {number} userId userId
     * @param {UpdateProfilePictureRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.updateProfilePictureUsingPUT = function (userId, request, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).updateProfilePictureUsingPUT(userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateUserAddress
     * @param {number} addressId addressId
     * @param {number} userId userId
     * @param {UpsertAddressRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.updateUserAddressUsingPUT = function (addressId, userId, request, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).updateUserAddressUsingPUT(addressId, userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary updateUserPhoneNumber
     * @param {number} phoneNumberId phoneNumberId
     * @param {number} userId userId
     * @param {UpdateUserPhoneNumberRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProfileControllerApi
     */
    UserProfileControllerApi.prototype.updateUserPhoneNumberUsingPUT = function (phoneNumberId, userId, request, options) {
        var _this = this;
        return (0, exports.UserProfileControllerApiFp)(this.configuration).updateUserPhoneNumberUsingPUT(phoneNumberId, userId, request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserProfileControllerApi;
}(base_1.BaseAPI));
exports.UserProfileControllerApi = UserProfileControllerApi;
/**
 * UserSearchControllerApi - axios parameter creator
 * @export
 */
var UserSearchControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary findMatchingUsers
         * @param {FindMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMatchingUsersUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling findMatchingUsersUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/search";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getCountOfMatchingUsers
         * @param {GetCountOfMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountOfMatchingUsersUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling getCountOfMatchingUsersUsingPOST.');
                    }
                    localVarPath = "/api/v1/users/matches";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UserSearchControllerApiAxiosParamCreator = UserSearchControllerApiAxiosParamCreator;
/**
 * UserSearchControllerApi - functional programming interface
 * @export
 */
var UserSearchControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary findMatchingUsers
         * @param {FindMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMatchingUsersUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserSearchControllerApiAxiosParamCreator)(configuration).findMatchingUsersUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getCountOfMatchingUsers
         * @param {GetCountOfMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountOfMatchingUsersUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UserSearchControllerApiAxiosParamCreator)(configuration).getCountOfMatchingUsersUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UserSearchControllerApiFp = UserSearchControllerApiFp;
/**
 * UserSearchControllerApi - factory interface
 * @export
 */
var UserSearchControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary findMatchingUsers
         * @param {FindMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMatchingUsersUsingPOST: function (request, options) {
            return (0, exports.UserSearchControllerApiFp)(configuration).findMatchingUsersUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getCountOfMatchingUsers
         * @param {GetCountOfMatchingUsersRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountOfMatchingUsersUsingPOST: function (request, options) {
            return (0, exports.UserSearchControllerApiFp)(configuration).getCountOfMatchingUsersUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserSearchControllerApiFactory = UserSearchControllerApiFactory;
/**
 * UserSearchControllerApi - object-oriented interface
 * @export
 * @class UserSearchControllerApi
 * @extends {BaseAPI}
 */
var UserSearchControllerApi = /** @class */ (function (_super) {
    __extends(UserSearchControllerApi, _super);
    function UserSearchControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary findMatchingUsers
     * @param {FindMatchingUsersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchControllerApi
     */
    UserSearchControllerApi.prototype.findMatchingUsersUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.UserSearchControllerApiFp)(this.configuration).findMatchingUsersUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getCountOfMatchingUsers
     * @param {GetCountOfMatchingUsersRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchControllerApi
     */
    UserSearchControllerApi.prototype.getCountOfMatchingUsersUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.UserSearchControllerApiFp)(this.configuration).getCountOfMatchingUsersUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserSearchControllerApi;
}(base_1.BaseAPI));
exports.UserSearchControllerApi = UserSearchControllerApi;
/**
 * UtilityControllerApi - axios parameter creator
 * @export
 */
var UtilityControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary backfillLawfirmTransactionRecords
         * @param {BackfillLawfirmTransactionRecordsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backfillLawfirmTransactionRecordsUsingPOST: function (request, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'request' is not null or undefined
                    if (request === null || request === undefined) {
                        throw new base_1.RequiredError('request', 'Required parameter request was null or undefined when calling backfillLawfirmTransactionRecordsUsingPOST.');
                    }
                    localVarPath = "/api/v1/utility/backfill-lawfirm-transaction-records";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/utility/status";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary setStatus
         * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
         * @param {boolean} [syncStatus] syncStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatusUsingPOST: function (lawfirmTransactionsStatus, syncStatus, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/utility/status";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (lawfirmTransactionsStatus !== undefined) {
                        localVarQueryParameter['lawfirmTransactionsStatus'] = lawfirmTransactionsStatus;
                    }
                    if (syncStatus !== undefined) {
                        localVarQueryParameter['syncStatus'] = syncStatus;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UtilityControllerApiAxiosParamCreator = UtilityControllerApiAxiosParamCreator;
/**
 * UtilityControllerApi - functional programming interface
 * @export
 */
var UtilityControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary backfillLawfirmTransactionRecords
         * @param {BackfillLawfirmTransactionRecordsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backfillLawfirmTransactionRecordsUsingPOST: function (request, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UtilityControllerApiAxiosParamCreator)(configuration).backfillLawfirmTransactionRecordsUsingPOST(request, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UtilityControllerApiAxiosParamCreator)(configuration).getStatusUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary setStatus
         * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
         * @param {boolean} [syncStatus] syncStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatusUsingPOST: function (lawfirmTransactionsStatus, syncStatus, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.UtilityControllerApiAxiosParamCreator)(configuration).setStatusUsingPOST(lawfirmTransactionsStatus, syncStatus, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.UtilityControllerApiFp = UtilityControllerApiFp;
/**
 * UtilityControllerApi - factory interface
 * @export
 */
var UtilityControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary backfillLawfirmTransactionRecords
         * @param {BackfillLawfirmTransactionRecordsRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backfillLawfirmTransactionRecordsUsingPOST: function (request, options) {
            return (0, exports.UtilityControllerApiFp)(configuration).backfillLawfirmTransactionRecordsUsingPOST(request, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusUsingGET: function (options) {
            return (0, exports.UtilityControllerApiFp)(configuration).getStatusUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary setStatus
         * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
         * @param {boolean} [syncStatus] syncStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatusUsingPOST: function (lawfirmTransactionsStatus, syncStatus, options) {
            return (0, exports.UtilityControllerApiFp)(configuration).setStatusUsingPOST(lawfirmTransactionsStatus, syncStatus, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UtilityControllerApiFactory = UtilityControllerApiFactory;
/**
 * UtilityControllerApi - object-oriented interface
 * @export
 * @class UtilityControllerApi
 * @extends {BaseAPI}
 */
var UtilityControllerApi = /** @class */ (function (_super) {
    __extends(UtilityControllerApi, _super);
    function UtilityControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary backfillLawfirmTransactionRecords
     * @param {BackfillLawfirmTransactionRecordsRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityControllerApi
     */
    UtilityControllerApi.prototype.backfillLawfirmTransactionRecordsUsingPOST = function (request, options) {
        var _this = this;
        return (0, exports.UtilityControllerApiFp)(this.configuration).backfillLawfirmTransactionRecordsUsingPOST(request, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityControllerApi
     */
    UtilityControllerApi.prototype.getStatusUsingGET = function (options) {
        var _this = this;
        return (0, exports.UtilityControllerApiFp)(this.configuration).getStatusUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary setStatus
     * @param {boolean} [lawfirmTransactionsStatus] lawfirmTransactionsStatus
     * @param {boolean} [syncStatus] syncStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityControllerApi
     */
    UtilityControllerApi.prototype.setStatusUsingPOST = function (lawfirmTransactionsStatus, syncStatus, options) {
        var _this = this;
        return (0, exports.UtilityControllerApiFp)(this.configuration).setStatusUsingPOST(lawfirmTransactionsStatus, syncStatus, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UtilityControllerApi;
}(base_1.BaseAPI));
exports.UtilityControllerApi = UtilityControllerApi;
/**
 * ValidationControllerApi - axios parameter creator
 * @export
 */
var ValidationControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary validateEmailAddress
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailAddressUsingGET: function (email, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'email' is not null or undefined
                    if (email === null || email === undefined) {
                        throw new base_1.RequiredError('email', 'Required parameter email was null or undefined when calling validateEmailAddressUsingGET.');
                    }
                    localVarPath = "/api/v1/validate/email";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (email !== undefined) {
                        localVarQueryParameter['email'] = email;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ValidationControllerApiAxiosParamCreator = ValidationControllerApiAxiosParamCreator;
/**
 * ValidationControllerApi - functional programming interface
 * @export
 */
var ValidationControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary validateEmailAddress
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailAddressUsingGET: function (email, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ValidationControllerApiAxiosParamCreator)(configuration).validateEmailAddressUsingGET(email, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ValidationControllerApiFp = ValidationControllerApiFp;
/**
 * ValidationControllerApi - factory interface
 * @export
 */
var ValidationControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary validateEmailAddress
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailAddressUsingGET: function (email, options) {
            return (0, exports.ValidationControllerApiFp)(configuration).validateEmailAddressUsingGET(email, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ValidationControllerApiFactory = ValidationControllerApiFactory;
/**
 * ValidationControllerApi - object-oriented interface
 * @export
 * @class ValidationControllerApi
 * @extends {BaseAPI}
 */
var ValidationControllerApi = /** @class */ (function (_super) {
    __extends(ValidationControllerApi, _super);
    function ValidationControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary validateEmailAddress
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidationControllerApi
     */
    ValidationControllerApi.prototype.validateEmailAddressUsingGET = function (email, options) {
        var _this = this;
        return (0, exports.ValidationControllerApiFp)(this.configuration).validateEmailAddressUsingGET(email, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ValidationControllerApi;
}(base_1.BaseAPI));
exports.ValidationControllerApi = ValidationControllerApi;
/**
 * ViolationPenaltyControllerApi - axios parameter creator
 * @export
 */
var ViolationPenaltyControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary getPenaltiesByViolation
         * @param {string} violationId violationId
         * @param {'ALL' | 'SHORT'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltiesByViolationUsingGET: function (violationId, flavor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'violationId' is not null or undefined
                    if (violationId === null || violationId === undefined) {
                        throw new base_1.RequiredError('violationId', 'Required parameter violationId was null or undefined when calling getPenaltiesByViolationUsingGET.');
                    }
                    localVarPath = "/api/v1/violations/{violationId}/penalties"
                        .replace("{" + "violationId" + "}", encodeURIComponent(String(violationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (flavor !== undefined) {
                        localVarQueryParameter['flavor'] = flavor;
                    }
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary getPenaltyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltyTypesUsingGET: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/violations/penalties";
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary removePenalty
         * @param {string} penaltyTypeId penaltyTypeId
         * @param {string} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePenaltyUsingDELETE: function (penaltyTypeId, violationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'penaltyTypeId' is not null or undefined
                    if (penaltyTypeId === null || penaltyTypeId === undefined) {
                        throw new base_1.RequiredError('penaltyTypeId', 'Required parameter penaltyTypeId was null or undefined when calling removePenaltyUsingDELETE.');
                    }
                    // verify required parameter 'violationId' is not null or undefined
                    if (violationId === null || violationId === undefined) {
                        throw new base_1.RequiredError('violationId', 'Required parameter violationId was null or undefined when calling removePenaltyUsingDELETE.');
                    }
                    localVarPath = "/api/v1/violations/{violationId}/penalties/{penaltyTypeId}"
                        .replace("{" + "penaltyTypeId" + "}", encodeURIComponent(String(penaltyTypeId)))
                        .replace("{" + "violationId" + "}", encodeURIComponent(String(violationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary upsertPenalty
         * @param {string} violationId violationId
         * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertPenaltyUsingPOST: function (violationId, penaltyToAdd, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'violationId' is not null or undefined
                    if (violationId === null || violationId === undefined) {
                        throw new base_1.RequiredError('violationId', 'Required parameter violationId was null or undefined when calling upsertPenaltyUsingPOST.');
                    }
                    // verify required parameter 'penaltyToAdd' is not null or undefined
                    if (penaltyToAdd === null || penaltyToAdd === undefined) {
                        throw new base_1.RequiredError('penaltyToAdd', 'Required parameter penaltyToAdd was null or undefined when calling upsertPenaltyUsingPOST.');
                    }
                    localVarPath = "/api/v1/violations/{violationId}/penalties"
                        .replace("{" + "violationId" + "}", encodeURIComponent(String(violationId)));
                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
                    delete localVarUrlObj.search;
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = (typeof penaltyToAdd !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(penaltyToAdd !== undefined ? penaltyToAdd : {}) : (penaltyToAdd || "");
                    return [2 /*return*/, {
                            url: globalImportUrl.format(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ViolationPenaltyControllerApiAxiosParamCreator = ViolationPenaltyControllerApiAxiosParamCreator;
/**
 * ViolationPenaltyControllerApi - functional programming interface
 * @export
 */
var ViolationPenaltyControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary getPenaltiesByViolation
         * @param {string} violationId violationId
         * @param {'ALL' | 'SHORT'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltiesByViolationUsingGET: function (violationId, flavor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ViolationPenaltyControllerApiAxiosParamCreator)(configuration).getPenaltiesByViolationUsingGET(violationId, flavor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary getPenaltyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltyTypesUsingGET: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ViolationPenaltyControllerApiAxiosParamCreator)(configuration).getPenaltyTypesUsingGET(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary removePenalty
         * @param {string} penaltyTypeId penaltyTypeId
         * @param {string} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePenaltyUsingDELETE: function (penaltyTypeId, violationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ViolationPenaltyControllerApiAxiosParamCreator)(configuration).removePenaltyUsingDELETE(penaltyTypeId, violationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary upsertPenalty
         * @param {string} violationId violationId
         * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertPenaltyUsingPOST: function (violationId, penaltyToAdd, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, exports.ViolationPenaltyControllerApiAxiosParamCreator)(configuration).upsertPenaltyUsingPOST(violationId, penaltyToAdd, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.ViolationPenaltyControllerApiFp = ViolationPenaltyControllerApiFp;
/**
 * ViolationPenaltyControllerApi - factory interface
 * @export
 */
var ViolationPenaltyControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary getPenaltiesByViolation
         * @param {string} violationId violationId
         * @param {'ALL' | 'SHORT'} [flavor] flavor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltiesByViolationUsingGET: function (violationId, flavor, options) {
            return (0, exports.ViolationPenaltyControllerApiFp)(configuration).getPenaltiesByViolationUsingGET(violationId, flavor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary getPenaltyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPenaltyTypesUsingGET: function (options) {
            return (0, exports.ViolationPenaltyControllerApiFp)(configuration).getPenaltyTypesUsingGET(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary removePenalty
         * @param {string} penaltyTypeId penaltyTypeId
         * @param {string} violationId violationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePenaltyUsingDELETE: function (penaltyTypeId, violationId, options) {
            return (0, exports.ViolationPenaltyControllerApiFp)(configuration).removePenaltyUsingDELETE(penaltyTypeId, violationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary upsertPenalty
         * @param {string} violationId violationId
         * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertPenaltyUsingPOST: function (violationId, penaltyToAdd, options) {
            return (0, exports.ViolationPenaltyControllerApiFp)(configuration).upsertPenaltyUsingPOST(violationId, penaltyToAdd, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ViolationPenaltyControllerApiFactory = ViolationPenaltyControllerApiFactory;
/**
 * ViolationPenaltyControllerApi - object-oriented interface
 * @export
 * @class ViolationPenaltyControllerApi
 * @extends {BaseAPI}
 */
var ViolationPenaltyControllerApi = /** @class */ (function (_super) {
    __extends(ViolationPenaltyControllerApi, _super);
    function ViolationPenaltyControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary getPenaltiesByViolation
     * @param {string} violationId violationId
     * @param {'ALL' | 'SHORT'} [flavor] flavor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    ViolationPenaltyControllerApi.prototype.getPenaltiesByViolationUsingGET = function (violationId, flavor, options) {
        var _this = this;
        return (0, exports.ViolationPenaltyControllerApiFp)(this.configuration).getPenaltiesByViolationUsingGET(violationId, flavor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary getPenaltyTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    ViolationPenaltyControllerApi.prototype.getPenaltyTypesUsingGET = function (options) {
        var _this = this;
        return (0, exports.ViolationPenaltyControllerApiFp)(this.configuration).getPenaltyTypesUsingGET(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary removePenalty
     * @param {string} penaltyTypeId penaltyTypeId
     * @param {string} violationId violationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    ViolationPenaltyControllerApi.prototype.removePenaltyUsingDELETE = function (penaltyTypeId, violationId, options) {
        var _this = this;
        return (0, exports.ViolationPenaltyControllerApiFp)(this.configuration).removePenaltyUsingDELETE(penaltyTypeId, violationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary upsertPenalty
     * @param {string} violationId violationId
     * @param {AddPenaltyRequest} penaltyToAdd penaltyToAdd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViolationPenaltyControllerApi
     */
    ViolationPenaltyControllerApi.prototype.upsertPenaltyUsingPOST = function (violationId, penaltyToAdd, options) {
        var _this = this;
        return (0, exports.ViolationPenaltyControllerApiFp)(this.configuration).upsertPenaltyUsingPOST(violationId, penaltyToAdd, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ViolationPenaltyControllerApi;
}(base_1.BaseAPI));
exports.ViolationPenaltyControllerApi = ViolationPenaltyControllerApi;
