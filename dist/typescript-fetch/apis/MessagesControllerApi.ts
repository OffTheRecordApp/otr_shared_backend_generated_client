/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetMessagesByEntityResponse,
    GetMessagesByEntityResponseFromJSON,
    GetMessagesByEntityResponseToJSON,
} from '../models';

export interface ListMessagesByEntityUsingGETRequest {
    includeAdminActions?: boolean;
    lawfirmId?: number;
    length?: number;
    page?: number;
    userIds?: number;
}

/**
 * 
 */
export class MessagesControllerApi extends runtime.BaseAPI {

    /**
     * listMessagesByEntity
     */
    async listMessagesByEntityUsingGETRaw(requestParameters: ListMessagesByEntityUsingGETRequest): Promise<runtime.ApiResponse<GetMessagesByEntityResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeAdminActions !== undefined) {
            queryParameters['includeAdminActions '] = requestParameters.includeAdminActions;
        }

        if (requestParameters.lawfirmId !== undefined) {
            queryParameters['lawfirmId'] = requestParameters.lawfirmId;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.userIds !== undefined) {
            queryParameters['userIds'] = requestParameters.userIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessagesByEntityResponseFromJSON(jsonValue));
    }

    /**
     * listMessagesByEntity
     */
    async listMessagesByEntityUsingGET(requestParameters: ListMessagesByEntityUsingGETRequest): Promise<GetMessagesByEntityResponse> {
        const response = await this.listMessagesByEntityUsingGETRaw(requestParameters);
        return await response.value();
    }

}
