/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AddACHToStripeAccountRequestToJSON, AddCardToStripeAccountRequestToJSON, AddCardToStripeAccountResponseFromJSON, GetLawfirmPaymentMethodsResponseFromJSON, GetPaymentMethodsForUserResponseFromJSON, StripeCardDomainFromJSON, } from '../models';
/**
 *
 */
export class StripeCardControllerApi extends runtime.BaseAPI {
    /**
     * addACHToLawfirmStripeAccount
     */
    addACHToLawfirmStripeAccountUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/stripe/ach`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AddACHToStripeAccountRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * addACHToLawfirmStripeAccount
     */
    addACHToLawfirmStripeAccountUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addACHToLawfirmStripeAccountUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * addACHToUserStripeAccount
     */
    addACHToUserStripeAccountUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/stripe/ach`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AddACHToStripeAccountRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * addACHToUserStripeAccount
     */
    addACHToUserStripeAccountUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addACHToUserStripeAccountUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * addCardToStripeAccount
     */
    addCardToStripeAccountUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addCardToStripeAccountUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/stripe/account/cards`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AddCardToStripeAccountRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => AddCardToStripeAccountResponseFromJSON(jsonValue));
        });
    }
    /**
     * addCardToStripeAccount
     */
    addCardToStripeAccountUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addCardToStripeAccountUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * deleteBankAccountFromLawfirmStripeAccount
     */
    deleteBankAccountFromLawfirmStripeAccountUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
                throw new runtime.RequiredError('bankAccountId', 'Required parameter requestParameters.bankAccountId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
            }
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/stripe/bank-accounts/{bankAccountId}`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * deleteBankAccountFromLawfirmStripeAccount
     */
    deleteBankAccountFromLawfirmStripeAccountUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBankAccountFromLawfirmStripeAccountUsingDELETERaw(requestParameters);
        });
    }
    /**
     * deleteCardForUser
     */
    deleteCardForUserUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
                throw new runtime.RequiredError('cardId', 'Required parameter requestParameters.cardId was null or undefined when calling deleteCardForUserUsingDELETE.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling deleteCardForUserUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/stripe/account/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => StripeCardDomainFromJSON(jsonValue));
        });
    }
    /**
     * deleteCardForUser
     */
    deleteCardForUserUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCardForUserUsingDELETERaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * deleteCard
     */
    deleteCardUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
                throw new runtime.RequiredError('cardId', 'Required parameter requestParameters.cardId was null or undefined when calling deleteCardUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/stripe/account/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => StripeCardDomainFromJSON(jsonValue));
        });
    }
    /**
     * deleteCard
     */
    deleteCardUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCardUsingDELETERaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getCard
     */
    getCardUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
                throw new runtime.RequiredError('cardId', 'Required parameter requestParameters.cardId was null or undefined when calling getCardUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/stripe/account/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => StripeCardDomainFromJSON(jsonValue));
        });
    }
    /**
     * getCard
     */
    getCardUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCardUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieves all the payment methods available on the lawfirm\'s Stripe account.
     */
    getLawfirmPaymentMethodsUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmPaymentMethodsUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/paymentmethods`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmPaymentMethodsResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves all the payment methods available on the lawfirm\'s Stripe account.
     */
    getLawfirmPaymentMethodsUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLawfirmPaymentMethodsUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * Retrieves all the payment methods available on the user\'s Stripe account.
     */
    getPaymentMethodsForUserUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userIdString === null || requestParameters.userIdString === undefined) {
                throw new runtime.RequiredError('userIdString', 'Required parameter requestParameters.userIdString was null or undefined when calling getPaymentMethodsForUserUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userIdString}/paymentmethods`.replace(`{${"userIdString"}}`, encodeURIComponent(String(requestParameters.userIdString))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentMethodsForUserResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves all the payment methods available on the user\'s Stripe account.
     */
    getPaymentMethodsForUserUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPaymentMethodsForUserUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * setCardAsPrimary
     */
    setCardAsPrimaryUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
                throw new runtime.RequiredError('cardId', 'Required parameter requestParameters.cardId was null or undefined when calling setCardAsPrimaryUsingPUT.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling setCardAsPrimaryUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/account/cards/{cardId}/primary`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * setCardAsPrimary
     */
    setCardAsPrimaryUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setCardAsPrimaryUsingPUTRaw(requestParameters);
        });
    }
    /**
     * setDefaultPaymentMethodForLawfirm
     */
    setDefaultPaymentMethodForLawfirmUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
            }
            if (requestParameters.stripePaymentSourceId === null || requestParameters.stripePaymentSourceId === undefined) {
                throw new runtime.RequiredError('stripePaymentSourceId', 'Required parameter requestParameters.stripePaymentSourceId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
            }
            const queryParameters = {};
            if (requestParameters.stripePaymentSourceId !== undefined) {
                queryParameters['stripePaymentSourceId'] = requestParameters.stripePaymentSourceId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/stripe/payment-methods/default`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * setDefaultPaymentMethodForLawfirm
     */
    setDefaultPaymentMethodForLawfirmUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setDefaultPaymentMethodForLawfirmUsingPUTRaw(requestParameters);
        });
    }
}
