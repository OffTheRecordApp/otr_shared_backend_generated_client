/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { DocumentDecisionRequestToJSON, GetCaseDocumentResponseFromJSON, GetDocumentsRequestToJSON, LawfirmDocumentResponseFromJSON, LawfirmDocumentTemplateResponseFromJSON, PreviewDocumentRequestToJSON, PutDocumentRequestToJSON, } from '../models';
/**
 *
 */
export class LawfirmDocumentControllerApi extends runtime.BaseAPI {
    /**
     * generateDoc
     */
    generateDocUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.docType === null || requestParameters.docType === undefined) {
                throw new runtime.RequiredError('docType', 'Required parameter requestParameters.docType was null or undefined when calling generateDocUsingPOST.');
            }
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling generateDocUsingPOST.');
            }
            const queryParameters = {};
            if (requestParameters.docType !== undefined) {
                queryParameters['doc_type'] = requestParameters.docType;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/documents`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: GetDocumentsRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => LawfirmDocumentResponseFromJSON(jsonValue));
        });
    }
    /**
     * generateDoc
     */
    generateDocUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateDocUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getDocument
     */
    getDocumentUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.docType === null || requestParameters.docType === undefined) {
                throw new runtime.RequiredError('docType', 'Required parameter requestParameters.docType was null or undefined when calling getDocumentUsingGET.');
            }
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling getDocumentUsingGET.');
            }
            const queryParameters = {};
            if (requestParameters.docType !== undefined) {
                queryParameters['doc_type'] = requestParameters.docType;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/documents`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => LawfirmDocumentTemplateResponseFromJSON(jsonValue));
        });
    }
    /**
     * getDocument
     */
    getDocumentUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDocumentUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getLawfirmCaseDocuments
     */
    getLawfirmCaseDocumentsUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling getLawfirmCaseDocumentsUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/documents`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseDocumentResponseFromJSON(jsonValue));
        });
    }
    /**
     * getLawfirmCaseDocuments
     */
    getLawfirmCaseDocumentsUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLawfirmCaseDocumentsUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * markDocumentWithDecision
     */
    markDocumentWithDecisionUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.docId === null || requestParameters.docId === undefined) {
                throw new runtime.RequiredError('docId', 'Required parameter requestParameters.docId was null or undefined when calling markDocumentWithDecisionUsingPOST.');
            }
            if (requestParameters.decisionRequest === null || requestParameters.decisionRequest === undefined) {
                throw new runtime.RequiredError('decisionRequest', 'Required parameter requestParameters.decisionRequest was null or undefined when calling markDocumentWithDecisionUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/documents/{docId}/decision`.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters.docId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DocumentDecisionRequestToJSON(requestParameters.decisionRequest),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * markDocumentWithDecision
     */
    markDocumentWithDecisionUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.markDocumentWithDecisionUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * previewDoc
     */
    previewDocUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.docType === null || requestParameters.docType === undefined) {
                throw new runtime.RequiredError('docType', 'Required parameter requestParameters.docType was null or undefined when calling previewDocUsingPOST.');
            }
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling previewDocUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling previewDocUsingPOST.');
            }
            const queryParameters = {};
            if (requestParameters.docType !== undefined) {
                queryParameters['doc_type'] = requestParameters.docType;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/documents/preview`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PreviewDocumentRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => LawfirmDocumentResponseFromJSON(jsonValue));
        });
    }
    /**
     * previewDoc
     */
    previewDocUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.previewDocUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * uploadCopy
     */
    uploadCopyUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
                throw new runtime.RequiredError('lawfirmId', 'Required parameter requestParameters.lawfirmId was null or undefined when calling uploadCopyUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling uploadCopyUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/lawfirms/{lawfirmId}/documents`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: PutDocumentRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * uploadCopy
     */
    uploadCopyUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.uploadCopyUsingPUTRaw(requestParameters);
        });
    }
}
/**
    * @export
    * @enum {string}
    */
export var GenerateDocUsingPOSTDocTypeEnum;
(function (GenerateDocUsingPOSTDocTypeEnum) {
    GenerateDocUsingPOSTDocTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
    GenerateDocUsingPOSTDocTypeEnum["OTHERDOCUMENT"] = "OTHER_DOCUMENT";
    GenerateDocUsingPOSTDocTypeEnum["OTHERIMAGE"] = "OTHER_IMAGE";
})(GenerateDocUsingPOSTDocTypeEnum || (GenerateDocUsingPOSTDocTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetDocumentUsingGETDocTypeEnum;
(function (GetDocumentUsingGETDocTypeEnum) {
    GetDocumentUsingGETDocTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
    GetDocumentUsingGETDocTypeEnum["OTHERDOCUMENT"] = "OTHER_DOCUMENT";
    GetDocumentUsingGETDocTypeEnum["OTHERIMAGE"] = "OTHER_IMAGE";
})(GetDocumentUsingGETDocTypeEnum || (GetDocumentUsingGETDocTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PreviewDocUsingPOSTDocTypeEnum;
(function (PreviewDocUsingPOSTDocTypeEnum) {
    PreviewDocUsingPOSTDocTypeEnum["ENGAGEMENTLETTER"] = "ENGAGEMENT_LETTER";
    PreviewDocUsingPOSTDocTypeEnum["OTHERDOCUMENT"] = "OTHER_DOCUMENT";
    PreviewDocUsingPOSTDocTypeEnum["OTHERIMAGE"] = "OTHER_IMAGE";
})(PreviewDocUsingPOSTDocTypeEnum || (PreviewDocUsingPOSTDocTypeEnum = {}));
