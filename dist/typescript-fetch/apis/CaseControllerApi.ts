/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddViolationsToCitationRequest,
    AddViolationsToCitationRequestFromJSON,
    AddViolationsToCitationRequestToJSON,
    CaseModelReq,
    CaseModelReqFromJSON,
    CaseModelReqToJSON,
    FindChargeDisputesResponse,
    FindChargeDisputesResponseFromJSON,
    FindChargeDisputesResponseToJSON,
    GetAppearanceAttorneysResponse,
    GetAppearanceAttorneysResponseFromJSON,
    GetAppearanceAttorneysResponseToJSON,
    GetCaseResponse,
    GetCaseResponseFromJSON,
    GetCaseResponseToJSON,
    GetSupportTicketsResponse,
    GetSupportTicketsResponseFromJSON,
    GetSupportTicketsResponseToJSON,
    InitiateCaseAndChargeCustomerRequest,
    InitiateCaseAndChargeCustomerRequestFromJSON,
    InitiateCaseAndChargeCustomerRequestToJSON,
    InitiateCaseAndChargeCustomerResponse,
    InitiateCaseAndChargeCustomerResponseFromJSON,
    InitiateCaseAndChargeCustomerResponseToJSON,
    MarkCaseAsResolvedRequest,
    MarkCaseAsResolvedRequestFromJSON,
    MarkCaseAsResolvedRequestToJSON,
    MarkCaseAsResolvedResponse,
    MarkCaseAsResolvedResponseFromJSON,
    MarkCaseAsResolvedResponseToJSON,
    PriceMatchRequest,
    PriceMatchRequestFromJSON,
    PriceMatchRequestToJSON,
    PriceMatchResponse,
    PriceMatchResponseFromJSON,
    PriceMatchResponseToJSON,
    SetArchiveOnCasesRequest,
    SetArchiveOnCasesRequestFromJSON,
    SetArchiveOnCasesRequestToJSON,
    SetCourtDateForCaseRequest,
    SetCourtDateForCaseRequestFromJSON,
    SetCourtDateForCaseRequestToJSON,
    UpdateCaseDeclineTicketsRequest,
    UpdateCaseDeclineTicketsRequestFromJSON,
    UpdateCaseDeclineTicketsRequestToJSON,
} from '../models';

export interface AddViolationsToCitationUsingPOSTRequest {
    caseId: string;
    request: AddViolationsToCitationRequest;
}

export interface AssignCaseToUserUsingPOSTRequest {
    caseId: string;
    userId: number;
}

export interface AssignOwnerUsingPOSTRequest {
    caseId: string;
}

export interface FindChargeDisputesByCaseIdUsingGETRequest {
    caseId: string;
}

export interface GetAppearanceAttorneysForCaseUsingGETRequest {
    caseId: string;
}

export interface GetSupportTicketsForCaseUsingGETRequest {
    caseId: string;
    limit?: number;
}

export interface InitiateCaseAndChargeCustomerUsingPOSTRequest {
    caseId: string;
    request: InitiateCaseAndChargeCustomerRequest;
}

export interface InitiateCaseUsingPOSTRequest {
    caseId: string;
    request?: object;
}

export interface MarkCaseAsResolvedUsingPOSTRequest {
    caseId: string;
    request: MarkCaseAsResolvedRequest;
}

export interface RemoveViolationsFromCitationUsingDELETERequest {
    caseId: string;
    violationTypes: string;
}

export interface ReopenCaseUsingPUTRequest {
    caseId: string;
}

export interface SetArchiveOnCasesUsingPUTRequest {
    request: SetArchiveOnCasesRequest;
}

export interface SetCourtDateForCaseUsingPOSTRequest {
    caseId: string;
    request: SetCourtDateForCaseRequest;
}

export interface SubmitRequestForPriceMatchUsingPOSTRequest {
    caseId: string;
    priceMatchRequest: PriceMatchRequest;
}

export interface UpdateCaseUsingPUTRequest {
    caseId: string;
    caseFromRequest: CaseModelReq;
}

export interface UpdateDeclineTicketsUsingPUTRequest {
    caseId: string;
    request: UpdateCaseDeclineTicketsRequest;
}

/**
 * 
 */
export class CaseControllerApi extends runtime.BaseAPI {

    /**
     * addViolationsToCitation
     */
    async addViolationsToCitationUsingPOSTRaw(requestParameters: AddViolationsToCitationUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling addViolationsToCitationUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addViolationsToCitationUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/citation/violations`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddViolationsToCitationRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * addViolationsToCitation
     */
    async addViolationsToCitationUsingPOST(requestParameters: AddViolationsToCitationUsingPOSTRequest): Promise<object> {
        const response = await this.addViolationsToCitationUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * assignCaseToUser
     */
    async assignCaseToUserUsingPOSTRaw(requestParameters: AssignCaseToUserUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling assignCaseToUserUsingPOST.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling assignCaseToUserUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/owner/{userId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * assignCaseToUser
     */
    async assignCaseToUserUsingPOST(requestParameters: AssignCaseToUserUsingPOSTRequest): Promise<object> {
        const response = await this.assignCaseToUserUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * assignOwner
     */
    async assignOwnerUsingPOSTRaw(requestParameters: AssignOwnerUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling assignOwnerUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/owner`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * assignOwner
     */
    async assignOwnerUsingPOST(requestParameters: AssignOwnerUsingPOSTRequest): Promise<object> {
        const response = await this.assignOwnerUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * findChargeDisputesByCaseId
     */
    async findChargeDisputesByCaseIdUsingGETRaw(requestParameters: FindChargeDisputesByCaseIdUsingGETRequest): Promise<runtime.ApiResponse<FindChargeDisputesResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling findChargeDisputesByCaseIdUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/disputes`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FindChargeDisputesResponseFromJSON(jsonValue));
    }

    /**
     * findChargeDisputesByCaseId
     */
    async findChargeDisputesByCaseIdUsingGET(requestParameters: FindChargeDisputesByCaseIdUsingGETRequest): Promise<FindChargeDisputesResponse> {
        const response = await this.findChargeDisputesByCaseIdUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getAppearanceAttorneysForCase
     */
    async getAppearanceAttorneysForCaseUsingGETRaw(requestParameters: GetAppearanceAttorneysForCaseUsingGETRequest): Promise<runtime.ApiResponse<GetAppearanceAttorneysResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling getAppearanceAttorneysForCaseUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/appearance-attorneys`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppearanceAttorneysResponseFromJSON(jsonValue));
    }

    /**
     * getAppearanceAttorneysForCase
     */
    async getAppearanceAttorneysForCaseUsingGET(requestParameters: GetAppearanceAttorneysForCaseUsingGETRequest): Promise<GetAppearanceAttorneysResponse> {
        const response = await this.getAppearanceAttorneysForCaseUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSupportTicketsForCase
     */
    async getSupportTicketsForCaseUsingGETRaw(requestParameters: GetSupportTicketsForCaseUsingGETRequest): Promise<runtime.ApiResponse<GetSupportTicketsResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling getSupportTicketsForCaseUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/support-tickets`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSupportTicketsResponseFromJSON(jsonValue));
    }

    /**
     * getSupportTicketsForCase
     */
    async getSupportTicketsForCaseUsingGET(requestParameters: GetSupportTicketsForCaseUsingGETRequest): Promise<GetSupportTicketsResponse> {
        const response = await this.getSupportTicketsForCaseUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * initiateCaseAndChargeCustomer
     */
    async initiateCaseAndChargeCustomerUsingPOSTRaw(requestParameters: InitiateCaseAndChargeCustomerUsingPOSTRequest): Promise<runtime.ApiResponse<InitiateCaseAndChargeCustomerResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/initiate-with-payment`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiateCaseAndChargeCustomerRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InitiateCaseAndChargeCustomerResponseFromJSON(jsonValue));
    }

    /**
     * initiateCaseAndChargeCustomer
     */
    async initiateCaseAndChargeCustomerUsingPOST(requestParameters: InitiateCaseAndChargeCustomerUsingPOSTRequest): Promise<InitiateCaseAndChargeCustomerResponse> {
        const response = await this.initiateCaseAndChargeCustomerUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * initiateCase
     */
    async initiateCaseUsingPOSTRaw(requestParameters: InitiateCaseUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling initiateCaseUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/initiate`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * initiateCase
     */
    async initiateCaseUsingPOST(requestParameters: InitiateCaseUsingPOSTRequest): Promise<void> {
        await this.initiateCaseUsingPOSTRaw(requestParameters);
    }

    /**
     * markCaseAsResolved
     */
    async markCaseAsResolvedUsingPOSTRaw(requestParameters: MarkCaseAsResolvedUsingPOSTRequest): Promise<runtime.ApiResponse<MarkCaseAsResolvedResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling markCaseAsResolvedUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling markCaseAsResolvedUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/resolution`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkCaseAsResolvedRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MarkCaseAsResolvedResponseFromJSON(jsonValue));
    }

    /**
     * markCaseAsResolved
     */
    async markCaseAsResolvedUsingPOST(requestParameters: MarkCaseAsResolvedUsingPOSTRequest): Promise<MarkCaseAsResolvedResponse> {
        const response = await this.markCaseAsResolvedUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * removeViolationsFromCitation
     */
    async removeViolationsFromCitationUsingDELETERaw(requestParameters: RemoveViolationsFromCitationUsingDELETERequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
        }

        if (requestParameters.violationTypes === null || requestParameters.violationTypes === undefined) {
            throw new runtime.RequiredError('violationTypes','Required parameter requestParameters.violationTypes was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/citation/violations/{violationTypes}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"violationTypes"}}`, encodeURIComponent(String(requestParameters.violationTypes))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * removeViolationsFromCitation
     */
    async removeViolationsFromCitationUsingDELETE(requestParameters: RemoveViolationsFromCitationUsingDELETERequest): Promise<object> {
        const response = await this.removeViolationsFromCitationUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * reopenCase
     */
    async reopenCaseUsingPUTRaw(requestParameters: ReopenCaseUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling reopenCaseUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/reopen`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * reopenCase
     */
    async reopenCaseUsingPUT(requestParameters: ReopenCaseUsingPUTRequest): Promise<void> {
        await this.reopenCaseUsingPUTRaw(requestParameters);
    }

    /**
     * setArchiveOnCases
     */
    async setArchiveOnCasesUsingPUTRaw(requestParameters: SetArchiveOnCasesUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling setArchiveOnCasesUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/archive`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetArchiveOnCasesRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setArchiveOnCases
     */
    async setArchiveOnCasesUsingPUT(requestParameters: SetArchiveOnCasesUsingPUTRequest): Promise<void> {
        await this.setArchiveOnCasesUsingPUTRaw(requestParameters);
    }

    /**
     * setCourtDateForCase
     */
    async setCourtDateForCaseUsingPOSTRaw(requestParameters: SetCourtDateForCaseUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling setCourtDateForCaseUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling setCourtDateForCaseUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/courtdate`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetCourtDateForCaseRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setCourtDateForCase
     */
    async setCourtDateForCaseUsingPOST(requestParameters: SetCourtDateForCaseUsingPOSTRequest): Promise<void> {
        await this.setCourtDateForCaseUsingPOSTRaw(requestParameters);
    }

    /**
     * submitRequestForPriceMatch
     */
    async submitRequestForPriceMatchUsingPOSTRaw(requestParameters: SubmitRequestForPriceMatchUsingPOSTRequest): Promise<runtime.ApiResponse<PriceMatchResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
        }

        if (requestParameters.priceMatchRequest === null || requestParameters.priceMatchRequest === undefined) {
            throw new runtime.RequiredError('priceMatchRequest','Required parameter requestParameters.priceMatchRequest was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/price-match`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PriceMatchRequestToJSON(requestParameters.priceMatchRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceMatchResponseFromJSON(jsonValue));
    }

    /**
     * submitRequestForPriceMatch
     */
    async submitRequestForPriceMatchUsingPOST(requestParameters: SubmitRequestForPriceMatchUsingPOSTRequest): Promise<PriceMatchResponse> {
        const response = await this.submitRequestForPriceMatchUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateCase
     */
    async updateCaseUsingPUTRaw(requestParameters: UpdateCaseUsingPUTRequest): Promise<runtime.ApiResponse<GetCaseResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling updateCaseUsingPUT.');
        }

        if (requestParameters.caseFromRequest === null || requestParameters.caseFromRequest === undefined) {
            throw new runtime.RequiredError('caseFromRequest','Required parameter requestParameters.caseFromRequest was null or undefined when calling updateCaseUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CaseModelReqToJSON(requestParameters.caseFromRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseResponseFromJSON(jsonValue));
    }

    /**
     * updateCase
     */
    async updateCaseUsingPUT(requestParameters: UpdateCaseUsingPUTRequest): Promise<GetCaseResponse> {
        const response = await this.updateCaseUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateDeclineTickets
     */
    async updateDeclineTicketsUsingPUTRaw(requestParameters: UpdateDeclineTicketsUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling updateDeclineTicketsUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateDeclineTicketsUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/decline-tickets`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCaseDeclineTicketsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * updateDeclineTickets
     */
    async updateDeclineTicketsUsingPUT(requestParameters: UpdateDeclineTicketsUsingPUTRequest): Promise<object> {
        const response = await this.updateDeclineTicketsUsingPUTRaw(requestParameters);
        return await response.value();
    }

}
