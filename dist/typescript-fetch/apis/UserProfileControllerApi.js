/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { GetUserAddressesResponseFromJSON, MergeUserRequestToJSON, MergeUserResponseFromJSON, SetMarketingEmailOptInRequestToJSON, UpdateProfilePictureRequestToJSON, UpdateProfilePictureResponseFromJSON, UpdateUserDetailsResponseFromJSON, UpdateUserPhoneNumberRequestToJSON, UpsertAddressRequestToJSON, ValidatePhoneNumberRequestToJSON, ValidatePhoneNumberResponseFromJSON, } from '../models';
/**
 *
 */
export class UserProfileControllerApi extends runtime.BaseAPI {
    /**
     * addUserAddress
     */
    addUserAddressUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling addUserAddressUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addUserAddressUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/addresses`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UpsertAddressRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * addUserAddress
     */
    addUserAddressUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.addUserAddressUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * addUserPhoneNumber
     */
    addUserPhoneNumberUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling addUserPhoneNumberUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addUserPhoneNumberUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/phone-numbers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateUserPhoneNumberRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
        });
    }
    /**
     * addUserPhoneNumber
     */
    addUserPhoneNumberUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addUserPhoneNumberUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * deleteUserPhoneNumber
     */
    deleteUserPhoneNumberUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.phoneNumberId === null || requestParameters.phoneNumberId === undefined) {
                throw new runtime.RequiredError('phoneNumberId', 'Required parameter requestParameters.phoneNumberId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/phone-numbers/{phoneNumberId}`.replace(`{${"phoneNumberId"}}`, encodeURIComponent(String(requestParameters.phoneNumberId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
        });
    }
    /**
     * deleteUserPhoneNumber
     */
    deleteUserPhoneNumberUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteUserPhoneNumberUsingDELETERaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getUserAddresses
     */
    getUserAddressesUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getUserAddressesUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/addresses`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetUserAddressesResponseFromJSON(jsonValue));
        });
    }
    /**
     * getUserAddresses
     */
    getUserAddressesUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserAddressesUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * mergeUser
     */
    mergeUserUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.primaryUserId === null || requestParameters.primaryUserId === undefined) {
                throw new runtime.RequiredError('primaryUserId', 'Required parameter requestParameters.primaryUserId was null or undefined when calling mergeUserUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling mergeUserUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{primaryUserId}/merge`.replace(`{${"primaryUserId"}}`, encodeURIComponent(String(requestParameters.primaryUserId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: MergeUserRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => MergeUserResponseFromJSON(jsonValue));
        });
    }
    /**
     * mergeUser
     */
    mergeUserUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mergeUserUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * setMarketingEmailOptIn
     */
    setMarketingEmailOptInUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling setMarketingEmailOptInUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling setMarketingEmailOptInUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/set-marketing-email-opt-in`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SetMarketingEmailOptInRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * setMarketingEmailOptIn
     */
    setMarketingEmailOptInUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setMarketingEmailOptInUsingPUTRaw(requestParameters);
        });
    }
    /**
     * updateProfilePicture
     */
    updateProfilePictureUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling updateProfilePictureUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateProfilePictureUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/profile-picture`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateProfilePictureRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfilePictureResponseFromJSON(jsonValue));
        });
    }
    /**
     * updateProfilePicture
     */
    updateProfilePictureUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateProfilePictureUsingPUTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * updateUserAddress
     */
    updateUserAddressUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
                throw new runtime.RequiredError('addressId', 'Required parameter requestParameters.addressId was null or undefined when calling updateUserAddressUsingPUT.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling updateUserAddressUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateUserAddressUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpsertAddressRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * updateUserAddress
     */
    updateUserAddressUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserAddressUsingPUTRaw(requestParameters);
        });
    }
    /**
     * updateUserPhoneNumber
     */
    updateUserPhoneNumberUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.phoneNumberId === null || requestParameters.phoneNumberId === undefined) {
                throw new runtime.RequiredError('phoneNumberId', 'Required parameter requestParameters.phoneNumberId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateUserPhoneNumberUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/phone-numbers/{phoneNumberId}`.replace(`{${"phoneNumberId"}}`, encodeURIComponent(String(requestParameters.phoneNumberId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateUserPhoneNumberRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
        });
    }
    /**
     * updateUserPhoneNumber
     */
    updateUserPhoneNumberUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserPhoneNumberUsingPUTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * validatePhoneNumber
     */
    validatePhoneNumberUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.validatePhoneNumberRequest === null || requestParameters.validatePhoneNumberRequest === undefined) {
                throw new runtime.RequiredError('validatePhoneNumberRequest', 'Required parameter requestParameters.validatePhoneNumberRequest was null or undefined when calling validatePhoneNumberUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/validate-phone-number`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ValidatePhoneNumberRequestToJSON(requestParameters.validatePhoneNumberRequest),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => ValidatePhoneNumberResponseFromJSON(jsonValue));
        });
    }
    /**
     * validatePhoneNumber
     */
    validatePhoneNumberUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validatePhoneNumberUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
}
