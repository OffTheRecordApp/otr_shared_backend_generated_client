/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeclineCaseCounterRequest,
    DeclineCaseCounterRequestFromJSON,
    DeclineCaseCounterRequestToJSON,
    GetCaseCounterOptionsResponse,
    GetCaseCounterOptionsResponseFromJSON,
    GetCaseCounterOptionsResponseToJSON,
    GetCounterOfferResponse,
    GetCounterOfferResponseFromJSON,
    GetCounterOfferResponseToJSON,
    InitiateCaseCounterRequest,
    InitiateCaseCounterRequestFromJSON,
    InitiateCaseCounterRequestToJSON,
    InitiateCaseCounterResponse,
    InitiateCaseCounterResponseFromJSON,
    InitiateCaseCounterResponseToJSON,
} from '../models';

export interface AcceptCaseCounterUsingPUTRequest {
    caseId: string;
    counterId: number;
}

export interface DeclineCaseCounterUsingPUTRequest {
    caseId: string;
    counterId: number;
    request: DeclineCaseCounterRequest;
}

export interface GetCounterOfferUsingGETRequest {
    caseId: string;
}

export interface InitiateCaseCounterUsingPOSTRequest {
    caseId: string;
    request: InitiateCaseCounterRequest;
}

export interface WithdrawCaseCounterUsingPUTRequest {
    caseId: string;
    counterId: number;
}

/**
 * 
 */
export class CaseCounterOfferControllerApi extends runtime.BaseAPI {

    /**
     * acceptCaseCounter
     */
    async acceptCaseCounterUsingPUTRaw(requestParameters: AcceptCaseCounterUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling acceptCaseCounterUsingPUT.');
        }

        if (requestParameters.counterId === null || requestParameters.counterId === undefined) {
            throw new runtime.RequiredError('counterId','Required parameter requestParameters.counterId was null or undefined when calling acceptCaseCounterUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/counters/{counterId}/accept`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"counterId"}}`, encodeURIComponent(String(requestParameters.counterId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * acceptCaseCounter
     */
    async acceptCaseCounterUsingPUT(requestParameters: AcceptCaseCounterUsingPUTRequest): Promise<void> {
        await this.acceptCaseCounterUsingPUTRaw(requestParameters);
    }

    /**
     * declineCaseCounter
     */
    async declineCaseCounterUsingPUTRaw(requestParameters: DeclineCaseCounterUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling declineCaseCounterUsingPUT.');
        }

        if (requestParameters.counterId === null || requestParameters.counterId === undefined) {
            throw new runtime.RequiredError('counterId','Required parameter requestParameters.counterId was null or undefined when calling declineCaseCounterUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling declineCaseCounterUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/counters/{counterId}/decline`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"counterId"}}`, encodeURIComponent(String(requestParameters.counterId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeclineCaseCounterRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * declineCaseCounter
     */
    async declineCaseCounterUsingPUT(requestParameters: DeclineCaseCounterUsingPUTRequest): Promise<void> {
        await this.declineCaseCounterUsingPUTRaw(requestParameters);
    }

    /**
     * getCaseCounterOptions
     */
    async getCaseCounterOptionsUsingGETRaw(): Promise<runtime.ApiResponse<GetCaseCounterOptionsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/counter-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseCounterOptionsResponseFromJSON(jsonValue));
    }

    /**
     * getCaseCounterOptions
     */
    async getCaseCounterOptionsUsingGET(): Promise<GetCaseCounterOptionsResponse> {
        const response = await this.getCaseCounterOptionsUsingGETRaw();
        return await response.value();
    }

    /**
     * getCounterOffer
     */
    async getCounterOfferUsingGETRaw(requestParameters: GetCounterOfferUsingGETRequest): Promise<runtime.ApiResponse<GetCounterOfferResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling getCounterOfferUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/counters`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCounterOfferResponseFromJSON(jsonValue));
    }

    /**
     * getCounterOffer
     */
    async getCounterOfferUsingGET(requestParameters: GetCounterOfferUsingGETRequest): Promise<GetCounterOfferResponse> {
        const response = await this.getCounterOfferUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * initiateCaseCounter
     */
    async initiateCaseCounterUsingPOSTRaw(requestParameters: InitiateCaseCounterUsingPOSTRequest): Promise<runtime.ApiResponse<InitiateCaseCounterResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling initiateCaseCounterUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling initiateCaseCounterUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/counters`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiateCaseCounterRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InitiateCaseCounterResponseFromJSON(jsonValue));
    }

    /**
     * initiateCaseCounter
     */
    async initiateCaseCounterUsingPOST(requestParameters: InitiateCaseCounterUsingPOSTRequest): Promise<InitiateCaseCounterResponse> {
        const response = await this.initiateCaseCounterUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * withdrawCaseCounter
     */
    async withdrawCaseCounterUsingPUTRaw(requestParameters: WithdrawCaseCounterUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling withdrawCaseCounterUsingPUT.');
        }

        if (requestParameters.counterId === null || requestParameters.counterId === undefined) {
            throw new runtime.RequiredError('counterId','Required parameter requestParameters.counterId was null or undefined when calling withdrawCaseCounterUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/counters/{counterId}/withdraw`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"counterId"}}`, encodeURIComponent(String(requestParameters.counterId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * withdrawCaseCounter
     */
    async withdrawCaseCounterUsingPUT(requestParameters: WithdrawCaseCounterUsingPUTRequest): Promise<void> {
        await this.withdrawCaseCounterUsingPUTRaw(requestParameters);
    }

}
