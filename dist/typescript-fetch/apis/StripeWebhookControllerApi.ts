/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface HandleStripeWebhookForSubscriptionsUsingPOSTRequest {
    request?: string;
}

export interface HandleStripeWebhookFromLawfirmAccountUsingPOSTRequest {
    request?: string;
}

export interface HandleStripeWebhookFromLawfirmConnectedAccountsUsingPOSTRequest {
    request?: string;
}

export interface HandleStripeWebhookFromOTRAccountUsingPOSTRequest {
    request?: string;
}

export interface HandleStripeWebhookFromOTRConnectedAccountsUsingPOSTRequest {
    request?: string;
}

/**
 * 
 */
export class StripeWebhookControllerApi extends runtime.BaseAPI {

    /**
     * handleStripeWebhookForSubscriptions
     */
    async handleStripeWebhookForSubscriptionsUsingPOSTRaw(requestParameters: HandleStripeWebhookForSubscriptionsUsingPOSTRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * handleStripeWebhookForSubscriptions
     */
    async handleStripeWebhookForSubscriptionsUsingPOST(requestParameters: HandleStripeWebhookForSubscriptionsUsingPOSTRequest): Promise<string> {
        const response = await this.handleStripeWebhookForSubscriptionsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * handleStripeWebhookFromLawfirmAccount
     */
    async handleStripeWebhookFromLawfirmAccountUsingPOSTRaw(requestParameters: HandleStripeWebhookFromLawfirmAccountUsingPOSTRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/acct_15jGPnDVzhogLb0T/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * handleStripeWebhookFromLawfirmAccount
     */
    async handleStripeWebhookFromLawfirmAccountUsingPOST(requestParameters: HandleStripeWebhookFromLawfirmAccountUsingPOSTRequest): Promise<string> {
        const response = await this.handleStripeWebhookFromLawfirmAccountUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * handleStripeWebhookFromLawfirmConnectedAccounts
     */
    async handleStripeWebhookFromLawfirmConnectedAccountsUsingPOSTRaw(requestParameters: HandleStripeWebhookFromLawfirmConnectedAccountsUsingPOSTRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/acct_15jGPnDVzhogLb0T/webhook/connected-account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * handleStripeWebhookFromLawfirmConnectedAccounts
     */
    async handleStripeWebhookFromLawfirmConnectedAccountsUsingPOST(requestParameters: HandleStripeWebhookFromLawfirmConnectedAccountsUsingPOSTRequest): Promise<string> {
        const response = await this.handleStripeWebhookFromLawfirmConnectedAccountsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * handleStripeWebhookFromOTRAccount
     */
    async handleStripeWebhookFromOTRAccountUsingPOSTRaw(requestParameters: HandleStripeWebhookFromOTRAccountUsingPOSTRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * handleStripeWebhookFromOTRAccount
     */
    async handleStripeWebhookFromOTRAccountUsingPOST(requestParameters: HandleStripeWebhookFromOTRAccountUsingPOSTRequest): Promise<string> {
        const response = await this.handleStripeWebhookFromOTRAccountUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * handleStripeWebhookFromOTRConnectedAccounts
     */
    async handleStripeWebhookFromOTRConnectedAccountsUsingPOSTRaw(requestParameters: HandleStripeWebhookFromOTRConnectedAccountsUsingPOSTRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/acct_15jGdjA1uVHZiLuV/webhook/connected-account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * handleStripeWebhookFromOTRConnectedAccounts
     */
    async handleStripeWebhookFromOTRConnectedAccountsUsingPOST(requestParameters: HandleStripeWebhookFromOTRConnectedAccountsUsingPOSTRequest): Promise<string> {
        const response = await this.handleStripeWebhookFromOTRConnectedAccountsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
