/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AddViolationsToCitationRequestToJSON, CaseModelReqToJSON, FindChargeDisputesResponseFromJSON, GetAppearanceAttorneysResponseFromJSON, GetCaseResponseFromJSON, GetSupportTicketsResponseFromJSON, InitiateCaseAndChargeCustomerRequestToJSON, InitiateCaseAndChargeCustomerResponseFromJSON, MarkCaseAsResolvedRequestToJSON, MarkCaseAsResolvedResponseFromJSON, PriceMatchRequestToJSON, PriceMatchResponseFromJSON, SetArchiveOnCasesRequestToJSON, SetCourtDateForCaseRequestToJSON, UpdateCaseDeclineTicketsRequestToJSON, } from '../models';
/**
 *
 */
export class CaseControllerApi extends runtime.BaseAPI {
    /**
     * addViolationsToCitation
     */
    addViolationsToCitationUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling addViolationsToCitationUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addViolationsToCitationUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/citation/violations`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AddViolationsToCitationRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * addViolationsToCitation
     */
    addViolationsToCitationUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addViolationsToCitationUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * assignCaseToUser
     */
    assignCaseToUserUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling assignCaseToUserUsingPOST.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling assignCaseToUserUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/owner/{userId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * assignCaseToUser
     */
    assignCaseToUserUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.assignCaseToUserUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * assignOwner
     */
    assignOwnerUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling assignOwnerUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/owner`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * assignOwner
     */
    assignOwnerUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.assignOwnerUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * findChargeDisputesByCaseId
     */
    findChargeDisputesByCaseIdUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling findChargeDisputesByCaseIdUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/disputes`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => FindChargeDisputesResponseFromJSON(jsonValue));
        });
    }
    /**
     * findChargeDisputesByCaseId
     */
    findChargeDisputesByCaseIdUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.findChargeDisputesByCaseIdUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getAppearanceAttorneysForCase
     */
    getAppearanceAttorneysForCaseUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling getAppearanceAttorneysForCaseUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/appearance-attorneys`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetAppearanceAttorneysResponseFromJSON(jsonValue));
        });
    }
    /**
     * getAppearanceAttorneysForCase
     */
    getAppearanceAttorneysForCaseUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAppearanceAttorneysForCaseUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getSupportTicketsForCase
     */
    getSupportTicketsForCaseUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling getSupportTicketsForCaseUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/support-tickets`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetSupportTicketsResponseFromJSON(jsonValue));
        });
    }
    /**
     * getSupportTicketsForCase
     */
    getSupportTicketsForCaseUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSupportTicketsForCaseUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * initiateCaseAndChargeCustomer
     */
    initiateCaseAndChargeCustomerUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling initiateCaseAndChargeCustomerUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/initiate-with-payment`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InitiateCaseAndChargeCustomerRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => InitiateCaseAndChargeCustomerResponseFromJSON(jsonValue));
        });
    }
    /**
     * initiateCaseAndChargeCustomer
     */
    initiateCaseAndChargeCustomerUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.initiateCaseAndChargeCustomerUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * initiateCase
     */
    initiateCaseUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling initiateCaseUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/initiate`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.request,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * initiateCase
     */
    initiateCaseUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initiateCaseUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * markCaseAsResolved
     */
    markCaseAsResolvedUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling markCaseAsResolvedUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling markCaseAsResolvedUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/resolution`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: MarkCaseAsResolvedRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => MarkCaseAsResolvedResponseFromJSON(jsonValue));
        });
    }
    /**
     * markCaseAsResolved
     */
    markCaseAsResolvedUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.markCaseAsResolvedUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * removeViolationsFromCitation
     */
    removeViolationsFromCitationUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
            }
            if (requestParameters.violationTypes === null || requestParameters.violationTypes === undefined) {
                throw new runtime.RequiredError('violationTypes', 'Required parameter requestParameters.violationTypes was null or undefined when calling removeViolationsFromCitationUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/citation/violations/{violationTypes}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"violationTypes"}}`, encodeURIComponent(String(requestParameters.violationTypes))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * removeViolationsFromCitation
     */
    removeViolationsFromCitationUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeViolationsFromCitationUsingDELETERaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * reopenCase
     */
    reopenCaseUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling reopenCaseUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/reopen`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * reopenCase
     */
    reopenCaseUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reopenCaseUsingPUTRaw(requestParameters);
        });
    }
    /**
     * setArchiveOnCases
     */
    setArchiveOnCasesUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling setArchiveOnCasesUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/archive`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SetArchiveOnCasesRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * setArchiveOnCases
     */
    setArchiveOnCasesUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setArchiveOnCasesUsingPUTRaw(requestParameters);
        });
    }
    /**
     * setCourtDateForCase
     */
    setCourtDateForCaseUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling setCourtDateForCaseUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling setCourtDateForCaseUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/courtdate`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SetCourtDateForCaseRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * setCourtDateForCase
     */
    setCourtDateForCaseUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setCourtDateForCaseUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * submitRequestForPriceMatch
     */
    submitRequestForPriceMatchUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
            }
            if (requestParameters.priceMatchRequest === null || requestParameters.priceMatchRequest === undefined) {
                throw new runtime.RequiredError('priceMatchRequest', 'Required parameter requestParameters.priceMatchRequest was null or undefined when calling submitRequestForPriceMatchUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/price-match`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PriceMatchRequestToJSON(requestParameters.priceMatchRequest),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => PriceMatchResponseFromJSON(jsonValue));
        });
    }
    /**
     * submitRequestForPriceMatch
     */
    submitRequestForPriceMatchUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.submitRequestForPriceMatchUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * updateCase
     */
    updateCaseUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling updateCaseUsingPUT.');
            }
            if (requestParameters.caseFromRequest === null || requestParameters.caseFromRequest === undefined) {
                throw new runtime.RequiredError('caseFromRequest', 'Required parameter requestParameters.caseFromRequest was null or undefined when calling updateCaseUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: CaseModelReqToJSON(requestParameters.caseFromRequest),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseResponseFromJSON(jsonValue));
        });
    }
    /**
     * updateCase
     */
    updateCaseUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCaseUsingPUTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * updateDeclineTickets
     */
    updateDeclineTicketsUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
                throw new runtime.RequiredError('caseId', 'Required parameter requestParameters.caseId was null or undefined when calling updateDeclineTicketsUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateDeclineTicketsUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cases/{caseId}/decline-tickets`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateCaseDeclineTicketsRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * updateDeclineTickets
     */
    updateDeclineTicketsUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateDeclineTicketsUsingPUTRaw(requestParameters);
            return yield response.value();
        });
    }
}
