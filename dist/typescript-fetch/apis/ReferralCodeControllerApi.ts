/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateReferralCodeRequest,
    CreateReferralCodeRequestFromJSON,
    CreateReferralCodeRequestToJSON,
    CreateReferralCodeResponse,
    CreateReferralCodeResponseFromJSON,
    CreateReferralCodeResponseToJSON,
    GetReferralCodeResponse,
    GetReferralCodeResponseFromJSON,
    GetReferralCodeResponseToJSON,
    GetReferralCodesResponse,
    GetReferralCodesResponseFromJSON,
    GetReferralCodesResponseToJSON,
} from '../models';

export interface ApproveReferralCodeUsingPUTRequest {
    codeId: string;
}

export interface GenerateReferralCodeUsingPOSTRequest {
    request: CreateReferralCodeRequest;
}

export interface GetReferralCodeUsingGETRequest {
    codeId: string;
}

export interface GetReferralCodesUsingGETRequest {
    isActive?: boolean;
}

export interface MarkCodeAsInactiveUsingDELETERequest {
    codeId: string;
}

export interface ValidateReferralCodeUsingGETRequest {
    codeId: string;
}

/**
 * 
 */
export class ReferralCodeControllerApi extends runtime.BaseAPI {

    /**
     * Only for admins. This will approve and activate a given referral code
     */
    async approveReferralCodeUsingPUTRaw(requestParameters: ApproveReferralCodeUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.codeId === null || requestParameters.codeId === undefined) {
            throw new runtime.RequiredError('codeId','Required parameter requestParameters.codeId was null or undefined when calling approveReferralCodeUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/referrals/codes/{codeId}/approve`.replace(`{${"codeId"}}`, encodeURIComponent(String(requestParameters.codeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Only for admins. This will approve and activate a given referral code
     */
    async approveReferralCodeUsingPUT(requestParameters: ApproveReferralCodeUsingPUTRequest): Promise<void> {
        await this.approveReferralCodeUsingPUTRaw(requestParameters);
    }

    /**
     * Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
     */
    async generateReferralCodeUsingPOSTRaw(requestParameters: GenerateReferralCodeUsingPOSTRequest): Promise<runtime.ApiResponse<CreateReferralCodeResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling generateReferralCodeUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/referrals/codes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReferralCodeRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateReferralCodeResponseFromJSON(jsonValue));
    }

    /**
     * Referral codes are currently immutable. Meaning, once a referral code is created then no modification is allowed. In urgent scenarios, we can update the values via SQL. If you want to apply a discount to the referee then enter a negative value (applies both for percentage_discount and cents_value types), and enter a positive value if you want to increase the price.
     */
    async generateReferralCodeUsingPOST(requestParameters: GenerateReferralCodeUsingPOSTRequest): Promise<CreateReferralCodeResponse> {
        const response = await this.generateReferralCodeUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getReferralCode
     */
    async getReferralCodeUsingGETRaw(requestParameters: GetReferralCodeUsingGETRequest): Promise<runtime.ApiResponse<GetReferralCodeResponse>> {
        if (requestParameters.codeId === null || requestParameters.codeId === undefined) {
            throw new runtime.RequiredError('codeId','Required parameter requestParameters.codeId was null or undefined when calling getReferralCodeUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/referrals/codes/{codeId}`.replace(`{${"codeId"}}`, encodeURIComponent(String(requestParameters.codeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReferralCodeResponseFromJSON(jsonValue));
    }

    /**
     * getReferralCode
     */
    async getReferralCodeUsingGET(requestParameters: GetReferralCodeUsingGETRequest): Promise<GetReferralCodeResponse> {
        const response = await this.getReferralCodeUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getReferralCodes
     */
    async getReferralCodesUsingGETRaw(requestParameters: GetReferralCodesUsingGETRequest): Promise<runtime.ApiResponse<GetReferralCodesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isActive !== undefined) {
            queryParameters['isActive'] = requestParameters.isActive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/referrals/codes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReferralCodesResponseFromJSON(jsonValue));
    }

    /**
     * getReferralCodes
     */
    async getReferralCodesUsingGET(requestParameters: GetReferralCodesUsingGETRequest): Promise<GetReferralCodesResponse> {
        const response = await this.getReferralCodesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * markCodeAsInactive
     */
    async markCodeAsInactiveUsingDELETERaw(requestParameters: MarkCodeAsInactiveUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.codeId === null || requestParameters.codeId === undefined) {
            throw new runtime.RequiredError('codeId','Required parameter requestParameters.codeId was null or undefined when calling markCodeAsInactiveUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/referrals/codes/{codeId}`.replace(`{${"codeId"}}`, encodeURIComponent(String(requestParameters.codeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * markCodeAsInactive
     */
    async markCodeAsInactiveUsingDELETE(requestParameters: MarkCodeAsInactiveUsingDELETERequest): Promise<void> {
        await this.markCodeAsInactiveUsingDELETERaw(requestParameters);
    }

    /**
     * Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
     */
    async validateReferralCodeUsingGETRaw(requestParameters: ValidateReferralCodeUsingGETRequest): Promise<runtime.ApiResponse<GetReferralCodeResponse>> {
        if (requestParameters.codeId === null || requestParameters.codeId === undefined) {
            throw new runtime.RequiredError('codeId','Required parameter requestParameters.codeId was null or undefined when calling validateReferralCodeUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/referrals/codes/{codeId}/validate`.replace(`{${"codeId"}}`, encodeURIComponent(String(requestParameters.codeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReferralCodeResponseFromJSON(jsonValue));
    }

    /**
     * Validates and returns the referral code. Validation includes: Are we passed the expiration date? Has the code exceeded it\'s max use count?
     */
    async validateReferralCodeUsingGET(requestParameters: ValidateReferralCodeUsingGETRequest): Promise<GetReferralCodeResponse> {
        const response = await this.validateReferralCodeUsingGETRaw(requestParameters);
        return await response.value();
    }

}
