/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetCourtCoverageForCountyReportResponse,
    GetCourtCoverageForCountyReportResponseFromJSON,
    GetCourtCoverageForCountyReportResponseToJSON,
    GetCourtCoverageForStateReportResponse,
    GetCourtCoverageForStateReportResponseFromJSON,
    GetCourtCoverageForStateReportResponseToJSON,
    GetCourtCoverageReportResponse,
    GetCourtCoverageReportResponseFromJSON,
    GetCourtCoverageReportResponseToJSON,
    GetLawfirmCoverageReportResponse,
    GetLawfirmCoverageReportResponseFromJSON,
    GetLawfirmCoverageReportResponseToJSON,
} from '../models';

export interface GetCourtCoverageForCountyReportUsingGETRequest {
    countyId: number;
    regionCode: string;
    urWindowInDays?: number;
}

export interface GetCourtCoverageForStateReportUsingGETRequest {
    regionCode: string;
    countyId?: number;
    urWindowInDays?: number;
}

export interface GetCourtCoverageReportUsingGETRequest {
    urWindowInDays?: number;
}

export interface GetLawfirmCoverageReportUsingGETRequest {
    countyId?: number;
    regionCode?: string;
}

/**
 * 
 */
export class ReportingControllerApi extends runtime.BaseAPI {

    /**
     * getCourtCoverageForCountyReport
     */
    async getCourtCoverageForCountyReportUsingGETRaw(requestParameters: GetCourtCoverageForCountyReportUsingGETRequest): Promise<runtime.ApiResponse<GetCourtCoverageForCountyReportResponse>> {
        if (requestParameters.countyId === null || requestParameters.countyId === undefined) {
            throw new runtime.RequiredError('countyId','Required parameter requestParameters.countyId was null or undefined when calling getCourtCoverageForCountyReportUsingGET.');
        }

        if (requestParameters.regionCode === null || requestParameters.regionCode === undefined) {
            throw new runtime.RequiredError('regionCode','Required parameter requestParameters.regionCode was null or undefined when calling getCourtCoverageForCountyReportUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.urWindowInDays !== undefined) {
            queryParameters['urWindowInDays'] = requestParameters.urWindowInDays;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reports/court-coverage/{regionCode}/{countyId}`.replace(`{${"countyId"}}`, encodeURIComponent(String(requestParameters.countyId))).replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCourtCoverageForCountyReportResponseFromJSON(jsonValue));
    }

    /**
     * getCourtCoverageForCountyReport
     */
    async getCourtCoverageForCountyReportUsingGET(requestParameters: GetCourtCoverageForCountyReportUsingGETRequest): Promise<GetCourtCoverageForCountyReportResponse> {
        const response = await this.getCourtCoverageForCountyReportUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCourtCoverageForStateReport
     */
    async getCourtCoverageForStateReportUsingGETRaw(requestParameters: GetCourtCoverageForStateReportUsingGETRequest): Promise<runtime.ApiResponse<GetCourtCoverageForStateReportResponse>> {
        if (requestParameters.regionCode === null || requestParameters.regionCode === undefined) {
            throw new runtime.RequiredError('regionCode','Required parameter requestParameters.regionCode was null or undefined when calling getCourtCoverageForStateReportUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.countyId !== undefined) {
            queryParameters['countyId'] = requestParameters.countyId;
        }

        if (requestParameters.urWindowInDays !== undefined) {
            queryParameters['urWindowInDays'] = requestParameters.urWindowInDays;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reports/court-coverage/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCourtCoverageForStateReportResponseFromJSON(jsonValue));
    }

    /**
     * getCourtCoverageForStateReport
     */
    async getCourtCoverageForStateReportUsingGET(requestParameters: GetCourtCoverageForStateReportUsingGETRequest): Promise<GetCourtCoverageForStateReportResponse> {
        const response = await this.getCourtCoverageForStateReportUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCourtCoverageReport
     */
    async getCourtCoverageReportUsingGETRaw(requestParameters: GetCourtCoverageReportUsingGETRequest): Promise<runtime.ApiResponse<GetCourtCoverageReportResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.urWindowInDays !== undefined) {
            queryParameters['urWindowInDays'] = requestParameters.urWindowInDays;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reports/court-coverage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCourtCoverageReportResponseFromJSON(jsonValue));
    }

    /**
     * getCourtCoverageReport
     */
    async getCourtCoverageReportUsingGET(requestParameters: GetCourtCoverageReportUsingGETRequest): Promise<GetCourtCoverageReportResponse> {
        const response = await this.getCourtCoverageReportUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmCoverageReport
     */
    async getLawfirmCoverageReportUsingGETRaw(requestParameters: GetLawfirmCoverageReportUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmCoverageReportResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.countyId !== undefined) {
            queryParameters['countyId'] = requestParameters.countyId;
        }

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reports/court-coverage/lawfirms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmCoverageReportResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmCoverageReport
     */
    async getLawfirmCoverageReportUsingGET(requestParameters: GetLawfirmCoverageReportUsingGETRequest): Promise<GetLawfirmCoverageReportResponse> {
        const response = await this.getLawfirmCoverageReportUsingGETRaw(requestParameters);
        return await response.value();
    }

}
