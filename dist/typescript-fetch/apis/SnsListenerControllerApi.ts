/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IncomingEmailModels,
    IncomingEmailModelsFromJSON,
    IncomingEmailModelsToJSON,
    IncomingEmailRequest,
    IncomingEmailRequestFromJSON,
    IncomingEmailRequestToJSON,
    SNSNotificationRequest,
    SNSNotificationRequestFromJSON,
    SNSNotificationRequestToJSON,
} from '../models';

export interface HandleBounceComplaintEmailsUsingPOSTRequest {
    request: SNSNotificationRequest;
}

export interface HandleIncomingEmailsUsingPOSTRequest {
    request: IncomingEmailRequest;
}

export interface HandleIncomingHelloEmailsUsingPOSTRequest {
    request: IncomingEmailModels;
}

/**
 * 
 */
export class SnsListenerControllerApi extends runtime.BaseAPI {

    /**
     * handleBounceComplaintEmails
     */
    async handleBounceComplaintEmailsUsingPOSTRaw(requestParameters: HandleBounceComplaintEmailsUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling handleBounceComplaintEmailsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/blacklists/ses/emails/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SNSNotificationRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * handleBounceComplaintEmails
     */
    async handleBounceComplaintEmailsUsingPOST(requestParameters: HandleBounceComplaintEmailsUsingPOSTRequest): Promise<object> {
        const response = await this.handleBounceComplaintEmailsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * handleIncomingEmails
     */
    async handleIncomingEmailsUsingPOSTRaw(requestParameters: HandleIncomingEmailsUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling handleIncomingEmailsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/ses/inbound-emails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomingEmailRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * handleIncomingEmails
     */
    async handleIncomingEmailsUsingPOST(requestParameters: HandleIncomingEmailsUsingPOSTRequest): Promise<void> {
        await this.handleIncomingEmailsUsingPOSTRaw(requestParameters);
    }

    /**
     * handleIncomingHelloEmails
     */
    async handleIncomingHelloEmailsUsingPOSTRaw(requestParameters: HandleIncomingHelloEmailsUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling handleIncomingHelloEmailsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/ses/inbound-hello-emails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomingEmailModelsToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * handleIncomingHelloEmails
     */
    async handleIncomingHelloEmailsUsingPOST(requestParameters: HandleIncomingHelloEmailsUsingPOSTRequest): Promise<void> {
        await this.handleIncomingHelloEmailsUsingPOSTRaw(requestParameters);
    }

}
