/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ListUserWatchlistsResponse,
    ListUserWatchlistsResponseFromJSON,
    ListUserWatchlistsResponseToJSON,
    SaveItemToWatchlistRequest,
    SaveItemToWatchlistRequestFromJSON,
    SaveItemToWatchlistRequestToJSON,
    SaveUserWatchlistsRequest,
    SaveUserWatchlistsRequestFromJSON,
    SaveUserWatchlistsRequestToJSON,
} from '../models';

export interface ListUserWatchlistsUsingGETRequest {
    userId: number;
    includeArchived?: boolean;
    includeDeleted?: boolean;
    watchlistId?: number;
}

export interface RemoveItemFromWatchlistUsingDELETERequest {
    itemId: number;
    watchlistId: number;
}

export interface SaveItemToWatchlistUsingPOSTRequest {
    watchlistId: number;
    request: SaveItemToWatchlistRequest;
}

export interface SaveUserWatchlistsUsingPOSTRequest {
    userId: number;
    request: SaveUserWatchlistsRequest;
}

/**
 * 
 */
export class WatchlistsControllerApi extends runtime.BaseAPI {

    /**
     * listUserWatchlists
     */
    async listUserWatchlistsUsingGETRaw(requestParameters: ListUserWatchlistsUsingGETRequest): Promise<runtime.ApiResponse<ListUserWatchlistsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listUserWatchlistsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeArchived !== undefined) {
            queryParameters['includeArchived'] = requestParameters.includeArchived;
        }

        if (requestParameters.includeDeleted !== undefined) {
            queryParameters['includeDeleted'] = requestParameters.includeDeleted;
        }

        if (requestParameters.watchlistId !== undefined) {
            queryParameters['watchlistId'] = requestParameters.watchlistId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/watchlists/{userId}/lists`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUserWatchlistsResponseFromJSON(jsonValue));
    }

    /**
     * listUserWatchlists
     */
    async listUserWatchlistsUsingGET(requestParameters: ListUserWatchlistsUsingGETRequest): Promise<ListUserWatchlistsResponse> {
        const response = await this.listUserWatchlistsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * removeItemFromWatchlist
     */
    async removeItemFromWatchlistUsingDELETERaw(requestParameters: RemoveItemFromWatchlistUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling removeItemFromWatchlistUsingDELETE.');
        }

        if (requestParameters.watchlistId === null || requestParameters.watchlistId === undefined) {
            throw new runtime.RequiredError('watchlistId','Required parameter requestParameters.watchlistId was null or undefined when calling removeItemFromWatchlistUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/watchlists/{watchlistId}/items/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"watchlistId"}}`, encodeURIComponent(String(requestParameters.watchlistId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removeItemFromWatchlist
     */
    async removeItemFromWatchlistUsingDELETE(requestParameters: RemoveItemFromWatchlistUsingDELETERequest): Promise<void> {
        await this.removeItemFromWatchlistUsingDELETERaw(requestParameters);
    }

    /**
     * saveItemToWatchlist
     */
    async saveItemToWatchlistUsingPOSTRaw(requestParameters: SaveItemToWatchlistUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.watchlistId === null || requestParameters.watchlistId === undefined) {
            throw new runtime.RequiredError('watchlistId','Required parameter requestParameters.watchlistId was null or undefined when calling saveItemToWatchlistUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveItemToWatchlistUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/watchlists/{watchlistId}/items`.replace(`{${"watchlistId"}}`, encodeURIComponent(String(requestParameters.watchlistId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveItemToWatchlistRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * saveItemToWatchlist
     */
    async saveItemToWatchlistUsingPOST(requestParameters: SaveItemToWatchlistUsingPOSTRequest): Promise<void> {
        await this.saveItemToWatchlistUsingPOSTRaw(requestParameters);
    }

    /**
     * saveUserWatchlists
     */
    async saveUserWatchlistsUsingPOSTRaw(requestParameters: SaveUserWatchlistsUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling saveUserWatchlistsUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveUserWatchlistsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/watchlists/{userId}/lists`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveUserWatchlistsRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * saveUserWatchlists
     */
    async saveUserWatchlistsUsingPOST(requestParameters: SaveUserWatchlistsUsingPOSTRequest): Promise<void> {
        await this.saveUserWatchlistsUsingPOSTRaw(requestParameters);
    }

}
