/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetUserAddressesResponse,
    GetUserAddressesResponseFromJSON,
    GetUserAddressesResponseToJSON,
    MergeUserRequest,
    MergeUserRequestFromJSON,
    MergeUserRequestToJSON,
    MergeUserResponse,
    MergeUserResponseFromJSON,
    MergeUserResponseToJSON,
    SetMarketingEmailOptInRequest,
    SetMarketingEmailOptInRequestFromJSON,
    SetMarketingEmailOptInRequestToJSON,
    UpdateProfilePictureRequest,
    UpdateProfilePictureRequestFromJSON,
    UpdateProfilePictureRequestToJSON,
    UpdateProfilePictureResponse,
    UpdateProfilePictureResponseFromJSON,
    UpdateProfilePictureResponseToJSON,
    UpdateUserDetailsResponse,
    UpdateUserDetailsResponseFromJSON,
    UpdateUserDetailsResponseToJSON,
    UpdateUserPhoneNumberRequest,
    UpdateUserPhoneNumberRequestFromJSON,
    UpdateUserPhoneNumberRequestToJSON,
    UpsertAddressRequest,
    UpsertAddressRequestFromJSON,
    UpsertAddressRequestToJSON,
    ValidatePhoneNumberRequest,
    ValidatePhoneNumberRequestFromJSON,
    ValidatePhoneNumberRequestToJSON,
    ValidatePhoneNumberResponse,
    ValidatePhoneNumberResponseFromJSON,
    ValidatePhoneNumberResponseToJSON,
} from '../models';

export interface AddUserAddressUsingPOSTRequest {
    userId: number;
    request: UpsertAddressRequest;
}

export interface AddUserPhoneNumberUsingPOSTRequest {
    userId: number;
    request: UpdateUserPhoneNumberRequest;
}

export interface DeleteUserPhoneNumberUsingDELETERequest {
    phoneNumberId: number;
    userId: number;
}

export interface GetUserAddressesUsingGETRequest {
    userId: number;
}

export interface MergeUserUsingPOSTRequest {
    primaryUserId: string;
    request: MergeUserRequest;
}

export interface SetMarketingEmailOptInUsingPUTRequest {
    userId: number;
    request: SetMarketingEmailOptInRequest;
}

export interface UpdateProfilePictureUsingPUTRequest {
    userId: number;
    request: UpdateProfilePictureRequest;
}

export interface UpdateUserAddressUsingPUTRequest {
    addressId: number;
    userId: number;
    request: UpsertAddressRequest;
}

export interface UpdateUserPhoneNumberUsingPUTRequest {
    phoneNumberId: number;
    userId: number;
    request: UpdateUserPhoneNumberRequest;
}

export interface ValidatePhoneNumberUsingPOSTRequest {
    validatePhoneNumberRequest: ValidatePhoneNumberRequest;
}

/**
 * 
 */
export class UserProfileControllerApi extends runtime.BaseAPI {

    /**
     * addUserAddress
     */
    async addUserAddressUsingPOSTRaw(requestParameters: AddUserAddressUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserAddressUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addUserAddressUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/addresses`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertAddressRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * addUserAddress
     */
    async addUserAddressUsingPOST(requestParameters: AddUserAddressUsingPOSTRequest): Promise<void> {
        await this.addUserAddressUsingPOSTRaw(requestParameters);
    }

    /**
     * addUserPhoneNumber
     */
    async addUserPhoneNumberUsingPOSTRaw(requestParameters: AddUserPhoneNumberUsingPOSTRequest): Promise<runtime.ApiResponse<UpdateUserDetailsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserPhoneNumberUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addUserPhoneNumberUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/phone-numbers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserPhoneNumberRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
    }

    /**
     * addUserPhoneNumber
     */
    async addUserPhoneNumberUsingPOST(requestParameters: AddUserPhoneNumberUsingPOSTRequest): Promise<UpdateUserDetailsResponse> {
        const response = await this.addUserPhoneNumberUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteUserPhoneNumber
     */
    async deleteUserPhoneNumberUsingDELETERaw(requestParameters: DeleteUserPhoneNumberUsingDELETERequest): Promise<runtime.ApiResponse<UpdateUserDetailsResponse>> {
        if (requestParameters.phoneNumberId === null || requestParameters.phoneNumberId === undefined) {
            throw new runtime.RequiredError('phoneNumberId','Required parameter requestParameters.phoneNumberId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserPhoneNumberUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/phone-numbers/{phoneNumberId}`.replace(`{${"phoneNumberId"}}`, encodeURIComponent(String(requestParameters.phoneNumberId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
    }

    /**
     * deleteUserPhoneNumber
     */
    async deleteUserPhoneNumberUsingDELETE(requestParameters: DeleteUserPhoneNumberUsingDELETERequest): Promise<UpdateUserDetailsResponse> {
        const response = await this.deleteUserPhoneNumberUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * getUserAddresses
     */
    async getUserAddressesUsingGETRaw(requestParameters: GetUserAddressesUsingGETRequest): Promise<runtime.ApiResponse<GetUserAddressesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserAddressesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/addresses`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserAddressesResponseFromJSON(jsonValue));
    }

    /**
     * getUserAddresses
     */
    async getUserAddressesUsingGET(requestParameters: GetUserAddressesUsingGETRequest): Promise<GetUserAddressesResponse> {
        const response = await this.getUserAddressesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * mergeUser
     */
    async mergeUserUsingPOSTRaw(requestParameters: MergeUserUsingPOSTRequest): Promise<runtime.ApiResponse<MergeUserResponse>> {
        if (requestParameters.primaryUserId === null || requestParameters.primaryUserId === undefined) {
            throw new runtime.RequiredError('primaryUserId','Required parameter requestParameters.primaryUserId was null or undefined when calling mergeUserUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling mergeUserUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{primaryUserId}/merge`.replace(`{${"primaryUserId"}}`, encodeURIComponent(String(requestParameters.primaryUserId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergeUserRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MergeUserResponseFromJSON(jsonValue));
    }

    /**
     * mergeUser
     */
    async mergeUserUsingPOST(requestParameters: MergeUserUsingPOSTRequest): Promise<MergeUserResponse> {
        const response = await this.mergeUserUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * setMarketingEmailOptIn
     */
    async setMarketingEmailOptInUsingPUTRaw(requestParameters: SetMarketingEmailOptInUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling setMarketingEmailOptInUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling setMarketingEmailOptInUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/set-marketing-email-opt-in`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetMarketingEmailOptInRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setMarketingEmailOptIn
     */
    async setMarketingEmailOptInUsingPUT(requestParameters: SetMarketingEmailOptInUsingPUTRequest): Promise<void> {
        await this.setMarketingEmailOptInUsingPUTRaw(requestParameters);
    }

    /**
     * updateProfilePicture
     */
    async updateProfilePictureUsingPUTRaw(requestParameters: UpdateProfilePictureUsingPUTRequest): Promise<runtime.ApiResponse<UpdateProfilePictureResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateProfilePictureUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateProfilePictureUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/profile-picture`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfilePictureRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfilePictureResponseFromJSON(jsonValue));
    }

    /**
     * updateProfilePicture
     */
    async updateProfilePictureUsingPUT(requestParameters: UpdateProfilePictureUsingPUTRequest): Promise<UpdateProfilePictureResponse> {
        const response = await this.updateProfilePictureUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateUserAddress
     */
    async updateUserAddressUsingPUTRaw(requestParameters: UpdateUserAddressUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling updateUserAddressUsingPUT.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserAddressUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateUserAddressUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertAddressRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateUserAddress
     */
    async updateUserAddressUsingPUT(requestParameters: UpdateUserAddressUsingPUTRequest): Promise<void> {
        await this.updateUserAddressUsingPUTRaw(requestParameters);
    }

    /**
     * updateUserPhoneNumber
     */
    async updateUserPhoneNumberUsingPUTRaw(requestParameters: UpdateUserPhoneNumberUsingPUTRequest): Promise<runtime.ApiResponse<UpdateUserDetailsResponse>> {
        if (requestParameters.phoneNumberId === null || requestParameters.phoneNumberId === undefined) {
            throw new runtime.RequiredError('phoneNumberId','Required parameter requestParameters.phoneNumberId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserPhoneNumberUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateUserPhoneNumberUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/phone-numbers/{phoneNumberId}`.replace(`{${"phoneNumberId"}}`, encodeURIComponent(String(requestParameters.phoneNumberId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserPhoneNumberRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
    }

    /**
     * updateUserPhoneNumber
     */
    async updateUserPhoneNumberUsingPUT(requestParameters: UpdateUserPhoneNumberUsingPUTRequest): Promise<UpdateUserDetailsResponse> {
        const response = await this.updateUserPhoneNumberUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * validatePhoneNumber
     */
    async validatePhoneNumberUsingPOSTRaw(requestParameters: ValidatePhoneNumberUsingPOSTRequest): Promise<runtime.ApiResponse<ValidatePhoneNumberResponse>> {
        if (requestParameters.validatePhoneNumberRequest === null || requestParameters.validatePhoneNumberRequest === undefined) {
            throw new runtime.RequiredError('validatePhoneNumberRequest','Required parameter requestParameters.validatePhoneNumberRequest was null or undefined when calling validatePhoneNumberUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/validate-phone-number`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidatePhoneNumberRequestToJSON(requestParameters.validatePhoneNumberRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatePhoneNumberResponseFromJSON(jsonValue));
    }

    /**
     * validatePhoneNumber
     */
    async validatePhoneNumberUsingPOST(requestParameters: ValidatePhoneNumberUsingPOSTRequest): Promise<ValidatePhoneNumberResponse> {
        const response = await this.validatePhoneNumberUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
