/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AddViolationRequestToJSON, AddViolationResponseFromJSON, GetRegionsWithViolationsResponseFromJSON, GetTrafficViolationTypesResponseFromJSON, ListViolationClassificationResponseFromJSON, UpdateViolationRequestToJSON, } from '../models';
/**
 *
 */
export class ViolationControllerApi extends runtime.BaseAPI {
    /**
     * addViolation
     */
    addViolationUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.isLive === null || requestParameters.isLive === undefined) {
                throw new runtime.RequiredError('isLive', 'Required parameter requestParameters.isLive was null or undefined when calling addViolationUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addViolationUsingPOST.');
            }
            const queryParameters = {};
            if (requestParameters.isLive !== undefined) {
                queryParameters['isLive'] = requestParameters.isLive;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/violations`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AddViolationRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => AddViolationResponseFromJSON(jsonValue));
        });
    }
    /**
     * addViolation
     */
    addViolationUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addViolationUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * deleteViolation
     */
    deleteViolationUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.violationId === null || requestParameters.violationId === undefined) {
                throw new runtime.RequiredError('violationId', 'Required parameter requestParameters.violationId was null or undefined when calling deleteViolationUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/violations/{violationId}`.replace(`{${"violationId"}}`, encodeURIComponent(String(requestParameters.violationId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * deleteViolation
     */
    deleteViolationUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteViolationUsingDELETERaw(requestParameters);
        });
    }
    /**
     * getRegionsWithViolations
     */
    getRegionsWithViolationsUsingGETRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/violations/region-availability`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetRegionsWithViolationsResponseFromJSON(jsonValue));
        });
    }
    /**
     * getRegionsWithViolations
     */
    getRegionsWithViolationsUsingGET() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRegionsWithViolationsUsingGETRaw();
            return yield response.value();
        });
    }
    /**
     * getTrafficViolationTypes
     */
    getTrafficViolationTypesUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.audience !== undefined) {
                queryParameters['audience'] = requestParameters.audience;
            }
            if (requestParameters.flavor !== undefined) {
                queryParameters['flavor'] = requestParameters.flavor;
            }
            if (requestParameters.includePenalties !== undefined) {
                queryParameters['includePenalties'] = requestParameters.includePenalties;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/violations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetTrafficViolationTypesResponseFromJSON(jsonValue));
        });
    }
    /**
     * getTrafficViolationTypes
     */
    getTrafficViolationTypesUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTrafficViolationTypesUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * listViolationClassifications
     */
    listViolationClassificationsUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.regionCode !== undefined) {
                queryParameters['regionCode'] = requestParameters.regionCode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/violations/classifications`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => ListViolationClassificationResponseFromJSON(jsonValue));
        });
    }
    /**
     * listViolationClassifications
     */
    listViolationClassificationsUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listViolationClassificationsUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * updateViolation
     */
    updateViolationUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.violationId === null || requestParameters.violationId === undefined) {
                throw new runtime.RequiredError('violationId', 'Required parameter requestParameters.violationId was null or undefined when calling updateViolationUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateViolationUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/violations/{violationId}`.replace(`{${"violationId"}}`, encodeURIComponent(String(requestParameters.violationId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateViolationRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * updateViolation
     */
    updateViolationUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateViolationUsingPUTRaw(requestParameters);
        });
    }
}
