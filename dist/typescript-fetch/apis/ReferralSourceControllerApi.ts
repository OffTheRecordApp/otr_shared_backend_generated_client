/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetUserReferralSourceTypesResponse,
    GetUserReferralSourceTypesResponseFromJSON,
    GetUserReferralSourceTypesResponseToJSON,
    RegisterNewUserResponse,
    RegisterNewUserResponseFromJSON,
    RegisterNewUserResponseToJSON,
    SetReferralSourceRequest,
    SetReferralSourceRequestFromJSON,
    SetReferralSourceRequestToJSON,
} from '../models';

export interface GetUserReferralSourceTypesUsingGETRequest {
    flavor?: GetUserReferralSourceTypesUsingGETFlavorEnum;
}

export interface SetReferralSourceUsingPOSTRequest {
    request: SetReferralSourceRequest;
}

/**
 * 
 */
export class ReferralSourceControllerApi extends runtime.BaseAPI {

    /**
     * getUserReferralSourceTypes
     */
    async getUserReferralSourceTypesUsingGETRaw(requestParameters: GetUserReferralSourceTypesUsingGETRequest): Promise<runtime.ApiResponse<GetUserReferralSourceTypesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.flavor !== undefined) {
            queryParameters['flavor'] = requestParameters.flavor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/referrals/sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserReferralSourceTypesResponseFromJSON(jsonValue));
    }

    /**
     * getUserReferralSourceTypes
     */
    async getUserReferralSourceTypesUsingGET(requestParameters: GetUserReferralSourceTypesUsingGETRequest): Promise<GetUserReferralSourceTypesResponse> {
        const response = await this.getUserReferralSourceTypesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * setReferralSource
     */
    async setReferralSourceUsingPOSTRaw(requestParameters: SetReferralSourceUsingPOSTRequest): Promise<runtime.ApiResponse<RegisterNewUserResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling setReferralSourceUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/referrals/sources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetReferralSourceRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterNewUserResponseFromJSON(jsonValue));
    }

    /**
     * setReferralSource
     */
    async setReferralSourceUsingPOST(requestParameters: SetReferralSourceUsingPOSTRequest): Promise<RegisterNewUserResponse> {
        const response = await this.setReferralSourceUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetUserReferralSourceTypesUsingGETFlavorEnum {
    ALL = 'ALL',
    ENABLED = 'ENABLED'
}
