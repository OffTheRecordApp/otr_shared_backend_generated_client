/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AddExtraAccountRequestToJSON, AssociateOAuthAccountRequestToJSON, AssociateOAuthAccountResponseFromJSON, } from '../models';
/**
 *
 */
export class UserAccountControllerApi extends runtime.BaseAPI {
    /**
     * addExtraAccount
     */
    addExtraAccountUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling addExtraAccountUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling addExtraAccountUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/account`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AddExtraAccountRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * addExtraAccount
     */
    addExtraAccountUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.addExtraAccountUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * associateOAuthAccount
     */
    associateOAuthAccountUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling associateOAuthAccountUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling associateOAuthAccountUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/accounts/associate-oauth`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AssociateOAuthAccountRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => AssociateOAuthAccountResponseFromJSON(jsonValue));
        });
    }
    /**
     * associateOAuthAccount
     */
    associateOAuthAccountUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.associateOAuthAccountUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * removeAdditionalUserHandle
     */
    removeAdditionalUserHandleUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userHandle === null || requestParameters.userHandle === undefined) {
                throw new runtime.RequiredError('userHandle', 'Required parameter requestParameters.userHandle was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/accounts/{userHandle}`.replace(`{${"userHandle"}}`, encodeURIComponent(String(requestParameters.userHandle))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * removeAdditionalUserHandle
     */
    removeAdditionalUserHandleUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.removeAdditionalUserHandleUsingDELETERaw(requestParameters);
        });
    }
    /**
     * setPrimaryUserHandle
     */
    setPrimaryUserHandleUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userHandle === null || requestParameters.userHandle === undefined) {
                throw new runtime.RequiredError('userHandle', 'Required parameter requestParameters.userHandle was null or undefined when calling setPrimaryUserHandleUsingPUT.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling setPrimaryUserHandleUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/accounts/{userHandle}/set-primary-user-handle`.replace(`{${"userHandle"}}`, encodeURIComponent(String(requestParameters.userHandle))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * setPrimaryUserHandle
     */
    setPrimaryUserHandleUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setPrimaryUserHandleUsingPUTRaw(requestParameters);
        });
    }
}
