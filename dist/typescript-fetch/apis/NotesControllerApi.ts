/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateNoteRequest,
    CreateNoteRequestFromJSON,
    CreateNoteRequestToJSON,
    CreateNoteResponse,
    CreateNoteResponseFromJSON,
    CreateNoteResponseToJSON,
    ListNotesResponse,
    ListNotesResponseFromJSON,
    ListNotesResponseToJSON,
    SaveNotesRequest,
    SaveNotesRequestFromJSON,
    SaveNotesRequestToJSON,
    SearchNotesResponse,
    SearchNotesResponseFromJSON,
    SearchNotesResponseToJSON,
    UpdateNoteRequest,
    UpdateNoteRequestFromJSON,
    UpdateNoteRequestToJSON,
    UpdateNoteResponse,
    UpdateNoteResponseFromJSON,
    UpdateNoteResponseToJSON,
} from '../models';

export interface CreateNoteUsingPOSTRequest {
    request: CreateNoteRequest;
}

export interface DeleteNoteUsingDELETERequest {
    noteId: number;
}

export interface ListNotesUsingGETRequest {
    noteType: ListNotesUsingGETNoteTypeEnum;
    referenceId: string;
    authorUserId?: number;
    includeDeleted?: boolean;
    initialNoteId?: number;
    limit?: number;
    nextPageToken?: string;
    previousPageToken?: string;
}

export interface SaveNotesUsingPOSTRequest {
    userId: number;
    request: SaveNotesRequest;
}

export interface SearchNotesUsingGETRequest {
    noteType: SearchNotesUsingGETNoteTypeEnum;
    query: string;
    referenceId: string;
}

export interface UpdateNoteUsingPUTRequest {
    noteId: number;
    request: UpdateNoteRequest;
}

/**
 * 
 */
export class NotesControllerApi extends runtime.BaseAPI {

    /**
     * createNote
     */
    async createNoteUsingPOSTRaw(requestParameters: CreateNoteUsingPOSTRequest): Promise<runtime.ApiResponse<CreateNoteResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createNoteUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNoteRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNoteResponseFromJSON(jsonValue));
    }

    /**
     * createNote
     */
    async createNoteUsingPOST(requestParameters: CreateNoteUsingPOSTRequest): Promise<CreateNoteResponse> {
        const response = await this.createNoteUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteNote
     */
    async deleteNoteUsingDELETERaw(requestParameters: DeleteNoteUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteNoteUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/notes/{noteId}`.replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteNote
     */
    async deleteNoteUsingDELETE(requestParameters: DeleteNoteUsingDELETERequest): Promise<void> {
        await this.deleteNoteUsingDELETERaw(requestParameters);
    }

    /**
     * listNotes
     */
    async listNotesUsingGETRaw(requestParameters: ListNotesUsingGETRequest): Promise<runtime.ApiResponse<ListNotesResponse>> {
        if (requestParameters.noteType === null || requestParameters.noteType === undefined) {
            throw new runtime.RequiredError('noteType','Required parameter requestParameters.noteType was null or undefined when calling listNotesUsingGET.');
        }

        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling listNotesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.authorUserId !== undefined) {
            queryParameters['authorUserId'] = requestParameters.authorUserId;
        }

        if (requestParameters.includeDeleted !== undefined) {
            queryParameters['includeDeleted'] = requestParameters.includeDeleted;
        }

        if (requestParameters.initialNoteId !== undefined) {
            queryParameters['initialNoteId'] = requestParameters.initialNoteId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.nextPageToken !== undefined) {
            queryParameters['nextPageToken'] = requestParameters.nextPageToken;
        }

        if (requestParameters.previousPageToken !== undefined) {
            queryParameters['previousPageToken'] = requestParameters.previousPageToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/notes/{noteType}/{referenceId}`.replace(`{${"noteType"}}`, encodeURIComponent(String(requestParameters.noteType))).replace(`{${"referenceId"}}`, encodeURIComponent(String(requestParameters.referenceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListNotesResponseFromJSON(jsonValue));
    }

    /**
     * listNotes
     */
    async listNotesUsingGET(requestParameters: ListNotesUsingGETRequest): Promise<ListNotesResponse> {
        const response = await this.listNotesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * saveNotes
     */
    async saveNotesUsingPOSTRaw(requestParameters: SaveNotesUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling saveNotesUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveNotesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/notes/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveNotesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * saveNotes
     */
    async saveNotesUsingPOST(requestParameters: SaveNotesUsingPOSTRequest): Promise<object> {
        const response = await this.saveNotesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * searchNotes
     */
    async searchNotesUsingGETRaw(requestParameters: SearchNotesUsingGETRequest): Promise<runtime.ApiResponse<SearchNotesResponse>> {
        if (requestParameters.noteType === null || requestParameters.noteType === undefined) {
            throw new runtime.RequiredError('noteType','Required parameter requestParameters.noteType was null or undefined when calling searchNotesUsingGET.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchNotesUsingGET.');
        }

        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling searchNotesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.noteType !== undefined) {
            queryParameters['noteType'] = requestParameters.noteType;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.referenceId !== undefined) {
            queryParameters['referenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/notes/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchNotesResponseFromJSON(jsonValue));
    }

    /**
     * searchNotes
     */
    async searchNotesUsingGET(requestParameters: SearchNotesUsingGETRequest): Promise<SearchNotesResponse> {
        const response = await this.searchNotesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateNote
     */
    async updateNoteUsingPUTRaw(requestParameters: UpdateNoteUsingPUTRequest): Promise<runtime.ApiResponse<UpdateNoteResponse>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateNoteUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateNoteUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/notes/{noteId}`.replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNoteRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNoteResponseFromJSON(jsonValue));
    }

    /**
     * updateNote
     */
    async updateNoteUsingPUT(requestParameters: UpdateNoteUsingPUTRequest): Promise<UpdateNoteResponse> {
        const response = await this.updateNoteUsingPUTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListNotesUsingGETNoteTypeEnum {
    CASE = 'CASE',
    LAWFIRM = 'LAWFIRM',
    PHONELEAD = 'PHONE_LEAD',
    USER = 'USER'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchNotesUsingGETNoteTypeEnum {
    CASE = 'CASE',
    LAWFIRM = 'LAWFIRM',
    PHONELEAD = 'PHONE_LEAD',
    USER = 'USER'
}
