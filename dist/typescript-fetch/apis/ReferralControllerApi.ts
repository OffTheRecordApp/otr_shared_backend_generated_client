/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddReferralRequest,
    AddReferralRequestFromJSON,
    AddReferralRequestToJSON,
    GetReferralsHistoryResponse,
    GetReferralsHistoryResponseFromJSON,
    GetReferralsHistoryResponseToJSON,
    ListReferralsResponse,
    ListReferralsResponseFromJSON,
    ListReferralsResponseToJSON,
    PublishReferralContactsResponse,
    PublishReferralContactsResponseFromJSON,
    PublishReferralContactsResponseToJSON,
    PublishReferralRequest,
    PublishReferralRequestFromJSON,
    PublishReferralRequestToJSON,
} from '../models';

export interface AddReferralUsingPOSTRequest {
    request: AddReferralRequest;
}

export interface ListReferralsUsingGETRequest {
    userId: number;
}

export interface PublishReferralContactsUsingPOSTRequest {
    request: PublishReferralRequest;
}

/**
 * 
 */
export class ReferralControllerApi extends runtime.BaseAPI {

    /**
     * addReferral
     */
    async addReferralUsingPOSTRaw(requestParameters: AddReferralUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addReferralUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/referrals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddReferralRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * addReferral
     */
    async addReferralUsingPOST(requestParameters: AddReferralUsingPOSTRequest): Promise<void> {
        await this.addReferralUsingPOSTRaw(requestParameters);
    }

    /**
     * getReferralHistory
     */
    async getReferralHistoryUsingGETRaw(): Promise<runtime.ApiResponse<GetReferralsHistoryResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/referrals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReferralsHistoryResponseFromJSON(jsonValue));
    }

    /**
     * getReferralHistory
     */
    async getReferralHistoryUsingGET(): Promise<GetReferralsHistoryResponse> {
        const response = await this.getReferralHistoryUsingGETRaw();
        return await response.value();
    }

    /**
     * listReferrals
     */
    async listReferralsUsingGETRaw(requestParameters: ListReferralsUsingGETRequest): Promise<runtime.ApiResponse<ListReferralsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listReferralsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/referrals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListReferralsResponseFromJSON(jsonValue));
    }

    /**
     * listReferrals
     */
    async listReferralsUsingGET(requestParameters: ListReferralsUsingGETRequest): Promise<ListReferralsResponse> {
        const response = await this.listReferralsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * publishReferralContacts
     */
    async publishReferralContactsUsingPOSTRaw(requestParameters: PublishReferralContactsUsingPOSTRequest): Promise<runtime.ApiResponse<PublishReferralContactsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling publishReferralContactsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/referrals/contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishReferralRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishReferralContactsResponseFromJSON(jsonValue));
    }

    /**
     * publishReferralContacts
     */
    async publishReferralContactsUsingPOST(requestParameters: PublishReferralContactsUsingPOSTRequest): Promise<PublishReferralContactsResponse> {
        const response = await this.publishReferralContactsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
