/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddReviewRequest,
    AddReviewRequestFromJSON,
    AddReviewRequestToJSON,
    EditCustomerReviewRequest,
    EditCustomerReviewRequestFromJSON,
    EditCustomerReviewRequestToJSON,
    ListEligibleStatusResponse,
    ListEligibleStatusResponseFromJSON,
    ListEligibleStatusResponseToJSON,
    ListReviewsResponse,
    ListReviewsResponseFromJSON,
    ListReviewsResponseToJSON,
    ReplyToReviewRequest,
    ReplyToReviewRequestFromJSON,
    ReplyToReviewRequestToJSON,
    SetCustomerReviewStatusRequest,
    SetCustomerReviewStatusRequestFromJSON,
    SetCustomerReviewStatusRequestToJSON,
    UpdateReplyForCustomerReview,
    UpdateReplyForCustomerReviewFromJSON,
    UpdateReplyForCustomerReviewToJSON,
} from '../models';

export interface AddCustomerReviewUsingPOSTRequest {
    addReviewRequest: AddReviewRequest;
}

export interface EditCustomerReviewUsingPUTRequest {
    reviewId: number;
    editCustomerReviewRequest: EditCustomerReviewRequest;
}

export interface ListCustomerReviewsUsingGETRequest {
    includeAnonymous?: boolean;
    includeDeleted?: boolean;
    includeRatings?: boolean;
    isFeatured?: boolean;
    lawfirmId?: number;
    limit?: number;
    nextPageToken?: string;
    previousPageToken?: string;
    state?: ListCustomerReviewsUsingGETStateEnum;
    tags?: string;
    version?: string;
}

export interface MarkCommentWithVoteUsingPUTRequest {
    commentId: number;
    reviewId: number;
    like?: boolean;
}

export interface MarkReviewWithVoteUsingPUTRequest {
    reviewId: number;
    helpful?: boolean;
}

export interface ReplyToCustomerReviewUsingPOSTRequest {
    reviewId: number;
    request: ReplyToReviewRequest;
}

export interface SetCustomerReviewStatusUsingPUTRequest {
    reviewId: number;
    setCustomerReviewStatusRequest: SetCustomerReviewStatusRequest;
}

export interface UpdateCommentForCustomerReviewUsingPOSTRequest {
    commentId: number;
    reviewId: number;
    request: UpdateReplyForCustomerReview;
}

/**
 * 
 */
export class CustomerReviewControllerApi extends runtime.BaseAPI {

    /**
     * addCustomerReview
     */
    async addCustomerReviewUsingPOSTRaw(requestParameters: AddCustomerReviewUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addReviewRequest === null || requestParameters.addReviewRequest === undefined) {
            throw new runtime.RequiredError('addReviewRequest','Required parameter requestParameters.addReviewRequest was null or undefined when calling addCustomerReviewUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddReviewRequestToJSON(requestParameters.addReviewRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * addCustomerReview
     */
    async addCustomerReviewUsingPOST(requestParameters: AddCustomerReviewUsingPOSTRequest): Promise<void> {
        await this.addCustomerReviewUsingPOSTRaw(requestParameters);
    }

    /**
     * editCustomerReview
     */
    async editCustomerReviewUsingPUTRaw(requestParameters: EditCustomerReviewUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling editCustomerReviewUsingPUT.');
        }

        if (requestParameters.editCustomerReviewRequest === null || requestParameters.editCustomerReviewRequest === undefined) {
            throw new runtime.RequiredError('editCustomerReviewRequest','Required parameter requestParameters.editCustomerReviewRequest was null or undefined when calling editCustomerReviewUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/reviews/api/v1/reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditCustomerReviewRequestToJSON(requestParameters.editCustomerReviewRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * editCustomerReview
     */
    async editCustomerReviewUsingPUT(requestParameters: EditCustomerReviewUsingPUTRequest): Promise<void> {
        await this.editCustomerReviewUsingPUTRaw(requestParameters);
    }

    /**
     * listCustomerReviews
     */
    async listCustomerReviewsUsingGETRaw(requestParameters: ListCustomerReviewsUsingGETRequest): Promise<runtime.ApiResponse<ListReviewsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeAnonymous !== undefined) {
            queryParameters['includeAnonymous'] = requestParameters.includeAnonymous;
        }

        if (requestParameters.includeDeleted !== undefined) {
            queryParameters['includeDeleted'] = requestParameters.includeDeleted;
        }

        if (requestParameters.includeRatings !== undefined) {
            queryParameters['includeRatings'] = requestParameters.includeRatings;
        }

        if (requestParameters.isFeatured !== undefined) {
            queryParameters['isFeatured'] = requestParameters.isFeatured;
        }

        if (requestParameters.lawfirmId !== undefined) {
            queryParameters['lawfirmId'] = requestParameters.lawfirmId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.nextPageToken !== undefined) {
            queryParameters['nextPageToken'] = requestParameters.nextPageToken;
        }

        if (requestParameters.previousPageToken !== undefined) {
            queryParameters['previousPageToken'] = requestParameters.previousPageToken;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.tags !== undefined) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListReviewsResponseFromJSON(jsonValue));
    }

    /**
     * listCustomerReviews
     */
    async listCustomerReviewsUsingGET(requestParameters: ListCustomerReviewsUsingGETRequest): Promise<ListReviewsResponse> {
        const response = await this.listCustomerReviewsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * listEligibleStatusesForReview
     */
    async listEligibleStatusesForReviewUsingGETRaw(): Promise<runtime.ApiResponse<ListEligibleStatusResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reviews/eligible-statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEligibleStatusResponseFromJSON(jsonValue));
    }

    /**
     * listEligibleStatusesForReview
     */
    async listEligibleStatusesForReviewUsingGET(): Promise<ListEligibleStatusResponse> {
        const response = await this.listEligibleStatusesForReviewUsingGETRaw();
        return await response.value();
    }

    /**
     * markCommentWithVote
     */
    async markCommentWithVoteUsingPUTRaw(requestParameters: MarkCommentWithVoteUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling markCommentWithVoteUsingPUT.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling markCommentWithVoteUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.like !== undefined) {
            queryParameters['like'] = requestParameters.like;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reviews/{reviewId}/comments/{commentId}/vote`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * markCommentWithVote
     */
    async markCommentWithVoteUsingPUT(requestParameters: MarkCommentWithVoteUsingPUTRequest): Promise<void> {
        await this.markCommentWithVoteUsingPUTRaw(requestParameters);
    }

    /**
     * markReviewWithVote
     */
    async markReviewWithVoteUsingPUTRaw(requestParameters: MarkReviewWithVoteUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling markReviewWithVoteUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.helpful !== undefined) {
            queryParameters['helpful'] = requestParameters.helpful;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reviews/{reviewId}/vote`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * markReviewWithVote
     */
    async markReviewWithVoteUsingPUT(requestParameters: MarkReviewWithVoteUsingPUTRequest): Promise<void> {
        await this.markReviewWithVoteUsingPUTRaw(requestParameters);
    }

    /**
     * replyToCustomerReview
     */
    async replyToCustomerReviewUsingPOSTRaw(requestParameters: ReplyToCustomerReviewUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling replyToCustomerReviewUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling replyToCustomerReviewUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/reviews/{reviewId}/comments`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplyToReviewRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * replyToCustomerReview
     */
    async replyToCustomerReviewUsingPOST(requestParameters: ReplyToCustomerReviewUsingPOSTRequest): Promise<void> {
        await this.replyToCustomerReviewUsingPOSTRaw(requestParameters);
    }

    /**
     * setCustomerReviewStatus
     */
    async setCustomerReviewStatusUsingPUTRaw(requestParameters: SetCustomerReviewStatusUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling setCustomerReviewStatusUsingPUT.');
        }

        if (requestParameters.setCustomerReviewStatusRequest === null || requestParameters.setCustomerReviewStatusRequest === undefined) {
            throw new runtime.RequiredError('setCustomerReviewStatusRequest','Required parameter requestParameters.setCustomerReviewStatusRequest was null or undefined when calling setCustomerReviewStatusUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/reviews/api/v1/reviews/{reviewId}/status`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetCustomerReviewStatusRequestToJSON(requestParameters.setCustomerReviewStatusRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setCustomerReviewStatus
     */
    async setCustomerReviewStatusUsingPUT(requestParameters: SetCustomerReviewStatusUsingPUTRequest): Promise<void> {
        await this.setCustomerReviewStatusUsingPUTRaw(requestParameters);
    }

    /**
     * updateCommentForCustomerReview
     */
    async updateCommentForCustomerReviewUsingPOSTRaw(requestParameters: UpdateCommentForCustomerReviewUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
        }

        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/reviews/{reviewId}/comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReplyForCustomerReviewToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateCommentForCustomerReview
     */
    async updateCommentForCustomerReviewUsingPOST(requestParameters: UpdateCommentForCustomerReviewUsingPOSTRequest): Promise<void> {
        await this.updateCommentForCustomerReviewUsingPOSTRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListCustomerReviewsUsingGETStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}
