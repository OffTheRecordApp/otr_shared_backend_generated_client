/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { FindChargeDisputesResponse, GetCurrentUserResponse, GetOverduePaymentsResponse, GetSupportTicketsResponse, GetUserDetailsResponse, GetUserStripeAccountResponse, IsUserLoggedInResponse, UpdateUserDetailsResponse, UpdateUserProfileRequest, UpdateUserRolesRequest, ValidateUserEmailResponse } from '../models';
export interface FindChargeDisputesByUserIdUsingGETRequest {
    userId: string;
}
export interface GetCurrentUserInfoUsingGETRequest {
    isAdmin?: boolean;
    serviceProviderId?: string;
}
export interface GetOverduePaymentsUsingGETRequest {
    userId: number;
}
export interface GetSupportTicketsForUserUsingGETRequest {
    email: string;
}
export interface GetUserDetailsUsingGETRequest {
    userIdString: string;
}
export interface GetUserStripeAccountUsingGETRequest {
    userId: number;
}
export interface LogoutUserUsingDELETERequest {
    userId: number;
}
export interface UpdateUserProfileUsingPUTRequest {
    userId: number;
    request: UpdateUserProfileRequest;
}
export interface UpdateUserRolesUsingPOSTRequest {
    request: UpdateUserRolesRequest;
}
export interface ValidateUserByEmailUsingGETRequest {
    email: string;
}
/**
 *
 */
export declare class UserControllerApi extends runtime.BaseAPI {
    /**
     * findChargeDisputesByUserId
     */
    findChargeDisputesByUserIdUsingGETRaw(requestParameters: FindChargeDisputesByUserIdUsingGETRequest): Promise<runtime.ApiResponse<FindChargeDisputesResponse>>;
    /**
     * findChargeDisputesByUserId
     */
    findChargeDisputesByUserIdUsingGET(requestParameters: FindChargeDisputesByUserIdUsingGETRequest): Promise<FindChargeDisputesResponse>;
    /**
     * getCurrentUserInfo
     */
    getCurrentUserInfoUsingGETRaw(requestParameters: GetCurrentUserInfoUsingGETRequest): Promise<runtime.ApiResponse<GetCurrentUserResponse>>;
    /**
     * getCurrentUserInfo
     */
    getCurrentUserInfoUsingGET(requestParameters: GetCurrentUserInfoUsingGETRequest): Promise<GetCurrentUserResponse>;
    /**
     * getOverduePayments
     */
    getOverduePaymentsUsingGETRaw(requestParameters: GetOverduePaymentsUsingGETRequest): Promise<runtime.ApiResponse<GetOverduePaymentsResponse>>;
    /**
     * getOverduePayments
     */
    getOverduePaymentsUsingGET(requestParameters: GetOverduePaymentsUsingGETRequest): Promise<GetOverduePaymentsResponse>;
    /**
     * getSupportTicketsForUser
     */
    getSupportTicketsForUserUsingGETRaw(requestParameters: GetSupportTicketsForUserUsingGETRequest): Promise<runtime.ApiResponse<GetSupportTicketsResponse>>;
    /**
     * getSupportTicketsForUser
     */
    getSupportTicketsForUserUsingGET(requestParameters: GetSupportTicketsForUserUsingGETRequest): Promise<GetSupportTicketsResponse>;
    /**
     * getUserDetails
     */
    getUserDetailsUsingGETRaw(requestParameters: GetUserDetailsUsingGETRequest): Promise<runtime.ApiResponse<GetUserDetailsResponse>>;
    /**
     * getUserDetails
     */
    getUserDetailsUsingGET(requestParameters: GetUserDetailsUsingGETRequest): Promise<GetUserDetailsResponse>;
    /**
     * getUserStripeAccount
     */
    getUserStripeAccountUsingGETRaw(requestParameters: GetUserStripeAccountUsingGETRequest): Promise<runtime.ApiResponse<GetUserStripeAccountResponse>>;
    /**
     * getUserStripeAccount
     */
    getUserStripeAccountUsingGET(requestParameters: GetUserStripeAccountUsingGETRequest): Promise<GetUserStripeAccountResponse>;
    /**
     * isUserLoggedIn
     */
    isUserLoggedInUsingGETRaw(): Promise<runtime.ApiResponse<IsUserLoggedInResponse>>;
    /**
     * isUserLoggedIn
     */
    isUserLoggedInUsingGET(): Promise<IsUserLoggedInResponse>;
    /**
     * logoutUser
     */
    logoutUserUsingDELETERaw(requestParameters: LogoutUserUsingDELETERequest): Promise<runtime.ApiResponse<void>>;
    /**
     * logoutUser
     */
    logoutUserUsingDELETE(requestParameters: LogoutUserUsingDELETERequest): Promise<void>;
    /**
     * updateUserProfile
     */
    updateUserProfileUsingPUTRaw(requestParameters: UpdateUserProfileUsingPUTRequest): Promise<runtime.ApiResponse<UpdateUserDetailsResponse>>;
    /**
     * updateUserProfile
     */
    updateUserProfileUsingPUT(requestParameters: UpdateUserProfileUsingPUTRequest): Promise<UpdateUserDetailsResponse>;
    /**
     * updateUserRoles
     */
    updateUserRolesUsingPOSTRaw(requestParameters: UpdateUserRolesUsingPOSTRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * updateUserRoles
     */
    updateUserRolesUsingPOST(requestParameters: UpdateUserRolesUsingPOSTRequest): Promise<void>;
    /**
     * validateUserByEmail
     */
    validateUserByEmailUsingGETRaw(requestParameters: ValidateUserByEmailUsingGETRequest): Promise<runtime.ApiResponse<ValidateUserEmailResponse>>;
    /**
     * validateUserByEmail
     */
    validateUserByEmailUsingGET(requestParameters: ValidateUserByEmailUsingGETRequest): Promise<ValidateUserEmailResponse>;
}
