/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { FindChargeDisputesResponse, FindDisputesRequest, GenericAdminListRequest, GetCasesWithCoverageObtainedResponse, GetCasesWithMissingLawfirmPayoutsRequest, GetCasesWithMissingLawfirmPayoutsResponse, GetCasesWithOverduePaymentsResponse, GetCasesWithUncapturedChargesRequest, GetCitationPhoneLeadsRequest, GetCitationPhoneLeadsResponse, GetCitationsWithMissingFieldsRequest, GetCitationsWithMissingFieldsResponse, GetClientConfirmedUnpaidCasesResponse, GetDeclinedCasesRequest, GetDeclinedCasesResponse, GetInvalidCasesWithStripeChargeResponse, GetLawfirmLeadsRequest, GetLawfirmLeadsResponse, GetLostCasesWithTransferNotReversedRequest, GetLostCasesWithTransferNotReversedResponse, GetPendingCasesResponse, GetPendingTicketReviewsRequest, GetPendingTicketReviewsResponse, GetPotentialCustomersRequest, GetPotentialCustomersResponse, ListBillingSubscribersResponse } from '../models';
export interface FindDisputesUsingPOSTRequest {
    request: FindDisputesRequest;
}
export interface GetCasesWithCoverageObtainedUsingPOSTRequest {
    request: GenericAdminListRequest;
}
export interface GetCasesWithMissingLawfirmPayoutsUsingPOSTRequest {
    request: GetCasesWithMissingLawfirmPayoutsRequest;
}
export interface GetCasesWithOverduePaymentsUsingPOSTRequest {
    request: GetCasesWithUncapturedChargesRequest;
}
export interface GetCitationPhoneLeadsUsingPOSTRequest {
    request: GetCitationPhoneLeadsRequest;
}
export interface GetCitationsWithMissingFieldsUsingPOSTRequest {
    request: GetCitationsWithMissingFieldsRequest;
}
export interface GetCitationsWithMissingFieldsV2UsingPOSTRequest {
    request: GetCitationsWithMissingFieldsRequest;
}
export interface GetClientConfirmedUnpaidCasesUsingPOSTRequest {
    request: object;
}
export interface GetDeclinedCasesUsingPOSTRequest {
    request: GetDeclinedCasesRequest;
}
export interface GetInvalidCasesWithStripeChargeUsingPOSTRequest {
    request: object;
}
export interface GetLostCasesWithTransferNotReversedUsingPOSTRequest {
    request: GetLostCasesWithTransferNotReversedRequest;
}
export interface GetPendingCasesUsingGETRequest {
    length?: number;
    page?: number;
}
export interface GetPendingCasesUsingPOSTRequest {
    request: object;
}
export interface GetPendingTicketReviewsUsingPOSTRequest {
    request: GetPendingTicketReviewsRequest;
}
export interface ListBillingSubscribersUsingGETRequest {
    billingInterval?: ListBillingSubscribersUsingGETBillingIntervalEnum;
    billingSubscriptionStatus?: ListBillingSubscribersUsingGETBillingSubscriptionStatusEnum;
    coveredSubscriptionsOnly?: boolean;
    endDate?: Date;
    length?: number;
    page?: number;
    planName?: string;
    shouldIncludeSubscribers?: boolean;
    sortBy?: string;
    sortOrder?: string;
    startDate?: Date;
    subscriberName?: string;
    timeZoneId?: string;
}
export interface ListLawfirmLeadsUsingPOSTRequest {
    request: GetLawfirmLeadsRequest;
}
export interface ListPotentialCustomersUsingPOSTRequest {
    request: GetPotentialCustomersRequest;
}
/**
 *
 */
export declare class ConsoleListControllerApi extends runtime.BaseAPI {
    /**
     * findDisputes
     */
    findDisputesUsingPOSTRaw(requestParameters: FindDisputesUsingPOSTRequest): Promise<runtime.ApiResponse<FindChargeDisputesResponse>>;
    /**
     * findDisputes
     */
    findDisputesUsingPOST(requestParameters: FindDisputesUsingPOSTRequest): Promise<FindChargeDisputesResponse>;
    /**
     * getCasesWithCoverageObtained
     */
    getCasesWithCoverageObtainedUsingPOSTRaw(requestParameters: GetCasesWithCoverageObtainedUsingPOSTRequest): Promise<runtime.ApiResponse<GetCasesWithCoverageObtainedResponse>>;
    /**
     * getCasesWithCoverageObtained
     */
    getCasesWithCoverageObtainedUsingPOST(requestParameters: GetCasesWithCoverageObtainedUsingPOSTRequest): Promise<GetCasesWithCoverageObtainedResponse>;
    /**
     * getCasesWithMissingLawfirmPayouts
     */
    getCasesWithMissingLawfirmPayoutsUsingPOSTRaw(requestParameters: GetCasesWithMissingLawfirmPayoutsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCasesWithMissingLawfirmPayoutsResponse>>;
    /**
     * getCasesWithMissingLawfirmPayouts
     */
    getCasesWithMissingLawfirmPayoutsUsingPOST(requestParameters: GetCasesWithMissingLawfirmPayoutsUsingPOSTRequest): Promise<GetCasesWithMissingLawfirmPayoutsResponse>;
    /**
     * getCasesWithOverduePayments
     */
    getCasesWithOverduePaymentsUsingPOSTRaw(requestParameters: GetCasesWithOverduePaymentsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCasesWithOverduePaymentsResponse>>;
    /**
     * getCasesWithOverduePayments
     */
    getCasesWithOverduePaymentsUsingPOST(requestParameters: GetCasesWithOverduePaymentsUsingPOSTRequest): Promise<GetCasesWithOverduePaymentsResponse>;
    /**
     * getCitationPhoneLeads
     */
    getCitationPhoneLeadsUsingPOSTRaw(requestParameters: GetCitationPhoneLeadsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCitationPhoneLeadsResponse>>;
    /**
     * getCitationPhoneLeads
     */
    getCitationPhoneLeadsUsingPOST(requestParameters: GetCitationPhoneLeadsUsingPOSTRequest): Promise<GetCitationPhoneLeadsResponse>;
    /**
     * getCitationsWithMissingFields
     */
    getCitationsWithMissingFieldsUsingPOSTRaw(requestParameters: GetCitationsWithMissingFieldsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCitationsWithMissingFieldsResponse>>;
    /**
     * getCitationsWithMissingFields
     */
    getCitationsWithMissingFieldsUsingPOST(requestParameters: GetCitationsWithMissingFieldsUsingPOSTRequest): Promise<GetCitationsWithMissingFieldsResponse>;
    /**
     * getCitationsWithMissingFieldsV2
     */
    getCitationsWithMissingFieldsV2UsingPOSTRaw(requestParameters: GetCitationsWithMissingFieldsV2UsingPOSTRequest): Promise<runtime.ApiResponse<GetCitationsWithMissingFieldsResponse>>;
    /**
     * getCitationsWithMissingFieldsV2
     */
    getCitationsWithMissingFieldsV2UsingPOST(requestParameters: GetCitationsWithMissingFieldsV2UsingPOSTRequest): Promise<GetCitationsWithMissingFieldsResponse>;
    /**
     * getClientConfirmedUnpaidCases
     */
    getClientConfirmedUnpaidCasesUsingPOSTRaw(requestParameters: GetClientConfirmedUnpaidCasesUsingPOSTRequest): Promise<runtime.ApiResponse<GetClientConfirmedUnpaidCasesResponse>>;
    /**
     * getClientConfirmedUnpaidCases
     */
    getClientConfirmedUnpaidCasesUsingPOST(requestParameters: GetClientConfirmedUnpaidCasesUsingPOSTRequest): Promise<GetClientConfirmedUnpaidCasesResponse>;
    /**
     * getDeclinedCases
     */
    getDeclinedCasesUsingPOSTRaw(requestParameters: GetDeclinedCasesUsingPOSTRequest): Promise<runtime.ApiResponse<GetDeclinedCasesResponse>>;
    /**
     * getDeclinedCases
     */
    getDeclinedCasesUsingPOST(requestParameters: GetDeclinedCasesUsingPOSTRequest): Promise<GetDeclinedCasesResponse>;
    /**
     * getInvalidCasesWithStripeCharge
     */
    getInvalidCasesWithStripeChargeUsingPOSTRaw(requestParameters: GetInvalidCasesWithStripeChargeUsingPOSTRequest): Promise<runtime.ApiResponse<GetInvalidCasesWithStripeChargeResponse>>;
    /**
     * getInvalidCasesWithStripeCharge
     */
    getInvalidCasesWithStripeChargeUsingPOST(requestParameters: GetInvalidCasesWithStripeChargeUsingPOSTRequest): Promise<GetInvalidCasesWithStripeChargeResponse>;
    /**
     * getLostCasesWithTransferNotReversed
     */
    getLostCasesWithTransferNotReversedUsingPOSTRaw(requestParameters: GetLostCasesWithTransferNotReversedUsingPOSTRequest): Promise<runtime.ApiResponse<GetLostCasesWithTransferNotReversedResponse>>;
    /**
     * getLostCasesWithTransferNotReversed
     */
    getLostCasesWithTransferNotReversedUsingPOST(requestParameters: GetLostCasesWithTransferNotReversedUsingPOSTRequest): Promise<GetLostCasesWithTransferNotReversedResponse>;
    /**
     * getPendingCases
     */
    getPendingCasesUsingGETRaw(requestParameters: GetPendingCasesUsingGETRequest): Promise<runtime.ApiResponse<GetPendingCasesResponse>>;
    /**
     * getPendingCases
     */
    getPendingCasesUsingGET(requestParameters: GetPendingCasesUsingGETRequest): Promise<GetPendingCasesResponse>;
    /**
     * getPendingCases
     */
    getPendingCasesUsingPOSTRaw(requestParameters: GetPendingCasesUsingPOSTRequest): Promise<runtime.ApiResponse<GetPendingCasesResponse>>;
    /**
     * getPendingCases
     */
    getPendingCasesUsingPOST(requestParameters: GetPendingCasesUsingPOSTRequest): Promise<GetPendingCasesResponse>;
    /**
     * getPendingTicketReviews
     */
    getPendingTicketReviewsUsingPOSTRaw(requestParameters: GetPendingTicketReviewsUsingPOSTRequest): Promise<runtime.ApiResponse<GetPendingTicketReviewsResponse>>;
    /**
     * getPendingTicketReviews
     */
    getPendingTicketReviewsUsingPOST(requestParameters: GetPendingTicketReviewsUsingPOSTRequest): Promise<GetPendingTicketReviewsResponse>;
    /**
     * listBillingSubscribers
     */
    listBillingSubscribersUsingGETRaw(requestParameters: ListBillingSubscribersUsingGETRequest): Promise<runtime.ApiResponse<ListBillingSubscribersResponse>>;
    /**
     * listBillingSubscribers
     */
    listBillingSubscribersUsingGET(requestParameters: ListBillingSubscribersUsingGETRequest): Promise<ListBillingSubscribersResponse>;
    /**
     * listLawfirmLeads
     */
    listLawfirmLeadsUsingPOSTRaw(requestParameters: ListLawfirmLeadsUsingPOSTRequest): Promise<runtime.ApiResponse<GetLawfirmLeadsResponse>>;
    /**
     * listLawfirmLeads
     */
    listLawfirmLeadsUsingPOST(requestParameters: ListLawfirmLeadsUsingPOSTRequest): Promise<GetLawfirmLeadsResponse>;
    /**
     * listPotentialCustomers
     */
    listPotentialCustomersUsingPOSTRaw(requestParameters: ListPotentialCustomersUsingPOSTRequest): Promise<runtime.ApiResponse<GetPotentialCustomersResponse>>;
    /**
     * listPotentialCustomers
     */
    listPotentialCustomersUsingPOST(requestParameters: ListPotentialCustomersUsingPOSTRequest): Promise<GetPotentialCustomersResponse>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ListBillingSubscribersUsingGETBillingIntervalEnum {
    DAILY = "DAILY",
    MONTHLY = "MONTHLY",
    QUARTERLY = "QUARTERLY",
    WEEKLY = "WEEKLY",
    YEARLY = "YEARLY"
}
/**
    * @export
    * @enum {string}
    */
export declare enum ListBillingSubscribersUsingGETBillingSubscriptionStatusEnum {
    ACTIVE = "ACTIVE",
    CANCELED = "CANCELED",
    COMPLETE = "COMPLETE",
    INCOMPLETE = "INCOMPLETE",
    INCOMPLETEEXPIRED = "INCOMPLETE_EXPIRED",
    INTRIALPERIOD = "IN_TRIAL_PERIOD",
    PASTDUE = "PAST_DUE",
    UNKNOWN = "UNKNOWN",
    UNPAID = "UNPAID"
}
