/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FindChargeDisputesResponse,
    FindChargeDisputesResponseFromJSON,
    FindChargeDisputesResponseToJSON,
    FindDisputesRequest,
    FindDisputesRequestFromJSON,
    FindDisputesRequestToJSON,
    GenericAdminListRequest,
    GenericAdminListRequestFromJSON,
    GenericAdminListRequestToJSON,
    GetCasesWithCoverageObtainedResponse,
    GetCasesWithCoverageObtainedResponseFromJSON,
    GetCasesWithCoverageObtainedResponseToJSON,
    GetCasesWithMissingLawfirmPayoutsRequest,
    GetCasesWithMissingLawfirmPayoutsRequestFromJSON,
    GetCasesWithMissingLawfirmPayoutsRequestToJSON,
    GetCasesWithMissingLawfirmPayoutsResponse,
    GetCasesWithMissingLawfirmPayoutsResponseFromJSON,
    GetCasesWithMissingLawfirmPayoutsResponseToJSON,
    GetCasesWithOverduePaymentsResponse,
    GetCasesWithOverduePaymentsResponseFromJSON,
    GetCasesWithOverduePaymentsResponseToJSON,
    GetCasesWithUncapturedChargesRequest,
    GetCasesWithUncapturedChargesRequestFromJSON,
    GetCasesWithUncapturedChargesRequestToJSON,
    GetCitationPhoneLeadsRequest,
    GetCitationPhoneLeadsRequestFromJSON,
    GetCitationPhoneLeadsRequestToJSON,
    GetCitationPhoneLeadsResponse,
    GetCitationPhoneLeadsResponseFromJSON,
    GetCitationPhoneLeadsResponseToJSON,
    GetCitationsWithMissingFieldsRequest,
    GetCitationsWithMissingFieldsRequestFromJSON,
    GetCitationsWithMissingFieldsRequestToJSON,
    GetCitationsWithMissingFieldsResponse,
    GetCitationsWithMissingFieldsResponseFromJSON,
    GetCitationsWithMissingFieldsResponseToJSON,
    GetClientConfirmedUnpaidCasesResponse,
    GetClientConfirmedUnpaidCasesResponseFromJSON,
    GetClientConfirmedUnpaidCasesResponseToJSON,
    GetDeclinedCasesRequest,
    GetDeclinedCasesRequestFromJSON,
    GetDeclinedCasesRequestToJSON,
    GetDeclinedCasesResponse,
    GetDeclinedCasesResponseFromJSON,
    GetDeclinedCasesResponseToJSON,
    GetInvalidCasesWithStripeChargeResponse,
    GetInvalidCasesWithStripeChargeResponseFromJSON,
    GetInvalidCasesWithStripeChargeResponseToJSON,
    GetLawfirmLeadsRequest,
    GetLawfirmLeadsRequestFromJSON,
    GetLawfirmLeadsRequestToJSON,
    GetLawfirmLeadsResponse,
    GetLawfirmLeadsResponseFromJSON,
    GetLawfirmLeadsResponseToJSON,
    GetLostCasesWithTransferNotReversedRequest,
    GetLostCasesWithTransferNotReversedRequestFromJSON,
    GetLostCasesWithTransferNotReversedRequestToJSON,
    GetLostCasesWithTransferNotReversedResponse,
    GetLostCasesWithTransferNotReversedResponseFromJSON,
    GetLostCasesWithTransferNotReversedResponseToJSON,
    GetPendingCasesResponse,
    GetPendingCasesResponseFromJSON,
    GetPendingCasesResponseToJSON,
    GetPendingTicketReviewsRequest,
    GetPendingTicketReviewsRequestFromJSON,
    GetPendingTicketReviewsRequestToJSON,
    GetPendingTicketReviewsResponse,
    GetPendingTicketReviewsResponseFromJSON,
    GetPendingTicketReviewsResponseToJSON,
    GetPotentialCustomersRequest,
    GetPotentialCustomersRequestFromJSON,
    GetPotentialCustomersRequestToJSON,
    GetPotentialCustomersResponse,
    GetPotentialCustomersResponseFromJSON,
    GetPotentialCustomersResponseToJSON,
    ListBillingSubscribersResponse,
    ListBillingSubscribersResponseFromJSON,
    ListBillingSubscribersResponseToJSON,
} from '../models';

export interface FindDisputesUsingPOSTRequest {
    request: FindDisputesRequest;
}

export interface GetCasesWithCoverageObtainedUsingPOSTRequest {
    request: GenericAdminListRequest;
}

export interface GetCasesWithMissingLawfirmPayoutsUsingPOSTRequest {
    request: GetCasesWithMissingLawfirmPayoutsRequest;
}

export interface GetCasesWithOverduePaymentsUsingPOSTRequest {
    request: GetCasesWithUncapturedChargesRequest;
}

export interface GetCitationPhoneLeadsUsingPOSTRequest {
    request: GetCitationPhoneLeadsRequest;
}

export interface GetCitationsWithMissingFieldsUsingPOSTRequest {
    request: GetCitationsWithMissingFieldsRequest;
}

export interface GetCitationsWithMissingFieldsV2UsingPOSTRequest {
    request: GetCitationsWithMissingFieldsRequest;
}

export interface GetClientConfirmedUnpaidCasesUsingPOSTRequest {
    request: object;
}

export interface GetDeclinedCasesUsingPOSTRequest {
    request: GetDeclinedCasesRequest;
}

export interface GetInvalidCasesWithStripeChargeUsingPOSTRequest {
    request: object;
}

export interface GetLostCasesWithTransferNotReversedUsingPOSTRequest {
    request: GetLostCasesWithTransferNotReversedRequest;
}

export interface GetPendingCasesUsingPOSTRequest {
    request: object;
}

export interface GetPendingTicketReviewsUsingPOSTRequest {
    request: GetPendingTicketReviewsRequest;
}

export interface ListBillingSubscribersUsingGETRequest {
    billingInterval?: ListBillingSubscribersUsingGETBillingIntervalEnum;
    billingSubscriptionStatus?: ListBillingSubscribersUsingGETBillingSubscriptionStatusEnum;
    coveredSubscriptionsOnly?: boolean;
    endDate?: Date;
    length?: number;
    page?: number;
    planName?: string;
    shouldIncludeSubscribers?: boolean;
    sortBy?: string;
    sortOrder?: string;
    startDate?: Date;
    subscriberName?: string;
    timeZoneId?: string;
}

export interface ListLawfirmLeadsUsingPOSTRequest {
    request: GetLawfirmLeadsRequest;
}

export interface ListPotentialCustomersUsingPOSTRequest {
    request: GetPotentialCustomersRequest;
}

/**
 * 
 */
export class ConsoleListControllerApi extends runtime.BaseAPI {

    /**
     * findDisputes
     */
    async findDisputesUsingPOSTRaw(requestParameters: FindDisputesUsingPOSTRequest): Promise<runtime.ApiResponse<FindChargeDisputesResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling findDisputesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/disputes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindDisputesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FindChargeDisputesResponseFromJSON(jsonValue));
    }

    /**
     * findDisputes
     */
    async findDisputesUsingPOST(requestParameters: FindDisputesUsingPOSTRequest): Promise<FindChargeDisputesResponse> {
        const response = await this.findDisputesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCasesWithCoverageObtained
     */
    async getCasesWithCoverageObtainedUsingPOSTRaw(requestParameters: GetCasesWithCoverageObtainedUsingPOSTRequest): Promise<runtime.ApiResponse<GetCasesWithCoverageObtainedResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getCasesWithCoverageObtainedUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/cases-with-coverage-obtained`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericAdminListRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCasesWithCoverageObtainedResponseFromJSON(jsonValue));
    }

    /**
     * getCasesWithCoverageObtained
     */
    async getCasesWithCoverageObtainedUsingPOST(requestParameters: GetCasesWithCoverageObtainedUsingPOSTRequest): Promise<GetCasesWithCoverageObtainedResponse> {
        const response = await this.getCasesWithCoverageObtainedUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCasesWithMissingLawfirmPayouts
     */
    async getCasesWithMissingLawfirmPayoutsUsingPOSTRaw(requestParameters: GetCasesWithMissingLawfirmPayoutsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCasesWithMissingLawfirmPayoutsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getCasesWithMissingLawfirmPayoutsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/cases/missing-lawfirm-payouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCasesWithMissingLawfirmPayoutsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCasesWithMissingLawfirmPayoutsResponseFromJSON(jsonValue));
    }

    /**
     * getCasesWithMissingLawfirmPayouts
     */
    async getCasesWithMissingLawfirmPayoutsUsingPOST(requestParameters: GetCasesWithMissingLawfirmPayoutsUsingPOSTRequest): Promise<GetCasesWithMissingLawfirmPayoutsResponse> {
        const response = await this.getCasesWithMissingLawfirmPayoutsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCasesWithOverduePayments
     */
    async getCasesWithOverduePaymentsUsingPOSTRaw(requestParameters: GetCasesWithOverduePaymentsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCasesWithOverduePaymentsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getCasesWithOverduePaymentsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/cases/unpaid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCasesWithUncapturedChargesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCasesWithOverduePaymentsResponseFromJSON(jsonValue));
    }

    /**
     * getCasesWithOverduePayments
     */
    async getCasesWithOverduePaymentsUsingPOST(requestParameters: GetCasesWithOverduePaymentsUsingPOSTRequest): Promise<GetCasesWithOverduePaymentsResponse> {
        const response = await this.getCasesWithOverduePaymentsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCitationPhoneLeads
     */
    async getCitationPhoneLeadsUsingPOSTRaw(requestParameters: GetCitationPhoneLeadsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCitationPhoneLeadsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getCitationPhoneLeadsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/citation-phone-leads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCitationPhoneLeadsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCitationPhoneLeadsResponseFromJSON(jsonValue));
    }

    /**
     * getCitationPhoneLeads
     */
    async getCitationPhoneLeadsUsingPOST(requestParameters: GetCitationPhoneLeadsUsingPOSTRequest): Promise<GetCitationPhoneLeadsResponse> {
        const response = await this.getCitationPhoneLeadsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCitationsWithMissingFields
     */
    async getCitationsWithMissingFieldsUsingPOSTRaw(requestParameters: GetCitationsWithMissingFieldsUsingPOSTRequest): Promise<runtime.ApiResponse<GetCitationsWithMissingFieldsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getCitationsWithMissingFieldsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/citations-with-missing-fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCitationsWithMissingFieldsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCitationsWithMissingFieldsResponseFromJSON(jsonValue));
    }

    /**
     * getCitationsWithMissingFields
     */
    async getCitationsWithMissingFieldsUsingPOST(requestParameters: GetCitationsWithMissingFieldsUsingPOSTRequest): Promise<GetCitationsWithMissingFieldsResponse> {
        const response = await this.getCitationsWithMissingFieldsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCitationsWithMissingFieldsV2
     */
    async getCitationsWithMissingFieldsV2UsingPOSTRaw(requestParameters: GetCitationsWithMissingFieldsV2UsingPOSTRequest): Promise<runtime.ApiResponse<GetCitationsWithMissingFieldsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getCitationsWithMissingFieldsV2UsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/console/citations-with-missing-fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCitationsWithMissingFieldsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCitationsWithMissingFieldsResponseFromJSON(jsonValue));
    }

    /**
     * getCitationsWithMissingFieldsV2
     */
    async getCitationsWithMissingFieldsV2UsingPOST(requestParameters: GetCitationsWithMissingFieldsV2UsingPOSTRequest): Promise<GetCitationsWithMissingFieldsResponse> {
        const response = await this.getCitationsWithMissingFieldsV2UsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getClientConfirmedUnpaidCases
     */
    async getClientConfirmedUnpaidCasesUsingPOSTRaw(requestParameters: GetClientConfirmedUnpaidCasesUsingPOSTRequest): Promise<runtime.ApiResponse<GetClientConfirmedUnpaidCasesResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getClientConfirmedUnpaidCasesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/cases/client-confirmed-unpaid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClientConfirmedUnpaidCasesResponseFromJSON(jsonValue));
    }

    /**
     * getClientConfirmedUnpaidCases
     */
    async getClientConfirmedUnpaidCasesUsingPOST(requestParameters: GetClientConfirmedUnpaidCasesUsingPOSTRequest): Promise<GetClientConfirmedUnpaidCasesResponse> {
        const response = await this.getClientConfirmedUnpaidCasesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getDeclinedCases
     */
    async getDeclinedCasesUsingPOSTRaw(requestParameters: GetDeclinedCasesUsingPOSTRequest): Promise<runtime.ApiResponse<GetDeclinedCasesResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getDeclinedCasesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/declined`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetDeclinedCasesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDeclinedCasesResponseFromJSON(jsonValue));
    }

    /**
     * getDeclinedCases
     */
    async getDeclinedCasesUsingPOST(requestParameters: GetDeclinedCasesUsingPOSTRequest): Promise<GetDeclinedCasesResponse> {
        const response = await this.getDeclinedCasesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getInvalidCasesWithStripeCharge
     */
    async getInvalidCasesWithStripeChargeUsingPOSTRaw(requestParameters: GetInvalidCasesWithStripeChargeUsingPOSTRequest): Promise<runtime.ApiResponse<GetInvalidCasesWithStripeChargeResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getInvalidCasesWithStripeChargeUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/cases/invalid-with-charge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInvalidCasesWithStripeChargeResponseFromJSON(jsonValue));
    }

    /**
     * getInvalidCasesWithStripeCharge
     */
    async getInvalidCasesWithStripeChargeUsingPOST(requestParameters: GetInvalidCasesWithStripeChargeUsingPOSTRequest): Promise<GetInvalidCasesWithStripeChargeResponse> {
        const response = await this.getInvalidCasesWithStripeChargeUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLostCasesWithTransferNotReversed
     */
    async getLostCasesWithTransferNotReversedUsingPOSTRaw(requestParameters: GetLostCasesWithTransferNotReversedUsingPOSTRequest): Promise<runtime.ApiResponse<GetLostCasesWithTransferNotReversedResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getLostCasesWithTransferNotReversedUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/cases/lost/not-reversed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetLostCasesWithTransferNotReversedRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLostCasesWithTransferNotReversedResponseFromJSON(jsonValue));
    }

    /**
     * getLostCasesWithTransferNotReversed
     */
    async getLostCasesWithTransferNotReversedUsingPOST(requestParameters: GetLostCasesWithTransferNotReversedUsingPOSTRequest): Promise<GetLostCasesWithTransferNotReversedResponse> {
        const response = await this.getLostCasesWithTransferNotReversedUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getPendingCases
     */
    async getPendingCasesUsingPOSTRaw(requestParameters: GetPendingCasesUsingPOSTRequest): Promise<runtime.ApiResponse<GetPendingCasesResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getPendingCasesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/pending`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPendingCasesResponseFromJSON(jsonValue));
    }

    /**
     * getPendingCases
     */
    async getPendingCasesUsingPOST(requestParameters: GetPendingCasesUsingPOSTRequest): Promise<GetPendingCasesResponse> {
        const response = await this.getPendingCasesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getPendingTicketReviews
     */
    async getPendingTicketReviewsUsingPOSTRaw(requestParameters: GetPendingTicketReviewsUsingPOSTRequest): Promise<runtime.ApiResponse<GetPendingTicketReviewsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getPendingTicketReviewsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/ticket-review-requests/pending`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPendingTicketReviewsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPendingTicketReviewsResponseFromJSON(jsonValue));
    }

    /**
     * getPendingTicketReviews
     */
    async getPendingTicketReviewsUsingPOST(requestParameters: GetPendingTicketReviewsUsingPOSTRequest): Promise<GetPendingTicketReviewsResponse> {
        const response = await this.getPendingTicketReviewsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listBillingSubscribers
     */
    async listBillingSubscribersUsingGETRaw(requestParameters: ListBillingSubscribersUsingGETRequest): Promise<runtime.ApiResponse<ListBillingSubscribersResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.billingInterval !== undefined) {
            queryParameters['billingInterval'] = requestParameters.billingInterval;
        }

        if (requestParameters.billingSubscriptionStatus !== undefined) {
            queryParameters['billingSubscriptionStatus'] = requestParameters.billingSubscriptionStatus;
        }

        if (requestParameters.coveredSubscriptionsOnly !== undefined) {
            queryParameters['coveredSubscriptionsOnly'] = requestParameters.coveredSubscriptionsOnly;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.planName !== undefined) {
            queryParameters['planName'] = requestParameters.planName;
        }

        if (requestParameters.shouldIncludeSubscribers !== undefined) {
            queryParameters['shouldIncludeSubscribers'] = requestParameters.shouldIncludeSubscribers;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.subscriberName !== undefined) {
            queryParameters['subscriberName'] = requestParameters.subscriberName;
        }

        if (requestParameters.timeZoneId !== undefined) {
            queryParameters['timeZoneId'] = requestParameters.timeZoneId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/billing/subscribers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBillingSubscribersResponseFromJSON(jsonValue));
    }

    /**
     * listBillingSubscribers
     */
    async listBillingSubscribersUsingGET(requestParameters: ListBillingSubscribersUsingGETRequest): Promise<ListBillingSubscribersResponse> {
        const response = await this.listBillingSubscribersUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * listLawfirmLeads
     */
    async listLawfirmLeadsUsingPOSTRaw(requestParameters: ListLawfirmLeadsUsingPOSTRequest): Promise<runtime.ApiResponse<GetLawfirmLeadsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling listLawfirmLeadsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/lawfirms/leads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetLawfirmLeadsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmLeadsResponseFromJSON(jsonValue));
    }

    /**
     * listLawfirmLeads
     */
    async listLawfirmLeadsUsingPOST(requestParameters: ListLawfirmLeadsUsingPOSTRequest): Promise<GetLawfirmLeadsResponse> {
        const response = await this.listLawfirmLeadsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listPotentialCustomers
     */
    async listPotentialCustomersUsingPOSTRaw(requestParameters: ListPotentialCustomersUsingPOSTRequest): Promise<runtime.ApiResponse<GetPotentialCustomersResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling listPotentialCustomersUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/potential-customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPotentialCustomersRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPotentialCustomersResponseFromJSON(jsonValue));
    }

    /**
     * listPotentialCustomers
     */
    async listPotentialCustomersUsingPOST(requestParameters: ListPotentialCustomersUsingPOSTRequest): Promise<GetPotentialCustomersResponse> {
        const response = await this.listPotentialCustomersUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListBillingSubscribersUsingGETBillingIntervalEnum {
    DAILY = 'DAILY',
    MONTHLY = 'MONTHLY',
    QUARTERLY = 'QUARTERLY',
    WEEKLY = 'WEEKLY',
    YEARLY = 'YEARLY'
}
/**
    * @export
    * @enum {string}
    */
export enum ListBillingSubscribersUsingGETBillingSubscriptionStatusEnum {
    ACTIVE = 'ACTIVE',
    CANCELED = 'CANCELED',
    INCOMPLETE = 'INCOMPLETE',
    INCOMPLETEEXPIRED = 'INCOMPLETE_EXPIRED',
    INTRIALPERIOD = 'IN_TRIAL_PERIOD',
    PASTDUE = 'PAST_DUE',
    UNKNOWN = 'UNKNOWN',
    UNPAID = 'UNPAID'
}
