/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetCoachingCardCategoriesResponse,
    GetCoachingCardCategoriesResponseFromJSON,
    GetCoachingCardCategoriesResponseToJSON,
    ListUserCoachingCardsResponse,
    ListUserCoachingCardsResponseFromJSON,
    ListUserCoachingCardsResponseToJSON,
    SaveCoachingCardRequest,
    SaveCoachingCardRequestFromJSON,
    SaveCoachingCardRequestToJSON,
    UpdateCoachingCardRequest,
    UpdateCoachingCardRequestFromJSON,
    UpdateCoachingCardRequestToJSON,
} from '../models';

export interface AcknowledgeCoachingCardUsingPUTRequest {
    request: UpdateCoachingCardRequest;
}

export interface ListUserCoachingCardsUsingGETRequest {
    userId: number;
    coachingCardType?: ListUserCoachingCardsUsingGETCoachingCardTypeEnum;
    includeCreated?: boolean;
    includeReceived?: boolean;
}

export interface SaveCoachingCardUsingPOSTRequest {
    request: SaveCoachingCardRequest;
}

/**
 * 
 */
export class CoachingCardsControllerApi extends runtime.BaseAPI {

    /**
     * acknowledgeCoachingCard
     */
    async acknowledgeCoachingCardUsingPUTRaw(requestParameters: AcknowledgeCoachingCardUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling acknowledgeCoachingCardUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/api/v1/coaching-cards/acknowledge`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCoachingCardRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * acknowledgeCoachingCard
     */
    async acknowledgeCoachingCardUsingPUT(requestParameters: AcknowledgeCoachingCardUsingPUTRequest): Promise<void> {
        await this.acknowledgeCoachingCardUsingPUTRaw(requestParameters);
    }

    /**
     * getCoachingCardCategories
     */
    async getCoachingCardCategoriesUsingGETRaw(): Promise<runtime.ApiResponse<GetCoachingCardCategoriesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/api/v1/coaching-cards/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCoachingCardCategoriesResponseFromJSON(jsonValue));
    }

    /**
     * getCoachingCardCategories
     */
    async getCoachingCardCategoriesUsingGET(): Promise<GetCoachingCardCategoriesResponse> {
        const response = await this.getCoachingCardCategoriesUsingGETRaw();
        return await response.value();
    }

    /**
     * listUserCoachingCards
     */
    async listUserCoachingCardsUsingGETRaw(requestParameters: ListUserCoachingCardsUsingGETRequest): Promise<runtime.ApiResponse<ListUserCoachingCardsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listUserCoachingCardsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.coachingCardType !== undefined) {
            queryParameters['coachingCardType'] = requestParameters.coachingCardType;
        }

        if (requestParameters.includeCreated !== undefined) {
            queryParameters['includeCreated'] = requestParameters.includeCreated;
        }

        if (requestParameters.includeReceived !== undefined) {
            queryParameters['includeReceived'] = requestParameters.includeReceived;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coaching-cards/{userId}/cards`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUserCoachingCardsResponseFromJSON(jsonValue));
    }

    /**
     * listUserCoachingCards
     */
    async listUserCoachingCardsUsingGET(requestParameters: ListUserCoachingCardsUsingGETRequest): Promise<ListUserCoachingCardsResponse> {
        const response = await this.listUserCoachingCardsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * saveCoachingCard
     */
    async saveCoachingCardUsingPOSTRaw(requestParameters: SaveCoachingCardUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveCoachingCardUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/coaching-cards/cards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveCoachingCardRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * saveCoachingCard
     */
    async saveCoachingCardUsingPOST(requestParameters: SaveCoachingCardUsingPOSTRequest): Promise<void> {
        await this.saveCoachingCardUsingPOSTRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListUserCoachingCardsUsingGETCoachingCardTypeEnum {
    COACHING = 'COACHING',
    KUDOS = 'KUDOS'
}
