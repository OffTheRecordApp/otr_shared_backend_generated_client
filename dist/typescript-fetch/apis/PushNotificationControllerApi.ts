/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeleteNotificationByPagesRequest,
    DeleteNotificationByPagesRequestFromJSON,
    DeleteNotificationByPagesRequestToJSON,
    DeleteNotificationEventRequest,
    DeleteNotificationEventRequestFromJSON,
    DeleteNotificationEventRequestToJSON,
    NotificationEvents,
    NotificationEventsFromJSON,
    NotificationEventsToJSON,
    PushNotificationRegistrationRequest,
    PushNotificationRegistrationRequestFromJSON,
    PushNotificationRegistrationRequestToJSON,
    PushNotificationRequest,
    PushNotificationRequestFromJSON,
    PushNotificationRequestToJSON,
} from '../models';

export interface GetUnreadCountsUsingGETRequest {
    includeMessage?: boolean;
}

export interface MarkAllReadForUserUsingDELETERequest {
    userId: string;
}

export interface MarkCaseNotificationsAsUnreadUsingPUTRequest {
    caseId: string;
    userId: number;
}

export interface MarkPageTypesAsReadUsingDELETERequest {
    caseId: string;
    request: DeleteNotificationByPagesRequest;
}

export interface MarkReadUsingDELETERequest {
    caseId: string;
    request: DeleteNotificationEventRequest;
}

export interface PushCaseMessageUsingPOSTRequest {
    caseId: string;
    pushRequest: PushNotificationRequest;
}

export interface PushNotificationToUserUsingPOSTRequest {
    body: string;
}

export interface RegisterUsingPOSTRequest {
    request: PushNotificationRegistrationRequest;
}

/**
 * 
 */
export class PushNotificationControllerApi extends runtime.BaseAPI {

    /**
     * getUnreadCounts
     */
    async getUnreadCountsUsingGETRaw(requestParameters: GetUnreadCountsUsingGETRequest): Promise<runtime.ApiResponse<NotificationEvents>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeMessage !== undefined) {
            queryParameters['includeMessage'] = requestParameters.includeMessage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/notifications/unread`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationEventsFromJSON(jsonValue));
    }

    /**
     * getUnreadCounts
     */
    async getUnreadCountsUsingGET(requestParameters: GetUnreadCountsUsingGETRequest): Promise<NotificationEvents> {
        const response = await this.getUnreadCountsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * markAllReadForUser
     */
    async markAllReadForUserUsingDELETERaw(requestParameters: MarkAllReadForUserUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling markAllReadForUserUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/notifications/unread/{userId}/user`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * markAllReadForUser
     */
    async markAllReadForUserUsingDELETE(requestParameters: MarkAllReadForUserUsingDELETERequest): Promise<void> {
        await this.markAllReadForUserUsingDELETERaw(requestParameters);
    }

    /**
     * markCaseNotificationsAsUnread
     */
    async markCaseNotificationsAsUnreadUsingPUTRaw(requestParameters: MarkCaseNotificationsAsUnreadUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling markCaseNotificationsAsUnreadUsingPUT.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling markCaseNotificationsAsUnreadUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/notifications/{userId}/unread/{caseId}/message`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * markCaseNotificationsAsUnread
     */
    async markCaseNotificationsAsUnreadUsingPUT(requestParameters: MarkCaseNotificationsAsUnreadUsingPUTRequest): Promise<void> {
        await this.markCaseNotificationsAsUnreadUsingPUTRaw(requestParameters);
    }

    /**
     * markPageTypesAsRead
     */
    async markPageTypesAsReadUsingDELETERaw(requestParameters: MarkPageTypesAsReadUsingDELETERequest): Promise<runtime.ApiResponse<NotificationEvents>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling markPageTypesAsReadUsingDELETE.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling markPageTypesAsReadUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/notifications/unread/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNotificationByPagesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationEventsFromJSON(jsonValue));
    }

    /**
     * markPageTypesAsRead
     */
    async markPageTypesAsReadUsingDELETE(requestParameters: MarkPageTypesAsReadUsingDELETERequest): Promise<NotificationEvents> {
        const response = await this.markPageTypesAsReadUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * markRead
     */
    async markReadUsingDELETERaw(requestParameters: MarkReadUsingDELETERequest): Promise<runtime.ApiResponse<NotificationEvents>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling markReadUsingDELETE.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling markReadUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/notifications/unread/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNotificationEventRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationEventsFromJSON(jsonValue));
    }

    /**
     * markRead
     */
    async markReadUsingDELETE(requestParameters: MarkReadUsingDELETERequest): Promise<NotificationEvents> {
        const response = await this.markReadUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * pushCaseMessage
     */
    async pushCaseMessageUsingPOSTRaw(requestParameters: PushCaseMessageUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling pushCaseMessageUsingPOST.');
        }

        if (requestParameters.pushRequest === null || requestParameters.pushRequest === undefined) {
            throw new runtime.RequiredError('pushRequest','Required parameter requestParameters.pushRequest was null or undefined when calling pushCaseMessageUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/notifications/cases/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PushNotificationRequestToJSON(requestParameters.pushRequest),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * pushCaseMessage
     */
    async pushCaseMessageUsingPOST(requestParameters: PushCaseMessageUsingPOSTRequest): Promise<object> {
        const response = await this.pushCaseMessageUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * pushNotificationToUser
     */
    async pushNotificationToUserUsingPOSTRaw(requestParameters: PushNotificationToUserUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling pushNotificationToUserUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/notifications/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * pushNotificationToUser
     */
    async pushNotificationToUserUsingPOST(requestParameters: PushNotificationToUserUsingPOSTRequest): Promise<object> {
        const response = await this.pushNotificationToUserUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * register
     */
    async registerUsingPOSTRaw(requestParameters: RegisterUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling registerUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/notifications/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PushNotificationRegistrationRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * register
     */
    async registerUsingPOST(requestParameters: RegisterUsingPOSTRequest): Promise<object> {
        const response = await this.registerUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
