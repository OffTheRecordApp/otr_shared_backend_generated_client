/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ListLawfirmSurchargesResponse,
    ListLawfirmSurchargesResponseFromJSON,
    ListLawfirmSurchargesResponseToJSON,
    RemoveLawfirmSurchargeRequest,
    RemoveLawfirmSurchargeRequestFromJSON,
    RemoveLawfirmSurchargeRequestToJSON,
    SaveLawfirmSurchargesRequest,
    SaveLawfirmSurchargesRequestFromJSON,
    SaveLawfirmSurchargesRequestToJSON,
} from '../models';

export interface ListLawfirmSurchargesUsingGETRequest {
    lawfirmId: string;
    featureType?: ListLawfirmSurchargesUsingGETFeatureTypeEnum;
}

export interface RemoveSurchargesUsingDELETERequest {
    lawfirmId: string;
    request: RemoveLawfirmSurchargeRequest;
}

export interface SaveLawfirmSurchargesUsingPOSTRequest {
    lawfirmId: string;
    request: SaveLawfirmSurchargesRequest;
}

/**
 * 
 */
export class LawfirmSurchargeControllerApi extends runtime.BaseAPI {

    /**
     * listLawfirmSurcharges
     */
    async listLawfirmSurchargesUsingGETRaw(requestParameters: ListLawfirmSurchargesUsingGETRequest): Promise<runtime.ApiResponse<ListLawfirmSurchargesResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling listLawfirmSurchargesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.featureType !== undefined) {
            queryParameters['featureType'] = requestParameters.featureType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/surcharges`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListLawfirmSurchargesResponseFromJSON(jsonValue));
    }

    /**
     * listLawfirmSurcharges
     */
    async listLawfirmSurchargesUsingGET(requestParameters: ListLawfirmSurchargesUsingGETRequest): Promise<ListLawfirmSurchargesResponse> {
        const response = await this.listLawfirmSurchargesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * removeSurcharges
     */
    async removeSurchargesUsingDELETERaw(requestParameters: RemoveSurchargesUsingDELETERequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling removeSurchargesUsingDELETE.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling removeSurchargesUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/surcharges`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveLawfirmSurchargeRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * removeSurcharges
     */
    async removeSurchargesUsingDELETE(requestParameters: RemoveSurchargesUsingDELETERequest): Promise<object> {
        const response = await this.removeSurchargesUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * saveLawfirmSurcharges
     */
    async saveLawfirmSurchargesUsingPOSTRaw(requestParameters: SaveLawfirmSurchargesUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling saveLawfirmSurchargesUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveLawfirmSurchargesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/surcharges`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveLawfirmSurchargesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * saveLawfirmSurcharges
     */
    async saveLawfirmSurchargesUsingPOST(requestParameters: SaveLawfirmSurchargesUsingPOSTRequest): Promise<object> {
        const response = await this.saveLawfirmSurchargesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListLawfirmSurchargesUsingGETFeatureTypeEnum {
    BLACKBOX = 'BLACK_BOX',
    FASTLANETEEN = 'FASTLANE_TEEN',
    STATEPAGE = 'STATE_PAGE',
    STOREFRONT = 'STOREFRONT'
}
