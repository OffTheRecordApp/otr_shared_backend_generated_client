/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetExternalTicketInputParamsResponse,
    GetExternalTicketInputParamsResponseFromJSON,
    GetExternalTicketInputParamsResponseToJSON,
} from '../models';

export interface GetExternalTicketsUsingGETRequest {
    regionCode: string;
    attempts?: number;
    citationId?: string;
    countyId?: number;
    dateOfBirth?: Date;
    driversLicenseId?: string;
    lastName?: string;
    organizationName?: string;
    searchType?: string;
    searchValue?: string;
    sessionId?: string;
    userId?: string;
}

export interface GetInputParametersUsingGETRequest {
    regionCode: string;
}

/**
 * 
 */
export class ExternalTicketLookupControllerApi extends runtime.BaseAPI {

    /**
     * getExternalTickets
     */
    async getExternalTicketsUsingGETRaw(requestParameters: GetExternalTicketsUsingGETRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.regionCode === null || requestParameters.regionCode === undefined) {
            throw new runtime.RequiredError('regionCode','Required parameter requestParameters.regionCode was null or undefined when calling getExternalTicketsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.attempts !== undefined) {
            queryParameters['attempts'] = requestParameters.attempts;
        }

        if (requestParameters.citationId !== undefined) {
            queryParameters['citationId'] = requestParameters.citationId;
        }

        if (requestParameters.countyId !== undefined) {
            queryParameters['countyId'] = requestParameters.countyId;
        }

        if (requestParameters.dateOfBirth !== undefined) {
            queryParameters['dateOfBirth'] = (requestParameters.dateOfBirth as any).toISOString().substr(0,10);
        }

        if (requestParameters.driversLicenseId !== undefined) {
            queryParameters['driversLicenseId'] = requestParameters.driversLicenseId;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        if (requestParameters.organizationName !== undefined) {
            queryParameters['organizationName'] = requestParameters.organizationName;
        }

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.searchValue !== undefined) {
            queryParameters['searchValue'] = requestParameters.searchValue;
        }

        if (requestParameters.sessionId !== undefined) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/external-tickets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * getExternalTickets
     */
    async getExternalTicketsUsingGET(requestParameters: GetExternalTicketsUsingGETRequest): Promise<void> {
        await this.getExternalTicketsUsingGETRaw(requestParameters);
    }

    /**
     * getInputParameters
     */
    async getInputParametersUsingGETRaw(requestParameters: GetInputParametersUsingGETRequest): Promise<runtime.ApiResponse<GetExternalTicketInputParamsResponse>> {
        if (requestParameters.regionCode === null || requestParameters.regionCode === undefined) {
            throw new runtime.RequiredError('regionCode','Required parameter requestParameters.regionCode was null or undefined when calling getInputParametersUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/external-tickets/input-parameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetExternalTicketInputParamsResponseFromJSON(jsonValue));
    }

    /**
     * getInputParameters
     */
    async getInputParametersUsingGET(requestParameters: GetInputParametersUsingGETRequest): Promise<GetExternalTicketInputParamsResponse> {
        const response = await this.getInputParametersUsingGETRaw(requestParameters);
        return await response.value();
    }

}
