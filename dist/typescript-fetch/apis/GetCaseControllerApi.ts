/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetCaseFromCitationResponse,
    GetCaseFromCitationResponseFromJSON,
    GetCaseFromCitationResponseToJSON,
    GetCaseResponse,
    GetCaseResponseFromJSON,
    GetCaseResponseToJSON,
    GetUserResponse,
    GetUserResponseFromJSON,
    GetUserResponseToJSON,
} from '../models';

export interface GetCaseClientUsingGETRequest {
    caseId: string;
}

export interface GetCaseFromCitationUsingGETRequest {
    citationId: string;
}

export interface GetCaseUsingGETRequest {
    caseId: string;
}

/**
 * 
 */
export class GetCaseControllerApi extends runtime.BaseAPI {

    /**
     * getCaseClient
     */
    async getCaseClientUsingGETRaw(requestParameters: GetCaseClientUsingGETRequest): Promise<runtime.ApiResponse<GetUserResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling getCaseClientUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/client`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResponseFromJSON(jsonValue));
    }

    /**
     * getCaseClient
     */
    async getCaseClientUsingGET(requestParameters: GetCaseClientUsingGETRequest): Promise<GetUserResponse> {
        const response = await this.getCaseClientUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCaseFromCitation
     */
    async getCaseFromCitationUsingGETRaw(requestParameters: GetCaseFromCitationUsingGETRequest): Promise<runtime.ApiResponse<GetCaseFromCitationResponse>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling getCaseFromCitationUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/case`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseFromCitationResponseFromJSON(jsonValue));
    }

    /**
     * getCaseFromCitation
     */
    async getCaseFromCitationUsingGET(requestParameters: GetCaseFromCitationUsingGETRequest): Promise<GetCaseFromCitationResponse> {
        const response = await this.getCaseFromCitationUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCase
     */
    async getCaseUsingGETRaw(requestParameters: GetCaseUsingGETRequest): Promise<runtime.ApiResponse<GetCaseResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling getCaseUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseResponseFromJSON(jsonValue));
    }

    /**
     * getCase
     */
    async getCaseUsingGET(requestParameters: GetCaseUsingGETRequest): Promise<GetCaseResponse> {
        const response = await this.getCaseUsingGETRaw(requestParameters);
        return await response.value();
    }

}
