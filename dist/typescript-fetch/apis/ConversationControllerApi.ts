/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddCaseMessageResponse,
    AddCaseMessageResponseFromJSON,
    AddCaseMessageResponseToJSON,
    AddNewCaseMessageRequest,
    AddNewCaseMessageRequestFromJSON,
    AddNewCaseMessageRequestToJSON,
    EditConversationMessageRequest,
    EditConversationMessageRequestFromJSON,
    EditConversationMessageRequestToJSON,
    GetCaseMessagesResponse,
    GetCaseMessagesResponseFromJSON,
    GetCaseMessagesResponseToJSON,
    SetFlagOnMessagesRequest,
    SetFlagOnMessagesRequestFromJSON,
    SetFlagOnMessagesRequestToJSON,
    SetStarOnMessagesRequest,
    SetStarOnMessagesRequestFromJSON,
    SetStarOnMessagesRequestToJSON,
} from '../models';

export interface AddMessageToConversationUsingPOSTRequest {
    caseId: string;
    request: AddNewCaseMessageRequest;
}

export interface EditMessageUsingPUTRequest {
    caseId: string;
    messageId: number;
    request: EditConversationMessageRequest;
}

export interface GetConversationUsingGETRequest {
    caseId: string;
    length?: number;
    page?: number;
}

export interface GetMessageUsingGETRequest {
    caseId: string;
    messageId: number;
}

export interface MarkMessageAsDeletedUsingPUTRequest {
    caseId: string;
    isDeleted: boolean;
    messageId: number;
}

export interface SetFlagOnMessagesUsingPUTRequest {
    request: SetFlagOnMessagesRequest;
}

export interface SetStarOnMessagesUsingPUTRequest {
    request: SetStarOnMessagesRequest;
}

/**
 * 
 */
export class ConversationControllerApi extends runtime.BaseAPI {

    /**
     * addMessageToConversation
     */
    async addMessageToConversationUsingPOSTRaw(requestParameters: AddMessageToConversationUsingPOSTRequest): Promise<runtime.ApiResponse<AddCaseMessageResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling addMessageToConversationUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addMessageToConversationUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/conversation`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNewCaseMessageRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCaseMessageResponseFromJSON(jsonValue));
    }

    /**
     * addMessageToConversation
     */
    async addMessageToConversationUsingPOST(requestParameters: AddMessageToConversationUsingPOSTRequest): Promise<AddCaseMessageResponse> {
        const response = await this.addMessageToConversationUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * editMessage
     */
    async editMessageUsingPUTRaw(requestParameters: EditMessageUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling editMessageUsingPUT.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling editMessageUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling editMessageUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/conversation/{messageId}/edit`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditConversationMessageRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * editMessage
     */
    async editMessageUsingPUT(requestParameters: EditMessageUsingPUTRequest): Promise<object> {
        const response = await this.editMessageUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getConversation
     */
    async getConversationUsingGETRaw(requestParameters: GetConversationUsingGETRequest): Promise<runtime.ApiResponse<GetCaseMessagesResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling getConversationUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/conversation`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseMessagesResponseFromJSON(jsonValue));
    }

    /**
     * getConversation
     */
    async getConversationUsingGET(requestParameters: GetConversationUsingGETRequest): Promise<GetCaseMessagesResponse> {
        const response = await this.getConversationUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getMessage
     */
    async getMessageUsingGETRaw(requestParameters: GetMessageUsingGETRequest): Promise<runtime.ApiResponse<GetCaseMessagesResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling getMessageUsingGET.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getMessageUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/conversation/{messageId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseMessagesResponseFromJSON(jsonValue));
    }

    /**
     * getMessage
     */
    async getMessageUsingGET(requestParameters: GetMessageUsingGETRequest): Promise<GetCaseMessagesResponse> {
        const response = await this.getMessageUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * markMessageAsDeleted
     */
    async markMessageAsDeletedUsingPUTRaw(requestParameters: MarkMessageAsDeletedUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling markMessageAsDeletedUsingPUT.');
        }

        if (requestParameters.isDeleted === null || requestParameters.isDeleted === undefined) {
            throw new runtime.RequiredError('isDeleted','Required parameter requestParameters.isDeleted was null or undefined when calling markMessageAsDeletedUsingPUT.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling markMessageAsDeletedUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isDeleted !== undefined) {
            queryParameters['isDeleted'] = requestParameters.isDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/conversation/{messageId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * markMessageAsDeleted
     */
    async markMessageAsDeletedUsingPUT(requestParameters: MarkMessageAsDeletedUsingPUTRequest): Promise<object> {
        const response = await this.markMessageAsDeletedUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * setFlagOnMessages
     */
    async setFlagOnMessagesUsingPUTRaw(requestParameters: SetFlagOnMessagesUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling setFlagOnMessagesUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/conversation/flag`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetFlagOnMessagesRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setFlagOnMessages
     */
    async setFlagOnMessagesUsingPUT(requestParameters: SetFlagOnMessagesUsingPUTRequest): Promise<void> {
        await this.setFlagOnMessagesUsingPUTRaw(requestParameters);
    }

    /**
     * setStarOnMessages
     */
    async setStarOnMessagesUsingPUTRaw(requestParameters: SetStarOnMessagesUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling setStarOnMessagesUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cases/conversation/star`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetStarOnMessagesRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setStarOnMessages
     */
    async setStarOnMessagesUsingPUT(requestParameters: SetStarOnMessagesUsingPUTRequest): Promise<void> {
        await this.setStarOnMessagesUsingPUTRaw(requestParameters);
    }

}
