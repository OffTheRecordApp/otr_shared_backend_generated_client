/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CaseStatusDetailsResponse,
    CaseStatusDetailsResponseFromJSON,
    CaseStatusDetailsResponseToJSON,
    GetCaseResolutionStatusesResponse,
    GetCaseResolutionStatusesResponseFromJSON,
    GetCaseResolutionStatusesResponseToJSON,
} from '../models';

export interface GetCaseResolutionStatusesUsingGETRequest {
    stateCode?: string;
}

export interface GetCaseStatusesUsingGETRequest {
    categories?: GetCaseStatusesUsingGETCategoriesEnum;
}

/**
 * 
 */
export class CaseStatusControllerApi extends runtime.BaseAPI {

    /**
     * getCaseResolutionStatuses
     */
    async getCaseResolutionStatusesUsingGETRaw(requestParameters: GetCaseResolutionStatusesUsingGETRequest): Promise<runtime.ApiResponse<GetCaseResolutionStatusesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.stateCode !== undefined) {
            queryParameters['stateCode'] = requestParameters.stateCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/case-statuses/resolution-statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseResolutionStatusesResponseFromJSON(jsonValue));
    }

    /**
     * getCaseResolutionStatuses
     */
    async getCaseResolutionStatusesUsingGET(requestParameters: GetCaseResolutionStatusesUsingGETRequest): Promise<GetCaseResolutionStatusesResponse> {
        const response = await this.getCaseResolutionStatusesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCaseStatuses
     */
    async getCaseStatusesUsingGETRaw(requestParameters: GetCaseStatusesUsingGETRequest): Promise<runtime.ApiResponse<Array<CaseStatusDetailsResponse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.categories !== undefined) {
            queryParameters['categories'] = requestParameters.categories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/case-statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CaseStatusDetailsResponseFromJSON));
    }

    /**
     * getCaseStatuses
     */
    async getCaseStatusesUsingGET(requestParameters: GetCaseStatusesUsingGETRequest): Promise<Array<CaseStatusDetailsResponse>> {
        const response = await this.getCaseStatusesUsingGETRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetCaseStatusesUsingGETCategoriesEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
