/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SyncStripeChargesRequest,
    SyncStripeChargesRequestFromJSON,
    SyncStripeChargesRequestToJSON,
    SyncStripeChargesResponse,
    SyncStripeChargesResponseFromJSON,
    SyncStripeChargesResponseToJSON,
    SyncStripeDisputeResponse,
    SyncStripeDisputeResponseFromJSON,
    SyncStripeDisputeResponseToJSON,
    SyncStripePaymentsRequest,
    SyncStripePaymentsRequestFromJSON,
    SyncStripePaymentsRequestToJSON,
    SyncStripePaymentsResponse,
    SyncStripePaymentsResponseFromJSON,
    SyncStripePaymentsResponseToJSON,
    SyncStripeRefundsRequest,
    SyncStripeRefundsRequestFromJSON,
    SyncStripeRefundsRequestToJSON,
    SyncStripeTransfersRequest,
    SyncStripeTransfersRequestFromJSON,
    SyncStripeTransfersRequestToJSON,
    SyncStripeTransfersResponse,
    SyncStripeTransfersResponseFromJSON,
    SyncStripeTransfersResponseToJSON,
} from '../models';

export interface SyncDisputeUsingPOSTRequest {
    disputeId: string;
}

export interface SyncStripeChargesUsingPOSTRequest {
    request: SyncStripeChargesRequest;
}

export interface SyncStripePaymentsUsingPOSTRequest {
    request: SyncStripePaymentsRequest;
}

export interface SyncStripeRefundsUsingPOSTRequest {
    request: SyncStripeRefundsRequest;
}

export interface SyncStripeTransfersUsingPOSTRequest {
    request: SyncStripeTransfersRequest;
}

/**
 * 
 */
export class StripeSyncControllerApi extends runtime.BaseAPI {

    /**
     * syncAllDisputes
     */
    async syncAllDisputesUsingPOSTRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/stripe/disputes/sync-all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * syncAllDisputes
     */
    async syncAllDisputesUsingPOST(): Promise<void> {
        await this.syncAllDisputesUsingPOSTRaw();
    }

    /**
     * syncDispute
     */
    async syncDisputeUsingPOSTRaw(requestParameters: SyncDisputeUsingPOSTRequest): Promise<runtime.ApiResponse<SyncStripeDisputeResponse>> {
        if (requestParameters.disputeId === null || requestParameters.disputeId === undefined) {
            throw new runtime.RequiredError('disputeId','Required parameter requestParameters.disputeId was null or undefined when calling syncDisputeUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/stripe/disputes/{disputeId}/sync`.replace(`{${"disputeId"}}`, encodeURIComponent(String(requestParameters.disputeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncStripeDisputeResponseFromJSON(jsonValue));
    }

    /**
     * syncDispute
     */
    async syncDisputeUsingPOST(requestParameters: SyncDisputeUsingPOSTRequest): Promise<SyncStripeDisputeResponse> {
        const response = await this.syncDisputeUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * syncStripeCharges
     */
    async syncStripeChargesUsingPOSTRaw(requestParameters: SyncStripeChargesUsingPOSTRequest): Promise<runtime.ApiResponse<SyncStripeChargesResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling syncStripeChargesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/sync-stripe-charges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyncStripeChargesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncStripeChargesResponseFromJSON(jsonValue));
    }

    /**
     * syncStripeCharges
     */
    async syncStripeChargesUsingPOST(requestParameters: SyncStripeChargesUsingPOSTRequest): Promise<SyncStripeChargesResponse> {
        const response = await this.syncStripeChargesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * syncStripePayments
     */
    async syncStripePaymentsUsingPOSTRaw(requestParameters: SyncStripePaymentsUsingPOSTRequest): Promise<runtime.ApiResponse<SyncStripePaymentsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling syncStripePaymentsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/payments/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyncStripePaymentsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncStripePaymentsResponseFromJSON(jsonValue));
    }

    /**
     * syncStripePayments
     */
    async syncStripePaymentsUsingPOST(requestParameters: SyncStripePaymentsUsingPOSTRequest): Promise<SyncStripePaymentsResponse> {
        const response = await this.syncStripePaymentsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * syncStripeRefunds
     */
    async syncStripeRefundsUsingPOSTRaw(requestParameters: SyncStripeRefundsUsingPOSTRequest): Promise<runtime.ApiResponse<SyncStripeChargesResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling syncStripeRefundsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/sync-stripe-refunds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyncStripeRefundsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncStripeChargesResponseFromJSON(jsonValue));
    }

    /**
     * syncStripeRefunds
     */
    async syncStripeRefundsUsingPOST(requestParameters: SyncStripeRefundsUsingPOSTRequest): Promise<SyncStripeChargesResponse> {
        const response = await this.syncStripeRefundsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * syncStripeTransfers
     */
    async syncStripeTransfersUsingPOSTRaw(requestParameters: SyncStripeTransfersUsingPOSTRequest): Promise<runtime.ApiResponse<SyncStripeTransfersResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling syncStripeTransfersUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/transfers/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyncStripeTransfersRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncStripeTransfersResponseFromJSON(jsonValue));
    }

    /**
     * syncStripeTransfers
     */
    async syncStripeTransfersUsingPOST(requestParameters: SyncStripeTransfersUsingPOSTRequest): Promise<SyncStripeTransfersResponse> {
        const response = await this.syncStripeTransfersUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
