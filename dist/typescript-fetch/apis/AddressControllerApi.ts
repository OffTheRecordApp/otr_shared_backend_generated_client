/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetCountryListResponse,
    GetCountryListResponseFromJSON,
    GetCountryListResponseToJSON,
    GetCountryRegionsResponse,
    GetCountryRegionsResponseFromJSON,
    GetCountryRegionsResponseToJSON,
    GetLocationResponse,
    GetLocationResponseFromJSON,
    GetLocationResponseToJSON,
} from '../models';

export interface GetCountryRegionsUsingGETRequest {
    countryCode: string;
}

export interface GetLocationUsingGETRequest {
    zipCode: string;
    countryCode?: string;
}

/**
 * 
 */
export class AddressControllerApi extends runtime.BaseAPI {

    /**
     * getCountryList
     */
    async getCountryListUsingGETRaw(): Promise<runtime.ApiResponse<GetCountryListResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCountryListResponseFromJSON(jsonValue));
    }

    /**
     * getCountryList
     */
    async getCountryListUsingGET(): Promise<GetCountryListResponse> {
        const response = await this.getCountryListUsingGETRaw();
        return await response.value();
    }

    /**
     * getCountryRegions
     */
    async getCountryRegionsUsingGETRaw(requestParameters: GetCountryRegionsUsingGETRequest): Promise<runtime.ApiResponse<GetCountryRegionsResponse>> {
        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling getCountryRegionsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/countries/{countryCode}/regions`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCountryRegionsResponseFromJSON(jsonValue));
    }

    /**
     * getCountryRegions
     */
    async getCountryRegionsUsingGET(requestParameters: GetCountryRegionsUsingGETRequest): Promise<GetCountryRegionsResponse> {
        const response = await this.getCountryRegionsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLocation
     */
    async getLocationUsingGETRaw(requestParameters: GetLocationUsingGETRequest): Promise<runtime.ApiResponse<GetLocationResponse>> {
        if (requestParameters.zipCode === null || requestParameters.zipCode === undefined) {
            throw new runtime.RequiredError('zipCode','Required parameter requestParameters.zipCode was null or undefined when calling getLocationUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLocationResponseFromJSON(jsonValue));
    }

    /**
     * getLocation
     */
    async getLocationUsingGET(requestParameters: GetLocationUsingGETRequest): Promise<GetLocationResponse> {
        const response = await this.getLocationUsingGETRaw(requestParameters);
        return await response.value();
    }

}
