/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DirectMailContactResponse,
    DirectMailContactResponseFromJSON,
    DirectMailContactResponseToJSON,
    DirectMailGetRequest,
    DirectMailGetRequestFromJSON,
    DirectMailGetRequestToJSON,
    DirectMailSendRequest,
    DirectMailSendRequestFromJSON,
    DirectMailSendRequestToJSON,
    DirectMailTemplateResponse,
    DirectMailTemplateResponseFromJSON,
    DirectMailTemplateResponseToJSON,
    DirectMailTemplateToAdd,
    DirectMailTemplateToAddFromJSON,
    DirectMailTemplateToAddToJSON,
    LobEventRequest,
    LobEventRequestFromJSON,
    LobEventRequestToJSON,
    SendDirectCheckResponse,
    SendDirectCheckResponseFromJSON,
    SendDirectCheckResponseToJSON,
    SendDirectMailResponse,
    SendDirectMailResponseFromJSON,
    SendDirectMailResponseToJSON,
    SendDirectReferralCheckRequest,
    SendDirectReferralCheckRequestFromJSON,
    SendDirectReferralCheckRequestToJSON,
    ValidateDirectMailRequest,
    ValidateDirectMailRequestFromJSON,
    ValidateDirectMailRequestToJSON,
    ValidateDirectMailResponse,
    ValidateDirectMailResponseFromJSON,
    ValidateDirectMailResponseToJSON,
    VerifyMailingAddressRequest,
    VerifyMailingAddressRequestFromJSON,
    VerifyMailingAddressRequestToJSON,
    VerifyMailingAddressResponse,
    VerifyMailingAddressResponseFromJSON,
    VerifyMailingAddressResponseToJSON,
} from '../models';

export interface AddDirectMailTemplateUsingPOSTRequest {
    request: DirectMailTemplateToAdd;
}

export interface GetSentMailUsingPOSTRequest {
    request: DirectMailGetRequest;
}

export interface HandleLobEventUsingPOSTRequest {
    request: LobEventRequest;
}

export interface SendDirectMailUsingPOSTRequest {
    request: DirectMailSendRequest;
}

export interface SendDirectReferralCheckUsingPOSTRequest {
    userId: number;
    request: SendDirectReferralCheckRequest;
}

export interface ValidateDirectMailRequestForSendUsingPOSTRequest {
    request: ValidateDirectMailRequest;
}

export interface VerifyMailingAddressUsingPOSTRequest {
    request: VerifyMailingAddressRequest;
}

/**
 * 
 */
export class DirectMailControllerApi extends runtime.BaseAPI {

    /**
     * addDirectMailTemplate
     */
    async addDirectMailTemplateUsingPOSTRaw(requestParameters: AddDirectMailTemplateUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addDirectMailTemplateUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/direct-mail/templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DirectMailTemplateToAddToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * addDirectMailTemplate
     */
    async addDirectMailTemplateUsingPOST(requestParameters: AddDirectMailTemplateUsingPOSTRequest): Promise<void> {
        await this.addDirectMailTemplateUsingPOSTRaw(requestParameters);
    }

    /**
     * getDirectMailTemplates
     */
    async getDirectMailTemplatesUsingGETRaw(): Promise<runtime.ApiResponse<DirectMailTemplateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/direct-mail/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DirectMailTemplateResponseFromJSON(jsonValue));
    }

    /**
     * getDirectMailTemplates
     */
    async getDirectMailTemplatesUsingGET(): Promise<DirectMailTemplateResponse> {
        const response = await this.getDirectMailTemplatesUsingGETRaw();
        return await response.value();
    }

    /**
     * getSentMail
     */
    async getSentMailUsingPOSTRaw(requestParameters: GetSentMailUsingPOSTRequest): Promise<runtime.ApiResponse<DirectMailContactResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getSentMailUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/direct-mail/fetch-sent-mail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DirectMailGetRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DirectMailContactResponseFromJSON(jsonValue));
    }

    /**
     * getSentMail
     */
    async getSentMailUsingPOST(requestParameters: GetSentMailUsingPOSTRequest): Promise<DirectMailContactResponse> {
        const response = await this.getSentMailUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * handleLobEvent
     */
    async handleLobEventUsingPOSTRaw(requestParameters: HandleLobEventUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling handleLobEventUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/direct-mail/lob-events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LobEventRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * handleLobEvent
     */
    async handleLobEventUsingPOST(requestParameters: HandleLobEventUsingPOSTRequest): Promise<void> {
        await this.handleLobEventUsingPOSTRaw(requestParameters);
    }

    /**
     * sendDirectMail
     */
    async sendDirectMailUsingPOSTRaw(requestParameters: SendDirectMailUsingPOSTRequest): Promise<runtime.ApiResponse<SendDirectMailResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling sendDirectMailUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/direct-mail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DirectMailSendRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SendDirectMailResponseFromJSON(jsonValue));
    }

    /**
     * sendDirectMail
     */
    async sendDirectMailUsingPOST(requestParameters: SendDirectMailUsingPOSTRequest): Promise<SendDirectMailResponse> {
        const response = await this.sendDirectMailUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * sendDirectReferralCheck
     */
    async sendDirectReferralCheckUsingPOSTRaw(requestParameters: SendDirectReferralCheckUsingPOSTRequest): Promise<runtime.ApiResponse<SendDirectCheckResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling sendDirectReferralCheckUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling sendDirectReferralCheckUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/direct-mail/{userId}/send-referral-check`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendDirectReferralCheckRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SendDirectCheckResponseFromJSON(jsonValue));
    }

    /**
     * sendDirectReferralCheck
     */
    async sendDirectReferralCheckUsingPOST(requestParameters: SendDirectReferralCheckUsingPOSTRequest): Promise<SendDirectCheckResponse> {
        const response = await this.sendDirectReferralCheckUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * validateDirectMailRequestForSend
     */
    async validateDirectMailRequestForSendUsingPOSTRaw(requestParameters: ValidateDirectMailRequestForSendUsingPOSTRequest): Promise<runtime.ApiResponse<ValidateDirectMailResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling validateDirectMailRequestForSendUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/direct-mail/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateDirectMailRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateDirectMailResponseFromJSON(jsonValue));
    }

    /**
     * validateDirectMailRequestForSend
     */
    async validateDirectMailRequestForSendUsingPOST(requestParameters: ValidateDirectMailRequestForSendUsingPOSTRequest): Promise<ValidateDirectMailResponse> {
        const response = await this.validateDirectMailRequestForSendUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * verifyMailingAddress
     */
    async verifyMailingAddressUsingPOSTRaw(requestParameters: VerifyMailingAddressUsingPOSTRequest): Promise<runtime.ApiResponse<VerifyMailingAddressResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling verifyMailingAddressUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/direct-mail/verify-address`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyMailingAddressRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyMailingAddressResponseFromJSON(jsonValue));
    }

    /**
     * verifyMailingAddress
     */
    async verifyMailingAddressUsingPOST(requestParameters: VerifyMailingAddressUsingPOSTRequest): Promise<VerifyMailingAddressResponse> {
        const response = await this.verifyMailingAddressUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
