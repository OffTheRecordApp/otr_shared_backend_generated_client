/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DriverLicenseModel,
    DriverLicenseModelFromJSON,
    DriverLicenseModelToJSON,
    GetDriverLicensesResponse,
    GetDriverLicensesResponseFromJSON,
    GetDriverLicensesResponseToJSON,
    SaveDriverLicensePictureRequest,
    SaveDriverLicensePictureRequestFromJSON,
    SaveDriverLicensePictureRequestToJSON,
    SaveDriverLicensePictureResponse,
    SaveDriverLicensePictureResponseFromJSON,
    SaveDriverLicensePictureResponseToJSON,
    SaveDriverLicenseRequest,
    SaveDriverLicenseRequestFromJSON,
    SaveDriverLicenseRequestToJSON,
} from '../models';

export interface GetDriverLicensesUsingGETRequest {
    userId: string;
    includeDeleted?: boolean;
}

export interface SaveDriverLicensePictureUsingPOSTRequest {
    userId: string;
    request: SaveDriverLicensePictureRequest;
}

export interface SaveDriverLicenseUsingPOSTRequest {
    userId: string;
    request: SaveDriverLicenseRequest;
}

/**
 * 
 */
export class DriverLicenseControllerApi extends runtime.BaseAPI {

    /**
     * getDriverLicenses
     */
    async getDriverLicensesUsingGETRaw(requestParameters: GetDriverLicensesUsingGETRequest): Promise<runtime.ApiResponse<GetDriverLicensesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getDriverLicensesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeDeleted !== undefined) {
            queryParameters['includeDeleted'] = requestParameters.includeDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/driver-license`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDriverLicensesResponseFromJSON(jsonValue));
    }

    /**
     * getDriverLicenses
     */
    async getDriverLicensesUsingGET(requestParameters: GetDriverLicensesUsingGETRequest): Promise<GetDriverLicensesResponse> {
        const response = await this.getDriverLicensesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * saveDriverLicensePicture
     */
    async saveDriverLicensePictureUsingPOSTRaw(requestParameters: SaveDriverLicensePictureUsingPOSTRequest): Promise<runtime.ApiResponse<SaveDriverLicensePictureResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling saveDriverLicensePictureUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveDriverLicensePictureUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/driver-license/picture`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveDriverLicensePictureRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveDriverLicensePictureResponseFromJSON(jsonValue));
    }

    /**
     * saveDriverLicensePicture
     */
    async saveDriverLicensePictureUsingPOST(requestParameters: SaveDriverLicensePictureUsingPOSTRequest): Promise<SaveDriverLicensePictureResponse> {
        const response = await this.saveDriverLicensePictureUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * saveDriverLicense
     */
    async saveDriverLicenseUsingPOSTRaw(requestParameters: SaveDriverLicenseUsingPOSTRequest): Promise<runtime.ApiResponse<DriverLicenseModel>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling saveDriverLicenseUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveDriverLicenseUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/driver-license`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveDriverLicenseRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverLicenseModelFromJSON(jsonValue));
    }

    /**
     * saveDriverLicense
     */
    async saveDriverLicenseUsingPOST(requestParameters: SaveDriverLicenseUsingPOSTRequest): Promise<DriverLicenseModel> {
        const response = await this.saveDriverLicenseUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
