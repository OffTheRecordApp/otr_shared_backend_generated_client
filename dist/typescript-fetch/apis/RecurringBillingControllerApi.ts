/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CancelBillingSubscriptionResponse,
    CancelBillingSubscriptionResponseFromJSON,
    CancelBillingSubscriptionResponseToJSON,
    CreateBillingSubscriptionRequest,
    CreateBillingSubscriptionRequestFromJSON,
    CreateBillingSubscriptionRequestToJSON,
    CreateBillingSubscriptionResponse,
    CreateBillingSubscriptionResponseFromJSON,
    CreateBillingSubscriptionResponseToJSON,
    ListBillingProductsResponse,
    ListBillingProductsResponseFromJSON,
    ListBillingProductsResponseToJSON,
    ListBillingSubscriptionsResponse,
    ListBillingSubscriptionsResponseFromJSON,
    ListBillingSubscriptionsResponseToJSON,
    ListSubscriptionInvoicesResponse,
    ListSubscriptionInvoicesResponseFromJSON,
    ListSubscriptionInvoicesResponseToJSON,
} from '../models';

export interface CancelBillingSubscriptionUsingDELETERequest {
    id: string;
    userId: string;
    isProrated?: boolean;
}

export interface CreateBillingSubscriptionUsingPOSTRequest {
    userId: number;
    request: CreateBillingSubscriptionRequest;
}

export interface ListBillingProductsUsingGETRequest {
    active?: boolean;
    audience?: string;
    limit?: number;
    userId?: string;
}

export interface ListBillingSubscriptionsUsingGETRequest {
    userId: number;
    includeInactive?: boolean;
}

export interface ListSubscriptionInvoicesUsingGETRequest {
    id: string;
    userId: number;
    limit?: number;
}

/**
 * 
 */
export class RecurringBillingControllerApi extends runtime.BaseAPI {

    /**
     * cancelBillingSubscription
     */
    async cancelBillingSubscriptionUsingDELETERaw(requestParameters: CancelBillingSubscriptionUsingDELETERequest): Promise<runtime.ApiResponse<CancelBillingSubscriptionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling cancelBillingSubscriptionUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isProrated !== undefined) {
            queryParameters['isProrated'] = requestParameters.isProrated;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/billing/{userId}/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelBillingSubscriptionResponseFromJSON(jsonValue));
    }

    /**
     * cancelBillingSubscription
     */
    async cancelBillingSubscriptionUsingDELETE(requestParameters: CancelBillingSubscriptionUsingDELETERequest): Promise<CancelBillingSubscriptionResponse> {
        const response = await this.cancelBillingSubscriptionUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * createBillingSubscription
     */
    async createBillingSubscriptionUsingPOSTRaw(requestParameters: CreateBillingSubscriptionUsingPOSTRequest): Promise<runtime.ApiResponse<CreateBillingSubscriptionResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling createBillingSubscriptionUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createBillingSubscriptionUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/billing/{userId}/subscriptions`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBillingSubscriptionRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBillingSubscriptionResponseFromJSON(jsonValue));
    }

    /**
     * createBillingSubscription
     */
    async createBillingSubscriptionUsingPOST(requestParameters: CreateBillingSubscriptionUsingPOSTRequest): Promise<CreateBillingSubscriptionResponse> {
        const response = await this.createBillingSubscriptionUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listBillingProducts
     */
    async listBillingProductsUsingGETRaw(requestParameters: ListBillingProductsUsingGETRequest): Promise<runtime.ApiResponse<ListBillingProductsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.audience !== undefined) {
            queryParameters['audience'] = requestParameters.audience;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/billing/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBillingProductsResponseFromJSON(jsonValue));
    }

    /**
     * listBillingProducts
     */
    async listBillingProductsUsingGET(requestParameters: ListBillingProductsUsingGETRequest): Promise<ListBillingProductsResponse> {
        const response = await this.listBillingProductsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * listBillingSubscriptions
     */
    async listBillingSubscriptionsUsingGETRaw(requestParameters: ListBillingSubscriptionsUsingGETRequest): Promise<runtime.ApiResponse<ListBillingSubscriptionsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listBillingSubscriptionsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/billing/{userId}/subscriptions`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBillingSubscriptionsResponseFromJSON(jsonValue));
    }

    /**
     * listBillingSubscriptions
     */
    async listBillingSubscriptionsUsingGET(requestParameters: ListBillingSubscriptionsUsingGETRequest): Promise<ListBillingSubscriptionsResponse> {
        const response = await this.listBillingSubscriptionsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * listSubscriptionInvoices
     */
    async listSubscriptionInvoicesUsingGETRaw(requestParameters: ListSubscriptionInvoicesUsingGETRequest): Promise<runtime.ApiResponse<ListSubscriptionInvoicesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listSubscriptionInvoicesUsingGET.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listSubscriptionInvoicesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/billing/{userId}/subscriptions/{id}/invoices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSubscriptionInvoicesResponseFromJSON(jsonValue));
    }

    /**
     * listSubscriptionInvoices
     */
    async listSubscriptionInvoicesUsingGET(requestParameters: ListSubscriptionInvoicesUsingGETRequest): Promise<ListSubscriptionInvoicesResponse> {
        const response = await this.listSubscriptionInvoicesUsingGETRaw(requestParameters);
        return await response.value();
    }

}
