/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OCRPredictionCaseResponse,
    OCRPredictionCaseResponseFromJSON,
    OCRPredictionCaseResponseToJSON,
    PredictCitationTextRequest,
    PredictCitationTextRequestFromJSON,
    PredictCitationTextRequestToJSON,
    PredictImageClassificationRequest,
    PredictImageClassificationRequestFromJSON,
    PredictImageClassificationRequestToJSON,
    PredictImageClassificationResponse,
    PredictImageClassificationResponseFromJSON,
    PredictImageClassificationResponseToJSON,
} from '../models';

export interface PredictCitationTextUsingPOSTRequest {
    request: PredictCitationTextRequest;
}

export interface PredictImageClassificationUsingPOSTRequest {
    request: PredictImageClassificationRequest;
}

/**
 * 
 */
export class OcrPredictionControllerApi extends runtime.BaseAPI {

    /**
     * predictCitationText
     */
    async predictCitationTextUsingPOSTRaw(requestParameters: PredictCitationTextUsingPOSTRequest): Promise<runtime.ApiResponse<OCRPredictionCaseResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling predictCitationTextUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/predictions/predict-citation-text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictCitationTextRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OCRPredictionCaseResponseFromJSON(jsonValue));
    }

    /**
     * predictCitationText
     */
    async predictCitationTextUsingPOST(requestParameters: PredictCitationTextUsingPOSTRequest): Promise<OCRPredictionCaseResponse> {
        const response = await this.predictCitationTextUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * predictImageClassification
     */
    async predictImageClassificationUsingPOSTRaw(requestParameters: PredictImageClassificationUsingPOSTRequest): Promise<runtime.ApiResponse<PredictImageClassificationResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling predictImageClassificationUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/predictions/classify-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictImageClassificationRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictImageClassificationResponseFromJSON(jsonValue));
    }

    /**
     * predictImageClassification
     */
    async predictImageClassificationUsingPOST(requestParameters: PredictImageClassificationUsingPOSTRequest): Promise<PredictImageClassificationResponse> {
        const response = await this.predictImageClassificationUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
