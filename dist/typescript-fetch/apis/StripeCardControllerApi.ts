/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddACHToStripeAccountRequest,
    AddACHToStripeAccountRequestFromJSON,
    AddACHToStripeAccountRequestToJSON,
    AddCardToStripeAccountRequest,
    AddCardToStripeAccountRequestFromJSON,
    AddCardToStripeAccountRequestToJSON,
    AddCardToStripeAccountResponse,
    AddCardToStripeAccountResponseFromJSON,
    AddCardToStripeAccountResponseToJSON,
    GetLawfirmPaymentMethodsResponse,
    GetLawfirmPaymentMethodsResponseFromJSON,
    GetLawfirmPaymentMethodsResponseToJSON,
    GetPaymentMethodsForUserResponse,
    GetPaymentMethodsForUserResponseFromJSON,
    GetPaymentMethodsForUserResponseToJSON,
    StripeCardDomain,
    StripeCardDomainFromJSON,
    StripeCardDomainToJSON,
} from '../models';

export interface AddACHToLawfirmStripeAccountUsingPOSTRequest {
    lawfirmId: string;
    request: AddACHToStripeAccountRequest;
}

export interface AddACHToUserStripeAccountUsingPOSTRequest {
    userId: string;
    request: AddACHToStripeAccountRequest;
}

export interface AddCardToStripeAccountUsingPOSTRequest {
    request: AddCardToStripeAccountRequest;
}

export interface DeleteBankAccountFromLawfirmStripeAccountUsingDELETERequest {
    bankAccountId: string;
    lawfirmId: number;
}

export interface DeleteCardForUserUsingDELETERequest {
    cardId: string;
    userId: string;
}

export interface DeleteCardUsingDELETERequest {
    cardId: string;
}

export interface GetCardUsingGETRequest {
    cardId: string;
}

export interface GetLawfirmPaymentMethodsUsingGETRequest {
    lawfirmId: number;
}

export interface GetPaymentMethodsForUserUsingGETRequest {
    userIdString: string;
}

export interface SetCardAsPrimaryUsingPUTRequest {
    cardId: string;
    userId: string;
}

export interface SetDefaultPaymentMethodForLawfirmUsingPUTRequest {
    lawfirmId: number;
    stripePaymentSourceId: string;
}

/**
 * 
 */
export class StripeCardControllerApi extends runtime.BaseAPI {

    /**
     * addACHToLawfirmStripeAccount
     */
    async addACHToLawfirmStripeAccountUsingPOSTRaw(requestParameters: AddACHToLawfirmStripeAccountUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addACHToLawfirmStripeAccountUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/stripe/ach`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddACHToStripeAccountRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * addACHToLawfirmStripeAccount
     */
    async addACHToLawfirmStripeAccountUsingPOST(requestParameters: AddACHToLawfirmStripeAccountUsingPOSTRequest): Promise<object> {
        const response = await this.addACHToLawfirmStripeAccountUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * addACHToUserStripeAccount
     */
    async addACHToUserStripeAccountUsingPOSTRaw(requestParameters: AddACHToUserStripeAccountUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addACHToUserStripeAccountUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/stripe/ach`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddACHToStripeAccountRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * addACHToUserStripeAccount
     */
    async addACHToUserStripeAccountUsingPOST(requestParameters: AddACHToUserStripeAccountUsingPOSTRequest): Promise<object> {
        const response = await this.addACHToUserStripeAccountUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * addCardToStripeAccount
     */
    async addCardToStripeAccountUsingPOSTRaw(requestParameters: AddCardToStripeAccountUsingPOSTRequest): Promise<runtime.ApiResponse<AddCardToStripeAccountResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addCardToStripeAccountUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/stripe/account/cards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCardToStripeAccountRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCardToStripeAccountResponseFromJSON(jsonValue));
    }

    /**
     * addCardToStripeAccount
     */
    async addCardToStripeAccountUsingPOST(requestParameters: AddCardToStripeAccountUsingPOSTRequest): Promise<AddCardToStripeAccountResponse> {
        const response = await this.addCardToStripeAccountUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteBankAccountFromLawfirmStripeAccount
     */
    async deleteBankAccountFromLawfirmStripeAccountUsingDELETERaw(requestParameters: DeleteBankAccountFromLawfirmStripeAccountUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
        }

        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling deleteBankAccountFromLawfirmStripeAccountUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/stripe/bank-accounts/{bankAccountId}`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteBankAccountFromLawfirmStripeAccount
     */
    async deleteBankAccountFromLawfirmStripeAccountUsingDELETE(requestParameters: DeleteBankAccountFromLawfirmStripeAccountUsingDELETERequest): Promise<void> {
        await this.deleteBankAccountFromLawfirmStripeAccountUsingDELETERaw(requestParameters);
    }

    /**
     * deleteCardForUser
     */
    async deleteCardForUserUsingDELETERaw(requestParameters: DeleteCardForUserUsingDELETERequest): Promise<runtime.ApiResponse<StripeCardDomain>> {
        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling deleteCardForUserUsingDELETE.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteCardForUserUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/stripe/account/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StripeCardDomainFromJSON(jsonValue));
    }

    /**
     * deleteCardForUser
     */
    async deleteCardForUserUsingDELETE(requestParameters: DeleteCardForUserUsingDELETERequest): Promise<StripeCardDomain> {
        const response = await this.deleteCardForUserUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteCard
     */
    async deleteCardUsingDELETERaw(requestParameters: DeleteCardUsingDELETERequest): Promise<runtime.ApiResponse<StripeCardDomain>> {
        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling deleteCardUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/stripe/account/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StripeCardDomainFromJSON(jsonValue));
    }

    /**
     * deleteCard
     */
    async deleteCardUsingDELETE(requestParameters: DeleteCardUsingDELETERequest): Promise<StripeCardDomain> {
        const response = await this.deleteCardUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * getCard
     */
    async getCardUsingGETRaw(requestParameters: GetCardUsingGETRequest): Promise<runtime.ApiResponse<StripeCardDomain>> {
        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling getCardUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/stripe/account/cards/{cardId}`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StripeCardDomainFromJSON(jsonValue));
    }

    /**
     * getCard
     */
    async getCardUsingGET(requestParameters: GetCardUsingGETRequest): Promise<StripeCardDomain> {
        const response = await this.getCardUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves all the payment methods available on the lawfirm\'s Stripe account.
     */
    async getLawfirmPaymentMethodsUsingGETRaw(requestParameters: GetLawfirmPaymentMethodsUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmPaymentMethodsResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmPaymentMethodsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/paymentmethods`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmPaymentMethodsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all the payment methods available on the lawfirm\'s Stripe account.
     */
    async getLawfirmPaymentMethodsUsingGET(requestParameters: GetLawfirmPaymentMethodsUsingGETRequest): Promise<GetLawfirmPaymentMethodsResponse> {
        const response = await this.getLawfirmPaymentMethodsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves all the payment methods available on the user\'s Stripe account.
     */
    async getPaymentMethodsForUserUsingGETRaw(requestParameters: GetPaymentMethodsForUserUsingGETRequest): Promise<runtime.ApiResponse<GetPaymentMethodsForUserResponse>> {
        if (requestParameters.userIdString === null || requestParameters.userIdString === undefined) {
            throw new runtime.RequiredError('userIdString','Required parameter requestParameters.userIdString was null or undefined when calling getPaymentMethodsForUserUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userIdString}/paymentmethods`.replace(`{${"userIdString"}}`, encodeURIComponent(String(requestParameters.userIdString))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentMethodsForUserResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all the payment methods available on the user\'s Stripe account.
     */
    async getPaymentMethodsForUserUsingGET(requestParameters: GetPaymentMethodsForUserUsingGETRequest): Promise<GetPaymentMethodsForUserResponse> {
        const response = await this.getPaymentMethodsForUserUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * setCardAsPrimary
     */
    async setCardAsPrimaryUsingPUTRaw(requestParameters: SetCardAsPrimaryUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling setCardAsPrimaryUsingPUT.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling setCardAsPrimaryUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/account/cards/{cardId}/primary`.replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setCardAsPrimary
     */
    async setCardAsPrimaryUsingPUT(requestParameters: SetCardAsPrimaryUsingPUTRequest): Promise<void> {
        await this.setCardAsPrimaryUsingPUTRaw(requestParameters);
    }

    /**
     * setDefaultPaymentMethodForLawfirm
     */
    async setDefaultPaymentMethodForLawfirmUsingPUTRaw(requestParameters: SetDefaultPaymentMethodForLawfirmUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
        }

        if (requestParameters.stripePaymentSourceId === null || requestParameters.stripePaymentSourceId === undefined) {
            throw new runtime.RequiredError('stripePaymentSourceId','Required parameter requestParameters.stripePaymentSourceId was null or undefined when calling setDefaultPaymentMethodForLawfirmUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.stripePaymentSourceId !== undefined) {
            queryParameters['stripePaymentSourceId'] = requestParameters.stripePaymentSourceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/stripe/payment-methods/default`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setDefaultPaymentMethodForLawfirm
     */
    async setDefaultPaymentMethodForLawfirmUsingPUT(requestParameters: SetDefaultPaymentMethodForLawfirmUsingPUTRequest): Promise<void> {
        await this.setDefaultPaymentMethodForLawfirmUsingPUTRaw(requestParameters);
    }

}
