/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { FindChargeDisputesResponseFromJSON, GetCurrentUserResponseFromJSON, GetOverduePaymentsResponseFromJSON, GetSupportTicketsResponseFromJSON, GetUserDetailsResponseFromJSON, GetUserStripeAccountResponseFromJSON, IsUserLoggedInResponseFromJSON, SendTextAlertToUserRequestToJSON, UpdateUserDetailsResponseFromJSON, UpdateUserProfileRequestToJSON, UpdateUserRolesRequestToJSON, ValidateUserEmailResponseFromJSON, } from '../models';
/**
 *
 */
export class UserControllerApi extends runtime.BaseAPI {
    /**
     * findChargeDisputesByUserId
     */
    findChargeDisputesByUserIdUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling findChargeDisputesByUserIdUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/disputes`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => FindChargeDisputesResponseFromJSON(jsonValue));
        });
    }
    /**
     * findChargeDisputesByUserId
     */
    findChargeDisputesByUserIdUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.findChargeDisputesByUserIdUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getCurrentUserInfo
     */
    getCurrentUserInfoUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.isAdmin !== undefined) {
                queryParameters['isAdmin'] = requestParameters.isAdmin;
            }
            if (requestParameters.serviceProviderId !== undefined) {
                queryParameters['serviceProviderId'] = requestParameters.serviceProviderId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/user`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUserResponseFromJSON(jsonValue));
        });
    }
    /**
     * getCurrentUserInfo
     */
    getCurrentUserInfoUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCurrentUserInfoUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getOverduePayments
     */
    getOverduePaymentsUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getOverduePaymentsUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/overdue-payments`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetOverduePaymentsResponseFromJSON(jsonValue));
        });
    }
    /**
     * getOverduePayments
     */
    getOverduePaymentsUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOverduePaymentsUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getSupportTicketsForUser
     */
    getSupportTicketsForUserUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.email === null || requestParameters.email === undefined) {
                throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling getSupportTicketsForUserUsingGET.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{email}/support-tickets`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetSupportTicketsResponseFromJSON(jsonValue));
        });
    }
    /**
     * getSupportTicketsForUser
     */
    getSupportTicketsForUserUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSupportTicketsForUserUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getUserDetails
     */
    getUserDetailsUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userIdString === null || requestParameters.userIdString === undefined) {
                throw new runtime.RequiredError('userIdString', 'Required parameter requestParameters.userIdString was null or undefined when calling getUserDetailsUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userIdString}`.replace(`{${"userIdString"}}`, encodeURIComponent(String(requestParameters.userIdString))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetUserDetailsResponseFromJSON(jsonValue));
        });
    }
    /**
     * getUserDetails
     */
    getUserDetailsUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserDetailsUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getUserStripeAccount
     */
    getUserStripeAccountUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getUserStripeAccountUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/stripe/account`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetUserStripeAccountResponseFromJSON(jsonValue));
        });
    }
    /**
     * getUserStripeAccount
     */
    getUserStripeAccountUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserStripeAccountUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * isUserLoggedIn
     */
    isUserLoggedInUsingGETRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/authentication/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => IsUserLoggedInResponseFromJSON(jsonValue));
        });
    }
    /**
     * isUserLoggedIn
     */
    isUserLoggedInUsingGET() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.isUserLoggedInUsingGETRaw();
            return yield response.value();
        });
    }
    /**
     * logoutUser
     */
    logoutUserUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling logoutUserUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/logout`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * logoutUser
     */
    logoutUserUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.logoutUserUsingDELETERaw(requestParameters);
        });
    }
    /**
     * removeUser
     */
    removeUserUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling removeUserUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
        });
    }
    /**
     * removeUser
     */
    removeUserUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeUserUsingDELETERaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * reviveUser
     */
    reviveUserUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling reviveUserUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/revive`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
        });
    }
    /**
     * reviveUser
     */
    reviveUserUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.reviveUserUsingPUTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * sendTextAlert
     */
    sendTextAlertUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling sendTextAlertUsingPOST.');
            }
            if (requestParameters.sendTextAlertToUserRequest === null || requestParameters.sendTextAlertToUserRequest === undefined) {
                throw new runtime.RequiredError('sendTextAlertToUserRequest', 'Required parameter requestParameters.sendTextAlertToUserRequest was null or undefined when calling sendTextAlertUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}/text-alerts`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SendTextAlertToUserRequestToJSON(requestParameters.sendTextAlertToUserRequest),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * sendTextAlert
     */
    sendTextAlertUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendTextAlertUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * updateUserProfile
     */
    updateUserProfileUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling updateUserProfileUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateUserProfileUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateUserProfileRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserDetailsResponseFromJSON(jsonValue));
        });
    }
    /**
     * updateUserProfile
     */
    updateUserProfileUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserProfileUsingPUTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * updateUserRoles
     */
    updateUserRolesUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateUserRolesUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/users/roles`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateUserRolesRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * updateUserRoles
     */
    updateUserRolesUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateUserRolesUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * validateUserByEmail
     */
    validateUserByEmailUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.email === null || requestParameters.email === undefined) {
                throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling validateUserByEmailUsingGET.');
            }
            const queryParameters = {};
            if (requestParameters.email !== undefined) {
                queryParameters['email'] = requestParameters.email;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/validate`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => ValidateUserEmailResponseFromJSON(jsonValue));
        });
    }
    /**
     * validateUserByEmail
     */
    validateUserByEmailUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateUserByEmailUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
}
