/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MatchCaseResponse,
    MatchCaseResponseFromJSON,
    MatchCaseResponseToJSON,
} from '../models';

export interface ApplyReferralCodeUsingPOSTRequest {
    caseId: string;
    codeId: string;
}

export interface RemoveReferralCodeFromCaseUsingDELETERequest {
    caseId: string;
    codeId: string;
}

/**
 * 
 */
export class CaseReferralCodeControllerApi extends runtime.BaseAPI {

    /**
     * Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
     * applyReferralCode
     */
    async applyReferralCodeUsingPOSTRaw(requestParameters: ApplyReferralCodeUsingPOSTRequest): Promise<runtime.ApiResponse<MatchCaseResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling applyReferralCodeUsingPOST.');
        }

        if (requestParameters.codeId === null || requestParameters.codeId === undefined) {
            throw new runtime.RequiredError('codeId','Required parameter requestParameters.codeId was null or undefined when calling applyReferralCodeUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/referralcode/{codeId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"codeId"}}`, encodeURIComponent(String(requestParameters.codeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchCaseResponseFromJSON(jsonValue));
    }

    /**
     * Apply referral code to a case to adjust the estimated cost and/or to assign the rightful lawfirm. This operation is idempotent
     * applyReferralCode
     */
    async applyReferralCodeUsingPOST(requestParameters: ApplyReferralCodeUsingPOSTRequest): Promise<MatchCaseResponse> {
        const response = await this.applyReferralCodeUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * removeReferralCodeFromCase
     */
    async removeReferralCodeFromCaseUsingDELETERaw(requestParameters: RemoveReferralCodeFromCaseUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling removeReferralCodeFromCaseUsingDELETE.');
        }

        if (requestParameters.codeId === null || requestParameters.codeId === undefined) {
            throw new runtime.RequiredError('codeId','Required parameter requestParameters.codeId was null or undefined when calling removeReferralCodeFromCaseUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases/{caseId}/referralcode/{codeId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))).replace(`{${"codeId"}}`, encodeURIComponent(String(requestParameters.codeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removeReferralCodeFromCase
     */
    async removeReferralCodeFromCaseUsingDELETE(requestParameters: RemoveReferralCodeFromCaseUsingDELETERequest): Promise<void> {
        await this.removeReferralCodeFromCaseUsingDELETERaw(requestParameters);
    }

}
