/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateConnectAccountLinkRequest,
    CreateConnectAccountLinkRequestFromJSON,
    CreateConnectAccountLinkRequestToJSON,
    CreateConnectAccountLinkResponse,
    CreateConnectAccountLinkResponseFromJSON,
    CreateConnectAccountLinkResponseToJSON,
    CreateStripeConnectAccountRequest,
    CreateStripeConnectAccountRequestFromJSON,
    CreateStripeConnectAccountRequestToJSON,
    CreateStripeConnectAccountResponse,
    CreateStripeConnectAccountResponseFromJSON,
    CreateStripeConnectAccountResponseToJSON,
    HandleOrphanedStripeChargeRequest,
    HandleOrphanedStripeChargeRequestFromJSON,
    HandleOrphanedStripeChargeRequestToJSON,
    HandleOrphanedStripeChargeResponse,
    HandleOrphanedStripeChargeResponseFromJSON,
    HandleOrphanedStripeChargeResponseToJSON,
    UpdateDisputeRequest,
    UpdateDisputeRequestFromJSON,
    UpdateDisputeRequestToJSON,
} from '../models';

export interface ConnectStripeAccountUsingPOSTRequest {
    code: string;
}

export interface CreateConnectAccountLinkUsingPOSTRequest {
    request: CreateConnectAccountLinkRequest;
}

export interface CreateStripeConnectAccountUsingPOSTRequest {
    request: CreateStripeConnectAccountRequest;
}

export interface HandleOrphanedStripeChargesUsingPOSTRequest {
    request: HandleOrphanedStripeChargeRequest;
}

export interface UpdateDisputeUsingPUTRequest {
    disputeId: string;
    request: UpdateDisputeRequest;
}

/**
 * 
 */
export class StripeControllerApi extends runtime.BaseAPI {

    /**
     * connectStripeAccount
     */
    async connectStripeAccountUsingPOSTRaw(requestParameters: ConnectStripeAccountUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling connectStripeAccountUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/stripe/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * connectStripeAccount
     */
    async connectStripeAccountUsingPOST(requestParameters: ConnectStripeAccountUsingPOSTRequest): Promise<object> {
        const response = await this.connectStripeAccountUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * createConnectAccountLink
     */
    async createConnectAccountLinkUsingPOSTRaw(requestParameters: CreateConnectAccountLinkUsingPOSTRequest): Promise<runtime.ApiResponse<CreateConnectAccountLinkResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createConnectAccountLinkUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/account/link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConnectAccountLinkRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateConnectAccountLinkResponseFromJSON(jsonValue));
    }

    /**
     * createConnectAccountLink
     */
    async createConnectAccountLinkUsingPOST(requestParameters: CreateConnectAccountLinkUsingPOSTRequest): Promise<CreateConnectAccountLinkResponse> {
        const response = await this.createConnectAccountLinkUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * createStripeConnectAccount
     */
    async createStripeConnectAccountUsingPOSTRaw(requestParameters: CreateStripeConnectAccountUsingPOSTRequest): Promise<runtime.ApiResponse<CreateStripeConnectAccountResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createStripeConnectAccountUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStripeConnectAccountRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateStripeConnectAccountResponseFromJSON(jsonValue));
    }

    /**
     * createStripeConnectAccount
     */
    async createStripeConnectAccountUsingPOST(requestParameters: CreateStripeConnectAccountUsingPOSTRequest): Promise<CreateStripeConnectAccountResponse> {
        const response = await this.createStripeConnectAccountUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * handleOrphanedStripeCharges
     */
    async handleOrphanedStripeChargesUsingPOSTRaw(requestParameters: HandleOrphanedStripeChargesUsingPOSTRequest): Promise<runtime.ApiResponse<HandleOrphanedStripeChargeResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling handleOrphanedStripeChargesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/handle-orphaned-stripe-charges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandleOrphanedStripeChargeRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HandleOrphanedStripeChargeResponseFromJSON(jsonValue));
    }

    /**
     * handleOrphanedStripeCharges
     */
    async handleOrphanedStripeChargesUsingPOST(requestParameters: HandleOrphanedStripeChargesUsingPOSTRequest): Promise<HandleOrphanedStripeChargeResponse> {
        const response = await this.handleOrphanedStripeChargesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateDispute
     */
    async updateDisputeUsingPUTRaw(requestParameters: UpdateDisputeUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.disputeId === null || requestParameters.disputeId === undefined) {
            throw new runtime.RequiredError('disputeId','Required parameter requestParameters.disputeId was null or undefined when calling updateDisputeUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateDisputeUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/stripe/disputes/{disputeId}`.replace(`{${"disputeId"}}`, encodeURIComponent(String(requestParameters.disputeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDisputeRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateDispute
     */
    async updateDisputeUsingPUT(requestParameters: UpdateDisputeUsingPUTRequest): Promise<void> {
        await this.updateDisputeUsingPUTRaw(requestParameters);
    }

}
