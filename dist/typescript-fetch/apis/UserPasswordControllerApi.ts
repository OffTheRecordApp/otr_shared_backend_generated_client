/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChangeUserPasswordRequest,
    ChangeUserPasswordRequestFromJSON,
    ChangeUserPasswordRequestToJSON,
    ResetUserPasswordRequest,
    ResetUserPasswordRequestFromJSON,
    ResetUserPasswordRequestToJSON,
    VerifyPasswordResetTokenResponse,
    VerifyPasswordResetTokenResponseFromJSON,
    VerifyPasswordResetTokenResponseToJSON,
    VerifyUserAccountResponse,
    VerifyUserAccountResponseFromJSON,
    VerifyUserAccountResponseToJSON,
    VerifyUserPasswordRequest,
    VerifyUserPasswordRequestFromJSON,
    VerifyUserPasswordRequestToJSON,
} from '../models';

export interface ChangeUserPasswordUsingPUTRequest {
    request: ChangeUserPasswordRequest;
}

export interface ResetUserPasswordByAdminUsingPUTRequest {
    userId: number;
    request: ResetUserPasswordRequest;
}

export interface ResetUserPasswordUsingPOSTRequest {
    request: ResetUserPasswordRequest;
}

export interface SendAccountVerificationCodeUsingPOSTRequest {
    email?: string;
    userId?: string;
    verificationMethod?: SendAccountVerificationCodeUsingPOSTVerificationMethodEnum;
}

export interface SendResetPasswordTokenUsingPOSTRequest {
    email: string;
    enableCode?: boolean;
}

export interface VerifyPwdResetTokenUsingGETRequest {
    token: string;
}

export interface VerifyUserAccountUsingPUTRequest {
    code: string;
    email?: string;
    fieldName?: string;
    fieldValue?: string;
    userId?: string;
}

export interface VerifyUserPasswordUsingPUTRequest {
    userId: number;
    request: VerifyUserPasswordRequest;
}

/**
 * 
 */
export class UserPasswordControllerApi extends runtime.BaseAPI {

    /**
     * changeUserPassword
     */
    async changeUserPasswordUsingPUTRaw(requestParameters: ChangeUserPasswordUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling changeUserPasswordUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/p`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUserPasswordRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * changeUserPassword
     */
    async changeUserPasswordUsingPUT(requestParameters: ChangeUserPasswordUsingPUTRequest): Promise<object> {
        const response = await this.changeUserPasswordUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * resetUserPasswordByAdmin
     */
    async resetUserPasswordByAdminUsingPUTRaw(requestParameters: ResetUserPasswordByAdminUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling resetUserPasswordByAdminUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling resetUserPasswordByAdminUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResetUserPasswordRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * resetUserPasswordByAdmin
     */
    async resetUserPasswordByAdminUsingPUT(requestParameters: ResetUserPasswordByAdminUsingPUTRequest): Promise<object> {
        const response = await this.resetUserPasswordByAdminUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * resetUserPassword
     */
    async resetUserPasswordUsingPOSTRaw(requestParameters: ResetUserPasswordUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling resetUserPasswordUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/p/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetUserPasswordRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * resetUserPassword
     */
    async resetUserPasswordUsingPOST(requestParameters: ResetUserPasswordUsingPOSTRequest): Promise<void> {
        await this.resetUserPasswordUsingPOSTRaw(requestParameters);
    }

    /**
     * sendAccountVerificationCode
     */
    async sendAccountVerificationCodeUsingPOSTRaw(requestParameters: SendAccountVerificationCodeUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.verificationMethod !== undefined) {
            queryParameters['verificationMethod'] = requestParameters.verificationMethod;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/send-verification-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * sendAccountVerificationCode
     */
    async sendAccountVerificationCodeUsingPOST(requestParameters: SendAccountVerificationCodeUsingPOSTRequest): Promise<void> {
        await this.sendAccountVerificationCodeUsingPOSTRaw(requestParameters);
    }

    /**
     * sendResetPasswordToken
     */
    async sendResetPasswordTokenUsingPOSTRaw(requestParameters: SendResetPasswordTokenUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling sendResetPasswordTokenUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.enableCode !== undefined) {
            queryParameters['enableCode'] = requestParameters.enableCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/password/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * sendResetPasswordToken
     */
    async sendResetPasswordTokenUsingPOST(requestParameters: SendResetPasswordTokenUsingPOSTRequest): Promise<object> {
        const response = await this.sendResetPasswordTokenUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * verifyPwdResetToken
     */
    async verifyPwdResetTokenUsingGETRaw(requestParameters: VerifyPwdResetTokenUsingGETRequest): Promise<runtime.ApiResponse<VerifyPasswordResetTokenResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling verifyPwdResetTokenUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/password/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyPasswordResetTokenResponseFromJSON(jsonValue));
    }

    /**
     * verifyPwdResetToken
     */
    async verifyPwdResetTokenUsingGET(requestParameters: VerifyPwdResetTokenUsingGETRequest): Promise<VerifyPasswordResetTokenResponse> {
        const response = await this.verifyPwdResetTokenUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * verifyUserAccount
     */
    async verifyUserAccountUsingPUTRaw(requestParameters: VerifyUserAccountUsingPUTRequest): Promise<runtime.ApiResponse<VerifyUserAccountResponse>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling verifyUserAccountUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.fieldName !== undefined) {
            queryParameters['fieldName'] = requestParameters.fieldName;
        }

        if (requestParameters.fieldValue !== undefined) {
            queryParameters['fieldValue'] = requestParameters.fieldValue;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/verify-account`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyUserAccountResponseFromJSON(jsonValue));
    }

    /**
     * verifyUserAccount
     */
    async verifyUserAccountUsingPUT(requestParameters: VerifyUserAccountUsingPUTRequest): Promise<VerifyUserAccountResponse> {
        const response = await this.verifyUserAccountUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * verifyUserPassword
     */
    async verifyUserPasswordUsingPUTRaw(requestParameters: VerifyUserPasswordUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling verifyUserPasswordUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling verifyUserPasswordUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/verify-password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyUserPasswordRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * verifyUserPassword
     */
    async verifyUserPasswordUsingPUT(requestParameters: VerifyUserPasswordUsingPUTRequest): Promise<object> {
        const response = await this.verifyUserPasswordUsingPUTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SendAccountVerificationCodeUsingPOSTVerificationMethodEnum {
    CODEONLY = 'CODE_ONLY',
    WEBLINK = 'WEB_LINK'
}
