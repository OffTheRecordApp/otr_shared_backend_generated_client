/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetCitationAuditLogsResponse,
    GetCitationAuditLogsResponseFromJSON,
    GetCitationAuditLogsResponseToJSON,
} from '../models';

export interface GetAuditLogsUsingGETRequest {
    citationId: number;
    logLevel?: GetAuditLogsUsingGETLogLevelEnum;
    logType?: GetAuditLogsUsingGETLogTypeEnum;
    showActiveOnly?: boolean;
}

/**
 * 
 */
export class AuditLogControllerApi extends runtime.BaseAPI {

    /**
     * getAuditLogs
     */
    async getAuditLogsUsingGETRaw(requestParameters: GetAuditLogsUsingGETRequest): Promise<runtime.ApiResponse<GetCitationAuditLogsResponse>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling getAuditLogsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.logLevel !== undefined) {
            queryParameters['logLevel'] = requestParameters.logLevel;
        }

        if (requestParameters.logType !== undefined) {
            queryParameters['logType'] = requestParameters.logType;
        }

        if (requestParameters.showActiveOnly !== undefined) {
            queryParameters['showActiveOnly'] = requestParameters.showActiveOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/audit-logs`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCitationAuditLogsResponseFromJSON(jsonValue));
    }

    /**
     * getAuditLogs
     */
    async getAuditLogsUsingGET(requestParameters: GetAuditLogsUsingGETRequest): Promise<GetCitationAuditLogsResponse> {
        const response = await this.getAuditLogsUsingGETRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAuditLogsUsingGETLogLevelEnum {
    NONTECHNICAL = 'NON_TECHNICAL',
    TECHNICAL = 'TECHNICAL'
}
/**
    * @export
    * @enum {string}
    */
export enum GetAuditLogsUsingGETLogTypeEnum {
    APPLYREFERRALCODE = 'APPLY_REFERRAL_CODE',
    CREATELEGALSERVICES = 'CREATE_LEGAL_SERVICES',
    INITIATECASE = 'INITIATE_CASE',
    MATCHCASE = 'MATCH_CASE',
    OTHER = 'OTHER',
    TRANSFERCASE = 'TRANSFER_CASE'
}
