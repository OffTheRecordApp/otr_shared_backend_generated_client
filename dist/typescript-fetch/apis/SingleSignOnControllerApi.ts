/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SingleSignOnResponse,
    SingleSignOnResponseFromJSON,
    SingleSignOnResponseToJSON,
} from '../models';

export interface LoginWithSSOUsingPOSTRequest {
    brandId: string;
    email: string;
    isAdmin: boolean;
    password: string;
}

/**
 * 
 */
export class SingleSignOnControllerApi extends runtime.BaseAPI {

    /**
     * loginWithSSO
     */
    async loginWithSSOUsingPOSTRaw(requestParameters: LoginWithSSOUsingPOSTRequest): Promise<runtime.ApiResponse<SingleSignOnResponse>> {
        if (requestParameters.brandId === null || requestParameters.brandId === undefined) {
            throw new runtime.RequiredError('brandId','Required parameter requestParameters.brandId was null or undefined when calling loginWithSSOUsingPOST.');
        }

        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling loginWithSSOUsingPOST.');
        }

        if (requestParameters.isAdmin === null || requestParameters.isAdmin === undefined) {
            throw new runtime.RequiredError('isAdmin','Required parameter requestParameters.isAdmin was null or undefined when calling loginWithSSOUsingPOST.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginWithSSOUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.brandId !== undefined) {
            queryParameters['brandId'] = requestParameters.brandId;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.isAdmin !== undefined) {
            queryParameters['isAdmin'] = requestParameters.isAdmin;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/authentication/sso/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleSignOnResponseFromJSON(jsonValue));
    }

    /**
     * loginWithSSO
     */
    async loginWithSSOUsingPOST(requestParameters: LoginWithSSOUsingPOSTRequest): Promise<SingleSignOnResponse> {
        const response = await this.loginWithSSOUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
