/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FindMatchingUsersRequest,
    FindMatchingUsersRequestFromJSON,
    FindMatchingUsersRequestToJSON,
    FindMatchingUsersResponse,
    FindMatchingUsersResponseFromJSON,
    FindMatchingUsersResponseToJSON,
    GetUserByEmailRequest,
    GetUserByEmailRequestFromJSON,
    GetUserByEmailRequestToJSON,
    GetUserByEmailResponse,
    GetUserByEmailResponseFromJSON,
    GetUserByEmailResponseToJSON,
} from '../models';

export interface FindMatchingUsersUsingPOSTRequest {
    request: FindMatchingUsersRequest;
}

export interface GetUserByEmailUsingPOSTRequest {
    request: GetUserByEmailRequest;
}

/**
 * 
 */
export class UserSearchControllerApi extends runtime.BaseAPI {

    /**
     * findMatchingUsers
     */
    async findMatchingUsersUsingPOSTRaw(requestParameters: FindMatchingUsersUsingPOSTRequest): Promise<runtime.ApiResponse<FindMatchingUsersResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling findMatchingUsersUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindMatchingUsersRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FindMatchingUsersResponseFromJSON(jsonValue));
    }

    /**
     * findMatchingUsers
     */
    async findMatchingUsersUsingPOST(requestParameters: FindMatchingUsersUsingPOSTRequest): Promise<FindMatchingUsersResponse> {
        const response = await this.findMatchingUsersUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getUserByEmail
     */
    async getUserByEmailUsingPOSTRaw(requestParameters: GetUserByEmailUsingPOSTRequest): Promise<runtime.ApiResponse<GetUserByEmailResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getUserByEmailUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/matches`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUserByEmailRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByEmailResponseFromJSON(jsonValue));
    }

    /**
     * getUserByEmail
     */
    async getUserByEmailUsingPOST(requestParameters: GetUserByEmailUsingPOSTRequest): Promise<GetUserByEmailResponse> {
        const response = await this.getUserByEmailUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
