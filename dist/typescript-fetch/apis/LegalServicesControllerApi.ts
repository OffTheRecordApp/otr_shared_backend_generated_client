/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MatchLegalServicesRequest,
    MatchLegalServicesRequestFromJSON,
    MatchLegalServicesRequestToJSON,
    MatchLegalServicesResponse,
    MatchLegalServicesResponseFromJSON,
    MatchLegalServicesResponseToJSON,
} from '../models';

export interface CreateLegalServicesUsingPOSTRequest {
    citationId: number;
    request: MatchLegalServicesRequest;
}

export interface SelectLegalServiceUsingPUTRequest {
    citationId: number;
    lawfirmCaseId: number;
}

/**
 * 
 */
export class LegalServicesControllerApi extends runtime.BaseAPI {

    /**
     * createLegalServices
     */
    async createLegalServicesUsingPOSTRaw(requestParameters: CreateLegalServicesUsingPOSTRequest): Promise<runtime.ApiResponse<MatchLegalServicesResponse>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling createLegalServicesUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createLegalServicesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/legal-services`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MatchLegalServicesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchLegalServicesResponseFromJSON(jsonValue));
    }

    /**
     * createLegalServices
     */
    async createLegalServicesUsingPOST(requestParameters: CreateLegalServicesUsingPOSTRequest): Promise<MatchLegalServicesResponse> {
        const response = await this.createLegalServicesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * selectLegalService
     */
    async selectLegalServiceUsingPUTRaw(requestParameters: SelectLegalServiceUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling selectLegalServiceUsingPUT.');
        }

        if (requestParameters.lawfirmCaseId === null || requestParameters.lawfirmCaseId === undefined) {
            throw new runtime.RequiredError('lawfirmCaseId','Required parameter requestParameters.lawfirmCaseId was null or undefined when calling selectLegalServiceUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/select-legal-service/{lawfirmCaseId}`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))).replace(`{${"lawfirmCaseId"}}`, encodeURIComponent(String(requestParameters.lawfirmCaseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * selectLegalService
     */
    async selectLegalServiceUsingPUT(requestParameters: SelectLegalServiceUsingPUTRequest): Promise<object> {
        const response = await this.selectLegalServiceUsingPUTRaw(requestParameters);
        return await response.value();
    }

}
