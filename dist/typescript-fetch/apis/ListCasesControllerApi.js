/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { GetClientCasesResponseFromJSON, GetUserCasesResponseFromJSON, ListDashboardCasesResponseFromJSON, } from '../models';
/**
 *
 */
export class ListCasesControllerApi extends runtime.BaseAPI {
    /**
     * getCasesForUser
     */
    getCasesForUserUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getCasesForUserUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/users/{userId}/cases`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetClientCasesResponseFromJSON(jsonValue));
        });
    }
    /**
     * getCasesForUser
     */
    getCasesForUserUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCasesForUserUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * getUserCases
     */
    getUserCasesUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getUserCasesUsingGET.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v2/users/{userId}/cases`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetUserCasesResponseFromJSON(jsonValue));
        });
    }
    /**
     * getUserCases
     */
    getUserCasesUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserCasesUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * listDashboardCases
     */
    listDashboardCasesUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling listDashboardCasesUsingGET.');
            }
            const queryParameters = {};
            if (requestParameters.caseStatuses !== undefined) {
                queryParameters['caseStatuses'] = requestParameters.caseStatuses;
            }
            if (requestParameters.includeDeleted !== undefined) {
                queryParameters['includeDeleted'] = requestParameters.includeDeleted;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.previousPageToken !== undefined) {
                queryParameters['previousPageToken'] = requestParameters.previousPageToken;
            }
            if (requestParameters.sortBy !== undefined) {
                queryParameters['sortBy'] = requestParameters.sortBy;
            }
            if (requestParameters.statusCategories !== undefined) {
                queryParameters['statusCategories'] = requestParameters.statusCategories;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v3/users/{userId}/cases`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => ListDashboardCasesResponseFromJSON(jsonValue));
        });
    }
    /**
     * listDashboardCases
     */
    listDashboardCasesUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listDashboardCasesUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
}
/**
    * @export
    * @enum {string}
    */
export var ListDashboardCasesUsingGETCaseStatusesEnum;
(function (ListDashboardCasesUsingGETCaseStatusesEnum) {
    ListDashboardCasesUsingGETCaseStatusesEnum["AMENDEDDOWNWITHINCLASS"] = "AMENDED_DOWN_WITHIN_CLASS";
    ListDashboardCasesUsingGETCaseStatusesEnum["AMENDEDFULLFINE"] = "AMENDED_FULL_FINE";
    ListDashboardCasesUsingGETCaseStatusesEnum["AMENDEDINCREASEDFINE"] = "AMENDED_INCREASED_FINE";
    ListDashboardCasesUsingGETCaseStatusesEnum["AMENDEDNOFINE"] = "AMENDED_NO_FINE";
    ListDashboardCasesUsingGETCaseStatusesEnum["AMENDEDREDUCEDFINE"] = "AMENDED_REDUCED_FINE";
    ListDashboardCasesUsingGETCaseStatusesEnum["AMENDEDTOINFRACTION"] = "AMENDED_TO_INFRACTION";
    ListDashboardCasesUsingGETCaseStatusesEnum["AMENDEDTONMV"] = "AMENDED_TO_NMV";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDATTORNEYATFAULT"] = "CANCELLED_ATTORNEY_AT_FAULT";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDBYLAWFIRM"] = "CANCELLED_BY_LAWFIRM";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDBYUSER"] = "CANCELLED_BY_USER";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDDUPLICATE"] = "CANCELLED_DUPLICATE";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDNMV"] = "CANCELLED_NMV";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDNONPAYMENT"] = "CANCELLED_NON_PAYMENT";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDNOLAWFIRM"] = "CANCELLED_NO_LAWFIRM";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDOVERDUE"] = "CANCELLED_OVERDUE";
    ListDashboardCasesUsingGETCaseStatusesEnum["CANCELLEDTOOSHORTNOTICE"] = "CANCELLED_TOO_SHORT_NOTICE";
    ListDashboardCasesUsingGETCaseStatusesEnum["CASEINPROGRESS"] = "CASE_IN_PROGRESS";
    ListDashboardCasesUsingGETCaseStatusesEnum["CLIENTCONFIRMED"] = "CLIENT_CONFIRMED";
    ListDashboardCasesUsingGETCaseStatusesEnum["CLIENTCONFIRMEDUNPAID"] = "CLIENT_CONFIRMED_UNPAID";
    ListDashboardCasesUsingGETCaseStatusesEnum["CLIENTFIREDLAWFIRM"] = "CLIENT_FIRED_LAWFIRM";
    ListDashboardCasesUsingGETCaseStatusesEnum["CLIENTFORCEDLOSS"] = "CLIENT_FORCED_LOSS";
    ListDashboardCasesUsingGETCaseStatusesEnum["CLIENTPAIDFINE"] = "CLIENT_PAID_FINE";
    ListDashboardCasesUsingGETCaseStatusesEnum["CLIENTUNRESPONSIVE"] = "CLIENT_UNRESPONSIVE";
    ListDashboardCasesUsingGETCaseStatusesEnum["DEFERRED"] = "DEFERRED";
    ListDashboardCasesUsingGETCaseStatusesEnum["DISMISSED"] = "DISMISSED";
    ListDashboardCasesUsingGETCaseStatusesEnum["DIVERSION"] = "DIVERSION";
    ListDashboardCasesUsingGETCaseStatusesEnum["FEESDISPUTED"] = "FEES_DISPUTED";
    ListDashboardCasesUsingGETCaseStatusesEnum["FINEREDUCTIONONLY"] = "FINE_REDUCTION_ONLY";
    ListDashboardCasesUsingGETCaseStatusesEnum["LAWFIRMWITHDRAWN"] = "LAWFIRM_WITHDRAWN";
    ListDashboardCasesUsingGETCaseStatusesEnum["LOST"] = "LOST";
    ListDashboardCasesUsingGETCaseStatusesEnum["NOLAWFIRMAVAILABLE"] = "NO_LAWFIRM_AVAILABLE";
    ListDashboardCasesUsingGETCaseStatusesEnum["POINTREDUCTION"] = "POINT_REDUCTION";
    ListDashboardCasesUsingGETCaseStatusesEnum["REFUSEDBYLAWFIRM"] = "REFUSED_BY_LAWFIRM";
    ListDashboardCasesUsingGETCaseStatusesEnum["RESOLVEDNONPAYMENT"] = "RESOLVED_NON_PAYMENT";
    ListDashboardCasesUsingGETCaseStatusesEnum["STALE"] = "STALE";
    ListDashboardCasesUsingGETCaseStatusesEnum["TRAFFICSCHOOL"] = "TRAFFIC_SCHOOL";
    ListDashboardCasesUsingGETCaseStatusesEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(ListDashboardCasesUsingGETCaseStatusesEnum || (ListDashboardCasesUsingGETCaseStatusesEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var ListDashboardCasesUsingGETSortByEnum;
(function (ListDashboardCasesUsingGETSortByEnum) {
    ListDashboardCasesUsingGETSortByEnum["BOOKINGCONFIRMEDDATE"] = "BOOKING_CONFIRMED_DATE";
    ListDashboardCasesUsingGETSortByEnum["CITATIONCREATIONDATE"] = "CITATION_CREATION_DATE";
    ListDashboardCasesUsingGETSortByEnum["CITATIONISSUEDATE"] = "CITATION_ISSUE_DATE";
    ListDashboardCasesUsingGETSortByEnum["COURTDATE"] = "COURT_DATE";
    ListDashboardCasesUsingGETSortByEnum["LASTCITATIONUPDATEDATE"] = "LAST_CITATION_UPDATE_DATE";
})(ListDashboardCasesUsingGETSortByEnum || (ListDashboardCasesUsingGETSortByEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var ListDashboardCasesUsingGETStatusCategoriesEnum;
(function (ListDashboardCasesUsingGETStatusCategoriesEnum) {
    ListDashboardCasesUsingGETStatusCategoriesEnum["ACTIVE"] = "ACTIVE";
    ListDashboardCasesUsingGETStatusCategoriesEnum["CANCELLED"] = "CANCELLED";
    ListDashboardCasesUsingGETStatusCategoriesEnum["RESOLVED"] = "RESOLVED";
    ListDashboardCasesUsingGETStatusCategoriesEnum["UNCONFIRMED"] = "UNCONFIRMED";
})(ListDashboardCasesUsingGETStatusCategoriesEnum || (ListDashboardCasesUsingGETStatusCategoriesEnum = {}));
