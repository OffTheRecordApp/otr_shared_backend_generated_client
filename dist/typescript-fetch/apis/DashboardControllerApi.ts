/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetBookingsRequest,
    GetBookingsRequestFromJSON,
    GetBookingsRequestToJSON,
    GetBookingsResponse,
    GetBookingsResponseFromJSON,
    GetBookingsResponseToJSON,
    GetUserRegistrationsRequest,
    GetUserRegistrationsRequestFromJSON,
    GetUserRegistrationsRequestToJSON,
    GetUserRegistrationsResponse,
    GetUserRegistrationsResponseFromJSON,
    GetUserRegistrationsResponseToJSON,
    GraphRequest,
    GraphRequestFromJSON,
    GraphRequestToJSON,
    ListCaseBookingsRequest,
    ListCaseBookingsRequestFromJSON,
    ListCaseBookingsRequestToJSON,
    ListCaseBookingsResponse,
    ListCaseBookingsResponseFromJSON,
    ListCaseBookingsResponseToJSON,
    ListCaseCancellationsRequest,
    ListCaseCancellationsRequestFromJSON,
    ListCaseCancellationsRequestToJSON,
    ListCaseCancellationsResponse,
    ListCaseCancellationsResponseFromJSON,
    ListCaseCancellationsResponseToJSON,
    ListCitationsRequest,
    ListCitationsRequestFromJSON,
    ListCitationsRequestToJSON,
    ListCitationsResponse,
    ListCitationsResponseFromJSON,
    ListCitationsResponseToJSON,
    ListLawfirmsEngagedRequest,
    ListLawfirmsEngagedRequestFromJSON,
    ListLawfirmsEngagedRequestToJSON,
    ListLawfirmsEngagedResponse,
    ListLawfirmsEngagedResponseFromJSON,
    ListLawfirmsEngagedResponseToJSON,
    ListPhoneCallsResponse,
    ListPhoneCallsResponseFromJSON,
    ListPhoneCallsResponseToJSON,
    SqlResponse,
    SqlResponseFromJSON,
    SqlResponseToJSON,
} from '../models';

export interface GetBookingsUsingPOSTRequest {
    request: GetBookingsRequest;
}

export interface GetUserRegistrationsUsingPOSTRequest {
    request: GetUserRegistrationsRequest;
}

export interface ListCaseBookingsUsingPOSTRequest {
    request: ListCaseBookingsRequest;
}

export interface ListCaseCancellationsUsingPOSTRequest {
    request: ListCaseCancellationsRequest;
}

export interface ListCitationsUsingPOSTRequest {
    request: ListCitationsRequest;
}

export interface ListCustomersUsingPOSTRequest {
    graphRequest: GraphRequest;
}

export interface ListDropoffsUsingPOSTRequest {
    graphRequest: GraphRequest;
}

export interface ListExpensesUsingPOSTRequest {
    graphRequest: GraphRequest;
}

export interface ListLawfirmsEngagedUsingPOSTRequest {
    request: ListLawfirmsEngagedRequest;
}

export interface ListLawyerLeadsUsingPOSTRequest {
    graphRequest: GraphRequest;
}

export interface ListPhoneCallsUsingGETRequest {
    agentId?: number;
    agentName?: string;
    callQueueName?: string;
    callStatus?: ListPhoneCallsUsingGETCallStatusEnum;
    callStatusName?: string;
    customerName?: string;
    direction?: ListPhoneCallsUsingGETDirectionEnum;
    endDate?: Date;
    ivrName?: string;
    length?: number;
    page?: number;
    phoneNumber?: string;
    shouldIncludePhoneCalls?: boolean;
    sortBy?: string;
    sortOrder?: string;
    startDate?: Date;
    teamName?: string;
    timeZoneId?: string;
    totalCalls?: number;
    totalOtrAccounts?: number;
}

/**
 * 
 */
export class DashboardControllerApi extends runtime.BaseAPI {

    /**
     * getBookings
     */
    async getBookingsUsingPOSTRaw(requestParameters: GetBookingsUsingPOSTRequest): Promise<runtime.ApiResponse<GetBookingsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getBookingsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/bookings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetBookingsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBookingsResponseFromJSON(jsonValue));
    }

    /**
     * getBookings
     */
    async getBookingsUsingPOST(requestParameters: GetBookingsUsingPOSTRequest): Promise<GetBookingsResponse> {
        const response = await this.getBookingsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getUserRegistrations
     */
    async getUserRegistrationsUsingPOSTRaw(requestParameters: GetUserRegistrationsUsingPOSTRequest): Promise<runtime.ApiResponse<GetUserRegistrationsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getUserRegistrationsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/registrations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUserRegistrationsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserRegistrationsResponseFromJSON(jsonValue));
    }

    /**
     * getUserRegistrations
     */
    async getUserRegistrationsUsingPOST(requestParameters: GetUserRegistrationsUsingPOSTRequest): Promise<GetUserRegistrationsResponse> {
        const response = await this.getUserRegistrationsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listCaseBookings
     */
    async listCaseBookingsUsingPOSTRaw(requestParameters: ListCaseBookingsUsingPOSTRequest): Promise<runtime.ApiResponse<ListCaseBookingsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling listCaseBookingsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/bookings2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListCaseBookingsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCaseBookingsResponseFromJSON(jsonValue));
    }

    /**
     * listCaseBookings
     */
    async listCaseBookingsUsingPOST(requestParameters: ListCaseBookingsUsingPOSTRequest): Promise<ListCaseBookingsResponse> {
        const response = await this.listCaseBookingsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listCaseCancellations
     */
    async listCaseCancellationsUsingPOSTRaw(requestParameters: ListCaseCancellationsUsingPOSTRequest): Promise<runtime.ApiResponse<ListCaseCancellationsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling listCaseCancellationsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/cancellations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListCaseCancellationsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCaseCancellationsResponseFromJSON(jsonValue));
    }

    /**
     * listCaseCancellations
     */
    async listCaseCancellationsUsingPOST(requestParameters: ListCaseCancellationsUsingPOSTRequest): Promise<ListCaseCancellationsResponse> {
        const response = await this.listCaseCancellationsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listCitations
     */
    async listCitationsUsingPOSTRaw(requestParameters: ListCitationsUsingPOSTRequest): Promise<runtime.ApiResponse<ListCitationsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling listCitationsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/citations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListCitationsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCitationsResponseFromJSON(jsonValue));
    }

    /**
     * listCitations
     */
    async listCitationsUsingPOST(requestParameters: ListCitationsUsingPOSTRequest): Promise<ListCitationsResponse> {
        const response = await this.listCitationsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listCustomers
     */
    async listCustomersUsingPOSTRaw(requestParameters: ListCustomersUsingPOSTRequest): Promise<runtime.ApiResponse<SqlResponse>> {
        if (requestParameters.graphRequest === null || requestParameters.graphRequest === undefined) {
            throw new runtime.RequiredError('graphRequest','Required parameter requestParameters.graphRequest was null or undefined when calling listCustomersUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GraphRequestToJSON(requestParameters.graphRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SqlResponseFromJSON(jsonValue));
    }

    /**
     * listCustomers
     */
    async listCustomersUsingPOST(requestParameters: ListCustomersUsingPOSTRequest): Promise<SqlResponse> {
        const response = await this.listCustomersUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listDropoffs
     */
    async listDropoffsUsingPOSTRaw(requestParameters: ListDropoffsUsingPOSTRequest): Promise<runtime.ApiResponse<SqlResponse>> {
        if (requestParameters.graphRequest === null || requestParameters.graphRequest === undefined) {
            throw new runtime.RequiredError('graphRequest','Required parameter requestParameters.graphRequest was null or undefined when calling listDropoffsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/dropoff`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GraphRequestToJSON(requestParameters.graphRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SqlResponseFromJSON(jsonValue));
    }

    /**
     * listDropoffs
     */
    async listDropoffsUsingPOST(requestParameters: ListDropoffsUsingPOSTRequest): Promise<SqlResponse> {
        const response = await this.listDropoffsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listExpenses
     */
    async listExpensesUsingPOSTRaw(requestParameters: ListExpensesUsingPOSTRequest): Promise<runtime.ApiResponse<SqlResponse>> {
        if (requestParameters.graphRequest === null || requestParameters.graphRequest === undefined) {
            throw new runtime.RequiredError('graphRequest','Required parameter requestParameters.graphRequest was null or undefined when calling listExpensesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/expenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GraphRequestToJSON(requestParameters.graphRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SqlResponseFromJSON(jsonValue));
    }

    /**
     * listExpenses
     */
    async listExpensesUsingPOST(requestParameters: ListExpensesUsingPOSTRequest): Promise<SqlResponse> {
        const response = await this.listExpensesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listLawfirmsEngaged
     */
    async listLawfirmsEngagedUsingPOSTRaw(requestParameters: ListLawfirmsEngagedUsingPOSTRequest): Promise<runtime.ApiResponse<ListLawfirmsEngagedResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling listLawfirmsEngagedUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/lawfirm-engagement`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListLawfirmsEngagedRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListLawfirmsEngagedResponseFromJSON(jsonValue));
    }

    /**
     * listLawfirmsEngaged
     */
    async listLawfirmsEngagedUsingPOST(requestParameters: ListLawfirmsEngagedUsingPOSTRequest): Promise<ListLawfirmsEngagedResponse> {
        const response = await this.listLawfirmsEngagedUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listLawyerLeads
     */
    async listLawyerLeadsUsingPOSTRaw(requestParameters: ListLawyerLeadsUsingPOSTRequest): Promise<runtime.ApiResponse<SqlResponse>> {
        if (requestParameters.graphRequest === null || requestParameters.graphRequest === undefined) {
            throw new runtime.RequiredError('graphRequest','Required parameter requestParameters.graphRequest was null or undefined when calling listLawyerLeadsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/console/lawyer-leads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GraphRequestToJSON(requestParameters.graphRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SqlResponseFromJSON(jsonValue));
    }

    /**
     * listLawyerLeads
     */
    async listLawyerLeadsUsingPOST(requestParameters: ListLawyerLeadsUsingPOSTRequest): Promise<SqlResponse> {
        const response = await this.listLawyerLeadsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * listPhoneCalls
     */
    async listPhoneCallsUsingGETRaw(requestParameters: ListPhoneCallsUsingGETRequest): Promise<runtime.ApiResponse<ListPhoneCallsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agentId !== undefined) {
            queryParameters['agentId'] = requestParameters.agentId;
        }

        if (requestParameters.agentName !== undefined) {
            queryParameters['agentName'] = requestParameters.agentName;
        }

        if (requestParameters.callQueueName !== undefined) {
            queryParameters['callQueueName'] = requestParameters.callQueueName;
        }

        if (requestParameters.callStatus !== undefined) {
            queryParameters['callStatus'] = requestParameters.callStatus;
        }

        if (requestParameters.callStatusName !== undefined) {
            queryParameters['callStatusName'] = requestParameters.callStatusName;
        }

        if (requestParameters.customerName !== undefined) {
            queryParameters['customerName'] = requestParameters.customerName;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.ivrName !== undefined) {
            queryParameters['ivrName'] = requestParameters.ivrName;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.shouldIncludePhoneCalls !== undefined) {
            queryParameters['shouldIncludePhoneCalls'] = requestParameters.shouldIncludePhoneCalls;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.teamName !== undefined) {
            queryParameters['teamName'] = requestParameters.teamName;
        }

        if (requestParameters.timeZoneId !== undefined) {
            queryParameters['timeZoneId'] = requestParameters.timeZoneId;
        }

        if (requestParameters.totalCalls !== undefined) {
            queryParameters['totalCalls'] = requestParameters.totalCalls;
        }

        if (requestParameters.totalOtrAccounts !== undefined) {
            queryParameters['totalOtrAccounts'] = requestParameters.totalOtrAccounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/console/phone-calls`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPhoneCallsResponseFromJSON(jsonValue));
    }

    /**
     * listPhoneCalls
     */
    async listPhoneCallsUsingGET(requestParameters: ListPhoneCallsUsingGETRequest): Promise<ListPhoneCallsResponse> {
        const response = await this.listPhoneCallsUsingGETRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListPhoneCallsUsingGETCallStatusEnum {
    ABANDONED = 'ABANDONED',
    BLOCKED = 'BLOCKED',
    BUSY = 'BUSY',
    COMPLETED = 'COMPLETED',
    CONNECTING = 'CONNECTING',
    CONNECTIONFAILED = 'CONNECTION_FAILED',
    DEFAULT = 'DEFAULT',
    DISCONNECTED = 'DISCONNECTED',
    ENQUEUED = 'ENQUEUED',
    INPROGRESS = 'IN_PROGRESS',
    MISSEDCALL = 'MISSED_CALL',
    ONHOLD = 'ON_HOLD',
    RECENTLYCOMPLETED = 'RECENTLY_COMPLETED',
    RESTRICTED = 'RESTRICTED',
    VOICEMAIL = 'VOICEMAIL',
    VOICEMAILRECORDINGINPROGRESS = 'VOICEMAIL_RECORDING_IN_PROGRESS'
}
/**
    * @export
    * @enum {string}
    */
export enum ListPhoneCallsUsingGETDirectionEnum {
    INCOMING = 'INCOMING',
    OUTGOING = 'OUTGOING'
}
