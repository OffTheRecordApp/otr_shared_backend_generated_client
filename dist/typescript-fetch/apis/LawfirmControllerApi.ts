/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateNewLawfirmRequest,
    CreateNewLawfirmRequestFromJSON,
    CreateNewLawfirmRequestToJSON,
    GetLawfirmAddressesResponse,
    GetLawfirmAddressesResponseFromJSON,
    GetLawfirmAddressesResponseToJSON,
    GetLawfirmCaseStatsResponse,
    GetLawfirmCaseStatsResponseFromJSON,
    GetLawfirmCaseStatsResponseToJSON,
    GetLawfirmInboxMessagesResponse,
    GetLawfirmInboxMessagesResponseFromJSON,
    GetLawfirmInboxMessagesResponseToJSON,
    GetLawfirmJobTitleResponse,
    GetLawfirmJobTitleResponseFromJSON,
    GetLawfirmJobTitleResponseToJSON,
    GetLawfirmLawyersResponse,
    GetLawfirmLawyersResponseFromJSON,
    GetLawfirmLawyersResponseToJSON,
    GetLawfirmResponse,
    GetLawfirmResponseFromJSON,
    GetLawfirmResponseToJSON,
    GetLawfirmSupportedStatesResponse,
    GetLawfirmSupportedStatesResponseFromJSON,
    GetLawfirmSupportedStatesResponseToJSON,
    GetLawfirmsResponse,
    GetLawfirmsResponseFromJSON,
    GetLawfirmsResponseToJSON,
    GetStripeConnectedAccountsResponse,
    GetStripeConnectedAccountsResponseFromJSON,
    GetStripeConnectedAccountsResponseToJSON,
    IntercomSearchTicketsResponse,
    IntercomSearchTicketsResponseFromJSON,
    IntercomSearchTicketsResponseToJSON,
    LawfirmPictureRequest,
    LawfirmPictureRequestFromJSON,
    LawfirmPictureRequestToJSON,
    LawfirmVacationRequest,
    LawfirmVacationRequestFromJSON,
    LawfirmVacationRequestToJSON,
    UpdateLawfirmPaymentModelRequest,
    UpdateLawfirmPaymentModelRequestFromJSON,
    UpdateLawfirmPaymentModelRequestToJSON,
    UpdateLawfirmRequest,
    UpdateLawfirmRequestFromJSON,
    UpdateLawfirmRequestToJSON,
    UpdateLawyerRoleRequest,
    UpdateLawyerRoleRequestFromJSON,
    UpdateLawyerRoleRequestToJSON,
    UploadLawfirmsRequest,
    UploadLawfirmsRequestFromJSON,
    UploadLawfirmsRequestToJSON,
    UploadLawfirmsResponse,
    UploadLawfirmsResponseFromJSON,
    UploadLawfirmsResponseToJSON,
    UpsertAddressRequest,
    UpsertAddressRequestFromJSON,
    UpsertAddressRequestToJSON,
} from '../models';

export interface AddLawfirmAddressUsingPOSTRequest {
    lawfirmId: number;
    request: UpsertAddressRequest;
}

export interface CreateLawfirmUsingPOSTRequest {
    request: CreateNewLawfirmRequest;
}

export interface DeleteLawfirmConnectedAccountUsingDELETERequest {
    lawfirmId: number;
    stripeAccountId: string;
}

export interface DeleteLawfirmCoverPhotoUsingDELETERequest {
    lawfirmId: string;
}

export interface GetInboxMessagesUsingGETRequest {
    lawfirmId: number;
    caseStatuses?: GetInboxMessagesUsingGETCaseStatusesEnum;
    courtDateFilter?: GetInboxMessagesUsingGETCourtDateFilterEnum;
    filter?: GetInboxMessagesUsingGETFilterEnum;
    latestMessageBy?: GetInboxMessagesUsingGETLatestMessageByEnum;
    length?: number;
    page?: number;
    query?: string;
    statusCategories?: GetInboxMessagesUsingGETStatusCategoriesEnum;
}

export interface GetLawfirmAddressesUsingGETRequest {
    lawfirmId: number;
}

export interface GetLawfirmByPrimaryEmailUsingGETRequest {
    primaryLawfirmEmail: string;
}

export interface GetLawfirmByUrlUsingGETRequest {
    seoUrl: string;
}

export interface GetLawfirmCaseStatsUsingGETRequest {
    lawfirmId: number;
}

export interface GetLawfirmLawyersUsingGETRequest {
    lawfirmId: number;
    settingName?: string;
}

export interface GetLawfirmSupportTicketsUsingGETRequest {
    lawfirmId: number;
    limit?: number;
}

export interface GetLawfirmUsingGETRequest {
    lawfirmIdString: string;
    isDetailsRequired?: boolean;
}

export interface GetLawfirmsUsingGETRequest {
    acceptsAccidentTickets?: boolean;
    acceptsPastDueTickets?: boolean;
    includeTestLawfirms?: boolean;
    includeVacationMode?: boolean;
    q?: string;
    states?: GetLawfirmsUsingGETStatesEnum;
    statusCategories?: GetLawfirmsUsingGETStatusCategoriesEnum;
    statuses?: GetLawfirmsUsingGETStatusesEnum;
}

export interface GetOtrLawfirmNotesUsingGETRequest {
    lawfirmId: string;
}

export interface GetStripeConnectedAccountsUsingGETRequest {
    lawfirmId: number;
}

export interface GetSupportedStatesForLawfirmUsingGETRequest {
    lawfirmId: number;
}

export interface SetVacationModeUsingPOSTRequest {
    lawfirmId: number;
    request: LawfirmVacationRequest;
}

export interface UpdateLawfirmAddressUsingPUTRequest {
    addressId: number;
    lawfirmId: number;
    request: UpsertAddressRequest;
}

export interface UpdateLawfirmUsingPUTRequest {
    lawfirmIdString: string;
    request: UpdateLawfirmRequest;
}

export interface UpdateLawfirmWithPictureUsingPUTRequest {
    lawfirmId: string;
    request: LawfirmPictureRequest;
}

export interface UpdateLawyerRoleUsingPUTRequest {
    lawfirmId: number;
    userId: number;
    request: UpdateLawyerRoleRequest;
}

export interface UpdatePaymentModelUsingPUTRequest {
    lawfirmId: number;
    request: UpdateLawfirmPaymentModelRequest;
}

export interface UploadLawfirmsUsingPOSTRequest {
    request: UploadLawfirmsRequest;
}

/**
 * 
 */
export class LawfirmControllerApi extends runtime.BaseAPI {

    /**
     * addLawfirmAddress
     */
    async addLawfirmAddressUsingPOSTRaw(requestParameters: AddLawfirmAddressUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling addLawfirmAddressUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addLawfirmAddressUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/addresses`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertAddressRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * addLawfirmAddress
     */
    async addLawfirmAddressUsingPOST(requestParameters: AddLawfirmAddressUsingPOSTRequest): Promise<void> {
        await this.addLawfirmAddressUsingPOSTRaw(requestParameters);
    }

    /**
     * createLawfirm
     */
    async createLawfirmUsingPOSTRaw(requestParameters: CreateLawfirmUsingPOSTRequest): Promise<runtime.ApiResponse<GetLawfirmResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createLawfirmUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNewLawfirmRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * createLawfirm
     */
    async createLawfirmUsingPOST(requestParameters: CreateLawfirmUsingPOSTRequest): Promise<GetLawfirmResponse> {
        const response = await this.createLawfirmUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteLawfirmConnectedAccount
     */
    async deleteLawfirmConnectedAccountUsingDELETERaw(requestParameters: DeleteLawfirmConnectedAccountUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
        }

        if (requestParameters.stripeAccountId === null || requestParameters.stripeAccountId === undefined) {
            throw new runtime.RequiredError('stripeAccountId','Required parameter requestParameters.stripeAccountId was null or undefined when calling deleteLawfirmConnectedAccountUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/stripe/account/{stripeAccountId}`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))).replace(`{${"stripeAccountId"}}`, encodeURIComponent(String(requestParameters.stripeAccountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteLawfirmConnectedAccount
     */
    async deleteLawfirmConnectedAccountUsingDELETE(requestParameters: DeleteLawfirmConnectedAccountUsingDELETERequest): Promise<void> {
        await this.deleteLawfirmConnectedAccountUsingDELETERaw(requestParameters);
    }

    /**
     * deleteLawfirmCoverPhoto
     */
    async deleteLawfirmCoverPhotoUsingDELETERaw(requestParameters: DeleteLawfirmCoverPhotoUsingDELETERequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling deleteLawfirmCoverPhotoUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/cover-photo`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * deleteLawfirmCoverPhoto
     */
    async deleteLawfirmCoverPhotoUsingDELETE(requestParameters: DeleteLawfirmCoverPhotoUsingDELETERequest): Promise<object> {
        const response = await this.deleteLawfirmCoverPhotoUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * getInboxMessages
     */
    async getInboxMessagesUsingGETRaw(requestParameters: GetInboxMessagesUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmInboxMessagesResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getInboxMessagesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.caseStatuses !== undefined) {
            queryParameters['caseStatuses'] = requestParameters.caseStatuses;
        }

        if (requestParameters.courtDateFilter !== undefined) {
            queryParameters['courtDateFilter'] = requestParameters.courtDateFilter;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.latestMessageBy !== undefined) {
            queryParameters['latestMessageBy'] = requestParameters.latestMessageBy;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.statusCategories !== undefined) {
            queryParameters['statusCategories'] = requestParameters.statusCategories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/inbox-messages`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmInboxMessagesResponseFromJSON(jsonValue));
    }

    /**
     * getInboxMessages
     */
    async getInboxMessagesUsingGET(requestParameters: GetInboxMessagesUsingGETRequest): Promise<GetLawfirmInboxMessagesResponse> {
        const response = await this.getInboxMessagesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmAddresses
     */
    async getLawfirmAddressesUsingGETRaw(requestParameters: GetLawfirmAddressesUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmAddressesResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmAddressesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/addresses`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmAddressesResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmAddresses
     */
    async getLawfirmAddressesUsingGET(requestParameters: GetLawfirmAddressesUsingGETRequest): Promise<GetLawfirmAddressesResponse> {
        const response = await this.getLawfirmAddressesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmByPrimaryEmail
     */
    async getLawfirmByPrimaryEmailUsingGETRaw(requestParameters: GetLawfirmByPrimaryEmailUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmResponse>> {
        if (requestParameters.primaryLawfirmEmail === null || requestParameters.primaryLawfirmEmail === undefined) {
            throw new runtime.RequiredError('primaryLawfirmEmail','Required parameter requestParameters.primaryLawfirmEmail was null or undefined when calling getLawfirmByPrimaryEmailUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/email/{primaryLawfirmEmail}`.replace(`{${"primaryLawfirmEmail"}}`, encodeURIComponent(String(requestParameters.primaryLawfirmEmail))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmByPrimaryEmail
     */
    async getLawfirmByPrimaryEmailUsingGET(requestParameters: GetLawfirmByPrimaryEmailUsingGETRequest): Promise<GetLawfirmResponse> {
        const response = await this.getLawfirmByPrimaryEmailUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmByUrl
     */
    async getLawfirmByUrlUsingGETRaw(requestParameters: GetLawfirmByUrlUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmResponse>> {
        if (requestParameters.seoUrl === null || requestParameters.seoUrl === undefined) {
            throw new runtime.RequiredError('seoUrl','Required parameter requestParameters.seoUrl was null or undefined when calling getLawfirmByUrlUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.seoUrl !== undefined) {
            queryParameters['seoUrl'] = requestParameters.seoUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmByUrl
     */
    async getLawfirmByUrlUsingGET(requestParameters: GetLawfirmByUrlUsingGETRequest): Promise<GetLawfirmResponse> {
        const response = await this.getLawfirmByUrlUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmCaseStats
     */
    async getLawfirmCaseStatsUsingGETRaw(requestParameters: GetLawfirmCaseStatsUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmCaseStatsResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmCaseStatsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/cases/stats`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmCaseStatsResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmCaseStats
     */
    async getLawfirmCaseStatsUsingGET(requestParameters: GetLawfirmCaseStatsUsingGETRequest): Promise<GetLawfirmCaseStatsResponse> {
        const response = await this.getLawfirmCaseStatsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmJobTitles
     */
    async getLawfirmJobTitlesUsingGETRaw(): Promise<runtime.ApiResponse<GetLawfirmJobTitleResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/job-titles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmJobTitleResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmJobTitles
     */
    async getLawfirmJobTitlesUsingGET(): Promise<GetLawfirmJobTitleResponse> {
        const response = await this.getLawfirmJobTitlesUsingGETRaw();
        return await response.value();
    }

    /**
     * getLawfirmLawyers
     */
    async getLawfirmLawyersUsingGETRaw(requestParameters: GetLawfirmLawyersUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmLawyersResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmLawyersUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.settingName !== undefined) {
            queryParameters['settingName'] = requestParameters.settingName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/lawyers`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmLawyersResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmLawyers
     */
    async getLawfirmLawyersUsingGET(requestParameters: GetLawfirmLawyersUsingGETRequest): Promise<GetLawfirmLawyersResponse> {
        const response = await this.getLawfirmLawyersUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmStatuses
     */
    async getLawfirmStatusesUsingGETRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getLawfirmStatuses
     */
    async getLawfirmStatusesUsingGET(): Promise<object> {
        const response = await this.getLawfirmStatusesUsingGETRaw();
        return await response.value();
    }

    /**
     * getLawfirmSupportTickets
     */
    async getLawfirmSupportTicketsUsingGETRaw(requestParameters: GetLawfirmSupportTicketsUsingGETRequest): Promise<runtime.ApiResponse<IntercomSearchTicketsResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmSupportTicketsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/lawfirms/{lawfirmId}/support-tickets`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IntercomSearchTicketsResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmSupportTickets
     */
    async getLawfirmSupportTicketsUsingGET(requestParameters: GetLawfirmSupportTicketsUsingGETRequest): Promise<IntercomSearchTicketsResponse> {
        const response = await this.getLawfirmSupportTicketsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirm
     */
    async getLawfirmUsingGETRaw(requestParameters: GetLawfirmUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmResponse>> {
        if (requestParameters.lawfirmIdString === null || requestParameters.lawfirmIdString === undefined) {
            throw new runtime.RequiredError('lawfirmIdString','Required parameter requestParameters.lawfirmIdString was null or undefined when calling getLawfirmUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isDetailsRequired !== undefined) {
            queryParameters['isDetailsRequired'] = requestParameters.isDetailsRequired;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmIdString}`.replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(requestParameters.lawfirmIdString))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirm
     */
    async getLawfirmUsingGET(requestParameters: GetLawfirmUsingGETRequest): Promise<GetLawfirmResponse> {
        const response = await this.getLawfirmUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirms
     */
    async getLawfirmsUsingGETRaw(requestParameters: GetLawfirmsUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.acceptsAccidentTickets !== undefined) {
            queryParameters['acceptsAccidentTickets'] = requestParameters.acceptsAccidentTickets;
        }

        if (requestParameters.acceptsPastDueTickets !== undefined) {
            queryParameters['acceptsPastDueTickets'] = requestParameters.acceptsPastDueTickets;
        }

        if (requestParameters.includeTestLawfirms !== undefined) {
            queryParameters['includeTestLawfirms'] = requestParameters.includeTestLawfirms;
        }

        if (requestParameters.includeVacationMode !== undefined) {
            queryParameters['includeVacationMode'] = requestParameters.includeVacationMode;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.states !== undefined) {
            queryParameters['states'] = requestParameters.states;
        }

        if (requestParameters.statusCategories !== undefined) {
            queryParameters['statusCategories'] = requestParameters.statusCategories;
        }

        if (requestParameters.statuses !== undefined) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmsResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirms
     */
    async getLawfirmsUsingGET(requestParameters: GetLawfirmsUsingGETRequest): Promise<GetLawfirmsResponse> {
        const response = await this.getLawfirmsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getOtrLawfirmNotes
     */
    async getOtrLawfirmNotesUsingGETRaw(requestParameters: GetOtrLawfirmNotesUsingGETRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getOtrLawfirmNotesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/otr-notes`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getOtrLawfirmNotes
     */
    async getOtrLawfirmNotesUsingGET(requestParameters: GetOtrLawfirmNotesUsingGETRequest): Promise<object> {
        const response = await this.getOtrLawfirmNotesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getStripeConnectedAccounts
     */
    async getStripeConnectedAccountsUsingGETRaw(requestParameters: GetStripeConnectedAccountsUsingGETRequest): Promise<runtime.ApiResponse<GetStripeConnectedAccountsResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getStripeConnectedAccountsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/stripe`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStripeConnectedAccountsResponseFromJSON(jsonValue));
    }

    /**
     * getStripeConnectedAccounts
     */
    async getStripeConnectedAccountsUsingGET(requestParameters: GetStripeConnectedAccountsUsingGETRequest): Promise<GetStripeConnectedAccountsResponse> {
        const response = await this.getStripeConnectedAccountsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getSupportedStatesForLawfirm
     */
    async getSupportedStatesForLawfirmUsingGETRaw(requestParameters: GetSupportedStatesForLawfirmUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmSupportedStatesResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getSupportedStatesForLawfirmUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/supported-states`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmSupportedStatesResponseFromJSON(jsonValue));
    }

    /**
     * getSupportedStatesForLawfirm
     */
    async getSupportedStatesForLawfirmUsingGET(requestParameters: GetSupportedStatesForLawfirmUsingGETRequest): Promise<GetLawfirmSupportedStatesResponse> {
        const response = await this.getSupportedStatesForLawfirmUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * setVacationMode
     */
    async setVacationModeUsingPOSTRaw(requestParameters: SetVacationModeUsingPOSTRequest): Promise<runtime.ApiResponse<GetLawfirmResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling setVacationModeUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling setVacationModeUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/vacation`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LawfirmVacationRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * setVacationMode
     */
    async setVacationModeUsingPOST(requestParameters: SetVacationModeUsingPOSTRequest): Promise<GetLawfirmResponse> {
        const response = await this.setVacationModeUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateLawfirmAddress
     */
    async updateLawfirmAddressUsingPUTRaw(requestParameters: UpdateLawfirmAddressUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateLawfirmAddressUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))).replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertAddressRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateLawfirmAddress
     */
    async updateLawfirmAddressUsingPUT(requestParameters: UpdateLawfirmAddressUsingPUTRequest): Promise<void> {
        await this.updateLawfirmAddressUsingPUTRaw(requestParameters);
    }

    /**
     * updateLawfirm
     */
    async updateLawfirmUsingPUTRaw(requestParameters: UpdateLawfirmUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmIdString === null || requestParameters.lawfirmIdString === undefined) {
            throw new runtime.RequiredError('lawfirmIdString','Required parameter requestParameters.lawfirmIdString was null or undefined when calling updateLawfirmUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateLawfirmUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmIdString}`.replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(requestParameters.lawfirmIdString))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLawfirmRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * updateLawfirm
     */
    async updateLawfirmUsingPUT(requestParameters: UpdateLawfirmUsingPUTRequest): Promise<object> {
        const response = await this.updateLawfirmUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateLawfirmWithPicture
     */
    async updateLawfirmWithPictureUsingPUTRaw(requestParameters: UpdateLawfirmWithPictureUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateLawfirmWithPictureUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/picture`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LawfirmPictureRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * updateLawfirmWithPicture
     */
    async updateLawfirmWithPictureUsingPUT(requestParameters: UpdateLawfirmWithPictureUsingPUTRequest): Promise<object> {
        const response = await this.updateLawfirmWithPictureUsingPUTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateLawyerRole
     */
    async updateLawyerRoleUsingPUTRaw(requestParameters: UpdateLawyerRoleUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling updateLawyerRoleUsingPUT.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateLawyerRoleUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateLawyerRoleUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/lawyers/{userId}/update-role`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLawyerRoleRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateLawyerRole
     */
    async updateLawyerRoleUsingPUT(requestParameters: UpdateLawyerRoleUsingPUTRequest): Promise<void> {
        await this.updateLawyerRoleUsingPUTRaw(requestParameters);
    }

    /**
     * updatePaymentModel
     */
    async updatePaymentModelUsingPUTRaw(requestParameters: UpdatePaymentModelUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling updatePaymentModelUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updatePaymentModelUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/payment-model`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLawfirmPaymentModelRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updatePaymentModel
     */
    async updatePaymentModelUsingPUT(requestParameters: UpdatePaymentModelUsingPUTRequest): Promise<void> {
        await this.updatePaymentModelUsingPUTRaw(requestParameters);
    }

    /**
     * uploadLawfirms
     */
    async uploadLawfirmsUsingPOSTRaw(requestParameters: UploadLawfirmsUsingPOSTRequest): Promise<runtime.ApiResponse<UploadLawfirmsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling uploadLawfirmsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/bulk-upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadLawfirmsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadLawfirmsResponseFromJSON(jsonValue));
    }

    /**
     * uploadLawfirms
     */
    async uploadLawfirmsUsingPOST(requestParameters: UploadLawfirmsUsingPOSTRequest): Promise<UploadLawfirmsResponse> {
        const response = await this.uploadLawfirmsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetInboxMessagesUsingGETCaseStatusesEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum GetInboxMessagesUsingGETCourtDateFilterEnum {
    NOCOURTDATE = 'NO_COURT_DATE',
    PASTDUE = 'PAST_DUE',
    PASTDUEANDNOCOURTDATE = 'PAST_DUE_AND_NO_COURT_DATE',
    UPCOMING = 'UPCOMING'
}
/**
    * @export
    * @enum {string}
    */
export enum GetInboxMessagesUsingGETFilterEnum {
    ARCHIVE = 'ARCHIVE',
    DEFAULT = 'DEFAULT',
    FLAGONLY = 'FLAG_ONLY',
    STARONLY = 'STAR_ONLY'
}
/**
    * @export
    * @enum {string}
    */
export enum GetInboxMessagesUsingGETLatestMessageByEnum {
    ADMIN = 'ADMIN',
    CLIENT = 'CLIENT',
    LAWYER = 'LAWYER'
}
/**
    * @export
    * @enum {string}
    */
export enum GetInboxMessagesUsingGETStatusCategoriesEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmsUsingGETStatesEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmsUsingGETStatusCategoriesEnum {
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE',
    LEAD = 'LEAD',
    NOTINTERESTED = 'NOT_INTERESTED',
    REJECTED = 'REJECTED',
    TERMINATED = 'TERMINATED'
}
/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmsUsingGETStatusesEnum {
    ACCOUNTCLOSED = 'ACCOUNT_CLOSED',
    ACTIVE = 'ACTIVE',
    BLACKLISTED = 'BLACKLISTED',
    DEMOCOMPLETED = 'DEMO_COMPLETED',
    DUPLICATE = 'DUPLICATE',
    FUTURELEAD = 'FUTURE_LEAD',
    LEAD = 'LEAD',
    NEWPARTNER = 'NEW_PARTNER',
    NOTAGOODFIT = 'NOT_A_GOOD_FIT',
    NOTINTERESTEDDONOTCONTACT = 'NOT_INTERESTED_DO_NOT_CONTACT',
    NOTINTERESTEDFEESPLITTING = 'NOT_INTERESTED_FEE_SPLITTING',
    NOTINTERESTEDMARKETINGFEE = 'NOT_INTERESTED_MARKETING_FEE',
    NOTINTERESTEDMONEYBACKGUARANTEE = 'NOT_INTERESTED_MONEY_BACK_GUARANTEE',
    NOTINTERESTEDPLATFORMRESISTANCE = 'NOT_INTERESTED_PLATFORM_RESISTANCE',
    PASTINTEREST = 'PAST_INTEREST',
    SUPERVISED = 'SUPERVISED',
    TEMPORARILYTURNEDOFF = 'TEMPORARILY_TURNED_OFF',
    TERMINATEDFRAUD = 'TERMINATED_FRAUD',
    TERMINATEDPOORSERVICE = 'TERMINATED_POOR_SERVICE',
    TERMINATEDPOORSUCCESS = 'TERMINATED_POOR_SUCCESS'
}
