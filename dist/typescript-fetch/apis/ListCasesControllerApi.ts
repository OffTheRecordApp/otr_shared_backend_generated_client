/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetClientCasesResponse,
    GetClientCasesResponseFromJSON,
    GetClientCasesResponseToJSON,
    GetUserCasesResponse,
    GetUserCasesResponseFromJSON,
    GetUserCasesResponseToJSON,
    ListDashboardCasesResponse,
    ListDashboardCasesResponseFromJSON,
    ListDashboardCasesResponseToJSON,
} from '../models';

export interface GetCasesForUserUsingGETRequest {
    userId: string;
}

export interface GetUserCasesUsingGETRequest {
    userId: number;
}

export interface ListDashboardCasesUsingGETRequest {
    userId: number;
    caseStatuses?: ListDashboardCasesUsingGETCaseStatusesEnum;
    includeDeleted?: boolean;
    limit?: number;
    previousPageToken?: string;
    sortBy?: ListDashboardCasesUsingGETSortByEnum;
    statusCategories?: ListDashboardCasesUsingGETStatusCategoriesEnum;
}

/**
 * 
 */
export class ListCasesControllerApi extends runtime.BaseAPI {

    /**
     * getCasesForUser
     */
    async getCasesForUserUsingGETRaw(requestParameters: GetCasesForUserUsingGETRequest): Promise<runtime.ApiResponse<GetClientCasesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getCasesForUserUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/cases`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClientCasesResponseFromJSON(jsonValue));
    }

    /**
     * getCasesForUser
     */
    async getCasesForUserUsingGET(requestParameters: GetCasesForUserUsingGETRequest): Promise<GetClientCasesResponse> {
        const response = await this.getCasesForUserUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getUserCases
     */
    async getUserCasesUsingGETRaw(requestParameters: GetUserCasesUsingGETRequest): Promise<runtime.ApiResponse<GetUserCasesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserCasesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/users/{userId}/cases`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserCasesResponseFromJSON(jsonValue));
    }

    /**
     * getUserCases
     */
    async getUserCasesUsingGET(requestParameters: GetUserCasesUsingGETRequest): Promise<GetUserCasesResponse> {
        const response = await this.getUserCasesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * listDashboardCases
     */
    async listDashboardCasesUsingGETRaw(requestParameters: ListDashboardCasesUsingGETRequest): Promise<runtime.ApiResponse<ListDashboardCasesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listDashboardCasesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.caseStatuses !== undefined) {
            queryParameters['caseStatuses'] = requestParameters.caseStatuses;
        }

        if (requestParameters.includeDeleted !== undefined) {
            queryParameters['includeDeleted'] = requestParameters.includeDeleted;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.previousPageToken !== undefined) {
            queryParameters['previousPageToken'] = requestParameters.previousPageToken;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.statusCategories !== undefined) {
            queryParameters['statusCategories'] = requestParameters.statusCategories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v3/users/{userId}/cases`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDashboardCasesResponseFromJSON(jsonValue));
    }

    /**
     * listDashboardCases
     */
    async listDashboardCasesUsingGET(requestParameters: ListDashboardCasesUsingGETRequest): Promise<ListDashboardCasesResponse> {
        const response = await this.listDashboardCasesUsingGETRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListDashboardCasesUsingGETCaseStatusesEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
    * @export
    * @enum {string}
    */
export enum ListDashboardCasesUsingGETSortByEnum {
    BOOKINGCONFIRMEDDATE = 'BOOKING_CONFIRMED_DATE',
    CITATIONCREATIONDATE = 'CITATION_CREATION_DATE',
    CITATIONISSUEDATE = 'CITATION_ISSUE_DATE',
    LASTCITATIONUPDATEDATE = 'LAST_CITATION_UPDATE_DATE'
}
/**
    * @export
    * @enum {string}
    */
export enum ListDashboardCasesUsingGETStatusCategoriesEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
