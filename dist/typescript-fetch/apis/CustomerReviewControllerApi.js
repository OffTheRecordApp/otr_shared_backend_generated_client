/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AddReviewRequestToJSON, EditCustomerReviewRequestToJSON, ListEligibleStatusResponseFromJSON, ListReviewsResponseFromJSON, ReplyToReviewRequestToJSON, SetCustomerReviewStatusRequestToJSON, UpdateReplyForCustomerReviewToJSON, } from '../models';
/**
 *
 */
export class CustomerReviewControllerApi extends runtime.BaseAPI {
    /**
     * addCustomerReview
     */
    addCustomerReviewUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.addReviewRequest === null || requestParameters.addReviewRequest === undefined) {
                throw new runtime.RequiredError('addReviewRequest', 'Required parameter requestParameters.addReviewRequest was null or undefined when calling addCustomerReviewUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/reviews`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AddReviewRequestToJSON(requestParameters.addReviewRequest),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * addCustomerReview
     */
    addCustomerReviewUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.addCustomerReviewUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * editCustomerReview
     */
    editCustomerReviewUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
                throw new runtime.RequiredError('reviewId', 'Required parameter requestParameters.reviewId was null or undefined when calling editCustomerReviewUsingPUT.');
            }
            if (requestParameters.editCustomerReviewRequest === null || requestParameters.editCustomerReviewRequest === undefined) {
                throw new runtime.RequiredError('editCustomerReviewRequest', 'Required parameter requestParameters.editCustomerReviewRequest was null or undefined when calling editCustomerReviewUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/reviews/api/v1/reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: EditCustomerReviewRequestToJSON(requestParameters.editCustomerReviewRequest),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * editCustomerReview
     */
    editCustomerReviewUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.editCustomerReviewUsingPUTRaw(requestParameters);
        });
    }
    /**
     * listCustomerReviews
     */
    listCustomerReviewsUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.includeAnonymous !== undefined) {
                queryParameters['includeAnonymous'] = requestParameters.includeAnonymous;
            }
            if (requestParameters.includeDeleted !== undefined) {
                queryParameters['includeDeleted'] = requestParameters.includeDeleted;
            }
            if (requestParameters.includeRatings !== undefined) {
                queryParameters['includeRatings'] = requestParameters.includeRatings;
            }
            if (requestParameters.isFeatured !== undefined) {
                queryParameters['isFeatured'] = requestParameters.isFeatured;
            }
            if (requestParameters.lawfirmId !== undefined) {
                queryParameters['lawfirmId'] = requestParameters.lawfirmId;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.nextPageToken !== undefined) {
                queryParameters['nextPageToken'] = requestParameters.nextPageToken;
            }
            if (requestParameters.previousPageToken !== undefined) {
                queryParameters['previousPageToken'] = requestParameters.previousPageToken;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.tags !== undefined) {
                queryParameters['tags'] = requestParameters.tags;
            }
            if (requestParameters.version !== undefined) {
                queryParameters['version'] = requestParameters.version;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/reviews`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => ListReviewsResponseFromJSON(jsonValue));
        });
    }
    /**
     * listCustomerReviews
     */
    listCustomerReviewsUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listCustomerReviewsUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * listEligibleStatusesForReview
     */
    listEligibleStatusesForReviewUsingGETRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/reviews/eligible-statuses`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => ListEligibleStatusResponseFromJSON(jsonValue));
        });
    }
    /**
     * listEligibleStatusesForReview
     */
    listEligibleStatusesForReviewUsingGET() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listEligibleStatusesForReviewUsingGETRaw();
            return yield response.value();
        });
    }
    /**
     * markCommentWithVote
     */
    markCommentWithVoteUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
                throw new runtime.RequiredError('commentId', 'Required parameter requestParameters.commentId was null or undefined when calling markCommentWithVoteUsingPUT.');
            }
            if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
                throw new runtime.RequiredError('reviewId', 'Required parameter requestParameters.reviewId was null or undefined when calling markCommentWithVoteUsingPUT.');
            }
            const queryParameters = {};
            if (requestParameters.like !== undefined) {
                queryParameters['like'] = requestParameters.like;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/reviews/{reviewId}/comments/{commentId}/vote`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * markCommentWithVote
     */
    markCommentWithVoteUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.markCommentWithVoteUsingPUTRaw(requestParameters);
        });
    }
    /**
     * markReviewWithVote
     */
    markReviewWithVoteUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
                throw new runtime.RequiredError('reviewId', 'Required parameter requestParameters.reviewId was null or undefined when calling markReviewWithVoteUsingPUT.');
            }
            const queryParameters = {};
            if (requestParameters.helpful !== undefined) {
                queryParameters['helpful'] = requestParameters.helpful;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/reviews/{reviewId}/vote`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * markReviewWithVote
     */
    markReviewWithVoteUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.markReviewWithVoteUsingPUTRaw(requestParameters);
        });
    }
    /**
     * replyToCustomerReview
     */
    replyToCustomerReviewUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
                throw new runtime.RequiredError('reviewId', 'Required parameter requestParameters.reviewId was null or undefined when calling replyToCustomerReviewUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling replyToCustomerReviewUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/reviews/{reviewId}/comments`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ReplyToReviewRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * replyToCustomerReview
     */
    replyToCustomerReviewUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.replyToCustomerReviewUsingPOSTRaw(requestParameters);
        });
    }
    /**
     * setCustomerReviewStatus
     */
    setCustomerReviewStatusUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
                throw new runtime.RequiredError('reviewId', 'Required parameter requestParameters.reviewId was null or undefined when calling setCustomerReviewStatusUsingPUT.');
            }
            if (requestParameters.setCustomerReviewStatusRequest === null || requestParameters.setCustomerReviewStatusRequest === undefined) {
                throw new runtime.RequiredError('setCustomerReviewStatusRequest', 'Required parameter requestParameters.setCustomerReviewStatusRequest was null or undefined when calling setCustomerReviewStatusUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/reviews/api/v1/reviews/{reviewId}/status`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SetCustomerReviewStatusRequestToJSON(requestParameters.setCustomerReviewStatusRequest),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * setCustomerReviewStatus
     */
    setCustomerReviewStatusUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setCustomerReviewStatusUsingPUTRaw(requestParameters);
        });
    }
    /**
     * updateCommentForCustomerReview
     */
    updateCommentForCustomerReviewUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
                throw new runtime.RequiredError('commentId', 'Required parameter requestParameters.commentId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
            }
            if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
                throw new runtime.RequiredError('reviewId', 'Required parameter requestParameters.reviewId was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateCommentForCustomerReviewUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/reviews/{reviewId}/comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateReplyForCustomerReviewToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * updateCommentForCustomerReview
     */
    updateCommentForCustomerReviewUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateCommentForCustomerReviewUsingPOSTRaw(requestParameters);
        });
    }
}
/**
    * @export
    * @enum {string}
    */
export var ListCustomerReviewsUsingGETStateEnum;
(function (ListCustomerReviewsUsingGETStateEnum) {
    ListCustomerReviewsUsingGETStateEnum["AK"] = "AK";
    ListCustomerReviewsUsingGETStateEnum["AL"] = "AL";
    ListCustomerReviewsUsingGETStateEnum["AR"] = "AR";
    ListCustomerReviewsUsingGETStateEnum["AZ"] = "AZ";
    ListCustomerReviewsUsingGETStateEnum["CA"] = "CA";
    ListCustomerReviewsUsingGETStateEnum["CO"] = "CO";
    ListCustomerReviewsUsingGETStateEnum["CT"] = "CT";
    ListCustomerReviewsUsingGETStateEnum["DC"] = "DC";
    ListCustomerReviewsUsingGETStateEnum["DE"] = "DE";
    ListCustomerReviewsUsingGETStateEnum["FL"] = "FL";
    ListCustomerReviewsUsingGETStateEnum["GA"] = "GA";
    ListCustomerReviewsUsingGETStateEnum["HI"] = "HI";
    ListCustomerReviewsUsingGETStateEnum["IA"] = "IA";
    ListCustomerReviewsUsingGETStateEnum["ID"] = "ID";
    ListCustomerReviewsUsingGETStateEnum["IL"] = "IL";
    ListCustomerReviewsUsingGETStateEnum["IN"] = "IN";
    ListCustomerReviewsUsingGETStateEnum["KS"] = "KS";
    ListCustomerReviewsUsingGETStateEnum["KY"] = "KY";
    ListCustomerReviewsUsingGETStateEnum["LA"] = "LA";
    ListCustomerReviewsUsingGETStateEnum["MA"] = "MA";
    ListCustomerReviewsUsingGETStateEnum["MD"] = "MD";
    ListCustomerReviewsUsingGETStateEnum["ME"] = "ME";
    ListCustomerReviewsUsingGETStateEnum["MI"] = "MI";
    ListCustomerReviewsUsingGETStateEnum["MN"] = "MN";
    ListCustomerReviewsUsingGETStateEnum["MO"] = "MO";
    ListCustomerReviewsUsingGETStateEnum["MS"] = "MS";
    ListCustomerReviewsUsingGETStateEnum["MT"] = "MT";
    ListCustomerReviewsUsingGETStateEnum["NC"] = "NC";
    ListCustomerReviewsUsingGETStateEnum["ND"] = "ND";
    ListCustomerReviewsUsingGETStateEnum["NE"] = "NE";
    ListCustomerReviewsUsingGETStateEnum["NH"] = "NH";
    ListCustomerReviewsUsingGETStateEnum["NJ"] = "NJ";
    ListCustomerReviewsUsingGETStateEnum["NM"] = "NM";
    ListCustomerReviewsUsingGETStateEnum["NV"] = "NV";
    ListCustomerReviewsUsingGETStateEnum["NY"] = "NY";
    ListCustomerReviewsUsingGETStateEnum["OH"] = "OH";
    ListCustomerReviewsUsingGETStateEnum["OK"] = "OK";
    ListCustomerReviewsUsingGETStateEnum["OR"] = "OR";
    ListCustomerReviewsUsingGETStateEnum["PA"] = "PA";
    ListCustomerReviewsUsingGETStateEnum["RI"] = "RI";
    ListCustomerReviewsUsingGETStateEnum["SC"] = "SC";
    ListCustomerReviewsUsingGETStateEnum["SD"] = "SD";
    ListCustomerReviewsUsingGETStateEnum["TN"] = "TN";
    ListCustomerReviewsUsingGETStateEnum["TX"] = "TX";
    ListCustomerReviewsUsingGETStateEnum["UT"] = "UT";
    ListCustomerReviewsUsingGETStateEnum["VA"] = "VA";
    ListCustomerReviewsUsingGETStateEnum["VT"] = "VT";
    ListCustomerReviewsUsingGETStateEnum["WA"] = "WA";
    ListCustomerReviewsUsingGETStateEnum["WI"] = "WI";
    ListCustomerReviewsUsingGETStateEnum["WV"] = "WV";
    ListCustomerReviewsUsingGETStateEnum["WY"] = "WY";
})(ListCustomerReviewsUsingGETStateEnum || (ListCustomerReviewsUsingGETStateEnum = {}));
