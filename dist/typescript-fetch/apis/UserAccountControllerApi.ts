/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddExtraAccountRequest,
    AddExtraAccountRequestFromJSON,
    AddExtraAccountRequestToJSON,
} from '../models';

export interface AddExtraAccountUsingPOSTRequest {
    userId: string;
    request: AddExtraAccountRequest;
}

export interface RemoveAdditionalUserHandleUsingDELETERequest {
    userHandle: string;
    userId: number;
}

export interface SetPrimaryUserHandleUsingPUTRequest {
    userHandle: string;
    userId: number;
}

/**
 * 
 */
export class UserAccountControllerApi extends runtime.BaseAPI {

    /**
     * addExtraAccount
     */
    async addExtraAccountUsingPOSTRaw(requestParameters: AddExtraAccountUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addExtraAccountUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addExtraAccountUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/account`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddExtraAccountRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * addExtraAccount
     */
    async addExtraAccountUsingPOST(requestParameters: AddExtraAccountUsingPOSTRequest): Promise<void> {
        await this.addExtraAccountUsingPOSTRaw(requestParameters);
    }

    /**
     * removeAdditionalUserHandle
     */
    async removeAdditionalUserHandleUsingDELETERaw(requestParameters: RemoveAdditionalUserHandleUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userHandle === null || requestParameters.userHandle === undefined) {
            throw new runtime.RequiredError('userHandle','Required parameter requestParameters.userHandle was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeAdditionalUserHandleUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/accounts/{userHandle}`.replace(`{${"userHandle"}}`, encodeURIComponent(String(requestParameters.userHandle))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removeAdditionalUserHandle
     */
    async removeAdditionalUserHandleUsingDELETE(requestParameters: RemoveAdditionalUserHandleUsingDELETERequest): Promise<void> {
        await this.removeAdditionalUserHandleUsingDELETERaw(requestParameters);
    }

    /**
     * setPrimaryUserHandle
     */
    async setPrimaryUserHandleUsingPUTRaw(requestParameters: SetPrimaryUserHandleUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userHandle === null || requestParameters.userHandle === undefined) {
            throw new runtime.RequiredError('userHandle','Required parameter requestParameters.userHandle was null or undefined when calling setPrimaryUserHandleUsingPUT.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling setPrimaryUserHandleUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/accounts/{userHandle}/set-primary-user-handle`.replace(`{${"userHandle"}}`, encodeURIComponent(String(requestParameters.userHandle))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setPrimaryUserHandle
     */
    async setPrimaryUserHandleUsingPUT(requestParameters: SetPrimaryUserHandleUsingPUTRequest): Promise<void> {
        await this.setPrimaryUserHandleUsingPUTRaw(requestParameters);
    }

}
