/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeleteLawyerLicenseRequest,
    DeleteLawyerLicenseRequestFromJSON,
    DeleteLawyerLicenseRequestToJSON,
    GetLawyerResponse,
    GetLawyerResponseFromJSON,
    GetLawyerResponseToJSON,
    InviteLawyerToLawfirmRequest,
    InviteLawyerToLawfirmRequestFromJSON,
    InviteLawyerToLawfirmRequestToJSON,
    SaveLawyerLeadRequest,
    SaveLawyerLeadRequestFromJSON,
    SaveLawyerLeadRequestToJSON,
    SaveLawyerLicensesRequest,
    SaveLawyerLicensesRequestFromJSON,
    SaveLawyerLicensesRequestToJSON,
    SaveLawyerRequest,
    SaveLawyerRequestFromJSON,
    SaveLawyerRequestToJSON,
} from '../models';

export interface CancelLawyerInviteUsingDELETERequest {
    inviteeEmail: string;
    userId: number;
}

export interface DeleteLawyerLicensesUsingDELETERequest {
    userId: string;
    request: DeleteLawyerLicenseRequest;
}

export interface DeleteLawyerUsingDELETERequest {
    userId: number;
    removeAdminOnly?: boolean;
}

export interface GetLawyerEmailGuessesUsingGETRequest {
    lawyerId: number;
}

export interface GetLawyerUsingGETRequest {
    userId: number;
}

export interface InviteLawyerToLawfirmUsingPOSTRequest {
    lawfirmId: number;
    userId: number;
    request: InviteLawyerToLawfirmRequest;
}

export interface SaveLawyerLeadUsingPOSTRequest {
    request: SaveLawyerLeadRequest;
}

export interface SaveLawyerLicensesUsingPOSTRequest {
    userId: string;
    request: SaveLawyerLicensesRequest;
}

export interface UpsertLawyerUsingPOSTRequest {
    request: SaveLawyerRequest;
}

/**
 * 
 */
export class LawyerControllerApi extends runtime.BaseAPI {

    /**
     * cancelLawyerInvite
     */
    async cancelLawyerInviteUsingDELETERaw(requestParameters: CancelLawyerInviteUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteeEmail === null || requestParameters.inviteeEmail === undefined) {
            throw new runtime.RequiredError('inviteeEmail','Required parameter requestParameters.inviteeEmail was null or undefined when calling cancelLawyerInviteUsingDELETE.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling cancelLawyerInviteUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inviteeEmail !== undefined) {
            queryParameters['inviteeEmail'] = requestParameters.inviteeEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawyers/{userId}/invite`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * cancelLawyerInvite
     */
    async cancelLawyerInviteUsingDELETE(requestParameters: CancelLawyerInviteUsingDELETERequest): Promise<void> {
        await this.cancelLawyerInviteUsingDELETERaw(requestParameters);
    }

    /**
     * deleteLawyerLicenses
     */
    async deleteLawyerLicensesUsingDELETERaw(requestParameters: DeleteLawyerLicensesUsingDELETERequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling deleteLawyerLicensesUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawyers/{userId}/licenses`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteLawyerLicenseRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * deleteLawyerLicenses
     */
    async deleteLawyerLicensesUsingDELETE(requestParameters: DeleteLawyerLicensesUsingDELETERequest): Promise<object> {
        const response = await this.deleteLawyerLicensesUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteLawyer
     */
    async deleteLawyerUsingDELETERaw(requestParameters: DeleteLawyerUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteLawyerUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.removeAdminOnly !== undefined) {
            queryParameters['removeAdminOnly'] = requestParameters.removeAdminOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawyers/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteLawyer
     */
    async deleteLawyerUsingDELETE(requestParameters: DeleteLawyerUsingDELETERequest): Promise<void> {
        await this.deleteLawyerUsingDELETERaw(requestParameters);
    }

    /**
     * getLawyerEmailGuesses
     */
    async getLawyerEmailGuessesUsingGETRaw(requestParameters: GetLawyerEmailGuessesUsingGETRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawyerId === null || requestParameters.lawyerId === undefined) {
            throw new runtime.RequiredError('lawyerId','Required parameter requestParameters.lawyerId was null or undefined when calling getLawyerEmailGuessesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawyers/{lawyerId}/email-guesses`.replace(`{${"lawyerId"}}`, encodeURIComponent(String(requestParameters.lawyerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getLawyerEmailGuesses
     */
    async getLawyerEmailGuessesUsingGET(requestParameters: GetLawyerEmailGuessesUsingGETRequest): Promise<object> {
        const response = await this.getLawyerEmailGuessesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawyer
     */
    async getLawyerUsingGETRaw(requestParameters: GetLawyerUsingGETRequest): Promise<runtime.ApiResponse<GetLawyerResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getLawyerUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawyers/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawyerResponseFromJSON(jsonValue));
    }

    /**
     * getLawyer
     */
    async getLawyerUsingGET(requestParameters: GetLawyerUsingGETRequest): Promise<GetLawyerResponse> {
        const response = await this.getLawyerUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * inviteLawyerToLawfirm
     */
    async inviteLawyerToLawfirmUsingPOSTRaw(requestParameters: InviteLawyerToLawfirmUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling inviteLawyerToLawfirmUsingPOST.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling inviteLawyerToLawfirmUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling inviteLawyerToLawfirmUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/lawyers/{userId}/invite`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteLawyerToLawfirmRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * inviteLawyerToLawfirm
     */
    async inviteLawyerToLawfirmUsingPOST(requestParameters: InviteLawyerToLawfirmUsingPOSTRequest): Promise<void> {
        await this.inviteLawyerToLawfirmUsingPOSTRaw(requestParameters);
    }

    /**
     * saveLawyerLead
     */
    async saveLawyerLeadUsingPOSTRaw(requestParameters: SaveLawyerLeadUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveLawyerLeadUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawyers/lead`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveLawyerLeadRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * saveLawyerLead
     */
    async saveLawyerLeadUsingPOST(requestParameters: SaveLawyerLeadUsingPOSTRequest): Promise<object> {
        const response = await this.saveLawyerLeadUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * saveLawyerLicenses
     */
    async saveLawyerLicensesUsingPOSTRaw(requestParameters: SaveLawyerLicensesUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling saveLawyerLicensesUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveLawyerLicensesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawyers/{userId}/licenses`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveLawyerLicensesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * saveLawyerLicenses
     */
    async saveLawyerLicensesUsingPOST(requestParameters: SaveLawyerLicensesUsingPOSTRequest): Promise<object> {
        const response = await this.saveLawyerLicensesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * upsertLawyer
     */
    async upsertLawyerUsingPOSTRaw(requestParameters: UpsertLawyerUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling upsertLawyerUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawyers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveLawyerRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * upsertLawyer
     */
    async upsertLawyerUsingPOST(requestParameters: UpsertLawyerUsingPOSTRequest): Promise<object> {
        const response = await this.upsertLawyerUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
