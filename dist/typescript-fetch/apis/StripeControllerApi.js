/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CreateConnectAccountLinkRequestToJSON, CreateConnectAccountLinkResponseFromJSON, CreateStripeConnectAccountRequestToJSON, CreateStripeConnectAccountResponseFromJSON, HandleOrphanedStripeChargeRequestToJSON, HandleOrphanedStripeChargeResponseFromJSON, UpdateDisputeRequestToJSON, } from '../models';
/**
 *
 */
export class StripeControllerApi extends runtime.BaseAPI {
    /**
     * connectStripeAccount
     */
    connectStripeAccountUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime.RequiredError('code', 'Required parameter requestParameters.code was null or undefined when calling connectStripeAccountUsingPOST.');
            }
            const queryParameters = {};
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/stripe/connect`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * connectStripeAccount
     */
    connectStripeAccountUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectStripeAccountUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * createConnectAccountLink
     */
    createConnectAccountLinkUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling createConnectAccountLinkUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/stripe/account/link`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateConnectAccountLinkRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => CreateConnectAccountLinkResponseFromJSON(jsonValue));
        });
    }
    /**
     * createConnectAccountLink
     */
    createConnectAccountLinkUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createConnectAccountLinkUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * createStripeConnectAccount
     */
    createStripeConnectAccountUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling createStripeConnectAccountUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/stripe/account`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateStripeConnectAccountRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => CreateStripeConnectAccountResponseFromJSON(jsonValue));
        });
    }
    /**
     * createStripeConnectAccount
     */
    createStripeConnectAccountUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createStripeConnectAccountUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * handleOrphanedStripeCharges
     */
    handleOrphanedStripeChargesUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling handleOrphanedStripeChargesUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/stripe/handle-orphaned-stripe-charges`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: HandleOrphanedStripeChargeRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => HandleOrphanedStripeChargeResponseFromJSON(jsonValue));
        });
    }
    /**
     * handleOrphanedStripeCharges
     */
    handleOrphanedStripeChargesUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.handleOrphanedStripeChargesUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * updateDispute
     */
    updateDisputeUsingPUTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.disputeId === null || requestParameters.disputeId === undefined) {
                throw new runtime.RequiredError('disputeId', 'Required parameter requestParameters.disputeId was null or undefined when calling updateDisputeUsingPUT.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling updateDisputeUsingPUT.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/stripe/disputes/{disputeId}`.replace(`{${"disputeId"}}`, encodeURIComponent(String(requestParameters.disputeId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateDisputeRequestToJSON(requestParameters.request),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * updateDispute
     */
    updateDisputeUsingPUT(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateDisputeUsingPUTRaw(requestParameters);
        });
    }
}
