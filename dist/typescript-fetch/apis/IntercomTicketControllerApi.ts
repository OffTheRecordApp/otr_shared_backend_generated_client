/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IntercomSearchConversationsResponse,
    IntercomSearchConversationsResponseFromJSON,
    IntercomSearchConversationsResponseToJSON,
    IntercomSearchTicketsResponse,
    IntercomSearchTicketsResponseFromJSON,
    IntercomSearchTicketsResponseToJSON,
} from '../models';

export interface GetConversationsUsingGETRequest {
    email: string;
    length?: number;
}

export interface GetTicketsUsingGETRequest {
    userId: number;
    length?: number;
}

/**
 * 
 */
export class IntercomTicketControllerApi extends runtime.BaseAPI {

    /**
     * getConversations
     */
    async getConversationsUsingGETRaw(requestParameters: GetConversationsUsingGETRequest): Promise<runtime.ApiResponse<IntercomSearchConversationsResponse>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getConversationsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/intercom/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IntercomSearchConversationsResponseFromJSON(jsonValue));
    }

    /**
     * getConversations
     */
    async getConversationsUsingGET(requestParameters: GetConversationsUsingGETRequest): Promise<IntercomSearchConversationsResponse> {
        const response = await this.getConversationsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getTickets
     */
    async getTicketsUsingGETRaw(requestParameters: GetTicketsUsingGETRequest): Promise<runtime.ApiResponse<IntercomSearchTicketsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getTicketsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/intercom/tickets/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IntercomSearchTicketsResponseFromJSON(jsonValue));
    }

    /**
     * getTickets
     */
    async getTicketsUsingGET(requestParameters: GetTicketsUsingGETRequest): Promise<IntercomSearchTicketsResponse> {
        const response = await this.getTicketsUsingGETRaw(requestParameters);
        return await response.value();
    }

}
