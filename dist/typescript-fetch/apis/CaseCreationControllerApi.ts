/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CaseCreationRequest,
    CaseCreationRequestFromJSON,
    CaseCreationRequestToJSON,
    MatchCaseResponse,
    MatchCaseResponseFromJSON,
    MatchCaseResponseToJSON,
} from '../models';

export interface AddSampleCaseUsingPUTRequest {
    lawfirmId: string;
}

export interface MatchCaseUsingPOSTRequest {
    citationIdString: string;
    request?: CaseCreationRequest;
}

/**
 * 
 */
export class CaseCreationControllerApi extends runtime.BaseAPI {

    /**
     * addSampleCase
     */
    async addSampleCaseUsingPUTRaw(requestParameters: AddSampleCaseUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling addSampleCaseUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{lawfirmId}/sample`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * addSampleCase
     */
    async addSampleCaseUsingPUT(requestParameters: AddSampleCaseUsingPUTRequest): Promise<void> {
        await this.addSampleCaseUsingPUTRaw(requestParameters);
    }

    /**
     * matchCase
     */
    async matchCaseUsingPOSTRaw(requestParameters: MatchCaseUsingPOSTRequest): Promise<runtime.ApiResponse<MatchCaseResponse>> {
        if (requestParameters.citationIdString === null || requestParameters.citationIdString === undefined) {
            throw new runtime.RequiredError('citationIdString','Required parameter requestParameters.citationIdString was null or undefined when calling matchCaseUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/{citationIdString}/case`.replace(`{${"citationIdString"}}`, encodeURIComponent(String(requestParameters.citationIdString))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CaseCreationRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchCaseResponseFromJSON(jsonValue));
    }

    /**
     * matchCase
     */
    async matchCaseUsingPOST(requestParameters: MatchCaseUsingPOSTRequest): Promise<MatchCaseResponse> {
        const response = await this.matchCaseUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
