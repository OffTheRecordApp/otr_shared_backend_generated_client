/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountLevelFeeRequest,
    AccountLevelFeeRequestFromJSON,
    AccountLevelFeeRequestToJSON,
    AccountLevelFeeResponse,
    AccountLevelFeeResponseFromJSON,
    AccountLevelFeeResponseToJSON,
    EnableViolationsForLawfirmRequest,
    EnableViolationsForLawfirmRequestFromJSON,
    EnableViolationsForLawfirmRequestToJSON,
    EnableViolationsForLawfirmResponse,
    EnableViolationsForLawfirmResponseFromJSON,
    EnableViolationsForLawfirmResponseToJSON,
    GetLawfirmCoverageResponse,
    GetLawfirmCoverageResponseFromJSON,
    GetLawfirmCoverageResponseToJSON,
    GetLawfirmFeeCoverageResponse,
    GetLawfirmFeeCoverageResponseFromJSON,
    GetLawfirmFeeCoverageResponseToJSON,
    PostCourtCoverageRequest,
    PostCourtCoverageRequestFromJSON,
    PostCourtCoverageRequestToJSON,
    RemoveCoverageRequest,
    RemoveCoverageRequestFromJSON,
    RemoveCoverageRequestToJSON,
    ResetFeesForLawfirmRequest,
    ResetFeesForLawfirmRequestFromJSON,
    ResetFeesForLawfirmRequestToJSON,
    ResetFeesForLawfirmResponse,
    ResetFeesForLawfirmResponseFromJSON,
    ResetFeesForLawfirmResponseToJSON,
} from '../models';

export interface AddCourtToCoverageUsingPOSTRequest {
    lawfirmIdString: string;
    request: PostCourtCoverageRequest;
}

export interface EnableViolationsForLawfirmUsingPOSTRequest {
    lawfirmId: string;
    request: EnableViolationsForLawfirmRequest;
}

export interface GetAccountFeesUsingGETRequest {
    lawfirmId: string;
    enabledFeesOnly?: boolean;
}

export interface GetLawfirmCoverageUsingGETRequest {
    lawfirmIdString: string;
}

export interface GetLawfirmFeeCoverageUsingGETRequest {
    lawfirmId: string;
    legalServiceType?: GetLawfirmFeeCoverageUsingGETLegalServiceTypeEnum;
}

export interface RemoveAccountFeesUsingDELETERequest {
    lawfirmId: string;
    classification?: RemoveAccountFeesUsingDELETEClassificationEnum;
    isPermitted?: boolean;
    regionCode?: string;
    violationId?: number;
}

export interface RemoveCourtsUsingDELETERequest {
    courtsToRemove: number;
    lawfirmId: string;
}

export interface RemoveCoverageUsingDELETERequest {
    lawfirmId: string;
    courtsToRemove: RemoveCoverageRequest;
}

export interface ResetFeesForLawfirmUsingPOSTRequest {
    lawfirmId: string;
    request: ResetFeesForLawfirmRequest;
}

export interface SaveAccountFeesUsingPOSTRequest {
    lawfirmId: string;
    request: AccountLevelFeeRequest;
}

/**
 * 
 */
export class LawfirmFeeCoverageControllerApi extends runtime.BaseAPI {

    /**
     * addCourtToCoverage
     */
    async addCourtToCoverageUsingPOSTRaw(requestParameters: AddCourtToCoverageUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmIdString === null || requestParameters.lawfirmIdString === undefined) {
            throw new runtime.RequiredError('lawfirmIdString','Required parameter requestParameters.lawfirmIdString was null or undefined when calling addCourtToCoverageUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling addCourtToCoverageUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmIdString}/courts`.replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(requestParameters.lawfirmIdString))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCourtCoverageRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * addCourtToCoverage
     */
    async addCourtToCoverageUsingPOST(requestParameters: AddCourtToCoverageUsingPOSTRequest): Promise<object> {
        const response = await this.addCourtToCoverageUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * enableViolationsForLawfirm
     */
    async enableViolationsForLawfirmUsingPOSTRaw(requestParameters: EnableViolationsForLawfirmUsingPOSTRequest): Promise<runtime.ApiResponse<EnableViolationsForLawfirmResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling enableViolationsForLawfirmUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling enableViolationsForLawfirmUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/account-fees/enable-violations`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnableViolationsForLawfirmRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnableViolationsForLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * enableViolationsForLawfirm
     */
    async enableViolationsForLawfirmUsingPOST(requestParameters: EnableViolationsForLawfirmUsingPOSTRequest): Promise<EnableViolationsForLawfirmResponse> {
        const response = await this.enableViolationsForLawfirmUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getAccountFees
     */
    async getAccountFeesUsingGETRaw(requestParameters: GetAccountFeesUsingGETRequest): Promise<runtime.ApiResponse<AccountLevelFeeResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getAccountFeesUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.enabledFeesOnly !== undefined) {
            queryParameters['enabledFeesOnly'] = requestParameters.enabledFeesOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/account-fees`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountLevelFeeResponseFromJSON(jsonValue));
    }

    /**
     * getAccountFees
     */
    async getAccountFeesUsingGET(requestParameters: GetAccountFeesUsingGETRequest): Promise<AccountLevelFeeResponse> {
        const response = await this.getAccountFeesUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmCoverage
     */
    async getLawfirmCoverageUsingGETRaw(requestParameters: GetLawfirmCoverageUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmCoverageResponse>> {
        if (requestParameters.lawfirmIdString === null || requestParameters.lawfirmIdString === undefined) {
            throw new runtime.RequiredError('lawfirmIdString','Required parameter requestParameters.lawfirmIdString was null or undefined when calling getLawfirmCoverageUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmIdString}/coverage`.replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(requestParameters.lawfirmIdString))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmCoverageResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmCoverage
     */
    async getLawfirmCoverageUsingGET(requestParameters: GetLawfirmCoverageUsingGETRequest): Promise<GetLawfirmCoverageResponse> {
        const response = await this.getLawfirmCoverageUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmFeeCoverage
     */
    async getLawfirmFeeCoverageUsingGETRaw(requestParameters: GetLawfirmFeeCoverageUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmFeeCoverageResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmFeeCoverageUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.legalServiceType !== undefined) {
            queryParameters['legalServiceType'] = requestParameters.legalServiceType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/lawfirms/{lawfirmId}/coverage`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmFeeCoverageResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmFeeCoverage
     */
    async getLawfirmFeeCoverageUsingGET(requestParameters: GetLawfirmFeeCoverageUsingGETRequest): Promise<GetLawfirmFeeCoverageResponse> {
        const response = await this.getLawfirmFeeCoverageUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * removeAccountFees
     */
    async removeAccountFeesUsingDELETERaw(requestParameters: RemoveAccountFeesUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling removeAccountFeesUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.isPermitted !== undefined) {
            queryParameters['isPermitted'] = requestParameters.isPermitted;
        }

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        if (requestParameters.violationId !== undefined) {
            queryParameters['violationId'] = requestParameters.violationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/account-fees`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removeAccountFees
     */
    async removeAccountFeesUsingDELETE(requestParameters: RemoveAccountFeesUsingDELETERequest): Promise<void> {
        await this.removeAccountFeesUsingDELETERaw(requestParameters);
    }

    /**
     * removeCourts
     */
    async removeCourtsUsingDELETERaw(requestParameters: RemoveCourtsUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.courtsToRemove === null || requestParameters.courtsToRemove === undefined) {
            throw new runtime.RequiredError('courtsToRemove','Required parameter requestParameters.courtsToRemove was null or undefined when calling removeCourtsUsingDELETE.');
        }

        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling removeCourtsUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.courtsToRemove !== undefined) {
            queryParameters['courtsToRemove'] = requestParameters.courtsToRemove;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/courts`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removeCourts
     */
    async removeCourtsUsingDELETE(requestParameters: RemoveCourtsUsingDELETERequest): Promise<void> {
        await this.removeCourtsUsingDELETERaw(requestParameters);
    }

    /**
     * removeCoverage
     */
    async removeCoverageUsingDELETERaw(requestParameters: RemoveCoverageUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling removeCoverageUsingDELETE.');
        }

        if (requestParameters.courtsToRemove === null || requestParameters.courtsToRemove === undefined) {
            throw new runtime.RequiredError('courtsToRemove','Required parameter requestParameters.courtsToRemove was null or undefined when calling removeCoverageUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/lawfirms/{lawfirmId}/courts`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveCoverageRequestToJSON(requestParameters.courtsToRemove),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removeCoverage
     */
    async removeCoverageUsingDELETE(requestParameters: RemoveCoverageUsingDELETERequest): Promise<void> {
        await this.removeCoverageUsingDELETERaw(requestParameters);
    }

    /**
     * resetFeesForLawfirm
     */
    async resetFeesForLawfirmUsingPOSTRaw(requestParameters: ResetFeesForLawfirmUsingPOSTRequest): Promise<runtime.ApiResponse<ResetFeesForLawfirmResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling resetFeesForLawfirmUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling resetFeesForLawfirmUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/account-fees/reset`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetFeesForLawfirmRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetFeesForLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * resetFeesForLawfirm
     */
    async resetFeesForLawfirmUsingPOST(requestParameters: ResetFeesForLawfirmUsingPOSTRequest): Promise<ResetFeesForLawfirmResponse> {
        const response = await this.resetFeesForLawfirmUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * saveAccountFees
     */
    async saveAccountFeesUsingPOSTRaw(requestParameters: SaveAccountFeesUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling saveAccountFeesUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling saveAccountFeesUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/account-fees`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountLevelFeeRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * saveAccountFees
     */
    async saveAccountFeesUsingPOST(requestParameters: SaveAccountFeesUsingPOSTRequest): Promise<object> {
        const response = await this.saveAccountFeesUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetLawfirmFeeCoverageUsingGETLegalServiceTypeEnum {
    DEFER = 'DEFER',
    FIGHT = 'FIGHT'
}
/**
    * @export
    * @enum {string}
    */
export enum RemoveAccountFeesUsingDELETEClassificationEnum {
    CLASS1FELONY = 'CLASS_1_FELONY',
    CLASS1MISDEMEANOR = 'CLASS_1_MISDEMEANOR',
    CLASS2FELONY = 'CLASS_2_FELONY',
    CLASS2MISDEMEANOR = 'CLASS_2_MISDEMEANOR',
    CLASS3FELONY = 'CLASS_3_FELONY',
    CLASS3MISDEMEANOR = 'CLASS_3_MISDEMEANOR',
    CLASS4FELONY = 'CLASS_4_FELONY',
    CLASS4MISDEMEANOR = 'CLASS_4_MISDEMEANOR',
    CLASS5FELONY = 'CLASS_5_FELONY',
    CLASS6FELONY = 'CLASS_6_FELONY',
    CLASSA1MISDEMEANOR = 'CLASS_A1_MISDEMEANOR',
    CLASSAFELONY = 'CLASS_A_FELONY',
    CLASSAINFRACTION = 'CLASS_A_INFRACTION',
    CLASSAMISDEMEANOR = 'CLASS_A_MISDEMEANOR',
    CLASSAVIOLATION = 'CLASS_A_VIOLATION',
    CLASSBFELONY = 'CLASS_B_FELONY',
    CLASSBINFRACTION = 'CLASS_B_INFRACTION',
    CLASSBMISDEMEANOR = 'CLASS_B_MISDEMEANOR',
    CLASSBVIOLATION = 'CLASS_B_VIOLATION',
    CLASSCFELONY = 'CLASS_C_FELONY',
    CLASSCINFRACTION = 'CLASS_C_INFRACTION',
    CLASSCMISDEMEANOR = 'CLASS_C_MISDEMEANOR',
    CLASSCVIOLATION = 'CLASS_C_VIOLATION',
    CLASSDFELONY = 'CLASS_D_FELONY',
    CLASSDMISDEMEANOR = 'CLASS_D_MISDEMEANOR',
    CLASSDVIOLATION = 'CLASS_D_VIOLATION',
    CLASSEFELONY = 'CLASS_E_FELONY',
    CLASSFFELONY = 'CLASS_F_FELONY',
    CLASSHFELONY = 'CLASS_H_FELONY',
    DISORDERLYPERSONSOFFENSE = 'DISORDERLY_PERSONS_OFFENSE',
    FELONY = 'FELONY',
    FELONY1STDEGREE = 'FELONY_1ST_DEGREE',
    FELONY2NDDEGREE = 'FELONY_2ND_DEGREE',
    FELONY3RDDEGREE = 'FELONY_3RD_DEGREE',
    FELONY4THDEGREE = 'FELONY_4TH_DEGREE',
    FELONY5THDEGREE = 'FELONY_5TH_DEGREE',
    GROSSMISDEMEANOR = 'GROSS_MISDEMEANOR',
    HIGHANDAGGRAVATEDMISDEMEANOR = 'HIGH_AND_AGGRAVATED_MISDEMEANOR',
    INFRACTION = 'INFRACTION',
    LEVEL4FELONY = 'LEVEL_4_FELONY',
    LEVEL5FELONY = 'LEVEL_5_FELONY',
    LEVEL6FELONY = 'LEVEL_6_FELONY',
    MINORMISDEMEANOR = 'MINOR_MISDEMEANOR',
    MISDEMEANOR = 'MISDEMEANOR',
    MISDEMEANOR1STDEGREE = 'MISDEMEANOR_1ST_DEGREE',
    MISDEMEANOR2NDDEGREE = 'MISDEMEANOR_2ND_DEGREE',
    MISDEMEANOR3RDDEGREE = 'MISDEMEANOR_3RD_DEGREE',
    MISDEMEANOR4THDEGREE = 'MISDEMEANOR_4TH_DEGREE',
    MISDEMEANORWITHREFUND = 'MISDEMEANOR_WITH_REFUND',
    NONMOVING = 'NON_MOVING',
    NONREPORTABLE = 'NON_REPORTABLE',
    PETTYMISDEMEANOR = 'PETTY_MISDEMEANOR',
    QUASICRIMINAL = 'QUASI_CRIMINAL',
    SUMMARYOFFENSE = 'SUMMARY_OFFENSE',
    SUMMARYOFFENSENOREFUND = 'SUMMARY_OFFENSE_NO_REFUND',
    WOBBLERTOFELONY = 'WOBBLER_TO_FELONY',
    WOBBLERTOMISDEMEANOR = 'WOBBLER_TO_MISDEMEANOR'
}
