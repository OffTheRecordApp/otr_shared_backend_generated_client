/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { GetLawfirmSummaryCaseRequestToJSON, GetLawfirmSummaryCasesResponseFromJSON, } from '../models';
/**
 *
 */
export class LawfirmCasesControllerApi extends runtime.BaseAPI {
    /**
     * getLawfirmCasesByPage
     */
    getLawfirmCasesByPageUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lawfirmIdString === null || requestParameters.lawfirmIdString === undefined) {
                throw new runtime.RequiredError('lawfirmIdString', 'Required parameter requestParameters.lawfirmIdString was null or undefined when calling getLawfirmCasesByPageUsingPOST.');
            }
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling getLawfirmCasesByPageUsingPOST.');
            }
            const queryParameters = {};
            if (requestParameters.courtDateFilter !== undefined) {
                queryParameters['courtDateFilter'] = requestParameters.courtDateFilter;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end.toISOString();
            }
            if (requestParameters.hasPaymentPlan !== undefined) {
                queryParameters['hasPaymentPlan'] = requestParameters.hasPaymentPlan;
            }
            if (requestParameters.length !== undefined) {
                queryParameters['length'] = requestParameters.length;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start.toISOString();
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v2/lawfirm/{lawfirmIdString}/cases`.replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(requestParameters.lawfirmIdString))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: GetLawfirmSummaryCaseRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmSummaryCasesResponseFromJSON(jsonValue));
        });
    }
    /**
     * getLawfirmCasesByPage
     */
    getLawfirmCasesByPageUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLawfirmCasesByPageUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
}
/**
    * @export
    * @enum {string}
    */
export var GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum;
(function (GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum) {
    GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum["NOCOURTDATE"] = "NO_COURT_DATE";
    GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum["PASTDUE"] = "PAST_DUE";
    GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum["PASTDUEANDNOCOURTDATE"] = "PAST_DUE_AND_NO_COURT_DATE";
    GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum["UPCOMING"] = "UPCOMING";
})(GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum || (GetLawfirmCasesByPageUsingPOSTCourtDateFilterEnum = {}));
