/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ListAgentBookingsResponseFromJSON, SaveAgentBookingRequestToJSON, SaveAgentBookingResponseFromJSON, } from '../models';
/**
 *
 */
export class CustomerServiceAgentBookingsControllerApi extends runtime.BaseAPI {
    /**
     * deleteAgentBooking
     */
    deleteAgentBookingUsingDELETERaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.agentBookingId === null || requestParameters.agentBookingId === undefined) {
                throw new runtime.RequiredError('agentBookingId', 'Required parameter requestParameters.agentBookingId was null or undefined when calling deleteAgentBookingUsingDELETE.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cs-agent-bookings/{agentBookingId}`.replace(`{${"agentBookingId"}}`, encodeURIComponent(String(requestParameters.agentBookingId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * deleteAgentBooking
     */
    deleteAgentBookingUsingDELETE(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteAgentBookingUsingDELETERaw(requestParameters);
        });
    }
    /**
     * listAgentBookings
     */
    listAgentBookingsUsingGETRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.agentTeam !== undefined) {
                queryParameters['agentTeam'] = requestParameters.agentTeam;
            }
            if (requestParameters.agentUserId !== undefined) {
                queryParameters['agentUserId'] = requestParameters.agentUserId;
            }
            if (requestParameters.caseStatus !== undefined) {
                queryParameters['caseStatus'] = requestParameters.caseStatus;
            }
            if (requestParameters.channel !== undefined) {
                queryParameters['channel'] = requestParameters.channel;
            }
            if (requestParameters.direction !== undefined) {
                queryParameters['direction'] = requestParameters.direction;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.length !== undefined) {
                queryParameters['length'] = requestParameters.length;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.sortBy !== undefined) {
                queryParameters['sortBy'] = requestParameters.sortBy;
            }
            if (requestParameters.sortOrder !== undefined) {
                queryParameters['sortOrder'] = requestParameters.sortOrder;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.statusCategory !== undefined) {
                queryParameters['statusCategory'] = requestParameters.statusCategory;
            }
            if (requestParameters.timeZoneId !== undefined) {
                queryParameters['timeZoneId'] = requestParameters.timeZoneId;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/cs-agent-bookings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => ListAgentBookingsResponseFromJSON(jsonValue));
        });
    }
    /**
     * listAgentBookings
     */
    listAgentBookingsUsingGET(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listAgentBookingsUsingGETRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * saveAgentBooking
     */
    saveAgentBookingUsingPOSTRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.request === null || requestParameters.request === undefined) {
                throw new runtime.RequiredError('request', 'Required parameter requestParameters.request was null or undefined when calling saveAgentBookingUsingPOST.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/cs-agent-bookings`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SaveAgentBookingRequestToJSON(requestParameters.request),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => SaveAgentBookingResponseFromJSON(jsonValue));
        });
    }
    /**
     * saveAgentBooking
     */
    saveAgentBookingUsingPOST(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.saveAgentBookingUsingPOSTRaw(requestParameters);
            return yield response.value();
        });
    }
}
