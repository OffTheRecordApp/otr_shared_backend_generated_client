/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetTicketReviewResponse,
    GetTicketReviewResponseFromJSON,
    GetTicketReviewResponseToJSON,
    PersistTicketEvaluationRequest,
    PersistTicketEvaluationRequestFromJSON,
    PersistTicketEvaluationRequestToJSON,
    TicketReviewRequestReq,
    TicketReviewRequestReqFromJSON,
    TicketReviewRequestReqToJSON,
} from '../models';

export interface GetTicketReviewInfoUsingGETRequest {
    citationId: string;
}

export interface PersistTicketEvaluationUsingPOSTRequest {
    request: PersistTicketEvaluationRequest;
}

export interface UpdateTicketEvaluationRequestUsingPUTRequest {
    ticketEvaluationRequestId: number;
    request: TicketReviewRequestReq;
}

/**
 * 
 */
export class TicketReviewControllerApi extends runtime.BaseAPI {

    /**
     * getTicketReviewInfo
     */
    async getTicketReviewInfoUsingGETRaw(requestParameters: GetTicketReviewInfoUsingGETRequest): Promise<runtime.ApiResponse<GetTicketReviewResponse>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling getTicketReviewInfoUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/ticket-review`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTicketReviewResponseFromJSON(jsonValue));
    }

    /**
     * getTicketReviewInfo
     */
    async getTicketReviewInfoUsingGET(requestParameters: GetTicketReviewInfoUsingGETRequest): Promise<GetTicketReviewResponse> {
        const response = await this.getTicketReviewInfoUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * persistTicketEvaluation
     */
    async persistTicketEvaluationUsingPOSTRaw(requestParameters: PersistTicketEvaluationUsingPOSTRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling persistTicketEvaluationUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/ticket-evaluation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersistTicketEvaluationRequestToJSON(requestParameters.request),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * persistTicketEvaluation
     */
    async persistTicketEvaluationUsingPOST(requestParameters: PersistTicketEvaluationUsingPOSTRequest): Promise<number> {
        const response = await this.persistTicketEvaluationUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateTicketEvaluationRequest
     */
    async updateTicketEvaluationRequestUsingPUTRaw(requestParameters: UpdateTicketEvaluationRequestUsingPUTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.ticketEvaluationRequestId === null || requestParameters.ticketEvaluationRequestId === undefined) {
            throw new runtime.RequiredError('ticketEvaluationRequestId','Required parameter requestParameters.ticketEvaluationRequestId was null or undefined when calling updateTicketEvaluationRequestUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateTicketEvaluationRequestUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/ticket-evaluation/{ticketEvaluationRequestId}`.replace(`{${"ticketEvaluationRequestId"}}`, encodeURIComponent(String(requestParameters.ticketEvaluationRequestId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TicketReviewRequestReqToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * updateTicketEvaluationRequest
     */
    async updateTicketEvaluationRequestUsingPUT(requestParameters: UpdateTicketEvaluationRequestUsingPUTRequest): Promise<object> {
        const response = await this.updateTicketEvaluationRequestUsingPUTRaw(requestParameters);
        return await response.value();
    }

}
