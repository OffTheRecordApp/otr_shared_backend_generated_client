/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddPenaltyRequest,
    AddPenaltyRequestFromJSON,
    AddPenaltyRequestToJSON,
    GetPenaltyTypesResponse,
    GetPenaltyTypesResponseFromJSON,
    GetPenaltyTypesResponseToJSON,
    ViolationPenaltyResponse,
    ViolationPenaltyResponseFromJSON,
    ViolationPenaltyResponseToJSON,
} from '../models';

export interface GetPenaltiesByViolationUsingGETRequest {
    violationId: string;
    flavor?: GetPenaltiesByViolationUsingGETFlavorEnum;
}

export interface RemovePenaltyUsingDELETERequest {
    penaltyTypeId: string;
    violationId: string;
}

export interface UpsertPenaltyUsingPOSTRequest {
    violationId: string;
    penaltyToAdd: AddPenaltyRequest;
}

/**
 * 
 */
export class ViolationPenaltyControllerApi extends runtime.BaseAPI {

    /**
     * getPenaltiesByViolation
     */
    async getPenaltiesByViolationUsingGETRaw(requestParameters: GetPenaltiesByViolationUsingGETRequest): Promise<runtime.ApiResponse<ViolationPenaltyResponse>> {
        if (requestParameters.violationId === null || requestParameters.violationId === undefined) {
            throw new runtime.RequiredError('violationId','Required parameter requestParameters.violationId was null or undefined when calling getPenaltiesByViolationUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.flavor !== undefined) {
            queryParameters['flavor'] = requestParameters.flavor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/violations/{violationId}/penalties`.replace(`{${"violationId"}}`, encodeURIComponent(String(requestParameters.violationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ViolationPenaltyResponseFromJSON(jsonValue));
    }

    /**
     * getPenaltiesByViolation
     */
    async getPenaltiesByViolationUsingGET(requestParameters: GetPenaltiesByViolationUsingGETRequest): Promise<ViolationPenaltyResponse> {
        const response = await this.getPenaltiesByViolationUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getPenaltyTypes
     */
    async getPenaltyTypesUsingGETRaw(): Promise<runtime.ApiResponse<GetPenaltyTypesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/violations/penalties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPenaltyTypesResponseFromJSON(jsonValue));
    }

    /**
     * getPenaltyTypes
     */
    async getPenaltyTypesUsingGET(): Promise<GetPenaltyTypesResponse> {
        const response = await this.getPenaltyTypesUsingGETRaw();
        return await response.value();
    }

    /**
     * removePenalty
     */
    async removePenaltyUsingDELETERaw(requestParameters: RemovePenaltyUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.penaltyTypeId === null || requestParameters.penaltyTypeId === undefined) {
            throw new runtime.RequiredError('penaltyTypeId','Required parameter requestParameters.penaltyTypeId was null or undefined when calling removePenaltyUsingDELETE.');
        }

        if (requestParameters.violationId === null || requestParameters.violationId === undefined) {
            throw new runtime.RequiredError('violationId','Required parameter requestParameters.violationId was null or undefined when calling removePenaltyUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/violations/{violationId}/penalties/{penaltyTypeId}`.replace(`{${"penaltyTypeId"}}`, encodeURIComponent(String(requestParameters.penaltyTypeId))).replace(`{${"violationId"}}`, encodeURIComponent(String(requestParameters.violationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removePenalty
     */
    async removePenaltyUsingDELETE(requestParameters: RemovePenaltyUsingDELETERequest): Promise<void> {
        await this.removePenaltyUsingDELETERaw(requestParameters);
    }

    /**
     * upsertPenalty
     */
    async upsertPenaltyUsingPOSTRaw(requestParameters: UpsertPenaltyUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.violationId === null || requestParameters.violationId === undefined) {
            throw new runtime.RequiredError('violationId','Required parameter requestParameters.violationId was null or undefined when calling upsertPenaltyUsingPOST.');
        }

        if (requestParameters.penaltyToAdd === null || requestParameters.penaltyToAdd === undefined) {
            throw new runtime.RequiredError('penaltyToAdd','Required parameter requestParameters.penaltyToAdd was null or undefined when calling upsertPenaltyUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/violations/{violationId}/penalties`.replace(`{${"violationId"}}`, encodeURIComponent(String(requestParameters.violationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPenaltyRequestToJSON(requestParameters.penaltyToAdd),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * upsertPenalty
     */
    async upsertPenaltyUsingPOST(requestParameters: UpsertPenaltyUsingPOSTRequest): Promise<void> {
        await this.upsertPenaltyUsingPOSTRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetPenaltiesByViolationUsingGETFlavorEnum {
    ALL = 'ALL',
    SHORT = 'SHORT'
}
