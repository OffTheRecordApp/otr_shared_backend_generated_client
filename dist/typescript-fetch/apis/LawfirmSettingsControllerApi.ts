/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetLawfirmResponse,
    GetLawfirmResponseFromJSON,
    GetLawfirmResponseToJSON,
    GetLawfirmSettingsResponse,
    GetLawfirmSettingsResponseFromJSON,
    GetLawfirmSettingsResponseToJSON,
    SettingRequest,
    SettingRequestFromJSON,
    SettingRequestToJSON,
    SettingResponse,
    SettingResponseFromJSON,
    SettingResponseToJSON,
    UpdateLawfirmSettingsRequest,
    UpdateLawfirmSettingsRequestFromJSON,
    UpdateLawfirmSettingsRequestToJSON,
} from '../models';

export interface GetLawfirmSettingUsingGETRequest {
    lawfirmId: number;
    name: string;
}

export interface GetLawfirmSettingsUsingGETRequest {
    lawfirmId: number;
}

export interface UpdateLawfirmSettingUsingPOSTRequest {
    lawfirmId: number;
    request: SettingRequest;
}

export interface UpdateLawfirmSettingsUsingPOSTRequest {
    lawfirmIdString: string;
    request: UpdateLawfirmSettingsRequest;
}

/**
 * 
 */
export class LawfirmSettingsControllerApi extends runtime.BaseAPI {

    /**
     * getLawfirmSetting
     */
    async getLawfirmSettingUsingGETRaw(requestParameters: GetLawfirmSettingUsingGETRequest): Promise<runtime.ApiResponse<SettingResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmSettingUsingGET.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getLawfirmSettingUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirm-settings/{lawfirmId}/setting`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmSetting
     */
    async getLawfirmSettingUsingGET(requestParameters: GetLawfirmSettingUsingGETRequest): Promise<SettingResponse> {
        const response = await this.getLawfirmSettingUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getLawfirmSettings
     */
    async getLawfirmSettingsUsingGETRaw(requestParameters: GetLawfirmSettingsUsingGETRequest): Promise<runtime.ApiResponse<GetLawfirmSettingsResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling getLawfirmSettingsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmId}/settings`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmSettingsResponseFromJSON(jsonValue));
    }

    /**
     * getLawfirmSettings
     */
    async getLawfirmSettingsUsingGET(requestParameters: GetLawfirmSettingsUsingGETRequest): Promise<GetLawfirmSettingsResponse> {
        const response = await this.getLawfirmSettingsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateLawfirmSetting
     */
    async updateLawfirmSettingUsingPOSTRaw(requestParameters: UpdateLawfirmSettingUsingPOSTRequest): Promise<runtime.ApiResponse<SettingResponse>> {
        if (requestParameters.lawfirmId === null || requestParameters.lawfirmId === undefined) {
            throw new runtime.RequiredError('lawfirmId','Required parameter requestParameters.lawfirmId was null or undefined when calling updateLawfirmSettingUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateLawfirmSettingUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirm-settings/{lawfirmId}/setting`.replace(`{${"lawfirmId"}}`, encodeURIComponent(String(requestParameters.lawfirmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingResponseFromJSON(jsonValue));
    }

    /**
     * updateLawfirmSetting
     */
    async updateLawfirmSettingUsingPOST(requestParameters: UpdateLawfirmSettingUsingPOSTRequest): Promise<SettingResponse> {
        const response = await this.updateLawfirmSettingUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateLawfirmSettings
     */
    async updateLawfirmSettingsUsingPOSTRaw(requestParameters: UpdateLawfirmSettingsUsingPOSTRequest): Promise<runtime.ApiResponse<GetLawfirmResponse>> {
        if (requestParameters.lawfirmIdString === null || requestParameters.lawfirmIdString === undefined) {
            throw new runtime.RequiredError('lawfirmIdString','Required parameter requestParameters.lawfirmIdString was null or undefined when calling updateLawfirmSettingsUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateLawfirmSettingsUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/lawfirms/{lawfirmIdString}/settings`.replace(`{${"lawfirmIdString"}}`, encodeURIComponent(String(requestParameters.lawfirmIdString))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLawfirmSettingsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLawfirmResponseFromJSON(jsonValue));
    }

    /**
     * updateLawfirmSettings
     */
    async updateLawfirmSettingsUsingPOST(requestParameters: UpdateLawfirmSettingsUsingPOSTRequest): Promise<GetLawfirmResponse> {
        const response = await this.updateLawfirmSettingsUsingPOSTRaw(requestParameters);
        return await response.value();
    }

}
