/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssignCitationOwnerRequest,
    AssignCitationOwnerRequestFromJSON,
    AssignCitationOwnerRequestToJSON,
    CreateCitationRequest,
    CreateCitationRequestFromJSON,
    CreateCitationRequestToJSON,
    CreateCitationResponse,
    CreateCitationResponseFromJSON,
    CreateCitationResponseToJSON,
    CreateReferralSourceForCitation,
    CreateReferralSourceForCitationFromJSON,
    CreateReferralSourceForCitationToJSON,
    DeleteCitationResponse,
    DeleteCitationResponseFromJSON,
    DeleteCitationResponseToJSON,
    DismissCitationsFromContactListRequest,
    DismissCitationsFromContactListRequestFromJSON,
    DismissCitationsFromContactListRequestToJSON,
    GetAnonymousTicketUploads,
    GetAnonymousTicketUploadsFromJSON,
    GetAnonymousTicketUploadsToJSON,
    GetCitationResponse,
    GetCitationResponseFromJSON,
    GetCitationResponseToJSON,
    GetListOfCitationsWithMissingCourtResponse,
    GetListOfCitationsWithMissingCourtResponseFromJSON,
    GetListOfCitationsWithMissingCourtResponseToJSON,
    GetNoViolationCitationsResponse,
    GetNoViolationCitationsResponseFromJSON,
    GetNoViolationCitationsResponseToJSON,
    SignImageUrlRequest,
    SignImageUrlRequestFromJSON,
    SignImageUrlRequestToJSON,
    SignImageUrlResponse,
    SignImageUrlResponseFromJSON,
    SignImageUrlResponseToJSON,
    UpdateCitationAddressRequest,
    UpdateCitationAddressRequestFromJSON,
    UpdateCitationAddressRequestToJSON,
    UpdateCitationPictureRequest,
    UpdateCitationPictureRequestFromJSON,
    UpdateCitationPictureRequestToJSON,
    UpdateCitationRequest,
    UpdateCitationRequestFromJSON,
    UpdateCitationRequestToJSON,
} from '../models';

export interface AssignCitationOwnerUsingPOSTRequest {
    citationId: number;
    request?: AssignCitationOwnerRequest;
}

export interface CreateNewCitationUsingPOSTRequest {
    request: CreateCitationRequest;
}

export interface CreateReferralSourceForCitationUsingPOSTRequest {
    citationId: string;
    request: CreateReferralSourceForCitation;
}

export interface DeleteCitationCourtUsingDELETERequest {
    citationId: number;
}

export interface DeleteCitationUsingDELETERequest {
    citationIdString: string;
}

export interface DeleteMissingCourtRecordUsingDELETERequest {
    citationId: number;
}

export interface DismissCitationsFromContactListUsingPOSTRequest {
    request: DismissCitationsFromContactListRequest;
}

export interface GetAnonymousTicketUploadsUsingGETRequest {
    emailAddress: string;
}

export interface GetCitationUsingGETRequest {
    citationIdString: string;
}

export interface GetNoViolationCitationsUsingGETRequest {
    regionCodes?: string;
    trailingDays?: number;
}

export interface PostMissingCourtForCitationUsingPOSTRequest {
    citationId: string;
    state: PostMissingCourtForCitationUsingPOSTStateEnum;
}

export interface SetCitationContactListFlagUsingPOSTRequest {
    citationIdString: string;
    isDismissed: boolean;
}

export interface SetLockForCitationUsingPUTRequest {
    citationId: number;
    isLocked: boolean;
}

export interface SignImageUrlUsingPOSTRequest {
    request: SignImageUrlRequest;
}

export interface ToggleDeleteCitationUsingDELETERequest {
    citationId: number;
    isDeleteRequest: boolean;
}

export interface UpdateCitationAddressUsingPOSTRequest {
    citationId: string;
    request: UpdateCitationAddressRequest;
}

export interface UpdateCitationPictureUsingPUTRequest {
    citationId: string;
    request: UpdateCitationPictureRequest;
}

export interface UpdateCitationUsingPUTRequest {
    citationIdString: string;
    updateCitationRequest: UpdateCitationRequest;
}

/**
 * 
 */
export class CitationControllerApi extends runtime.BaseAPI {

    /**
     * assignCitationOwner
     */
    async assignCitationOwnerUsingPOSTRaw(requestParameters: AssignCitationOwnerUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling assignCitationOwnerUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/owner`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignCitationOwnerRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * assignCitationOwner
     */
    async assignCitationOwnerUsingPOST(requestParameters: AssignCitationOwnerUsingPOSTRequest): Promise<object> {
        const response = await this.assignCitationOwnerUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * createNewCitation
     */
    async createNewCitationUsingPOSTRaw(requestParameters: CreateNewCitationUsingPOSTRequest): Promise<runtime.ApiResponse<CreateCitationResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createNewCitationUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCitationRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCitationResponseFromJSON(jsonValue));
    }

    /**
     * createNewCitation
     */
    async createNewCitationUsingPOST(requestParameters: CreateNewCitationUsingPOSTRequest): Promise<CreateCitationResponse> {
        const response = await this.createNewCitationUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * createReferralSourceForCitation
     */
    async createReferralSourceForCitationUsingPOSTRaw(requestParameters: CreateReferralSourceForCitationUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling createReferralSourceForCitationUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createReferralSourceForCitationUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/referral-source`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReferralSourceForCitationToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * createReferralSourceForCitation
     */
    async createReferralSourceForCitationUsingPOST(requestParameters: CreateReferralSourceForCitationUsingPOSTRequest): Promise<void> {
        await this.createReferralSourceForCitationUsingPOSTRaw(requestParameters);
    }

    /**
     * deleteCitationCourt
     */
    async deleteCitationCourtUsingDELETERaw(requestParameters: DeleteCitationCourtUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling deleteCitationCourtUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/court`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteCitationCourt
     */
    async deleteCitationCourtUsingDELETE(requestParameters: DeleteCitationCourtUsingDELETERequest): Promise<void> {
        await this.deleteCitationCourtUsingDELETERaw(requestParameters);
    }

    /**
     * deleteCitation
     */
    async deleteCitationUsingDELETERaw(requestParameters: DeleteCitationUsingDELETERequest): Promise<runtime.ApiResponse<DeleteCitationResponse>> {
        if (requestParameters.citationIdString === null || requestParameters.citationIdString === undefined) {
            throw new runtime.RequiredError('citationIdString','Required parameter requestParameters.citationIdString was null or undefined when calling deleteCitationUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationIdString}`.replace(`{${"citationIdString"}}`, encodeURIComponent(String(requestParameters.citationIdString))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCitationResponseFromJSON(jsonValue));
    }

    /**
     * deleteCitation
     */
    async deleteCitationUsingDELETE(requestParameters: DeleteCitationUsingDELETERequest): Promise<DeleteCitationResponse> {
        const response = await this.deleteCitationUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteMissingCourtRecord
     */
    async deleteMissingCourtRecordUsingDELETERaw(requestParameters: DeleteMissingCourtRecordUsingDELETERequest): Promise<runtime.ApiResponse<GetListOfCitationsWithMissingCourtResponse>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling deleteMissingCourtRecordUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/courts/missing`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListOfCitationsWithMissingCourtResponseFromJSON(jsonValue));
    }

    /**
     * deleteMissingCourtRecord
     */
    async deleteMissingCourtRecordUsingDELETE(requestParameters: DeleteMissingCourtRecordUsingDELETERequest): Promise<GetListOfCitationsWithMissingCourtResponse> {
        const response = await this.deleteMissingCourtRecordUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * dismissCitationsFromContactList
     */
    async dismissCitationsFromContactListUsingPOSTRaw(requestParameters: DismissCitationsFromContactListUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling dismissCitationsFromContactListUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/dismiss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DismissCitationsFromContactListRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * dismissCitationsFromContactList
     */
    async dismissCitationsFromContactListUsingPOST(requestParameters: DismissCitationsFromContactListUsingPOSTRequest): Promise<object> {
        const response = await this.dismissCitationsFromContactListUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * getAnonymousTicketUploads
     */
    async getAnonymousTicketUploadsUsingGETRaw(requestParameters: GetAnonymousTicketUploadsUsingGETRequest): Promise<runtime.ApiResponse<GetAnonymousTicketUploads>> {
        if (requestParameters.emailAddress === null || requestParameters.emailAddress === undefined) {
            throw new runtime.RequiredError('emailAddress','Required parameter requestParameters.emailAddress was null or undefined when calling getAnonymousTicketUploadsUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{emailAddress}/anonymous-tickets`.replace(`{${"emailAddress"}}`, encodeURIComponent(String(requestParameters.emailAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAnonymousTicketUploadsFromJSON(jsonValue));
    }

    /**
     * getAnonymousTicketUploads
     */
    async getAnonymousTicketUploadsUsingGET(requestParameters: GetAnonymousTicketUploadsUsingGETRequest): Promise<GetAnonymousTicketUploads> {
        const response = await this.getAnonymousTicketUploadsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getCitation
     */
    async getCitationUsingGETRaw(requestParameters: GetCitationUsingGETRequest): Promise<runtime.ApiResponse<GetCitationResponse>> {
        if (requestParameters.citationIdString === null || requestParameters.citationIdString === undefined) {
            throw new runtime.RequiredError('citationIdString','Required parameter requestParameters.citationIdString was null or undefined when calling getCitationUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationIdString}`.replace(`{${"citationIdString"}}`, encodeURIComponent(String(requestParameters.citationIdString))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCitationResponseFromJSON(jsonValue));
    }

    /**
     * getCitation
     */
    async getCitationUsingGET(requestParameters: GetCitationUsingGETRequest): Promise<GetCitationResponse> {
        const response = await this.getCitationUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getListOfCitationsWithMissingCourt
     */
    async getListOfCitationsWithMissingCourtUsingGETRaw(): Promise<runtime.ApiResponse<GetListOfCitationsWithMissingCourtResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/courts/missing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListOfCitationsWithMissingCourtResponseFromJSON(jsonValue));
    }

    /**
     * getListOfCitationsWithMissingCourt
     */
    async getListOfCitationsWithMissingCourtUsingGET(): Promise<GetListOfCitationsWithMissingCourtResponse> {
        const response = await this.getListOfCitationsWithMissingCourtUsingGETRaw();
        return await response.value();
    }

    /**
     * getNoViolationCitations
     */
    async getNoViolationCitationsUsingGETRaw(requestParameters: GetNoViolationCitationsUsingGETRequest): Promise<runtime.ApiResponse<GetNoViolationCitationsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.regionCodes !== undefined) {
            queryParameters['regionCodes'] = requestParameters.regionCodes;
        }

        if (requestParameters.trailingDays !== undefined) {
            queryParameters['trailingDays'] = requestParameters.trailingDays;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/no-violation-uploads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNoViolationCitationsResponseFromJSON(jsonValue));
    }

    /**
     * getNoViolationCitations
     */
    async getNoViolationCitationsUsingGET(requestParameters: GetNoViolationCitationsUsingGETRequest): Promise<GetNoViolationCitationsResponse> {
        const response = await this.getNoViolationCitationsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * postMissingCourtForCitation
     */
    async postMissingCourtForCitationUsingPOSTRaw(requestParameters: PostMissingCourtForCitationUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling postMissingCourtForCitationUsingPOST.');
        }

        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling postMissingCourtForCitationUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/court/missing`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * postMissingCourtForCitation
     */
    async postMissingCourtForCitationUsingPOST(requestParameters: PostMissingCourtForCitationUsingPOSTRequest): Promise<object> {
        const response = await this.postMissingCourtForCitationUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * setCitationContactListFlag
     */
    async setCitationContactListFlagUsingPOSTRaw(requestParameters: SetCitationContactListFlagUsingPOSTRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.citationIdString === null || requestParameters.citationIdString === undefined) {
            throw new runtime.RequiredError('citationIdString','Required parameter requestParameters.citationIdString was null or undefined when calling setCitationContactListFlagUsingPOST.');
        }

        if (requestParameters.isDismissed === null || requestParameters.isDismissed === undefined) {
            throw new runtime.RequiredError('isDismissed','Required parameter requestParameters.isDismissed was null or undefined when calling setCitationContactListFlagUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isDismissed !== undefined) {
            queryParameters['isDismissed'] = requestParameters.isDismissed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationIdString}/dismiss`.replace(`{${"citationIdString"}}`, encodeURIComponent(String(requestParameters.citationIdString))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * setCitationContactListFlag
     */
    async setCitationContactListFlagUsingPOST(requestParameters: SetCitationContactListFlagUsingPOSTRequest): Promise<object> {
        const response = await this.setCitationContactListFlagUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * setLockForCitation
     */
    async setLockForCitationUsingPUTRaw(requestParameters: SetLockForCitationUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling setLockForCitationUsingPUT.');
        }

        if (requestParameters.isLocked === null || requestParameters.isLocked === undefined) {
            throw new runtime.RequiredError('isLocked','Required parameter requestParameters.isLocked was null or undefined when calling setLockForCitationUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/lock-citation/{isLocked}`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))).replace(`{${"isLocked"}}`, encodeURIComponent(String(requestParameters.isLocked))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * setLockForCitation
     */
    async setLockForCitationUsingPUT(requestParameters: SetLockForCitationUsingPUTRequest): Promise<void> {
        await this.setLockForCitationUsingPUTRaw(requestParameters);
    }

    /**
     * signImageUrl
     */
    async signImageUrlUsingPOSTRaw(requestParameters: SignImageUrlUsingPOSTRequest): Promise<runtime.ApiResponse<SignImageUrlResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling signImageUrlUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/sign-image-url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignImageUrlRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignImageUrlResponseFromJSON(jsonValue));
    }

    /**
     * signImageUrl
     */
    async signImageUrlUsingPOST(requestParameters: SignImageUrlUsingPOSTRequest): Promise<SignImageUrlResponse> {
        const response = await this.signImageUrlUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * toggleDeleteCitation
     */
    async toggleDeleteCitationUsingDELETERaw(requestParameters: ToggleDeleteCitationUsingDELETERequest): Promise<runtime.ApiResponse<DeleteCitationResponse>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling toggleDeleteCitationUsingDELETE.');
        }

        if (requestParameters.isDeleteRequest === null || requestParameters.isDeleteRequest === undefined) {
            throw new runtime.RequiredError('isDeleteRequest','Required parameter requestParameters.isDeleteRequest was null or undefined when calling toggleDeleteCitationUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isDeleteRequest !== undefined) {
            queryParameters['isDeleteRequest'] = requestParameters.isDeleteRequest;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/citations/{citationId}`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCitationResponseFromJSON(jsonValue));
    }

    /**
     * toggleDeleteCitation
     */
    async toggleDeleteCitationUsingDELETE(requestParameters: ToggleDeleteCitationUsingDELETERequest): Promise<DeleteCitationResponse> {
        const response = await this.toggleDeleteCitationUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * updateCitationAddress
     */
    async updateCitationAddressUsingPOSTRaw(requestParameters: UpdateCitationAddressUsingPOSTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling updateCitationAddressUsingPOST.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateCitationAddressUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/address`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCitationAddressRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateCitationAddress
     */
    async updateCitationAddressUsingPOST(requestParameters: UpdateCitationAddressUsingPOSTRequest): Promise<void> {
        await this.updateCitationAddressUsingPOSTRaw(requestParameters);
    }

    /**
     * updateCitationPicture
     */
    async updateCitationPictureUsingPUTRaw(requestParameters: UpdateCitationPictureUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.citationId === null || requestParameters.citationId === undefined) {
            throw new runtime.RequiredError('citationId','Required parameter requestParameters.citationId was null or undefined when calling updateCitationPictureUsingPUT.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateCitationPictureUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/{citationId}/picture`.replace(`{${"citationId"}}`, encodeURIComponent(String(requestParameters.citationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCitationPictureRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateCitationPicture
     */
    async updateCitationPictureUsingPUT(requestParameters: UpdateCitationPictureUsingPUTRequest): Promise<void> {
        await this.updateCitationPictureUsingPUTRaw(requestParameters);
    }

    /**
     * updateCitation
     */
    async updateCitationUsingPUTRaw(requestParameters: UpdateCitationUsingPUTRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.citationIdString === null || requestParameters.citationIdString === undefined) {
            throw new runtime.RequiredError('citationIdString','Required parameter requestParameters.citationIdString was null or undefined when calling updateCitationUsingPUT.');
        }

        if (requestParameters.updateCitationRequest === null || requestParameters.updateCitationRequest === undefined) {
            throw new runtime.RequiredError('updateCitationRequest','Required parameter requestParameters.updateCitationRequest was null or undefined when calling updateCitationUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/citations/{citationIdString}`.replace(`{${"citationIdString"}}`, encodeURIComponent(String(requestParameters.citationIdString))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCitationRequestToJSON(requestParameters.updateCitationRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * updateCitation
     */
    async updateCitationUsingPUT(requestParameters: UpdateCitationUsingPUTRequest): Promise<void> {
        await this.updateCitationUsingPUTRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PostMissingCourtForCitationUsingPOSTStateEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}
