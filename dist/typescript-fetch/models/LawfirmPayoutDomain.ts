/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StripeTransferDomain,
    StripeTransferDomainFromJSON,
    StripeTransferDomainFromJSONTyped,
    StripeTransferDomainToJSON,
} from './';

/**
 * 
 * @export
 * @interface LawfirmPayoutDomain
 */
export interface LawfirmPayoutDomain {
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    caseId?: string;
    /**
     * 
     * @type {Date}
     * @memberof LawfirmPayoutDomain
     */
    dueDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    lawfirmPayoutId?: string;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    processingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof LawfirmPayoutDomain
     */
    processingFeeCharged?: number;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    sourceCasePaymentId?: string;
    /**
     * 
     * @type {StripeTransferDomain}
     * @memberof LawfirmPayoutDomain
     */
    stripeTransfer?: StripeTransferDomain;
    /**
     * 
     * @type {Date}
     * @memberof LawfirmPayoutDomain
     */
    transactionDateUtc?: Date;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    transactionMethod?: LawfirmPayoutDomainTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof LawfirmPayoutDomain
     */
    transactionReferenceId?: string;
    /**
     * 
     * @type {Date}
     * @memberof LawfirmPayoutDomain
     */
    updatedDueDate?: Date;
}

export function LawfirmPayoutDomainFromJSON(json: any): LawfirmPayoutDomain {
    return LawfirmPayoutDomainFromJSONTyped(json, false);
}

export function LawfirmPayoutDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): LawfirmPayoutDomain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'caseId': !exists(json, 'caseId') ? undefined : json['caseId'],
        'dueDate': !exists(json, 'dueDate') ? undefined : (new Date(json['dueDate'])),
        'lawfirmCaseId': !exists(json, 'lawfirmCaseId') ? undefined : json['lawfirmCaseId'],
        'lawfirmId': !exists(json, 'lawfirmId') ? undefined : json['lawfirmId'],
        'lawfirmName': !exists(json, 'lawfirmName') ? undefined : json['lawfirmName'],
        'lawfirmPayoutId': !exists(json, 'lawfirmPayoutId') ? undefined : json['lawfirmPayoutId'],
        'processingFeeActual': !exists(json, 'processingFeeActual') ? undefined : json['processingFeeActual'],
        'processingFeeCharged': !exists(json, 'processingFeeCharged') ? undefined : json['processingFeeCharged'],
        'sourceCasePaymentId': !exists(json, 'sourceCasePaymentId') ? undefined : json['sourceCasePaymentId'],
        'stripeTransfer': !exists(json, 'stripeTransfer') ? undefined : StripeTransferDomainFromJSON(json['stripeTransfer']),
        'transactionDateUtc': !exists(json, 'transactionDateUtc') ? undefined : (new Date(json['transactionDateUtc'])),
        'transactionMethod': !exists(json, 'transactionMethod') ? undefined : json['transactionMethod'],
        'transactionReferenceId': !exists(json, 'transactionReferenceId') ? undefined : json['transactionReferenceId'],
        'updatedDueDate': !exists(json, 'updatedDueDate') ? undefined : (new Date(json['updatedDueDate'])),
    };
}

export function LawfirmPayoutDomainToJSON(value?: LawfirmPayoutDomain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'caseId': value.caseId,
        'dueDate': value.dueDate === undefined ? undefined : (value.dueDate.toISOString()),
        'lawfirmCaseId': value.lawfirmCaseId,
        'lawfirmId': value.lawfirmId,
        'lawfirmName': value.lawfirmName,
        'lawfirmPayoutId': value.lawfirmPayoutId,
        'processingFeeActual': value.processingFeeActual,
        'processingFeeCharged': value.processingFeeCharged,
        'sourceCasePaymentId': value.sourceCasePaymentId,
        'stripeTransfer': StripeTransferDomainToJSON(value.stripeTransfer),
        'transactionDateUtc': value.transactionDateUtc === undefined ? undefined : (value.transactionDateUtc.toISOString()),
        'transactionMethod': value.transactionMethod,
        'transactionReferenceId': value.transactionReferenceId,
        'updatedDueDate': value.updatedDueDate === undefined ? undefined : (value.updatedDueDate.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum LawfirmPayoutDomainTransactionMethodEnum {
    CASH = 'CASH',
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    WIRETRANSFER = 'WIRE_TRANSFER',
    ZELLE = 'ZELLE'
}


