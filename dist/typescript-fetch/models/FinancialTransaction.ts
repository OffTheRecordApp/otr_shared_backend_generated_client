/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TimestampRes,
    TimestampResFromJSON,
    TimestampResFromJSONTyped,
    TimestampResToJSON,
} from './';

/**
 * 
 * @export
 * @interface FinancialTransaction
 */
export interface FinancialTransaction {
    /**
     * 
     * @type {number}
     * @memberof FinancialTransaction
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    caseId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FinancialTransaction
     */
    isOverdue?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    lawfirmReferenceId?: string;
    /**
     * 
     * @type {number}
     * @memberof FinancialTransaction
     */
    otrAmount?: number;
    /**
     * 
     * @type {TimestampRes}
     * @memberof FinancialTransaction
     */
    runAtDateUtc?: TimestampRes;
    /**
     * 
     * @type {number}
     * @memberof FinancialTransaction
     */
    stripeAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    taskStatus?: FinancialTransactionTaskStatusEnum;
    /**
     * 
     * @type {TimestampRes}
     * @memberof FinancialTransaction
     */
    transactionDateUtc?: TimestampRes;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    transactionMethod?: FinancialTransactionTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    transactionReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    transactionType?: FinancialTransactionTransactionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    userFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof FinancialTransaction
     */
    userLastName?: string;
}

export function FinancialTransactionFromJSON(json: any): FinancialTransaction {
    return FinancialTransactionFromJSONTyped(json, false);
}

export function FinancialTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FinancialTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'caseId': !exists(json, 'caseId') ? undefined : json['caseId'],
        'isOverdue': !exists(json, 'isOverdue') ? undefined : json['isOverdue'],
        'lawfirmReferenceId': !exists(json, 'lawfirmReferenceId') ? undefined : json['lawfirmReferenceId'],
        'otrAmount': !exists(json, 'otrAmount') ? undefined : json['otrAmount'],
        'runAtDateUtc': !exists(json, 'runAtDateUtc') ? undefined : TimestampResFromJSON(json['runAtDateUtc']),
        'stripeAmount': !exists(json, 'stripeAmount') ? undefined : json['stripeAmount'],
        'taskStatus': !exists(json, 'taskStatus') ? undefined : json['taskStatus'],
        'transactionDateUtc': !exists(json, 'transactionDateUtc') ? undefined : TimestampResFromJSON(json['transactionDateUtc']),
        'transactionMethod': !exists(json, 'transactionMethod') ? undefined : json['transactionMethod'],
        'transactionReferenceId': !exists(json, 'transactionReferenceId') ? undefined : json['transactionReferenceId'],
        'transactionType': !exists(json, 'transactionType') ? undefined : json['transactionType'],
        'userFirstName': !exists(json, 'userFirstName') ? undefined : json['userFirstName'],
        'userLastName': !exists(json, 'userLastName') ? undefined : json['userLastName'],
    };
}

export function FinancialTransactionToJSON(value?: FinancialTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'caseId': value.caseId,
        'isOverdue': value.isOverdue,
        'lawfirmReferenceId': value.lawfirmReferenceId,
        'otrAmount': value.otrAmount,
        'runAtDateUtc': TimestampResToJSON(value.runAtDateUtc),
        'stripeAmount': value.stripeAmount,
        'taskStatus': value.taskStatus,
        'transactionDateUtc': TimestampResToJSON(value.transactionDateUtc),
        'transactionMethod': value.transactionMethod,
        'transactionReferenceId': value.transactionReferenceId,
        'transactionType': value.transactionType,
        'userFirstName': value.userFirstName,
        'userLastName': value.userLastName,
    };
}

/**
* @export
* @enum {string}
*/
export enum FinancialTransactionTaskStatusEnum {
    CANCELLED = 'CANCELLED',
    COMPLETE = 'COMPLETE',
    ERROR = 'ERROR',
    INPROGRESS = 'IN_PROGRESS',
    NOOPERATION = 'NO_OPERATION',
    QUEUED = 'QUEUED'
}
/**
* @export
* @enum {string}
*/
export enum FinancialTransactionTransactionMethodEnum {
    CASH = 'CASH',
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    WIRETRANSFER = 'WIRE_TRANSFER',
    ZELLE = 'ZELLE'
}
/**
* @export
* @enum {string}
*/
export enum FinancialTransactionTransactionTypeEnum {
    FEE = 'FEE',
    FEEREFUND = 'FEE_REFUND',
    TRANSFER = 'TRANSFER',
    TRANSFERREVERSAL = 'TRANSFER_REVERSAL'
}


