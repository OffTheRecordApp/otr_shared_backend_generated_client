/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CallContact
 */
export interface CallContact {
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    agentId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    agentName?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    callDirection?: CallContactCallDirectionEnum;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    callDurationInSeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    callId?: number;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    callQueueId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    callQueueName?: string;
    /**
     * 
     * @type {Date}
     * @memberof CallContact
     */
    callStartDateUtc?: Date;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    callStatus?: CallContactCallStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    customerName?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    customerNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    integratedResourceType?: CallContactIntegratedResourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    integratedResourceValue?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    ivrId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    ivrName?: string;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    parentCallId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    recordingUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    rootCallId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    tags?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    teamId?: number;
    /**
     * 
     * @type {string}
     * @memberof CallContact
     */
    teamName?: string;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    thirdPartyCallId?: number;
    /**
     * 
     * @type {number}
     * @memberof CallContact
     */
    userId?: number;
}

export function CallContactFromJSON(json: any): CallContact {
    return CallContactFromJSONTyped(json, false);
}

export function CallContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): CallContact {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'agentId': !exists(json, 'agentId') ? undefined : json['agentId'],
        'agentName': !exists(json, 'agentName') ? undefined : json['agentName'],
        'callDirection': !exists(json, 'callDirection') ? undefined : json['callDirection'],
        'callDurationInSeconds': !exists(json, 'callDurationInSeconds') ? undefined : json['callDurationInSeconds'],
        'callId': !exists(json, 'callId') ? undefined : json['callId'],
        'callQueueId': !exists(json, 'callQueueId') ? undefined : json['callQueueId'],
        'callQueueName': !exists(json, 'callQueueName') ? undefined : json['callQueueName'],
        'callStartDateUtc': !exists(json, 'callStartDateUtc') ? undefined : (new Date(json['callStartDateUtc'])),
        'callStatus': !exists(json, 'callStatus') ? undefined : json['callStatus'],
        'customerName': !exists(json, 'customerName') ? undefined : json['customerName'],
        'customerNumber': !exists(json, 'customerNumber') ? undefined : json['customerNumber'],
        'integratedResourceType': !exists(json, 'integratedResourceType') ? undefined : json['integratedResourceType'],
        'integratedResourceValue': !exists(json, 'integratedResourceValue') ? undefined : json['integratedResourceValue'],
        'ivrId': !exists(json, 'ivrId') ? undefined : json['ivrId'],
        'ivrName': !exists(json, 'ivrName') ? undefined : json['ivrName'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'parentCallId': !exists(json, 'parentCallId') ? undefined : json['parentCallId'],
        'recordingUrl': !exists(json, 'recordingUrl') ? undefined : json['recordingUrl'],
        'rootCallId': !exists(json, 'rootCallId') ? undefined : json['rootCallId'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'teamId': !exists(json, 'teamId') ? undefined : json['teamId'],
        'teamName': !exists(json, 'teamName') ? undefined : json['teamName'],
        'thirdPartyCallId': !exists(json, 'thirdPartyCallId') ? undefined : json['thirdPartyCallId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function CallContactToJSON(value?: CallContact | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'agentId': value.agentId,
        'agentName': value.agentName,
        'callDirection': value.callDirection,
        'callDurationInSeconds': value.callDurationInSeconds,
        'callId': value.callId,
        'callQueueId': value.callQueueId,
        'callQueueName': value.callQueueName,
        'callStartDateUtc': value.callStartDateUtc === undefined ? undefined : (value.callStartDateUtc.toISOString()),
        'callStatus': value.callStatus,
        'customerName': value.customerName,
        'customerNumber': value.customerNumber,
        'integratedResourceType': value.integratedResourceType,
        'integratedResourceValue': value.integratedResourceValue,
        'ivrId': value.ivrId,
        'ivrName': value.ivrName,
        'notes': value.notes,
        'parentCallId': value.parentCallId,
        'recordingUrl': value.recordingUrl,
        'rootCallId': value.rootCallId,
        'tags': value.tags,
        'teamId': value.teamId,
        'teamName': value.teamName,
        'thirdPartyCallId': value.thirdPartyCallId,
        'userId': value.userId,
    };
}

/**
* @export
* @enum {string}
*/
export enum CallContactCallDirectionEnum {
    INCOMING = 'INCOMING',
    OUTGOING = 'OUTGOING'
}
/**
* @export
* @enum {string}
*/
export enum CallContactCallStatusEnum {
    ABANDONED = 'ABANDONED',
    BLOCKED = 'BLOCKED',
    BUSY = 'BUSY',
    COMPLETED = 'COMPLETED',
    CONNECTING = 'CONNECTING',
    CONNECTIONFAILED = 'CONNECTION_FAILED',
    DEFAULT = 'DEFAULT',
    DISCONNECTED = 'DISCONNECTED',
    ENQUEUED = 'ENQUEUED',
    INPROGRESS = 'IN_PROGRESS',
    MISSEDCALL = 'MISSED_CALL',
    ONHOLD = 'ON_HOLD',
    RECENTLYCOMPLETED = 'RECENTLY_COMPLETED',
    RESTRICTED = 'RESTRICTED',
    VOICEMAIL = 'VOICEMAIL',
    VOICEMAILRECORDINGINPROGRESS = 'VOICEMAIL_RECORDING_IN_PROGRESS'
}
/**
* @export
* @enum {string}
*/
export enum CallContactIntegratedResourceTypeEnum {
    FRESHDESK = 'FRESHDESK',
    UNKNOWN = 'UNKNOWN'
}


