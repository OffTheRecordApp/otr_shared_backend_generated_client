/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CountryRegion,
    CountryRegionFromJSON,
    CountryRegionFromJSONTyped,
    CountryRegionToJSON,
} from './';

/**
 * 
 * @export
 * @interface AddressEntity
 */
export interface AddressEntity {
    /**
     * 
     * @type {number}
     * @memberof AddressEntity
     */
    addressId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    addressLine1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    addressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    cityRegion?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    countryCode?: string;
    /**
     * 
     * @type {CountryRegion}
     * @memberof AddressEntity
     */
    countryRegion?: CountryRegion;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    entityType?: AddressEntityEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    fullAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    postalCode?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressEntity
     */
    referenceId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressEntity
     */
    timeZoneName?: string;
}

export function AddressEntityFromJSON(json: any): AddressEntity {
    return AddressEntityFromJSONTyped(json, false);
}

export function AddressEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addressId': !exists(json, 'addressId') ? undefined : json['addressId'],
        'addressLine1': !exists(json, 'addressLine1') ? undefined : json['addressLine1'],
        'addressLine2': !exists(json, 'addressLine2') ? undefined : json['addressLine2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'cityRegion': !exists(json, 'cityRegion') ? undefined : json['cityRegion'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'countryRegion': !exists(json, 'countryRegion') ? undefined : CountryRegionFromJSON(json['countryRegion']),
        'entityType': !exists(json, 'entityType') ? undefined : json['entityType'],
        'fullAddress': !exists(json, 'fullAddress') ? undefined : json['fullAddress'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'postalCode': !exists(json, 'postalCode') ? undefined : json['postalCode'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'regionCode': !exists(json, 'regionCode') ? undefined : json['regionCode'],
        'timeZoneName': !exists(json, 'timeZoneName') ? undefined : json['timeZoneName'],
    };
}

export function AddressEntityToJSON(value?: AddressEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addressId': value.addressId,
        'addressLine1': value.addressLine1,
        'addressLine2': value.addressLine2,
        'city': value.city,
        'cityRegion': value.cityRegion,
        'countryCode': value.countryCode,
        'countryRegion': CountryRegionToJSON(value.countryRegion),
        'entityType': value.entityType,
        'fullAddress': value.fullAddress,
        'phoneNumber': value.phoneNumber,
        'postalCode': value.postalCode,
        'referenceId': value.referenceId,
        'regionCode': value.regionCode,
        'timeZoneName': value.timeZoneName,
    };
}

/**
* @export
* @enum {string}
*/
export enum AddressEntityEntityTypeEnum {
    CASE = 'CASE',
    CASEPAYMENT = 'CASE_PAYMENT',
    CITATION = 'CITATION',
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    LAWFIRMCASE = 'LAWFIRM_CASE',
    LAWYER = 'LAWYER',
    LINEITEM = 'LINE_ITEM',
    STRIPECHARGE = 'STRIPE_CHARGE',
    USER = 'USER'
}


