/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuthorModel,
    AuthorModelFromJSON,
    AuthorModelFromJSONTyped,
    AuthorModelToJSON,
} from './';

/**
 * 
 * @export
 * @interface CaseActionDomain
 */
export interface CaseActionDomain {
    /**
     * 
     * @type {Date}
     * @memberof CaseActionDomain
     */
    actionDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    actionNote?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    actionType?: CaseActionDomainActionTypeEnum;
    /**
     * 
     * @type {AuthorModel}
     * @memberof CaseActionDomain
     */
    author?: AuthorModel;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomain
     */
    authorId?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    authorName?: string;
    /**
     * 
     * @type {number}
     * @memberof CaseActionDomain
     */
    caseActionId?: number;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    courtDateActionNote?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseActionDomain
     */
    courtDateActionTitle?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CaseActionDomain
     */
    isDeleted?: boolean;
}

export function CaseActionDomainFromJSON(json: any): CaseActionDomain {
    return CaseActionDomainFromJSONTyped(json, false);
}

export function CaseActionDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): CaseActionDomain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionDate': !exists(json, 'actionDate') ? undefined : (new Date(json['actionDate'])),
        'actionNote': !exists(json, 'actionNote') ? undefined : json['actionNote'],
        'actionType': !exists(json, 'actionType') ? undefined : json['actionType'],
        'author': !exists(json, 'author') ? undefined : AuthorModelFromJSON(json['author']),
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'authorName': !exists(json, 'authorName') ? undefined : json['authorName'],
        'caseActionId': !exists(json, 'caseActionId') ? undefined : json['caseActionId'],
        'courtDateActionNote': !exists(json, 'courtDateActionNote') ? undefined : json['courtDateActionNote'],
        'courtDateActionTitle': !exists(json, 'courtDateActionTitle') ? undefined : json['courtDateActionTitle'],
        'isDeleted': !exists(json, 'isDeleted') ? undefined : json['isDeleted'],
    };
}

export function CaseActionDomainToJSON(value?: CaseActionDomain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionDate': value.actionDate === undefined ? undefined : (value.actionDate.toISOString()),
        'actionNote': value.actionNote,
        'actionType': value.actionType,
        'author': AuthorModelToJSON(value.author),
        'authorId': value.authorId,
        'authorName': value.authorName,
        'caseActionId': value.caseActionId,
        'courtDateActionNote': value.courtDateActionNote,
        'courtDateActionTitle': value.courtDateActionTitle,
        'isDeleted': value.isDeleted,
    };
}

/**
* @export
* @enum {string}
*/
export enum CaseActionDomainActionTypeEnum {
    CASEACCEPT = 'CASE_ACCEPT',
    CASECOUNTERACCEPTED = 'CASE_COUNTER_ACCEPTED',
    CASECOUNTERDECLINED = 'CASE_COUNTER_DECLINED',
    CASECOUNTERINITIATED = 'CASE_COUNTER_INITIATED',
    CASECOUNTERWITHDRAWN = 'CASE_COUNTER_WITHDRAWN',
    CASEDECLINE = 'CASE_DECLINE',
    CITATIONDATAEXTRACTED = 'CITATION_DATA_EXTRACTED',
    COURTDATEREMOVED = 'COURT_DATE_REMOVED',
    COURTDATESCHEDULED = 'COURT_DATE_SCHEDULED',
    DISCOVERYRECEIVED = 'DISCOVERY_RECEIVED',
    DISCOVERYREQUESTED = 'DISCOVERY_REQUESTED',
    DISPUTEFILED = 'DISPUTE_FILED',
    DRIVERLICENSEREQUESTED = 'DRIVER_LICENSE_REQUESTED',
    FAILEDPAYMENTATTEMPT = 'FAILED_PAYMENT_ATTEMPT',
    NOTICEOFAPPEARANCEFILED = 'NOTICE_OF_APPEARANCE_FILED',
    OTHER = 'OTHER',
    OVERDUEBALANCEPAID = 'OVERDUE_BALANCE_PAID',
    REVIEWEDBYLAWFIRM = 'REVIEWED_BY_LAWFIRM',
    SOCIALMEDIAASK = 'SOCIAL_MEDIA_ASK',
    TICKETMAILEDTOCOURT = 'TICKET_MAILED_TO_COURT'
}


