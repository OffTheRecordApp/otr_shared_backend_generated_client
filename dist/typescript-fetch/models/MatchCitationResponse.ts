/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressDomain,
    AddressDomainFromJSON,
    AddressDomainFromJSONTyped,
    AddressDomainToJSON,
    CourtDomain,
    CourtDomainFromJSON,
    CourtDomainFromJSONTyped,
    CourtDomainToJSON,
    PureDate,
    PureDateFromJSON,
    PureDateFromJSONTyped,
    PureDateToJSON,
    Timestamp,
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    ViolationResponse,
    ViolationResponseFromJSON,
    ViolationResponseFromJSONTyped,
    ViolationResponseToJSON,
} from './';

/**
 * 
 * @export
 * @interface MatchCitationResponse
 */
export interface MatchCitationResponse {
    /**
     * 
     * @type {AddressDomain}
     * @memberof MatchCitationResponse
     */
    address?: AddressDomain;
    /**
     * 
     * @type {number}
     * @memberof MatchCitationResponse
     */
    citationId?: number;
    /**
     * 
     * @type {PureDate}
     * @memberof MatchCitationResponse
     */
    citationIssueDate?: PureDate;
    /**
     * 
     * @type {Timestamp}
     * @memberof MatchCitationResponse
     */
    citationIssueDateUTC?: Timestamp;
    /**
     * 
     * @type {CourtDomain}
     * @memberof MatchCitationResponse
     */
    court?: CourtDomain;
    /**
     * 
     * @type {number}
     * @memberof MatchCitationResponse
     */
    fineAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MatchCitationResponse
     */
    involvesAccident?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MatchCitationResponse
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MatchCitationResponse
     */
    ticketImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MatchCitationResponse
     */
    ticketNumber?: string;
    /**
     * 
     * @type {Array<ViolationResponse>}
     * @memberof MatchCitationResponse
     */
    violations?: Array<ViolationResponse>;
}

export function MatchCitationResponseFromJSON(json: any): MatchCitationResponse {
    return MatchCitationResponseFromJSONTyped(json, false);
}

export function MatchCitationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatchCitationResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : AddressDomainFromJSON(json['address']),
        'citationId': !exists(json, 'citationId') ? undefined : json['citationId'],
        'citationIssueDate': !exists(json, 'citationIssueDate') ? undefined : PureDateFromJSON(json['citationIssueDate']),
        'citationIssueDateUTC': !exists(json, 'citationIssueDateUTC') ? undefined : TimestampFromJSON(json['citationIssueDateUTC']),
        'court': !exists(json, 'court') ? undefined : CourtDomainFromJSON(json['court']),
        'fineAmount': !exists(json, 'fineAmount') ? undefined : json['fineAmount'],
        'involvesAccident': !exists(json, 'involvesAccident') ? undefined : json['involvesAccident'],
        'isDeleted': !exists(json, 'isDeleted') ? undefined : json['isDeleted'],
        'ticketImageUrl': !exists(json, 'ticketImageUrl') ? undefined : json['ticketImageUrl'],
        'ticketNumber': !exists(json, 'ticketNumber') ? undefined : json['ticketNumber'],
        'violations': !exists(json, 'violations') ? undefined : ((json['violations'] as Array<any>).map(ViolationResponseFromJSON)),
    };
}

export function MatchCitationResponseToJSON(value?: MatchCitationResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': AddressDomainToJSON(value.address),
        'citationId': value.citationId,
        'citationIssueDate': PureDateToJSON(value.citationIssueDate),
        'citationIssueDateUTC': TimestampToJSON(value.citationIssueDateUTC),
        'court': CourtDomainToJSON(value.court),
        'fineAmount': value.fineAmount,
        'involvesAccident': value.involvesAccident,
        'isDeleted': value.isDeleted,
        'ticketImageUrl': value.ticketImageUrl,
        'ticketNumber': value.ticketNumber,
        'violations': value.violations === undefined ? undefined : ((value.violations as Array<any>).map(ViolationResponseToJSON)),
    };
}


