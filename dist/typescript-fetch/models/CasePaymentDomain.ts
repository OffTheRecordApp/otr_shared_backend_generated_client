/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FreshdeskTicketReferenceDomain,
    FreshdeskTicketReferenceDomainFromJSON,
    FreshdeskTicketReferenceDomainFromJSONTyped,
    FreshdeskTicketReferenceDomainToJSON,
    StripeChargeDomain,
    StripeChargeDomainFromJSON,
    StripeChargeDomainFromJSONTyped,
    StripeChargeDomainToJSON,
    Timestamp,
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
} from './';

/**
 * 
 * @export
 * @interface CasePaymentDomain
 */
export interface CasePaymentDomain {
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    baseFeeInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    casePaymentId?: string;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    chargeAttempts?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    clientTotalCost?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof CasePaymentDomain
     */
    creationDateUTC?: Timestamp;
    /**
     * 
     * @type {Date}
     * @memberof CasePaymentDomain
     */
    dueDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof CasePaymentDomain
     */
    hasPredictedOrAdjustedFee?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CasePaymentDomain
     */
    isLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CasePaymentDomain
     */
    isPaymentActive?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof CasePaymentDomain
     */
    lastAttemptDate?: Date;
    /**
     * 
     * @type {Timestamp}
     * @memberof CasePaymentDomain
     */
    lastUpdatedDateUTC?: Timestamp;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmAssumedCost?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmCaseId?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    lawfirmReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    mostRecentChargeError?: string;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    otrCustomerCharges?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    otrEarnings?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    otrMarketingFeeInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    otrReferralCodeAdjustmentInCents?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    paymentProcessingFeeActual?: number;
    /**
     * 
     * @type {number}
     * @memberof CasePaymentDomain
     */
    paymentProcessingFeeChargedToLawfirm?: number;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    recipient?: CasePaymentDomainRecipientEnum;
    /**
     * 
     * @type {StripeChargeDomain}
     * @memberof CasePaymentDomain
     */
    stripeCharge?: StripeChargeDomain;
    /**
     * 
     * @type {Array<FreshdeskTicketReferenceDomain>}
     * @memberof CasePaymentDomain
     */
    supportTickets?: Array<FreshdeskTicketReferenceDomain>;
    /**
     * 
     * @type {string}
     * @memberof CasePaymentDomain
     */
    transactionMethod?: CasePaymentDomainTransactionMethodEnum;
    /**
     * 
     * @type {Date}
     * @memberof CasePaymentDomain
     */
    updatedDueDate?: Date;
}

export function CasePaymentDomainFromJSON(json: any): CasePaymentDomain {
    return CasePaymentDomainFromJSONTyped(json, false);
}

export function CasePaymentDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): CasePaymentDomain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'baseFeeInCents': !exists(json, 'baseFeeInCents') ? undefined : json['baseFeeInCents'],
        'casePaymentId': !exists(json, 'casePaymentId') ? undefined : json['casePaymentId'],
        'chargeAttempts': !exists(json, 'chargeAttempts') ? undefined : json['chargeAttempts'],
        'clientTotalCost': !exists(json, 'clientTotalCost') ? undefined : json['clientTotalCost'],
        'creationDateUTC': !exists(json, 'creationDateUTC') ? undefined : TimestampFromJSON(json['creationDateUTC']),
        'dueDate': !exists(json, 'dueDate') ? undefined : (new Date(json['dueDate'])),
        'hasPredictedOrAdjustedFee': !exists(json, 'hasPredictedOrAdjustedFee') ? undefined : json['hasPredictedOrAdjustedFee'],
        'isLocked': !exists(json, 'isLocked') ? undefined : json['isLocked'],
        'isPaymentActive': !exists(json, 'isPaymentActive') ? undefined : json['isPaymentActive'],
        'lastAttemptDate': !exists(json, 'lastAttemptDate') ? undefined : (new Date(json['lastAttemptDate'])),
        'lastUpdatedDateUTC': !exists(json, 'lastUpdatedDateUTC') ? undefined : TimestampFromJSON(json['lastUpdatedDateUTC']),
        'lawfirmAssumedCost': !exists(json, 'lawfirmAssumedCost') ? undefined : json['lawfirmAssumedCost'],
        'lawfirmCaseId': !exists(json, 'lawfirmCaseId') ? undefined : json['lawfirmCaseId'],
        'lawfirmEarnings': !exists(json, 'lawfirmEarnings') ? undefined : json['lawfirmEarnings'],
        'lawfirmId': !exists(json, 'lawfirmId') ? undefined : json['lawfirmId'],
        'lawfirmName': !exists(json, 'lawfirmName') ? undefined : json['lawfirmName'],
        'lawfirmReferralCodeAdjustmentInCents': !exists(json, 'lawfirmReferralCodeAdjustmentInCents') ? undefined : json['lawfirmReferralCodeAdjustmentInCents'],
        'mostRecentChargeError': !exists(json, 'mostRecentChargeError') ? undefined : json['mostRecentChargeError'],
        'otrCustomerCharges': !exists(json, 'otrCustomerCharges') ? undefined : json['otrCustomerCharges'],
        'otrEarnings': !exists(json, 'otrEarnings') ? undefined : json['otrEarnings'],
        'otrMarketingFeeInCents': !exists(json, 'otrMarketingFeeInCents') ? undefined : json['otrMarketingFeeInCents'],
        'otrReferralCodeAdjustmentInCents': !exists(json, 'otrReferralCodeAdjustmentInCents') ? undefined : json['otrReferralCodeAdjustmentInCents'],
        'paymentProcessingFeeActual': !exists(json, 'paymentProcessingFeeActual') ? undefined : json['paymentProcessingFeeActual'],
        'paymentProcessingFeeChargedToLawfirm': !exists(json, 'paymentProcessingFeeChargedToLawfirm') ? undefined : json['paymentProcessingFeeChargedToLawfirm'],
        'recipient': !exists(json, 'recipient') ? undefined : json['recipient'],
        'stripeCharge': !exists(json, 'stripeCharge') ? undefined : StripeChargeDomainFromJSON(json['stripeCharge']),
        'supportTickets': !exists(json, 'supportTickets') ? undefined : ((json['supportTickets'] as Array<any>).map(FreshdeskTicketReferenceDomainFromJSON)),
        'transactionMethod': !exists(json, 'transactionMethod') ? undefined : json['transactionMethod'],
        'updatedDueDate': !exists(json, 'updatedDueDate') ? undefined : (new Date(json['updatedDueDate'])),
    };
}

export function CasePaymentDomainToJSON(value?: CasePaymentDomain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'baseFeeInCents': value.baseFeeInCents,
        'casePaymentId': value.casePaymentId,
        'chargeAttempts': value.chargeAttempts,
        'clientTotalCost': value.clientTotalCost,
        'creationDateUTC': TimestampToJSON(value.creationDateUTC),
        'dueDate': value.dueDate === undefined ? undefined : (value.dueDate.toISOString()),
        'hasPredictedOrAdjustedFee': value.hasPredictedOrAdjustedFee,
        'isLocked': value.isLocked,
        'isPaymentActive': value.isPaymentActive,
        'lastAttemptDate': value.lastAttemptDate === undefined ? undefined : (value.lastAttemptDate.toISOString()),
        'lastUpdatedDateUTC': TimestampToJSON(value.lastUpdatedDateUTC),
        'lawfirmAssumedCost': value.lawfirmAssumedCost,
        'lawfirmCaseId': value.lawfirmCaseId,
        'lawfirmEarnings': value.lawfirmEarnings,
        'lawfirmId': value.lawfirmId,
        'lawfirmName': value.lawfirmName,
        'lawfirmReferralCodeAdjustmentInCents': value.lawfirmReferralCodeAdjustmentInCents,
        'mostRecentChargeError': value.mostRecentChargeError,
        'otrCustomerCharges': value.otrCustomerCharges,
        'otrEarnings': value.otrEarnings,
        'otrMarketingFeeInCents': value.otrMarketingFeeInCents,
        'otrReferralCodeAdjustmentInCents': value.otrReferralCodeAdjustmentInCents,
        'paymentProcessingFeeActual': value.paymentProcessingFeeActual,
        'paymentProcessingFeeChargedToLawfirm': value.paymentProcessingFeeChargedToLawfirm,
        'recipient': value.recipient,
        'stripeCharge': StripeChargeDomainToJSON(value.stripeCharge),
        'supportTickets': value.supportTickets === undefined ? undefined : ((value.supportTickets as Array<any>).map(FreshdeskTicketReferenceDomainToJSON)),
        'transactionMethod': value.transactionMethod,
        'updatedDueDate': value.updatedDueDate === undefined ? undefined : (value.updatedDueDate.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum CasePaymentDomainRecipientEnum {
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}
/**
* @export
* @enum {string}
*/
export enum CasePaymentDomainTransactionMethodEnum {
    CASH = 'CASH',
    CHECK = 'CHECK',
    DESTINATIONCHARGETRANSFER = 'DESTINATION_CHARGE_TRANSFER',
    LOBCHECK = 'LOB_CHECK',
    PAYPAL = 'PAYPAL',
    STRIPEAPPLICATIONFEE = 'STRIPE_APPLICATION_FEE',
    STRIPECHARGE = 'STRIPE_CHARGE',
    STRIPECONNECTDEBIT = 'STRIPE_CONNECT_DEBIT',
    STRIPETRANSFER = 'STRIPE_TRANSFER',
    UNKNOWN = 'UNKNOWN',
    VENMO = 'VENMO',
    WIRETRANSFER = 'WIRE_TRANSFER',
    ZELLE = 'ZELLE'
}


