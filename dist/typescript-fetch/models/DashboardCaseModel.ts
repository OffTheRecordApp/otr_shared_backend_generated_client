/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CaseUserDetailsModel,
    CaseUserDetailsModelFromJSON,
    CaseUserDetailsModelFromJSONTyped,
    CaseUserDetailsModelToJSON,
    DashboardAuthorModel,
    DashboardAuthorModelFromJSON,
    DashboardAuthorModelFromJSONTyped,
    DashboardAuthorModelToJSON,
    DashboardCitationModel,
    DashboardCitationModelFromJSON,
    DashboardCitationModelFromJSONTyped,
    DashboardCitationModelToJSON,
    DashboardCourtModel,
    DashboardCourtModelFromJSON,
    DashboardCourtModelFromJSONTyped,
    DashboardCourtModelToJSON,
    DashboardStatusModel,
    DashboardStatusModelFromJSON,
    DashboardStatusModelFromJSONTyped,
    DashboardStatusModelToJSON,
} from './';

/**
 * 
 * @export
 * @interface DashboardCaseModel
 */
export interface DashboardCaseModel {
    /**
     * 
     * @type {DashboardAuthorModel}
     * @memberof DashboardCaseModel
     */
    authorModel?: DashboardAuthorModel;
    /**
     * 
     * @type {Date}
     * @memberof DashboardCaseModel
     */
    bookingConfirmedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    caseId?: string;
    /**
     * 
     * @type {CaseUserDetailsModel}
     * @memberof DashboardCaseModel
     */
    caseUserDetails?: CaseUserDetailsModel;
    /**
     * 
     * @type {DashboardCitationModel}
     * @memberof DashboardCaseModel
     */
    citation?: DashboardCitationModel;
    /**
     * 
     * @type {DashboardCourtModel}
     * @memberof DashboardCaseModel
     */
    court?: DashboardCourtModel;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardCaseModel
     */
    hasLeftLawyerReview?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DashboardCaseModel
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    lawfirmName?: string;
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    lawfirmProfilePictureUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof DashboardCaseModel
     */
    lawyerRating?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardCaseModel
     */
    legalFeeInCents?: number;
    /**
     * 
     * @type {Date}
     * @memberof DashboardCaseModel
     */
    matchExpirationDateUtc?: Date;
    /**
     * 
     * @type {string}
     * @memberof DashboardCaseModel
     */
    messageBody?: string;
    /**
     * 
     * @type {DashboardStatusModel}
     * @memberof DashboardCaseModel
     */
    status?: DashboardStatusModel;
    /**
     * 
     * @type {number}
     * @memberof DashboardCaseModel
     */
    userId?: number;
}

export function DashboardCaseModelFromJSON(json: any): DashboardCaseModel {
    return DashboardCaseModelFromJSONTyped(json, false);
}

export function DashboardCaseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DashboardCaseModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorModel': !exists(json, 'authorModel') ? undefined : DashboardAuthorModelFromJSON(json['authorModel']),
        'bookingConfirmedDate': !exists(json, 'bookingConfirmedDate') ? undefined : (new Date(json['bookingConfirmedDate'])),
        'caseId': !exists(json, 'caseId') ? undefined : json['caseId'],
        'caseUserDetails': !exists(json, 'caseUserDetails') ? undefined : CaseUserDetailsModelFromJSON(json['caseUserDetails']),
        'citation': !exists(json, 'citation') ? undefined : DashboardCitationModelFromJSON(json['citation']),
        'court': !exists(json, 'court') ? undefined : DashboardCourtModelFromJSON(json['court']),
        'hasLeftLawyerReview': !exists(json, 'hasLeftLawyerReview') ? undefined : json['hasLeftLawyerReview'],
        'lawfirmId': !exists(json, 'lawfirmId') ? undefined : json['lawfirmId'],
        'lawfirmName': !exists(json, 'lawfirmName') ? undefined : json['lawfirmName'],
        'lawfirmProfilePictureUrl': !exists(json, 'lawfirmProfilePictureUrl') ? undefined : json['lawfirmProfilePictureUrl'],
        'lawyerRating': !exists(json, 'lawyerRating') ? undefined : json['lawyerRating'],
        'legalFeeInCents': !exists(json, 'legalFeeInCents') ? undefined : json['legalFeeInCents'],
        'matchExpirationDateUtc': !exists(json, 'matchExpirationDateUtc') ? undefined : (new Date(json['matchExpirationDateUtc'])),
        'messageBody': !exists(json, 'messageBody') ? undefined : json['messageBody'],
        'status': !exists(json, 'status') ? undefined : DashboardStatusModelFromJSON(json['status']),
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function DashboardCaseModelToJSON(value?: DashboardCaseModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorModel': DashboardAuthorModelToJSON(value.authorModel),
        'bookingConfirmedDate': value.bookingConfirmedDate === undefined ? undefined : (value.bookingConfirmedDate.toISOString()),
        'caseId': value.caseId,
        'caseUserDetails': CaseUserDetailsModelToJSON(value.caseUserDetails),
        'citation': DashboardCitationModelToJSON(value.citation),
        'court': DashboardCourtModelToJSON(value.court),
        'hasLeftLawyerReview': value.hasLeftLawyerReview,
        'lawfirmId': value.lawfirmId,
        'lawfirmName': value.lawfirmName,
        'lawfirmProfilePictureUrl': value.lawfirmProfilePictureUrl,
        'lawyerRating': value.lawyerRating,
        'legalFeeInCents': value.legalFeeInCents,
        'matchExpirationDateUtc': value.matchExpirationDateUtc === undefined ? undefined : (value.matchExpirationDateUtc.toISOString()),
        'messageBody': value.messageBody,
        'status': DashboardStatusModelToJSON(value.status),
        'userId': value.userId,
    };
}


