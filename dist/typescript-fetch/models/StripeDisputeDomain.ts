/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FreshDeskTicket,
    FreshDeskTicketFromJSON,
    FreshDeskTicketFromJSONTyped,
    FreshDeskTicketToJSON,
    Timestamp,
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
} from './';

/**
 * 
 * @export
 * @interface StripeDisputeDomain
 */
export interface StripeDisputeDomain {
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    amountDisputed?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    cardBrand?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    cardFunding?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    caseStatus?: StripeDisputeDomainCaseStatusEnum;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof StripeDisputeDomain
     */
    clientTicket?: FreshDeskTicket;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    clientTicketId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    currencyCode?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeDisputeDomain
     */
    disputeDateUtc?: Timestamp;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    disputeFee?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeDisputeDomain
     */
    evidenceSubmittedDateUtc?: Timestamp;
    /**
     * 
     * @type {boolean}
     * @memberof StripeDisputeDomain
     */
    isAccountEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeDisputeDomain
     */
    isTransferReversed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    lawfirmId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    lawfirmName?: string;
    /**
     * 
     * @type {FreshDeskTicket}
     * @memberof StripeDisputeDomain
     */
    lawfirmTicket?: FreshDeskTicket;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    lawfirmTicketId?: number;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    paymentRecipient?: StripeDisputeDomainPaymentRecipientEnum;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    reason?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof StripeDisputeDomain
     */
    responseDueByDateUtc?: Timestamp;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    stripeChargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    stripeCustomerId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    stripeDisputeId?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeDisputeDomain
     */
    userFullName?: string;
    /**
     * 
     * @type {number}
     * @memberof StripeDisputeDomain
     */
    userId?: number;
}

export function StripeDisputeDomainFromJSON(json: any): StripeDisputeDomain {
    return StripeDisputeDomainFromJSONTyped(json, false);
}

export function StripeDisputeDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): StripeDisputeDomain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amountDisputed': !exists(json, 'amountDisputed') ? undefined : json['amountDisputed'],
        'cardBrand': !exists(json, 'cardBrand') ? undefined : json['cardBrand'],
        'cardFunding': !exists(json, 'cardFunding') ? undefined : json['cardFunding'],
        'caseId': !exists(json, 'caseId') ? undefined : json['caseId'],
        'caseStatus': !exists(json, 'caseStatus') ? undefined : json['caseStatus'],
        'clientTicket': !exists(json, 'clientTicket') ? undefined : FreshDeskTicketFromJSON(json['clientTicket']),
        'clientTicketId': !exists(json, 'clientTicketId') ? undefined : json['clientTicketId'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'disputeDateUtc': !exists(json, 'disputeDateUtc') ? undefined : TimestampFromJSON(json['disputeDateUtc']),
        'disputeFee': !exists(json, 'disputeFee') ? undefined : json['disputeFee'],
        'evidenceSubmittedDateUtc': !exists(json, 'evidenceSubmittedDateUtc') ? undefined : TimestampFromJSON(json['evidenceSubmittedDateUtc']),
        'isAccountEnabled': !exists(json, 'isAccountEnabled') ? undefined : json['isAccountEnabled'],
        'isTransferReversed': !exists(json, 'isTransferReversed') ? undefined : json['isTransferReversed'],
        'lawfirmId': !exists(json, 'lawfirmId') ? undefined : json['lawfirmId'],
        'lawfirmName': !exists(json, 'lawfirmName') ? undefined : json['lawfirmName'],
        'lawfirmTicket': !exists(json, 'lawfirmTicket') ? undefined : FreshDeskTicketFromJSON(json['lawfirmTicket']),
        'lawfirmTicketId': !exists(json, 'lawfirmTicketId') ? undefined : json['lawfirmTicketId'],
        'paymentRecipient': !exists(json, 'paymentRecipient') ? undefined : json['paymentRecipient'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'responseDueByDateUtc': !exists(json, 'responseDueByDateUtc') ? undefined : TimestampFromJSON(json['responseDueByDateUtc']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'stripeChargeId': !exists(json, 'stripeChargeId') ? undefined : json['stripeChargeId'],
        'stripeCustomerId': !exists(json, 'stripeCustomerId') ? undefined : json['stripeCustomerId'],
        'stripeDisputeId': !exists(json, 'stripeDisputeId') ? undefined : json['stripeDisputeId'],
        'userFullName': !exists(json, 'userFullName') ? undefined : json['userFullName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function StripeDisputeDomainToJSON(value?: StripeDisputeDomain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amountDisputed': value.amountDisputed,
        'cardBrand': value.cardBrand,
        'cardFunding': value.cardFunding,
        'caseId': value.caseId,
        'caseStatus': value.caseStatus,
        'clientTicket': FreshDeskTicketToJSON(value.clientTicket),
        'clientTicketId': value.clientTicketId,
        'currencyCode': value.currencyCode,
        'disputeDateUtc': TimestampToJSON(value.disputeDateUtc),
        'disputeFee': value.disputeFee,
        'evidenceSubmittedDateUtc': TimestampToJSON(value.evidenceSubmittedDateUtc),
        'isAccountEnabled': value.isAccountEnabled,
        'isTransferReversed': value.isTransferReversed,
        'lawfirmId': value.lawfirmId,
        'lawfirmName': value.lawfirmName,
        'lawfirmTicket': FreshDeskTicketToJSON(value.lawfirmTicket),
        'lawfirmTicketId': value.lawfirmTicketId,
        'paymentRecipient': value.paymentRecipient,
        'reason': value.reason,
        'responseDueByDateUtc': TimestampToJSON(value.responseDueByDateUtc),
        'status': value.status,
        'stripeChargeId': value.stripeChargeId,
        'stripeCustomerId': value.stripeCustomerId,
        'stripeDisputeId': value.stripeDisputeId,
        'userFullName': value.userFullName,
        'userId': value.userId,
    };
}

/**
* @export
* @enum {string}
*/
export enum StripeDisputeDomainCaseStatusEnum {
    AMENDEDDOWNWITHINCLASS = 'AMENDED_DOWN_WITHIN_CLASS',
    AMENDEDFULLFINE = 'AMENDED_FULL_FINE',
    AMENDEDINCREASEDFINE = 'AMENDED_INCREASED_FINE',
    AMENDEDNOFINE = 'AMENDED_NO_FINE',
    AMENDEDREDUCEDFINE = 'AMENDED_REDUCED_FINE',
    AMENDEDTOINFRACTION = 'AMENDED_TO_INFRACTION',
    AMENDEDTONMV = 'AMENDED_TO_NMV',
    CANCELLEDATTORNEYATFAULT = 'CANCELLED_ATTORNEY_AT_FAULT',
    CANCELLEDBYLAWFIRM = 'CANCELLED_BY_LAWFIRM',
    CANCELLEDBYUSER = 'CANCELLED_BY_USER',
    CANCELLEDDUPLICATE = 'CANCELLED_DUPLICATE',
    CANCELLEDNMV = 'CANCELLED_NMV',
    CANCELLEDNONPAYMENT = 'CANCELLED_NON_PAYMENT',
    CANCELLEDNOLAWFIRM = 'CANCELLED_NO_LAWFIRM',
    CANCELLEDOVERDUE = 'CANCELLED_OVERDUE',
    CANCELLEDTOOSHORTNOTICE = 'CANCELLED_TOO_SHORT_NOTICE',
    CASEINPROGRESS = 'CASE_IN_PROGRESS',
    CLIENTCONFIRMED = 'CLIENT_CONFIRMED',
    CLIENTCONFIRMEDUNPAID = 'CLIENT_CONFIRMED_UNPAID',
    CLIENTFIREDLAWFIRM = 'CLIENT_FIRED_LAWFIRM',
    CLIENTFORCEDLOSS = 'CLIENT_FORCED_LOSS',
    CLIENTPAIDFINE = 'CLIENT_PAID_FINE',
    CLIENTUNRESPONSIVE = 'CLIENT_UNRESPONSIVE',
    DEFERRED = 'DEFERRED',
    DISMISSED = 'DISMISSED',
    DIVERSION = 'DIVERSION',
    FEESDISPUTED = 'FEES_DISPUTED',
    FINEREDUCTIONONLY = 'FINE_REDUCTION_ONLY',
    LAWFIRMWITHDRAWN = 'LAWFIRM_WITHDRAWN',
    LOST = 'LOST',
    NOLAWFIRMAVAILABLE = 'NO_LAWFIRM_AVAILABLE',
    POINTREDUCTION = 'POINT_REDUCTION',
    REFUSEDBYLAWFIRM = 'REFUSED_BY_LAWFIRM',
    RESOLVEDNONPAYMENT = 'RESOLVED_NON_PAYMENT',
    STALE = 'STALE',
    TRAFFICSCHOOL = 'TRAFFIC_SCHOOL',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
* @export
* @enum {string}
*/
export enum StripeDisputeDomainPaymentRecipientEnum {
    COURT = 'COURT',
    LAWFIRM = 'LAWFIRM',
    OTR = 'OTR'
}


