/* tslint:disable */
/* eslint-disable */
/**
 * OffTheRecord Rest Service API - Devo
 * A service to handle your traffic tickets
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ListCitationsRequest
 */
export interface ListCitationsRequest {
    /**
     * 
     * @type {string}
     * @memberof ListCitationsRequest
     */
    caseStatusCategoryFilter?: ListCitationsRequestCaseStatusCategoryFilterEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCitationsRequest
     */
    caseStatusFilterList?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCitationsRequest
     */
    cdlStatus?: Array<ListCitationsRequestCdlStatusEnum>;
    /**
     * 
     * @type {string}
     * @memberof ListCitationsRequest
     */
    countyFilter?: string;
    /**
     * 
     * @type {Date}
     * @memberof ListCitationsRequest
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ListCitationsRequest
     */
    experimentGroup?: ListCitationsRequestExperimentGroupEnum;
    /**
     * 
     * @type {string}
     * @memberof ListCitationsRequest
     */
    experimentName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ListCitationsRequest
     */
    hasAccident?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListCitationsRequest
     */
    hasCase?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListCitationsRequest
     */
    hasLastBookingDate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListCitationsRequest
     */
    hasPhoto?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListCitationsRequest
     */
    includeDataRecords?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ListCitationsRequest
     */
    length?: number;
    /**
     * 
     * @type {number}
     * @memberof ListCitationsRequest
     */
    page?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ListCitationsRequest
     */
    sortMap?: { [key: string]: string; };
    /**
     * 
     * @type {Date}
     * @memberof ListCitationsRequest
     */
    startDate?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCitationsRequest
     */
    stateFilterList?: Array<ListCitationsRequestStateFilterListEnum>;
    /**
     * 
     * @type {string}
     * @memberof ListCitationsRequest
     */
    timeZoneId?: string;
}

export function ListCitationsRequestFromJSON(json: any): ListCitationsRequest {
    return ListCitationsRequestFromJSONTyped(json, false);
}

export function ListCitationsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListCitationsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'caseStatusCategoryFilter': !exists(json, 'caseStatusCategoryFilter') ? undefined : json['caseStatusCategoryFilter'],
        'caseStatusFilterList': !exists(json, 'caseStatusFilterList') ? undefined : json['caseStatusFilterList'],
        'cdlStatus': !exists(json, 'cdlStatus') ? undefined : json['cdlStatus'],
        'countyFilter': !exists(json, 'countyFilter') ? undefined : json['countyFilter'],
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'experimentGroup': !exists(json, 'experimentGroup') ? undefined : json['experimentGroup'],
        'experimentName': !exists(json, 'experimentName') ? undefined : json['experimentName'],
        'hasAccident': !exists(json, 'hasAccident') ? undefined : json['hasAccident'],
        'hasCase': !exists(json, 'hasCase') ? undefined : json['hasCase'],
        'hasLastBookingDate': !exists(json, 'hasLastBookingDate') ? undefined : json['hasLastBookingDate'],
        'hasPhoto': !exists(json, 'hasPhoto') ? undefined : json['hasPhoto'],
        'includeDataRecords': !exists(json, 'includeDataRecords') ? undefined : json['includeDataRecords'],
        'length': !exists(json, 'length') ? undefined : json['length'],
        'page': !exists(json, 'page') ? undefined : json['page'],
        'sortMap': !exists(json, 'sortMap') ? undefined : json['sortMap'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'stateFilterList': !exists(json, 'stateFilterList') ? undefined : json['stateFilterList'],
        'timeZoneId': !exists(json, 'timeZoneId') ? undefined : json['timeZoneId'],
    };
}

export function ListCitationsRequestToJSON(value?: ListCitationsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'caseStatusCategoryFilter': value.caseStatusCategoryFilter,
        'caseStatusFilterList': value.caseStatusFilterList,
        'cdlStatus': value.cdlStatus,
        'countyFilter': value.countyFilter,
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'experimentGroup': value.experimentGroup,
        'experimentName': value.experimentName,
        'hasAccident': value.hasAccident,
        'hasCase': value.hasCase,
        'hasLastBookingDate': value.hasLastBookingDate,
        'hasPhoto': value.hasPhoto,
        'includeDataRecords': value.includeDataRecords,
        'length': value.length,
        'page': value.page,
        'sortMap': value.sortMap,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString()),
        'stateFilterList': value.stateFilterList,
        'timeZoneId': value.timeZoneId,
    };
}

/**
* @export
* @enum {string}
*/
export enum ListCitationsRequestCaseStatusCategoryFilterEnum {
    ACTIVE = 'ACTIVE',
    CANCELLED = 'CANCELLED',
    RESOLVED = 'RESOLVED',
    UNCONFIRMED = 'UNCONFIRMED'
}
/**
* @export
* @enum {string}
*/
export enum ListCitationsRequestCdlStatusEnum {
    CDLINCOMMERCIALVEHICLE = 'CDL_IN_COMMERCIAL_VEHICLE',
    CDLINPERSONALVEHICLE = 'CDL_IN_PERSONAL_VEHICLE',
    NOCDL = 'NO_CDL'
}
/**
* @export
* @enum {string}
*/
export enum ListCitationsRequestExperimentGroupEnum {
    CONTROL = 'CONTROL',
    VARIATION1 = 'VARIATION_1',
    VARIATION2 = 'VARIATION_2'
}
/**
* @export
* @enum {string}
*/
export enum ListCitationsRequestStateFilterListEnum {
    AK = 'AK',
    AL = 'AL',
    AR = 'AR',
    AZ = 'AZ',
    CA = 'CA',
    CO = 'CO',
    CT = 'CT',
    DC = 'DC',
    DE = 'DE',
    FL = 'FL',
    GA = 'GA',
    HI = 'HI',
    IA = 'IA',
    ID = 'ID',
    IL = 'IL',
    IN = 'IN',
    KS = 'KS',
    KY = 'KY',
    LA = 'LA',
    MA = 'MA',
    MD = 'MD',
    ME = 'ME',
    MI = 'MI',
    MN = 'MN',
    MO = 'MO',
    MS = 'MS',
    MT = 'MT',
    NC = 'NC',
    ND = 'ND',
    NE = 'NE',
    NH = 'NH',
    NJ = 'NJ',
    NM = 'NM',
    NV = 'NV',
    NY = 'NY',
    OH = 'OH',
    OK = 'OK',
    OR = 'OR',
    PA = 'PA',
    RI = 'RI',
    SC = 'SC',
    SD = 'SD',
    TN = 'TN',
    TX = 'TX',
    UT = 'UT',
    VA = 'VA',
    VT = 'VT',
    WA = 'WA',
    WI = 'WI',
    WV = 'WV',
    WY = 'WY'
}


